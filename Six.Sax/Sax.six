grammar Sax;

%start      = compilation-unit;
%whitespace = skip;
%keywords   = identifier;

%namespace  = 'Six.Sax';

compilation-unit
    | module-descriptor
    | code-unit
    ;

code-unit
    : prelude 'namespace' names ';' usings declarations
    ;

//*****************************************************************************
//
// MODULE
//

module-descriptor
    : 'module' names module-body
    ;

module-body
    : '{' module-body-element* '}'
    ;

module-body-element
    : module-import
    ;

module-import
    : 'import' names ';'
    ;

//*****************************************************************************
//
// USING
//

usings
    : using-declaration*
    ;

using-declaration
    : 'using' names using-elements
    ;

using-elements
    : '{' using-element-list? '}'
    ;

using-element-list
    : using-element (',' using-element)*
    ;

using-element
    | using-named
    | using-wildcard
    ;

using-named
    : using-name using-name-specifier? using-elements?
    ;

using-name
    : identifier
    ;

using-name-specifier
    : '=' identifier
    ;

using-wildcard
    : '...'
    ;
    
//*****************************************************************************
//
// MISC
//

name
    | identifier
    ;

names
    : name ('.' name)*
    ;

path
    : reference ('.' reference)*
    ;

reference
    : name generic-arguments?
    ;

generic-arguments
    : '<' generic-argument-list? '>'
    ;

generic-argument-list
    : generic-argument (',' generic-argument)*
    ;

generic-argument
    : type
    ;

generic-parameters
    : '<' generic-parameter-list? '>'
    ;

generic-parameter-list
    : generic-parameter (',' generic-parameter)*
    ;

generic-parameter
    : variance? name
    ;

variance
    : 'in'
    | 'out'
    ;


//*****************************************************************************
//
// DECLARATION
//

declarations
    : declaration*
    ;

declaration
    | function-declaration
    | attribute-declaration
    | class-declaration
    | interface-declaration
    | object-declaration
    | alias-declaration
    | constructor-declaration
    ;

function-declaration
    : prelude 'function' type name generic-parameters? parameters constraints? function-body
    ;

attribute-declaration
    : prelude 'value' type? name attribute-body
    ;

class-declaration
    : prelude 'class' name generic-parameters? parameters? extends? satisfies? case-types? constraints? block-body
    ;

interface-declaration
    : prelude 'interface' name generic-parameters? parameters? satisfies? case-types? constraints? block-body
    ;

object-declaration
    : prelude 'object' name extends? satisfies? block-body
    ;

alias-declaration
    : prelude 'alias' name generic-parameters? constraints? '=>' type ';'
    ;

constructor-declaration
    : prelude 'new' name? extends? function-body
    ;

function-body
    | expression-body
    | block-body
    | null-body
    ;

attribute-body
    | expression-body
    | block-body
    | null-body
    ;

block-body
    | '{' usings declarations statements '}'
    ;

expression-body
    | function-specifier ';'
    ;

null-body
    :: ';'
    ;

function-specifier
    : '=>' expression
    ;

extends
    : ':' type
    ;

satisfies
    : 'is' union-type-list
    ;

constraints
    : constraint+
    ;

constraint
    : 'where' name generic-parameters? case-types? satisfies?
    ;

union-type-list
    : type (',' type)*
    ;

case-types
    : 'of' case-type-list
    ;

case-type-list
    : type ('|' type)*
    ;

//*****************************************************************************
//
// PRELUDE
//

prelude
    : string-literal? attribute*
    ;

attribute
    : name attribute-arguments?
    ;

attribute-arguments
    : '(' attribute-argument-list? ')'
    ;

attribute-argument-list
    : attribute-argument (',' attribute-argument)*
    ;

attribute-argument
    : string-literal
    | meta-reference
    ;

meta-reference
    | class-reference
    | object-reference
    | value-reference
    | interface-reference
    | function-reference
    ;

class-reference
    : 'class' names
    ;

object-reference
    : 'object' names
    ;

value-reference
    : 'value' names
    ;

interface-reference
    : 'interface' names
    ;

function-reference
    : 'function' names
    ;

//*****************************************************************************
//
// TYPE
//
type
    : unionlevel-type
    ;

unionlevel-type
    : union-type
    | intersectionlevel-type
    ;

union-type
    : unionlevel-type '|' intersectionlevel-type
    ;

intersectionlevel-type
    : intersection-type
    | primary-type
    ;

intersection-type
    : intersectionlevel-type '&' primary-type
    ;

primary-type
    : reference
    | type-selector
    | constructor
    | array-type
    ;

array-type
    : primary-type '[' ']'
    ;

type-selector
    : primary-type '.' reference
    ;

constructor
    : primary-type arguments
    ;

parameters
    : '(' parameter-list? ')'
    ;

parameter-list
    : parameter (',' parameter)*
    ;

parameter
    : prelude type name
    ;

arguments
    : '(' argument-list? ')'
    ;

argument-list
    : argument (',' argument)*
    ;

argument
    : expression
    ;

//*****************************************************************************
//
// STATEMENT
//

statements
    : statement*
    ;

statement
    | return-statement
    | assert-statement
    ;

return-statement
    : 'return' expression? ';'
    ;

assert-statement
    : string-literal? 'assert' arguments ';'
    ;

//*****************************************************************************
//
// EXPRESSION
//

expression
    : notlevel-expression
    ;

notlevel-expression
    | not-expression
    | equallevel-expression
    ;

not-expression
    : '!' notlevel-expression
    ;

equallevel-expression
    | equal-expression
    | not-equal-expression
    | identical-expression
    | not-identical-expression
    | addlevel-expression
    ;

equal-expression
    : addlevel-expression '==' addlevel-expression
    ;

not-equal-expression
    : addlevel-expression '!=' addlevel-expression
    ;

identical-expression
    : addlevel-expression '===' addlevel-expression
    ;

not-identical-expression
    : addlevel-expression '!==' addlevel-expression
    ;

addlevel-expression
    | add-expression
    | sub-expression
    | mullevel-expression
    ;

add-expression
    : addlevel-expression '+' mullevel-expression
    ;

sub-expression
    : addlevel-expression '-' mullevel-expression
    ;

mullevel-expression
    | mul-expression
    | div-expression
    | rem-expression
    | primary-expression
    ;

mul-expression
    : mullevel-expression '*' primary-expression
    ;

div-expression
    : mullevel-expression '/' primary-expression
    ;

rem-expression
    : mullevel-expression '%' primary-expression
    ;

primary-expression
    : reference
    | literal
    | call-expression
    | select-expression
    ;

call-expression
    : primary-expression arguments
    ;

select-expression
    : primary-expression '.' reference
    ;

literal
    | string-literal
    | natural-literal
    ;

string-literal
    | plain-string-literal
    | verbatim-string-literal
    ;
    

//*****************************************************************************
//
// LEXER
//

decimal-digits
    | decimal-digit ('_' | decimal-digit)*
    ;

hex-digits
    | hex-digit ('_' | hex-digit)*
    ;

binary-digits
    | binary-digit ('_' | binary-digit)*
    ;

exponent
    | ( 'e' | 'E' ) ( '+' | '-' )? decimal-digit*
    ;

literal-float
    | < decimal-digits '.' decimal-digits exponent? >
    ;

natural-literal
    | < decimal-digits | '#' hex-digits | '$' binary-digits >
    ;

literal-char
    | < '\'' char-part '\'' >
    ;

string-start
    | < '"' string-part '``' >
    ;

string-mid
    | < '``' string-part '``' >
    ;

string-end
    | < '``' string-part '`'* '"' >
    ;

plain-string-literal
    | < '"' string-part '`'* '"' >
    ;

verbatim-string-literal
    | < '"""' (~'"' | '"' ~'"' | '""' ~'"')* '"""' >
    ;

char-part
    | ( ~('\\' | '\'') | escape-sequence )*
    ;

string-part
    | ( ~('\\'| '"'|'`') | ('`' ~('`'|'"'|'\\')) | '`\\' escape-core | escape-sequence )*
    ;

escape-sequence
    | '\\' (~'{' | '{' (~'}')* '}' )
    ;

escape-core
    | ~'{'
    | '{' (~'}')* '}'?
    ;

skip
    | white
    | comment
    ;

white
    | ( ' ' | '\r' | '\t' | '\f' | '\n' )+
    ;

line-end
    | '\r' '\n'
    | '\n'
    | '\r'
    ;

line-ender
    | '\r'
    | '\n'
    ;

comment
    | line-comment
    | block-comment
    ;

line-comment
    | '//' (~line-ender)* line-end?
    ;   

block-comment
    | '/*' ( ~'*' | '*'+ ~('*'|'/') )* '*'+ '/'
    ;

identifier
    | < identifier-start identifier-part* >
    ;

identifier-start
    | '_'
    | 'a' .. 'z'
    | 'A' .. 'Z'
    ;
    
identifier-part
    | '_'
    | decimal-digit
    | letter
    ;

letter
    | 'a' .. 'z' 
    | 'A' .. 'Z' 
    | '\u{0080}' .. '\u{ffff}'
    ;

decimal-digit
    | '0' .. '9'
    ;

hex-digit
    | '0' .. '9'
    | 'A' .. 'F'
    | 'a' .. 'f'
    ;

binary-digit
    | '0' | '1'
    ;
