static const char* antlr4peg = R"::::::::::(

grammarSpec			<-	grammarDecl prequelConstruct* rules modeSpec* EOF

grammarDecl			<-	grammarType identifier ';'

grammarType			<-	'lexer' 'grammar'
                    /	'parser' 'grammar'
                    /	'grammar'

prequelConstruct	<-	optionsSpec
                    /	delegateGrammars
                    /	tokenSpec
                    /	channelsSpec
                    /	action

optionsSpec			<-	< 'options' WSNLCHARS* '{' > (option ';')* '}'

option				<-	identifier '=' optionValue

optionValue			<-	identifier ('.' identifier)*
                    /	string_literal
                    /	action_block
                    /	INT

delegateGrammars	<-	'import' delegateGrammar (',' delegateGrammar)* ';'

delegateGrammar		<-	identifier '=' identifier
                    /	identifier

tokenSpec			<-	< 'tokens' WSNLCHARS* '{' > idList? '}'

channelsSpec		<-	< 'channels' WSNLCHARS* '{' > idList? '}'

idList				<-	identifier (',' identifier)* ','?

action				<-  '@' (actionScopeName '::')? identifier action_block

actionScopeName		<-	'lexer'
                    /	'parser'
                    /	identifier

modeSpec			<-	'mode' identifier ';' lexerRuleSpec*

rules				<-	ruleSpec*

ruleSpec			<-	parserRuleSpec
                    /	lexerRuleSpec

parserRuleSpec		<-	ruleModifiers? rule_ref arg_action_block? ruleReturns? throwSpec? localsSpec? rulePrequel* ':' ruleBlock ';' exceptionGroup

exceptionGroup		<-	exceptionHandler* finallyClause?

exceptionHandler	<-	'catch' arg_action_block action_block

finallyClause		<-	'finally' action_block

rulePrequel			<-	optionsSpec
                    /	ruleAction

ruleReturns			<-	'returns' arg_action_block

throwSpec			<-	'throws' identifier (',' identifier)*

localsSpec			<-	'locals' arg_action_block

ruleAction			<-	'@' identifier action_block

ruleModifiers		<-	ruleModifier+

ruleModifier		<-	'public'
                    /	'private'
                    /	'protected'
                    /	'fragment'

ruleBlock			<-	ruleAltList

ruleAltList			<-	labeledAlt ('|' labeledAlt)*

labeledAlt			<-	alternative ('#' identifier)?

lexerRuleSpec		<-	'fragment'? token_ref ':' lexerRuleBlock ';'

lexerRuleBlock		<-	lexerAltList

lexerAltList		<-	lexerAlt ('|' lexerAlt)*

lexerAlt			<-	lexerElements lexerCommands?

lexerElements		<-	lexerElement*

lexerElement		<-	labeledLexerElement ebnfSuffix?
                    /	lexerAtom ebnfSuffix?
                    /	lexerBlock ebnfSuffix?
                    /	action_block '?'?

labeledLexerElement	<-	identifier ('=' / '+=') (lexerAtom / lexerBlock)

lexerBlock			<-	'(' lexerAltList ')'

lexerCommands		<-	'->' lexerCommand (',' lexerCommand)*

lexerCommand		<-	lexerCommandName '(' lexerCommandExpr ')'
                    /	lexerCommandName

lexerCommandName	<-	'mode'
                    /	identifier

lexerCommandExpr	<-	identifier
                    /	INT

altList				<-	alternative ('|' alternative)*

alternative			<-	(elementOptions? element+)?

element				<-	labeledElement ebnfSuffix?
                    /	atom ebnfSuffix?
                    /	ebnf
                    /	action_block '?'?

labeledElement		<-	identifier ('=' / '+=') (atom / block)

ebnf				<-	block blockSuffix?

blockSuffix			<-	ebnfSuffix

ebnfSuffix			<-	'?' '?'?
                    /	'*' '?'?
                    /	'+' '?'?

lexerAtom			<-	characterRange
                    /	terminal
                    /	notSet
                    /	lexer_char_set
                    /	'.' elementOptions?

atom				<-	terminal
                    /	ruleref
                    /	notSet
                    / '.' elementOptions?

notSet				<-	'~' setElement
                    /	'~' blockSet

blockSet			<-	'(' setElement ('|' setElement)* ')'

setElement			<-	token_ref elementOptions?
                    /	string_literal elementOptions?
                    /	characterRange
                    /	lexer_char_set

block				<-	'(' (optionsSpec? ruleAction* ':')? altList ')'

ruleref				<-	rule_ref arg_action_block? elementOptions?

characterRange		<-	string_literal '..' string_literal

terminal			<-	token_ref elementOptions?
                    /	string_literal elementOptions?

elementOptions		<-	'<' elementOption (',' elementOption) '>'

elementOption		<-	identifier '=' (identifier / string_literal)

identifier			<-	rule_ref
                    /	token_ref

%whitespace			<-	(comment / space)*

space				<-	< [ \t\r\n] >

comment				<-	line_comment
                    /	block_comment

line_comment		<-	< '//' (![\r\n] .)* [\r\n]* >

block_comment		<-	< '/*' (!'*/' .)* '*/' >

letter				<-	[a-zA-Z]

uletter				<-	[A-Z]

lletter				<-	[a-z]

digit				<-	[0-9]

xdigit              <-  [0-9a-fA-F]

letter_or_digit		<-	letter / digit

rule_ref			<-	<  lletter letter_or_digit* ([-_] letter_or_digit+)* '_'? >

token_ref			<-	< uletter letter_or_digit* ([-_] letter_or_digit+)* '_'? >

string_literal		<-	< '\'' string_char* '\'' >

string_char         <-  '"'
                    /   ']'
                    /   '\\\''
                    /   single_char
                    /   escaped_char

lexer_char_set		<-	< '[' char_set_char+ ']' >

char_set_char       <-  single_char_set_char '-' single_char_set_char
                    /   single_char_set_char
                    /   escaped_char

single_char_set_char<-  single_char
                    /   '\''
                    /   '\"'

single_char         <-  [ -!#-&(-,.-[_-~]
                    /   '-'
                    /   '_'
                    /   '^'

escaped_char        <-  '\\' ([rntf\\\'\"\]] / 'u' xdigit xdigit xdigit xdigit)


action_block	    <-  '{' action_content* '}'

action_content		<-  identifier
                    /   '.'
                    /   ';'
                    /   ','
                    /   '$'
                    /   '!'
                    /   '='
                    /   '(' action_content* ')'
                    /   '{' action_content* '}'
                    /   '[' action_content* ']'
                    /   astring_literal
                    /   anumber_literal

astring_literal     <-  '"0"'

anumber_literal     <-  digit+

arg_action_block    <-	'[' action_content* ']'

INT					<-	'TODO:'

WSNLCHARS			<-	[ \t\n\r]	#TODO: \f

EOF					<- !.

)::::::::::";