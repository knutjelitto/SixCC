namespace six.core.tests;

class X1
{
    let int x1 = 1;
}

class X2 : X1
{
    let int x2 = 2;
}

class X3: X2
{
    let int x3 = 3;

    int sum() => x1 + x2 + x3;
}

shared class Base
{
    shared static let int ccc = 12;
    shared static int one => 1;
}

shared abstract class Abstract : Base
{
    shared int a => one;
    shared static int b => one;
    shared abstract int c;
    shared static void two() => one;
}

shared class Derived : Abstract
{
    let Derived x = Derived();

    shared new()
    {
    }

    shared void check1 ()
    {
        one;
        two();
        var x = int.max(ccc, one);
        var y = int.min(ccc, one);
        var z = int.min(ccc, one) + int.max(ccc, one);
    }

    shared void check2 ()
    {
        var y = 0;

        y = 2;

        y = Abstract.one;

        y = int.minValue;

        y = ccc;

        y = int.min(ccc, one);

        y = s32.min(ccc, one);

        var f = int.min;
    }

    void check3()
    {
    }

    shared override int c => a;
    shared int d => c;
    shared int e => x.d;
    shared int f => Derived().d;
}

shared int NestingTest()
{
    return 1;
}
