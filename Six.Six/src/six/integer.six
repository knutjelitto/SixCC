namespace six.core;

shared native class s8 : Builtin
{
}

shared native class s16 : Builtin
{
}

shared native class s32 : Builtin
{
    shared native static string format(s32 value, s32 base) => Fakes.empty();

    shared static s32 minValue => 0;

    shared static s32 min(s32 x, s32 y) => if (x < y) then x else y;
    shared static s32 max(s32 x, s32 y) => if (x >= y) then x else y;

    shared native infix bool == (s32 other) => self == other;
    shared native infix bool != (s32 other) => self != other;
 
    shared native infix bool <= (s32 other) => self <= other;
    shared native infix bool < (s32 other) => self < other;
    shared native infix bool >= (s32 other) => self >= other;
    shared native infix bool > (s32 other) => self > other;

    shared native infix s32 << (s32 other) => self << other;
    shared native infix s32 >> (s32 other) => self >> other;

    shared native infix s32 + (s32 other) => self + other;
    shared native infix s32 - (s32 other) => self - other;

    shared native infix s32 * (s32 other) => self * other;
    shared native infix s32 / (s32 other) => self / other;
    shared native infix s32 % (s32 other) => self % other;

    shared native prefix s32 + () => +self;
    shared native prefix s32 - () => -self;
    
    shared native prefix s32 ~ () => ~self;
    shared native infix s32 & (s32 other) => self & other;
    shared native infix s32 | (s32 other) => self | other;
    shared native infix s32 ^ (s32 other) => self ^ other;
}

shared native class s64 : Builtin
{
}

shared native class u8 : Builtin
{
}

shared native class u16 : Builtin
{
}

shared native class u32 : Builtin
{
/*
    shared native static let u32 zero = 0;
    shared native static let u32 one = 1;
*/
 
    shared native infix u32 + (u32 other) => self + other;
    shared native infix u32 - (u32 other) => self - other;
    shared native infix u32 * (u32 other) => self * other;
    shared native infix u32 / (u32 other) => self / other;
    shared native infix u32 % (u32 other) => self % other;

    shared native infix bool <= (u32 other) => self <= other;
    shared native infix bool < (u32 other) => self < other;
    shared native infix bool >= (u32 other) => self >= other;
    shared native infix bool > (u32 other) => self > other;

    shared native prefix u32 ~ () => ~self;
    shared native infix u32 & (u32 other) => self & other;
    shared native infix u32 | (u32 other) => self | other;
    shared native infix u32 ^ (u32 other) => self ^ other;
}

shared native class u64 : Builtin
{
}

shared alias sbyte => s8;
shared alias byte => u8;

shared alias short => s16;
shared alias ushort => u16;

shared alias int => s32;
shared alias uint => u32;

shared alias long => s64;
shared alias ulong => u64;

shared alias Integer => int;

