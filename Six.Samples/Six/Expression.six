grammar Expression;

%start
    : expression
    ;

%whitespace
    : skip
    ;

expression
    : add-expression
    ;

add-expression
    : mul-expression (add-operator mul-expression)*
    ;

add-operator
    : '+' | '-'
    ;

mul-expression
    : primary (mul-operator primary)*
    ;

mul-operator
    : '*' | '/'
    ;

primary
    : identifier
    | number
    | string
    | '(' expression ')'
    | identifier '(' argument-list? ')'
    ;

argument-list
    : argument (',' argument)*
    ;

argument
    : expression
    ;

identifier
    : < letter letter-or-digit* >
    ;

letter
    : 'a' .. 'z'
    | 'A' .. 'Z'
    ;

digit
    : '0' .. '9'
    ;

letter-or-digit
    : letter
    | digit
    ;

hex
    : digit
    | 'A' .. 'F'
    | 'a' .. 'f'
    ;

number
    : < digit+ >
    ;

string
    : < '\'' string-char+ '\'' >
    ;

string-char
    : !('\\' | '\'') .
    | '\\' escape
    ;

escape
    : '\''
    | '\\'
    | 'a'
    | 'b'
    | 'f'
    | 'n'
    | 't'
    | 'r'
    | 'v'
    | 'x' hex hex
    | 'u{' hex? hex? hex? hex? hex? hex '}'
    ;

skip
    : space
    | eol
    | comment
    ;

space
    : ' '
    | '\t'
    ;

eol
    : '\r' '\n'
    | '\n'
    | '\r'
    ;

comment
    : line-comment
    | block-comment
    ;

line-comment
    : '//' (!eol .)* eol?
    ;

block-comment
    : '/*' (!'*/' .)* '*/'
    ;