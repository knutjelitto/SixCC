grammar SixCC
{
    rules
    {
        grammar
            : 'grammar' name '{' rules terminals '}'
            ;

        rules
            : 'rules' '{' rule+ '}'
            ;

        terminals
            : 'terminals'  '{' terminal+ '}'
            ;

        terminal
            : name ':' re-expression ';'
            ;

        rule
            : name ':' expression ';'
            ;

        expression
            : sequence ('|' sequence)*
            ;

        sequence
            : element+
            ;

        element
            : primary '?'           // zero or one
            | primary '*'           // zero or more
            | primary '+'           // one or more
            | primary
            ;

        primary
            : literal
            | reference
            | '(' expression ')'
            ;

        reference
            : name
            ;

        re-expression
            : re-sequence ('|' re-sequence )*
            ;

        re-sequence
            : re-element+
            ;

        re-element
            : re-primary '?'            // zero or one
            | re-primary '*'            // zero or more
            | re-primary '+'            // one or more
            | re-primary '-' re-primary // difference
            | re-primary
            ;

        re-primary
            : literal
            | literal '..' literal      // character range
            | reference                 // ^rule
            | 'epsilon'
            | 'ε'
            | '.'                       // any
            | '(' re-expression ')'     // grouped
            | '!' re-primary            // complement
            ;
    }

    terminals
    {

        literal
            : string-literal
            ;

        name
            : name-start name-rest*
            ;

        name-start
            : letter letter-or-digit*
            ;

        name-rest
            : '-' letter letter-or-digit*
            ;

        letter
            : 'a' .. 'z' | 'A' .. 'Z' | 'ε'
            ;

        digit
            : '0' .. '9'
            ;

        hex-digit
            : 'a' .. 'f' 
            | 'A' .. 'F'
            | '0' .. '9'
            ;

        letter-or-digit
            : letter
            | digit
            ;

        string-literal
            : '\'' (. - '\'')+ '\''
            ;
    }
}