CXStart
    CCodeUnit
        CNamespace
            CAnnotations
                ROptional<ICStringLiteral>
                RStar<CAnnotation>
            RLiteral{'namespace'}
            CNamespacePath
                CIdentifier{'six'}
                CIdentifier{'core'}
            RLiteral{';'}
        CImports
        CTopDeclarations
            CTypedAttributeDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CVerbatimString{'\"\"\"\r\nA value getter of type `Nothing`. The expression `nothing` is formally assignable to any type, but\r\nproduces an exception when evaluated.\r\n\r\n(This is most useful for tool-generated implementations of `formal` members.)\r\n\"\"\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'throws'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CClassLiteral
                                                RLiteral{'class'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'AssertionError'}
                                            CLiteralString{'\"when evaluated\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'tagged'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"Basic types\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'Nothing'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'nothing'}
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                        CUnclosedStatement
                            CAssertionStatement
                                ROptional<ICAssertionMessage>
                                    CLiteralString{'\"nothing may not be evaluated\"'}
                                RLiteral{'assert'}
                                CConditions
                                    RLiteral{'('}
                                    ROptional<CConditionList>
                                        CConditionList
                                            CMemberReference
                                                CLowerIdentifier{'false'}
                                                ROptional<CTypeArguments>
                                    RLiteral{')'}
                            RLiteral{';'}
                    RLiteral{'}'}
    REof{'\r\n'}
