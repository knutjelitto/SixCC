CXStart
    CCodeUnit
        CNamespace
            CAnnotations
                ROptional<ICStringLiteral>
                RStar<CAnnotation>
            RLiteral{'namespace'}
            CNamespacePath
                CIdentifier{'six'}
                CIdentifier{'core'}
            RLiteral{';'}
        CImports
        CTopDeclarations
            CInterfaceDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"A [[List]] which can be efficiently searched for \r\n occurrences of a given element, or for inclusions of a \r\n given sublist of elements. This interface provides \r\n operations for finding:\r\n \r\n - _occurrences_ of a single value in the list, and\r\n - _inclusions_ of a given sublist of values in the list.\r\n \r\n Occurrences and inclusions are identified by a list index\r\n at which the value or sublist of values occurs in the list. \r\n In the case of an inclusion, it is the index of the first \r\n matching value from the sublist.\r\n \r\n Inclusions may overlap. For example:\r\n \r\n     \\\"yoyoyoyoyo\\\".inclusions(\\\"yoy\\\")\r\n \r\n produces the stream `{ 0, 2, 4, 6 }`.\r\n \r\n An empty list is considered to be included at every index,\r\n including the index [[size]] at the very end of the \r\n list. Thus:\r\n \r\n     \\\"hello\\\".inclusions(\\\"\\\")\r\n \r\n produces the stream `{ 0, 1, 2, 3, 4, 5 }`, with 6 \r\n inclusions in a string of length 5. \r\n \r\n In particular:\r\n \r\n - `\\\"\\\".inclusions(\\\"x\\\")` is the empty stream `{}`, but\r\n - `\\\"\\\".inclusions(\\\"\\\")` is the stream `{ 0 }`.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'see'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CClassLiteral
                                                RLiteral{'class'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'String'}
                                            CClassLiteral
                                                RLiteral{'class'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'Array'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'since'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"1.2.0\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                RLiteral{'interface'}
                CUpperIdentifier{'SearchableList'}
                ROptional<CTypeParameters>
                    CTypeParameters
                        RLiteral{'<'}
                        CTypeParameterList
                            CTypeParameter
                                ROptional<ICVariance>
                                CUpperIdentifier{'Element'}
                                ROptional<CTypeDefault>
                        RLiteral{'>'}
                ROptional<CCaseTypes>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'List'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Element'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Determines if the given [[value|element]] occurs at the \r\n     given index in this list.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Boolean'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'occursAt'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The index at which the value might occur.\"'}
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'index'}
                                                    ROptional<CValueSpecifier>
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The value. If null, it is considered to occur\r\n         at any index in this list with a null element.\"'}
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Element'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'element'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CLetExpr
                                            RLiteral{'let'}
                                            RLiteral{'('}
                                            ROptional<CLetVariableList>
                                                CLetVariableList
                                                    CLetVariable
                                                        CVariable
                                                            ROptional<ICVariableType>
                                                            CLowerIdentifier{'elem'}
                                                            RStar<CParameters>
                                                        CValueSpecifier
                                                            RLiteral{'='}
                                                            CCallExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'getFromFirst'}
                                                                    ROptional<CTypeArguments>
                                                                CPositionalArguments
                                                                    RLiteral{'('}
                                                                    ROptional<CSequencedArgumentList>
                                                                        CSequencedArgumentList
                                                                            CMemberReference
                                                                                CLowerIdentifier{'index'}
                                                                                ROptional<CTypeArguments>
                                                                    RLiteral{')'}
                                            RLiteral{')'}
                                            CIfExpr
                                                RLiteral{'if'}
                                                CConditions
                                                    RLiteral{'('}
                                                    ROptional<CConditionList>
                                                        CConditionList
                                                            CExistsCondition
                                                                ROptional<RLiteral>
                                                                RLiteral{'exists'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'element'}
                                                                    ROptional<CTypeArguments>
                                                            CExistsCondition
                                                                ROptional<RLiteral>
                                                                RLiteral{'exists'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'elem'}
                                                                    ROptional<CTypeArguments>
                                                    RLiteral{')'}
                                                CThenExpression
                                                    RLiteral{'then'}
                                                    CEqualityExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'elem'}
                                                            ROptional<CTypeArguments>
                                                        CEqualityOperator{'=='}
                                                        CMemberReference
                                                            CLowerIdentifier{'element'}
                                                            ROptional<CTypeArguments>
                                                CElseExpression
                                                    RLiteral{'else'}
                                                    CConjunctionExpr
                                                        CConjunctionExpr
                                                            CGroupedExpr
                                                                RLiteral{'('}
                                                                CSmallerBoundsExpr
                                                                    CLiteralNatural{'0'}
                                                                    CSmallerOperator{'<='}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'index'}
                                                                        ROptional<CTypeArguments>
                                                                    CSmallerOperator{'<'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'size'}
                                                                        ROptional<CTypeArguments>
                                                                RLiteral{')'}
                                                            CConjunctionOperator{'&&'}
                                                            CLogicalNegationExpr
                                                                CNotOperator{'!'}
                                                                CExistsExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'element'}
                                                                        ROptional<CTypeArguments>
                                                                    RLiteral{'exists'}
                                                        CConjunctionOperator{'&&'}
                                                        CLogicalNegationExpr
                                                            CNotOperator{'!'}
                                                            CExistsExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'elem'}
                                                                    ROptional<CTypeArguments>
                                                                RLiteral{'exists'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"The indexes in this list at which the given \r\n     [[value|element]] occurs.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CIterableType
                                RLiteral{'{'}
                                ROptional<ICVariadicType>
                                    CVariadicTypeCore
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Integer'}
                                                ROptional<CTypeArguments>
                                        CVariadicOperator{'*'}
                                RLiteral{'}'}
                            CLowerIdentifier{'occurrences'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The value. If null, it is considered to occur\r\n         at any index in this list with a null element.\"'}
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Element'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'element'}
                                                    ROptional<CValueSpecifier>
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The smallest index to consider.\"'}
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'from'}
                                                    ROptional<CValueSpecifier>
                                                        CValueSpecifier
                                                            RLiteral{'='}
                                                            CLiteralNatural{'0'}
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The number of indexes to consider.\"'}
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'length'}
                                                    ROptional<CValueSpecifier>
                                                        CValueSpecifier
                                                            RLiteral{'='}
                                                            CAdditiveExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'size'}
                                                                    ROptional<CTypeArguments>
                                                                CAdditiveOperator{'-'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'from'}
                                                                    ROptional<CTypeArguments>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CObjectExpr
                                            RLiteral{'object'}
                                            ROptional<CExtendedType>
                                            ROptional<CSatisfiedTypes>
                                                CSatisfiedTypes
                                                    RLiteral{'satisfies'}
                                                    CUnionTypeList
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Iterable'}
                                                                ROptional<CTypeArguments>
                                                                    CTypeArguments
                                                                        RLiteral{'<'}
                                                                        ROptional<CTypeArgumentList>
                                                                            CTypeArgumentList
                                                                                CVariancedType
                                                                                    ROptional<ICVariance>
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Integer'}
                                                                                            ROptional<CTypeArguments>
                                                                        RLiteral{'>'}
                                            CBlock
                                                RLiteral{'{'}
                                                CImports
                                                CStatements
                                                    CInferredAttributeDeclaration
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                        CKwValue{'value'}
                                                        CLowerIdentifier{'len'}
                                                        COptionalAnySpecifier
                                                            ROptional<ICAnySpecifier>
                                                                CValueSpecifier
                                                                    RLiteral{'='}
                                                                    CSelectionExpr
                                                                        CSelfReference{'outer'}
                                                                        CMemberSelectionOperator{'.'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'size'}
                                                                            ROptional<CTypeArguments>
                                                            RLiteral{';'}
                                                    CInferredAttributeDeclaration
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                        CKwValue{'value'}
                                                        CLowerIdentifier{'max'}
                                                        COptionalAnySpecifier
                                                            ROptional<ICAnySpecifier>
                                                                CValueSpecifier
                                                                    RLiteral{'='}
                                                                    CThenElseExpr
                                                                        CThenElseExpr
                                                                            CLargerExpr
                                                                                CAdditiveExpr
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'from'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CAdditiveOperator{'+'}
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'length'}
                                                                                        ROptional<CTypeArguments>
                                                                                CLargerOperator{'>'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'len'}
                                                                                    ROptional<CTypeArguments>
                                                                            CThenElseOperator{'then'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'len'}
                                                                                ROptional<CTypeArguments>
                                                                        CThenElseOperator{'else'}
                                                                        CAdditiveExpr
                                                                            CMemberReference
                                                                                CLowerIdentifier{'from'}
                                                                                ROptional<CTypeArguments>
                                                                            CAdditiveOperator{'+'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'length'}
                                                                                ROptional<CTypeArguments>
                                                            RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CCallExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'iterator'}
                                                                    ROptional<CTypeArguments>
                                                                CPositionalArguments
                                                                    RLiteral{'('}
                                                                    ROptional<CSequencedArgumentList>
                                                                    RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CObjectExpr
                                                                    RLiteral{'object'}
                                                                    ROptional<CExtendedType>
                                                                    ROptional<CSatisfiedTypes>
                                                                        CSatisfiedTypes
                                                                            RLiteral{'satisfies'}
                                                                            CUnionTypeList
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Iterator'}
                                                                                        ROptional<CTypeArguments>
                                                                                            CTypeArguments
                                                                                                RLiteral{'<'}
                                                                                                ROptional<CTypeArgumentList>
                                                                                                    CTypeArgumentList
                                                                                                        CVariancedType
                                                                                                            ROptional<ICVariance>
                                                                                                            CTypePath
                                                                                                                CTypeReference
                                                                                                                    CUpperIdentifier{'Integer'}
                                                                                                                    ROptional<CTypeArguments>
                                                                                                RLiteral{'>'}
                                                                    CBlock
                                                                        RLiteral{'{'}
                                                                        CImports
                                                                        CStatements
                                                                            CInferredAttributeDeclaration
                                                                                CAnnotations
                                                                                    ROptional<ICStringLiteral>
                                                                                    RStar<CAnnotation>
                                                                                        CAnnotation
                                                                                            CLowerIdentifier{'variable'}
                                                                                            ROptional<ICArguments>
                                                                                CKwValue{'value'}
                                                                                CLowerIdentifier{'index'}
                                                                                COptionalAnySpecifier
                                                                                    ROptional<ICAnySpecifier>
                                                                                        CValueSpecifier
                                                                                            RLiteral{'='}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'from'}
                                                                                                ROptional<CTypeArguments>
                                                                                    RLiteral{';'}
                                                                            CTypedMethodDeclaration
                                                                                CAnnotations
                                                                                    ROptional<ICStringLiteral>
                                                                                    RStar<CAnnotation>
                                                                                        CAnnotation
                                                                                            CLowerIdentifier{'shared'}
                                                                                            ROptional<ICArguments>
                                                                                        CAnnotation
                                                                                            CLowerIdentifier{'actual'}
                                                                                            ROptional<ICArguments>
                                                                                CUnionTypeCore
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Integer'}
                                                                                            ROptional<CTypeArguments>
                                                                                    RLiteral{'|'}
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Finished'}
                                                                                            ROptional<CTypeArguments>
                                                                                CLowerIdentifier{'next'}
                                                                                ROptional<CTypeParameters>
                                                                                RPlus<CParameters>
                                                                                    CParameters
                                                                                        RLiteral{'('}
                                                                                        ROptional<CParameterList>
                                                                                        RLiteral{')'}
                                                                                ROptional<CTypeConstraints>
                                                                                CBlock
                                                                                    RLiteral{'{'}
                                                                                    CImports
                                                                                    CStatements
                                                                                        CWhileStatement
                                                                                            RLiteral{'while'}
                                                                                            CConditions
                                                                                                RLiteral{'('}
                                                                                                ROptional<CConditionList>
                                                                                                    CConditionList
                                                                                                        CSmallerExpr
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'index'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                            CSmallerOperator{'<'}
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'max'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                RLiteral{')'}
                                                                                            CBlock
                                                                                                RLiteral{'{'}
                                                                                                CImports
                                                                                                CStatements
                                                                                                    CIfElseStatement
                                                                                                        RLiteral{'if'}
                                                                                                        CConditions
                                                                                                            RLiteral{'('}
                                                                                                            ROptional<CConditionList>
                                                                                                                CConditionList
                                                                                                                    CCallExpr
                                                                                                                        CMemberReference
                                                                                                                            CLowerIdentifier{'occursAt'}
                                                                                                                            ROptional<CTypeArguments>
                                                                                                                        CPositionalArguments
                                                                                                                            RLiteral{'('}
                                                                                                                            ROptional<CSequencedArgumentList>
                                                                                                                                CSequencedArgumentList
                                                                                                                                    CMemberReference
                                                                                                                                        CLowerIdentifier{'index'}
                                                                                                                                        ROptional<CTypeArguments>
                                                                                                                                    CMemberReference
                                                                                                                                        CLowerIdentifier{'element'}
                                                                                                                                        ROptional<CTypeArguments>
                                                                                                                            RLiteral{')'}
                                                                                                            RLiteral{')'}
                                                                                                        CBlock
                                                                                                            RLiteral{'{'}
                                                                                                            CImports
                                                                                                            CStatements
                                                                                                                CUnclosedStatement
                                                                                                                    CReturnStatement
                                                                                                                        RLiteral{'return'}
                                                                                                                        ROptional<ICExpression>
                                                                                                                            CPostfixExpr
                                                                                                                                CMemberReference
                                                                                                                                    CLowerIdentifier{'index'}
                                                                                                                                    ROptional<CTypeArguments>
                                                                                                                                CIncrementOperator{'++'}
                                                                                                                    RLiteral{';'}
                                                                                                            RLiteral{'}'}
                                                                                                        RStar<CElseIf>
                                                                                                        ROptional<CElseBlock>
                                                                                                            CElseBlock
                                                                                                                RLiteral{'else'}
                                                                                                                CBlock
                                                                                                                    RLiteral{'{'}
                                                                                                                    CImports
                                                                                                                    CStatements
                                                                                                                        CUnclosedStatement
                                                                                                                            CPostfixExpr
                                                                                                                                CMemberReference
                                                                                                                                    CLowerIdentifier{'index'}
                                                                                                                                    ROptional<CTypeArguments>
                                                                                                                                CIncrementOperator{'++'}
                                                                                                                            RLiteral{';'}
                                                                                                                    RLiteral{'}'}
                                                                                                RLiteral{'}'}
                                                                                        CUnclosedStatement
                                                                                            CReturnStatement
                                                                                                RLiteral{'return'}
                                                                                                ROptional<ICExpression>
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'finished'}
                                                                                                        ROptional<CTypeArguments>
                                                                                            RLiteral{';'}
                                                                                    RLiteral{'}'}
                                                                        RLiteral{'}'}
                                                        RLiteral{';'}
                                                    CTypedAttributeDeclaration
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                                CAnnotation
                                                                    CLowerIdentifier{'shared'}
                                                                    ROptional<ICArguments>
                                                                CAnnotation
                                                                    CLowerIdentifier{'actual'}
                                                                    ROptional<ICArguments>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Integer'}
                                                                ROptional<CTypeArguments>
                                                        CLowerIdentifier{'size'}
                                                        CBlock
                                                            RLiteral{'{'}
                                                            CImports
                                                            CStatements
                                                                CInferredAttributeDeclaration
                                                                    CAnnotations
                                                                        ROptional<ICStringLiteral>
                                                                        RStar<CAnnotation>
                                                                            CAnnotation
                                                                                CLowerIdentifier{'variable'}
                                                                                ROptional<ICArguments>
                                                                    CKwValue{'value'}
                                                                    CLowerIdentifier{'size'}
                                                                    COptionalAnySpecifier
                                                                        ROptional<ICAnySpecifier>
                                                                            CValueSpecifier
                                                                                RLiteral{'='}
                                                                                CLiteralNatural{'0'}
                                                                        RLiteral{';'}
                                                                CForElseStatement
                                                                    RLiteral{'for'}
                                                                    RLiteral{'('}
                                                                    ROptional<CForIterator>
                                                                        CForIterator
                                                                            CVariable
                                                                                ROptional<ICVariableType>
                                                                                CLowerIdentifier{'index'}
                                                                                RStar<CParameters>
                                                                            CContainment
                                                                                CContainmentOperator{'in'}
                                                                                CRangeExpr
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'from'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CRangeOperator{':'}
                                                                                    CAdditiveExpr
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'max'}
                                                                                            ROptional<CTypeArguments>
                                                                                        CAdditiveOperator{'-'}
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'from'}
                                                                                            ROptional<CTypeArguments>
                                                                    RLiteral{')'}
                                                                    CBlock
                                                                        RLiteral{'{'}
                                                                        CImports
                                                                        CStatements
                                                                            CIfElseStatement
                                                                                RLiteral{'if'}
                                                                                CConditions
                                                                                    RLiteral{'('}
                                                                                    ROptional<CConditionList>
                                                                                        CConditionList
                                                                                            CCallExpr
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'occursAt'}
                                                                                                    ROptional<CTypeArguments>
                                                                                                CPositionalArguments
                                                                                                    RLiteral{'('}
                                                                                                    ROptional<CSequencedArgumentList>
                                                                                                        CSequencedArgumentList
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'index'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'element'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                    RLiteral{')'}
                                                                                    RLiteral{')'}
                                                                                CBlock
                                                                                    RLiteral{'{'}
                                                                                    CImports
                                                                                    CStatements
                                                                                        CUnclosedStatement
                                                                                            CPostfixExpr
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'size'}
                                                                                                    ROptional<CTypeArguments>
                                                                                                CIncrementOperator{'++'}
                                                                                            RLiteral{';'}
                                                                                    RLiteral{'}'}
                                                                                RStar<CElseIf>
                                                                                ROptional<CElseBlock>
                                                                        RLiteral{'}'}
                                                                    ROptional<CElseBlock>
                                                                CUnclosedStatement
                                                                    CReturnStatement
                                                                        RLiteral{'return'}
                                                                        ROptional<ICExpression>
                                                                            CMemberReference
                                                                                CLowerIdentifier{'size'}
                                                                                ROptional<CTypeArguments>
                                                                    RLiteral{';'}
                                                            RLiteral{'}'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CMemberReference
                                                                CLowerIdentifier{'empty'}
                                                                ROptional<CTypeArguments>
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CCallExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'occurs'}
                                                                        ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'element'}
                                                                                    ROptional<CTypeArguments>
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'from'}
                                                                                    ROptional<CTypeArguments>
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'length'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                                        RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CMemberReference
                                                                CLowerIdentifier{'first'}
                                                                ROptional<CTypeArguments>
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CCallExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'firstOccurrence'}
                                                                        ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'element'}
                                                                                    ROptional<CTypeArguments>
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'from'}
                                                                                    ROptional<CTypeArguments>
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'length'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                                        RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CMemberReference
                                                                CLowerIdentifier{'last'}
                                                                ROptional<CTypeArguments>
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CCallExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'lastOccurrence'}
                                                                        ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'element'}
                                                                                    ROptional<CTypeArguments>
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'from'}
                                                                                    ROptional<CTypeArguments>
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'length'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                                        RLiteral{';'}
                                                RLiteral{'}'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Determines if the given [[value|element]] occurs as an \r\n     element of this list, at any index that falls within\r\n     the segment `from:length` defined by the optional \r\n     [[starting index|from]] and [[length]].\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Boolean'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'occurs'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The value. If null, it is considered to occur\r\n         at any index in this list with a null element.\"'}
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Element'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'element'}
                                                    ROptional<CValueSpecifier>
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The smallest index to consider.\"'}
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'from'}
                                                    ROptional<CValueSpecifier>
                                                        CValueSpecifier
                                                            RLiteral{'='}
                                                            CLiteralNatural{'0'}
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The number of indexes to consider.\"'}
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'length'}
                                                    ROptional<CValueSpecifier>
                                                        CValueSpecifier
                                                            RLiteral{'='}
                                                            CAdditiveExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'size'}
                                                                    ROptional<CTypeArguments>
                                                                CAdditiveOperator{'-'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'from'}
                                                                    ROptional<CTypeArguments>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CExistsExpr
                                            CCallExpr
                                                CMemberReference
                                                    CLowerIdentifier{'firstOccurrence'}
                                                    ROptional<CTypeArguments>
                                                CPositionalArguments
                                                    RLiteral{'('}
                                                    ROptional<CSequencedArgumentList>
                                                        CSequencedArgumentList
                                                            CMemberReference
                                                                CLowerIdentifier{'element'}
                                                                ROptional<CTypeArguments>
                                                            CMemberReference
                                                                CLowerIdentifier{'from'}
                                                                ROptional<CTypeArguments>
                                                            CMemberReference
                                                                CLowerIdentifier{'length'}
                                                                ROptional<CTypeArguments>
                                                    RLiteral{')'}
                                            RLiteral{'exists'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"The first index in this list at which the given \r\n     [[value|element]] occurs, that falls within the segment \r\n     `from:length` defined by the optional \r\n     [[starting index|from]] and [[length]].\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CNullableType
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Integer'}
                                        ROptional<CTypeArguments>
                                RLiteral{'?'}
                            CLowerIdentifier{'firstOccurrence'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The value. If null, it is considered to occur\r\n         at any index in this list with a null element.\"'}
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Element'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'element'}
                                                    ROptional<CValueSpecifier>
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The smallest index to consider.\"'}
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'from'}
                                                    ROptional<CValueSpecifier>
                                                        CValueSpecifier
                                                            RLiteral{'='}
                                                            CLiteralNatural{'0'}
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The number of indexes to consider.\"'}
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'length'}
                                                    ROptional<CValueSpecifier>
                                                        CValueSpecifier
                                                            RLiteral{'='}
                                                            CAdditiveExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'size'}
                                                                    ROptional<CTypeArguments>
                                                                CAdditiveOperator{'-'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'from'}
                                                                    ROptional<CTypeArguments>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CInferredAttributeDeclaration
                                        CAnnotations
                                            ROptional<ICStringLiteral>
                                            RStar<CAnnotation>
                                                CAnnotation
                                                    CLowerIdentifier{'variable'}
                                                    ROptional<ICArguments>
                                        CKwValue{'value'}
                                        CLowerIdentifier{'start'}
                                        COptionalAnySpecifier
                                            ROptional<ICAnySpecifier>
                                                CValueSpecifier
                                                    RLiteral{'='}
                                                    CMemberReference
                                                        CLowerIdentifier{'from'}
                                                        ROptional<CTypeArguments>
                                            RLiteral{';'}
                                    CInferredAttributeDeclaration
                                        CAnnotations
                                            ROptional<ICStringLiteral>
                                            RStar<CAnnotation>
                                                CAnnotation
                                                    CLowerIdentifier{'variable'}
                                                    ROptional<ICArguments>
                                        CKwValue{'value'}
                                        CLowerIdentifier{'len'}
                                        COptionalAnySpecifier
                                            ROptional<ICAnySpecifier>
                                                CValueSpecifier
                                                    RLiteral{'='}
                                                    CMemberReference
                                                        CLowerIdentifier{'length'}
                                                        ROptional<CTypeArguments>
                                            RLiteral{';'}
                                    CIfElseStatement
                                        RLiteral{'if'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CSmallerExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'start'}
                                                            ROptional<CTypeArguments>
                                                        CSmallerOperator{'<'}
                                                        CLiteralNatural{'0'}
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CUnclosedStatement
                                                    CAssignmentExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'len'}
                                                            ROptional<CTypeArguments>
                                                        CAssignmentOperator{'+='}
                                                        CMemberReference
                                                            CLowerIdentifier{'start'}
                                                            ROptional<CTypeArguments>
                                                    RLiteral{';'}
                                                CUnclosedStatement
                                                    CAssignmentExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'start'}
                                                            ROptional<CTypeArguments>
                                                        CAssignmentOperator{'='}
                                                        CLiteralNatural{'0'}
                                                    RLiteral{';'}
                                            RLiteral{'}'}
                                        RStar<CElseIf>
                                        ROptional<CElseBlock>
                                    CIfElseStatement
                                        RLiteral{'if'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CLargerExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'len'}
                                                            ROptional<CTypeArguments>
                                                        CLargerOperator{'>'}
                                                        CAdditiveExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'size'}
                                                                ROptional<CTypeArguments>
                                                            CAdditiveOperator{'-'}
                                                            CMemberReference
                                                                CLowerIdentifier{'start'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CUnclosedStatement
                                                    CAssignmentExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'len'}
                                                            ROptional<CTypeArguments>
                                                        CAssignmentOperator{'='}
                                                        CAdditiveExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'size'}
                                                                ROptional<CTypeArguments>
                                                            CAdditiveOperator{'-'}
                                                            CMemberReference
                                                                CLowerIdentifier{'start'}
                                                                ROptional<CTypeArguments>
                                                    RLiteral{';'}
                                            RLiteral{'}'}
                                        RStar<CElseIf>
                                        ROptional<CElseBlock>
                                    CForElseStatement
                                        RLiteral{'for'}
                                        RLiteral{'('}
                                        ROptional<CForIterator>
                                            CForIterator
                                                CVariable
                                                    ROptional<ICVariableType>
                                                    CLowerIdentifier{'index'}
                                                    RStar<CParameters>
                                                CContainment
                                                    CContainmentOperator{'in'}
                                                    CRangeExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'start'}
                                                            ROptional<CTypeArguments>
                                                        CRangeOperator{':'}
                                                        CMemberReference
                                                            CLowerIdentifier{'len'}
                                                            ROptional<CTypeArguments>
                                        RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CIfElseStatement
                                                    RLiteral{'if'}
                                                    CConditions
                                                        RLiteral{'('}
                                                        ROptional<CConditionList>
                                                            CConditionList
                                                                CCallExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'occursAt'}
                                                                        ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'index'}
                                                                                    ROptional<CTypeArguments>
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'element'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                                        RLiteral{')'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CUnclosedStatement
                                                                CReturnStatement
                                                                    RLiteral{'return'}
                                                                    ROptional<ICExpression>
                                                                        CMemberReference
                                                                            CLowerIdentifier{'index'}
                                                                            ROptional<CTypeArguments>
                                                                RLiteral{';'}
                                                        RLiteral{'}'}
                                                    RStar<CElseIf>
                                                    ROptional<CElseBlock>
                                            RLiteral{'}'}
                                        ROptional<CElseBlock>
                                            CElseBlock
                                                RLiteral{'else'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CMemberReference
                                                                        CLowerIdentifier{'null'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"The last index in this list at which the given \r\n     [[value|element]] occurs, that falls within the range \r\n     `size-length-from:length` defined by the optional \r\n     [[starting index|from]], interpreted as a reverse index \r\n     counting from the _end_ of the list, and [[length]].\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CNullableType
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Integer'}
                                        ROptional<CTypeArguments>
                                RLiteral{'?'}
                            CLowerIdentifier{'lastOccurrence'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The value. If null, it is considered to occur\r\n         at any index in this list with a null element.\"'}
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Element'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'element'}
                                                    ROptional<CValueSpecifier>
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The smallest index to consider, interpreted as\r\n         a reverse index counting from the _end_ of the \r\n         list, where `0` is the last element of the list, \r\n         and `size-1` is the first element of the list.\"'}
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'from'}
                                                    ROptional<CValueSpecifier>
                                                        CValueSpecifier
                                                            RLiteral{'='}
                                                            CLiteralNatural{'0'}
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The number of indexes to consider.\"'}
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'length'}
                                                    ROptional<CValueSpecifier>
                                                        CValueSpecifier
                                                            RLiteral{'='}
                                                            CAdditiveExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'size'}
                                                                    ROptional<CTypeArguments>
                                                                CAdditiveOperator{'-'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'from'}
                                                                    ROptional<CTypeArguments>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CInferredAttributeDeclaration
                                        CAnnotations
                                            ROptional<ICStringLiteral>
                                            RStar<CAnnotation>
                                                CAnnotation
                                                    CLowerIdentifier{'variable'}
                                                    ROptional<ICArguments>
                                        CKwValue{'value'}
                                        CLowerIdentifier{'start'}
                                        COptionalAnySpecifier
                                            ROptional<ICAnySpecifier>
                                                CValueSpecifier
                                                    RLiteral{'='}
                                                    CMemberReference
                                                        CLowerIdentifier{'from'}
                                                        ROptional<CTypeArguments>
                                            RLiteral{';'}
                                    CInferredAttributeDeclaration
                                        CAnnotations
                                            ROptional<ICStringLiteral>
                                            RStar<CAnnotation>
                                                CAnnotation
                                                    CLowerIdentifier{'variable'}
                                                    ROptional<ICArguments>
                                        CKwValue{'value'}
                                        CLowerIdentifier{'len'}
                                        COptionalAnySpecifier
                                            ROptional<ICAnySpecifier>
                                                CValueSpecifier
                                                    RLiteral{'='}
                                                    CMemberReference
                                                        CLowerIdentifier{'length'}
                                                        ROptional<CTypeArguments>
                                            RLiteral{';'}
                                    CIfElseStatement
                                        RLiteral{'if'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CSmallerExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'start'}
                                                            ROptional<CTypeArguments>
                                                        CSmallerOperator{'<'}
                                                        CLiteralNatural{'0'}
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CUnclosedStatement
                                                    CAssignmentExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'len'}
                                                            ROptional<CTypeArguments>
                                                        CAssignmentOperator{'+='}
                                                        CMemberReference
                                                            CLowerIdentifier{'start'}
                                                            ROptional<CTypeArguments>
                                                    RLiteral{';'}
                                                CUnclosedStatement
                                                    CAssignmentExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'start'}
                                                            ROptional<CTypeArguments>
                                                        CAssignmentOperator{'='}
                                                        CLiteralNatural{'0'}
                                                    RLiteral{';'}
                                            RLiteral{'}'}
                                        RStar<CElseIf>
                                        ROptional<CElseBlock>
                                    CIfElseStatement
                                        RLiteral{'if'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CLargerExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'len'}
                                                            ROptional<CTypeArguments>
                                                        CLargerOperator{'>'}
                                                        CAdditiveExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'size'}
                                                                ROptional<CTypeArguments>
                                                            CAdditiveOperator{'-'}
                                                            CMemberReference
                                                                CLowerIdentifier{'start'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CUnclosedStatement
                                                    CAssignmentExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'len'}
                                                            ROptional<CTypeArguments>
                                                        CAssignmentOperator{'='}
                                                        CAdditiveExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'size'}
                                                                ROptional<CTypeArguments>
                                                            CAdditiveOperator{'-'}
                                                            CMemberReference
                                                                CLowerIdentifier{'start'}
                                                                ROptional<CTypeArguments>
                                                    RLiteral{';'}
                                            RLiteral{'}'}
                                        RStar<CElseIf>
                                        ROptional<CElseBlock>
                                    CForElseStatement
                                        RLiteral{'for'}
                                        RLiteral{'('}
                                        ROptional<CForIterator>
                                            CForIterator
                                                CVariable
                                                    ROptional<ICVariableType>
                                                    CLowerIdentifier{'index'}
                                                    RStar<CParameters>
                                                CContainment
                                                    CContainmentOperator{'in'}
                                                    CSelectionExpr
                                                        CGroupedExpr
                                                            RLiteral{'('}
                                                            CRangeExpr
                                                                CAdditiveExpr
                                                                    CAdditiveExpr
                                                                        CMemberReference
                                                                            CLowerIdentifier{'size'}
                                                                            ROptional<CTypeArguments>
                                                                        CAdditiveOperator{'-'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'len'}
                                                                            ROptional<CTypeArguments>
                                                                    CAdditiveOperator{'-'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'start'}
                                                                        ROptional<CTypeArguments>
                                                                CRangeOperator{':'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'len'}
                                                                    ROptional<CTypeArguments>
                                                            RLiteral{')'}
                                                        CMemberSelectionOperator{'.'}
                                                        CMemberReference
                                                            CLowerIdentifier{'reversed'}
                                                            ROptional<CTypeArguments>
                                        RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CIfElseStatement
                                                    RLiteral{'if'}
                                                    CConditions
                                                        RLiteral{'('}
                                                        ROptional<CConditionList>
                                                            CConditionList
                                                                CCallExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'occursAt'}
                                                                        ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'index'}
                                                                                    ROptional<CTypeArguments>
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'element'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                                        RLiteral{')'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CUnclosedStatement
                                                                CReturnStatement
                                                                    RLiteral{'return'}
                                                                    ROptional<ICExpression>
                                                                        CMemberReference
                                                                            CLowerIdentifier{'index'}
                                                                            ROptional<CTypeArguments>
                                                                RLiteral{';'}
                                                        RLiteral{'}'}
                                                    RStar<CElseIf>
                                                    ROptional<CElseBlock>
                                            RLiteral{'}'}
                                        ROptional<CElseBlock>
                                            CElseBlock
                                                RLiteral{'else'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CMemberReference
                                                                        CLowerIdentifier{'null'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Determine if the given [[list|sublist]] occurs as a \r\n     sublist at the given index of this list.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Boolean'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'includesAt'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The index at which the [[sublist]] might occur.\"'}
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'index'}
                                                    ROptional<CValueSpecifier>
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'List'}
                                                            ROptional<CTypeArguments>
                                                                CTypeArguments
                                                                    RLiteral{'<'}
                                                                    ROptional<CTypeArgumentList>
                                                                        CTypeArgumentList
                                                                            CVariancedType
                                                                                ROptional<ICVariance>
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Element'}
                                                                                        ROptional<CTypeArguments>
                                                                    RLiteral{'>'}
                                                    CLowerIdentifier{'sublist'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CIfElseStatement
                                        RLiteral{'if'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CSmallerBoundsExpr
                                                        CLiteralNatural{'0'}
                                                        CSmallerOperator{'<='}
                                                        CMemberReference
                                                            CLowerIdentifier{'index'}
                                                            ROptional<CTypeArguments>
                                                        CSmallerOperator{'<='}
                                                        CAdditiveExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'size'}
                                                                ROptional<CTypeArguments>
                                                            CAdditiveOperator{'-'}
                                                            CSelectionExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'sublist'}
                                                                    ROptional<CTypeArguments>
                                                                CMemberSelectionOperator{'.'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'size'}
                                                                    ROptional<CTypeArguments>
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CInferredAttributeDeclaration
                                                    CAnnotations
                                                        ROptional<ICStringLiteral>
                                                        RStar<CAnnotation>
                                                            CAnnotation
                                                                CLowerIdentifier{'variable'}
                                                                ROptional<ICArguments>
                                                    CKwValue{'value'}
                                                    CLowerIdentifier{'i'}
                                                    COptionalAnySpecifier
                                                        ROptional<ICAnySpecifier>
                                                            CValueSpecifier
                                                                RLiteral{'='}
                                                                CMemberReference
                                                                    CLowerIdentifier{'index'}
                                                                    ROptional<CTypeArguments>
                                                        RLiteral{';'}
                                                CForElseStatement
                                                    RLiteral{'for'}
                                                    RLiteral{'('}
                                                    ROptional<CForIterator>
                                                        CForIterator
                                                            CVariable
                                                                ROptional<ICVariableType>
                                                                CLowerIdentifier{'element'}
                                                                RStar<CParameters>
                                                            CContainment
                                                                CContainmentOperator{'in'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'sublist'}
                                                                    ROptional<CTypeArguments>
                                                    RLiteral{')'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CIfElseStatement
                                                                RLiteral{'if'}
                                                                CConditions
                                                                    RLiteral{'('}
                                                                    ROptional<CConditionList>
                                                                        CConditionList
                                                                            CExistsCondition
                                                                                ROptional<RLiteral>
                                                                                RLiteral{'exists'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'element'}
                                                                                    ROptional<CTypeArguments>
                                                                    RLiteral{')'}
                                                                CBlock
                                                                    RLiteral{'{'}
                                                                    CImports
                                                                    CStatements
                                                                        CIfElseStatement
                                                                            RLiteral{'if'}
                                                                            CConditions
                                                                                RLiteral{'('}
                                                                                ROptional<CConditionList>
                                                                                    CConditionList
                                                                                        CLogicalNegationExpr
                                                                                            CNotOperator{'!'}
                                                                                            CCallExpr
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'occursAt'}
                                                                                                    ROptional<CTypeArguments>
                                                                                                CPositionalArguments
                                                                                                    RLiteral{'('}
                                                                                                    ROptional<CSequencedArgumentList>
                                                                                                        CSequencedArgumentList
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'i'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'element'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                    RLiteral{')'}
                                                                                RLiteral{')'}
                                                                            CBlock
                                                                                RLiteral{'{'}
                                                                                CImports
                                                                                CStatements
                                                                                    CUnclosedStatement
                                                                                        CReturnStatement
                                                                                            RLiteral{'return'}
                                                                                            ROptional<ICExpression>
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'false'}
                                                                                                    ROptional<CTypeArguments>
                                                                                        RLiteral{';'}
                                                                                RLiteral{'}'}
                                                                            RStar<CElseIf>
                                                                            ROptional<CElseBlock>
                                                                    RLiteral{'}'}
                                                                RStar<CElseIf>
                                                                ROptional<CElseBlock>
                                                                    CElseBlock
                                                                        RLiteral{'else'}
                                                                        CBlock
                                                                            RLiteral{'{'}
                                                                            CImports
                                                                            CStatements
                                                                                CUnclosedStatement
                                                                                    CAssertionStatement
                                                                                        ROptional<ICAssertionMessage>
                                                                                        RLiteral{'assert'}
                                                                                        CConditions
                                                                                            RLiteral{'('}
                                                                                            ROptional<CConditionList>
                                                                                                CConditionList
                                                                                                    CIsCondition
                                                                                                        ROptional<RLiteral>
                                                                                                        RLiteral{'is'}
                                                                                                        CTypePath
                                                                                                            CTypeReference
                                                                                                                CUpperIdentifier{'Element'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                        CIsConditionVariable
                                                                                                            CLowerIdentifier{'null'}
                                                                                                            ROptional<CValueSpecifier>
                                                                                            RLiteral{')'}
                                                                                    RLiteral{';'}
                                                                                CIfElseStatement
                                                                                    RLiteral{'if'}
                                                                                    CConditions
                                                                                        RLiteral{'('}
                                                                                        ROptional<CConditionList>
                                                                                            CConditionList
                                                                                                CLogicalNegationExpr
                                                                                                    CNotOperator{'!'}
                                                                                                    CCallExpr
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'occursAt'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                        CPositionalArguments
                                                                                                            RLiteral{'('}
                                                                                                            ROptional<CSequencedArgumentList>
                                                                                                                CSequencedArgumentList
                                                                                                                    CMemberReference
                                                                                                                        CLowerIdentifier{'i'}
                                                                                                                        ROptional<CTypeArguments>
                                                                                                                    CMemberReference
                                                                                                                        CLowerIdentifier{'null'}
                                                                                                                        ROptional<CTypeArguments>
                                                                                                            RLiteral{')'}
                                                                                        RLiteral{')'}
                                                                                    CBlock
                                                                                        RLiteral{'{'}
                                                                                        CImports
                                                                                        CStatements
                                                                                            CUnclosedStatement
                                                                                                CReturnStatement
                                                                                                    RLiteral{'return'}
                                                                                                    ROptional<ICExpression>
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'false'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                RLiteral{';'}
                                                                                        RLiteral{'}'}
                                                                                    RStar<CElseIf>
                                                                                    ROptional<CElseBlock>
                                                                            RLiteral{'}'}
                                                            CUnclosedStatement
                                                                CPostfixExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'i'}
                                                                        ROptional<CTypeArguments>
                                                                    CIncrementOperator{'++'}
                                                                RLiteral{';'}
                                                        RLiteral{'}'}
                                                    ROptional<CElseBlock>
                                                        CElseBlock
                                                            RLiteral{'else'}
                                                            CBlock
                                                                RLiteral{'{'}
                                                                CImports
                                                                CStatements
                                                                    CUnclosedStatement
                                                                        CReturnStatement
                                                                            RLiteral{'return'}
                                                                            ROptional<ICExpression>
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'true'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{';'}
                                                                RLiteral{'}'}
                                            RLiteral{'}'}
                                        RStar<CElseIf>
                                        ROptional<CElseBlock>
                                            CElseBlock
                                                RLiteral{'else'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CMemberReference
                                                                        CLowerIdentifier{'false'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"The indexes in this list at which the given \r\n     [[list|sublist]] occurs as a sublist, that are greater \r\n     than or equal to the optional [[starting index|from]].\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CIterableType
                                RLiteral{'{'}
                                ROptional<ICVariadicType>
                                    CVariadicTypeCore
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Integer'}
                                                ROptional<CTypeArguments>
                                        CVariadicOperator{'*'}
                                RLiteral{'}'}
                            CLowerIdentifier{'inclusions'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'List'}
                                                            ROptional<CTypeArguments>
                                                                CTypeArguments
                                                                    RLiteral{'<'}
                                                                    ROptional<CTypeArgumentList>
                                                                        CTypeArgumentList
                                                                            CVariancedType
                                                                                ROptional<ICVariance>
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Element'}
                                                                                        ROptional<CTypeArguments>
                                                                    RLiteral{'>'}
                                                    CLowerIdentifier{'sublist'}
                                                    ROptional<CValueSpecifier>
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The smallest index to consider.\"'}
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'from'}
                                                    ROptional<CValueSpecifier>
                                                        CValueSpecifier
                                                            RLiteral{'='}
                                                            CLiteralNatural{'0'}
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CObjectExpr
                                            RLiteral{'object'}
                                            ROptional<CExtendedType>
                                            ROptional<CSatisfiedTypes>
                                                CSatisfiedTypes
                                                    RLiteral{'satisfies'}
                                                    CUnionTypeList
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Iterable'}
                                                                ROptional<CTypeArguments>
                                                                    CTypeArguments
                                                                        RLiteral{'<'}
                                                                        ROptional<CTypeArgumentList>
                                                                            CTypeArgumentList
                                                                                CVariancedType
                                                                                    ROptional<ICVariance>
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Integer'}
                                                                                            ROptional<CTypeArguments>
                                                                        RLiteral{'>'}
                                            CBlock
                                                RLiteral{'{'}
                                                CImports
                                                CStatements
                                                    CInferredAttributeDeclaration
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                        CKwValue{'value'}
                                                        CLowerIdentifier{'len'}
                                                        COptionalAnySpecifier
                                                            ROptional<ICAnySpecifier>
                                                                CValueSpecifier
                                                                    RLiteral{'='}
                                                                    CSelectionExpr
                                                                        CSelfReference{'outer'}
                                                                        CMemberSelectionOperator{'.'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'size'}
                                                                            ROptional<CTypeArguments>
                                                            RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CCallExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'iterator'}
                                                                    ROptional<CTypeArguments>
                                                                CPositionalArguments
                                                                    RLiteral{'('}
                                                                    ROptional<CSequencedArgumentList>
                                                                    RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CObjectExpr
                                                                    RLiteral{'object'}
                                                                    ROptional<CExtendedType>
                                                                    ROptional<CSatisfiedTypes>
                                                                        CSatisfiedTypes
                                                                            RLiteral{'satisfies'}
                                                                            CUnionTypeList
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Iterator'}
                                                                                        ROptional<CTypeArguments>
                                                                                            CTypeArguments
                                                                                                RLiteral{'<'}
                                                                                                ROptional<CTypeArgumentList>
                                                                                                    CTypeArgumentList
                                                                                                        CVariancedType
                                                                                                            ROptional<ICVariance>
                                                                                                            CTypePath
                                                                                                                CTypeReference
                                                                                                                    CUpperIdentifier{'Integer'}
                                                                                                                    ROptional<CTypeArguments>
                                                                                                RLiteral{'>'}
                                                                    CBlock
                                                                        RLiteral{'{'}
                                                                        CImports
                                                                        CStatements
                                                                            CInferredAttributeDeclaration
                                                                                CAnnotations
                                                                                    ROptional<ICStringLiteral>
                                                                                    RStar<CAnnotation>
                                                                                CKwValue{'value'}
                                                                                CLowerIdentifier{'max'}
                                                                                COptionalAnySpecifier
                                                                                    ROptional<ICAnySpecifier>
                                                                                        CValueSpecifier
                                                                                            RLiteral{'='}
                                                                                            CAdditiveExpr
                                                                                                CAdditiveExpr
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'len'}
                                                                                                        ROptional<CTypeArguments>
                                                                                                    CAdditiveOperator{'+'}
                                                                                                    CLiteralNatural{'1'}
                                                                                                CAdditiveOperator{'-'}
                                                                                                CSelectionExpr
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'sublist'}
                                                                                                        ROptional<CTypeArguments>
                                                                                                    CMemberSelectionOperator{'.'}
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'size'}
                                                                                                        ROptional<CTypeArguments>
                                                                                    RLiteral{';'}
                                                                            CInferredAttributeDeclaration
                                                                                CAnnotations
                                                                                    ROptional<ICStringLiteral>
                                                                                    RStar<CAnnotation>
                                                                                        CAnnotation
                                                                                            CLowerIdentifier{'variable'}
                                                                                            ROptional<ICArguments>
                                                                                CKwValue{'value'}
                                                                                CLowerIdentifier{'index'}
                                                                                COptionalAnySpecifier
                                                                                    ROptional<ICAnySpecifier>
                                                                                        CValueSpecifier
                                                                                            RLiteral{'='}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'from'}
                                                                                                ROptional<CTypeArguments>
                                                                                    RLiteral{';'}
                                                                            CTypedMethodDeclaration
                                                                                CAnnotations
                                                                                    ROptional<ICStringLiteral>
                                                                                    RStar<CAnnotation>
                                                                                        CAnnotation
                                                                                            CLowerIdentifier{'shared'}
                                                                                            ROptional<ICArguments>
                                                                                        CAnnotation
                                                                                            CLowerIdentifier{'actual'}
                                                                                            ROptional<ICArguments>
                                                                                CUnionTypeCore
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Integer'}
                                                                                            ROptional<CTypeArguments>
                                                                                    RLiteral{'|'}
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Finished'}
                                                                                            ROptional<CTypeArguments>
                                                                                CLowerIdentifier{'next'}
                                                                                ROptional<CTypeParameters>
                                                                                RPlus<CParameters>
                                                                                    CParameters
                                                                                        RLiteral{'('}
                                                                                        ROptional<CParameterList>
                                                                                        RLiteral{')'}
                                                                                ROptional<CTypeConstraints>
                                                                                CBlock
                                                                                    RLiteral{'{'}
                                                                                    CImports
                                                                                    CStatements
                                                                                        CWhileStatement
                                                                                            RLiteral{'while'}
                                                                                            CConditions
                                                                                                RLiteral{'('}
                                                                                                ROptional<CConditionList>
                                                                                                    CConditionList
                                                                                                        CSmallerExpr
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'index'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                            CSmallerOperator{'<'}
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'max'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                RLiteral{')'}
                                                                                            CBlock
                                                                                                RLiteral{'{'}
                                                                                                CImports
                                                                                                CStatements
                                                                                                    CIfElseStatement
                                                                                                        RLiteral{'if'}
                                                                                                        CConditions
                                                                                                            RLiteral{'('}
                                                                                                            ROptional<CConditionList>
                                                                                                                CConditionList
                                                                                                                    CCallExpr
                                                                                                                        CMemberReference
                                                                                                                            CLowerIdentifier{'includesAt'}
                                                                                                                            ROptional<CTypeArguments>
                                                                                                                        CPositionalArguments
                                                                                                                            RLiteral{'('}
                                                                                                                            ROptional<CSequencedArgumentList>
                                                                                                                                CSequencedArgumentList
                                                                                                                                    CMemberReference
                                                                                                                                        CLowerIdentifier{'index'}
                                                                                                                                        ROptional<CTypeArguments>
                                                                                                                                    CMemberReference
                                                                                                                                        CLowerIdentifier{'sublist'}
                                                                                                                                        ROptional<CTypeArguments>
                                                                                                                            RLiteral{')'}
                                                                                                            RLiteral{')'}
                                                                                                        CBlock
                                                                                                            RLiteral{'{'}
                                                                                                            CImports
                                                                                                            CStatements
                                                                                                                CUnclosedStatement
                                                                                                                    CReturnStatement
                                                                                                                        RLiteral{'return'}
                                                                                                                        ROptional<ICExpression>
                                                                                                                            CPostfixExpr
                                                                                                                                CMemberReference
                                                                                                                                    CLowerIdentifier{'index'}
                                                                                                                                    ROptional<CTypeArguments>
                                                                                                                                CIncrementOperator{'++'}
                                                                                                                    RLiteral{';'}
                                                                                                            RLiteral{'}'}
                                                                                                        RStar<CElseIf>
                                                                                                        ROptional<CElseBlock>
                                                                                                            CElseBlock
                                                                                                                RLiteral{'else'}
                                                                                                                CBlock
                                                                                                                    RLiteral{'{'}
                                                                                                                    CImports
                                                                                                                    CStatements
                                                                                                                        CUnclosedStatement
                                                                                                                            CPostfixExpr
                                                                                                                                CMemberReference
                                                                                                                                    CLowerIdentifier{'index'}
                                                                                                                                    ROptional<CTypeArguments>
                                                                                                                                CIncrementOperator{'++'}
                                                                                                                            RLiteral{';'}
                                                                                                                    RLiteral{'}'}
                                                                                                RLiteral{'}'}
                                                                                        CUnclosedStatement
                                                                                            CReturnStatement
                                                                                                RLiteral{'return'}
                                                                                                ROptional<ICExpression>
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'finished'}
                                                                                                        ROptional<CTypeArguments>
                                                                                            RLiteral{';'}
                                                                                    RLiteral{'}'}
                                                                        RLiteral{'}'}
                                                        RLiteral{';'}
                                                    CTypedAttributeDeclaration
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                                CAnnotation
                                                                    CLowerIdentifier{'shared'}
                                                                    ROptional<ICArguments>
                                                                CAnnotation
                                                                    CLowerIdentifier{'actual'}
                                                                    ROptional<ICArguments>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Integer'}
                                                                ROptional<CTypeArguments>
                                                        CLowerIdentifier{'size'}
                                                        CBlock
                                                            RLiteral{'{'}
                                                            CImports
                                                            CStatements
                                                                CInferredAttributeDeclaration
                                                                    CAnnotations
                                                                        ROptional<ICStringLiteral>
                                                                        RStar<CAnnotation>
                                                                            CAnnotation
                                                                                CLowerIdentifier{'variable'}
                                                                                ROptional<ICArguments>
                                                                    CKwValue{'value'}
                                                                    CLowerIdentifier{'size'}
                                                                    COptionalAnySpecifier
                                                                        ROptional<ICAnySpecifier>
                                                                            CValueSpecifier
                                                                                RLiteral{'='}
                                                                                CLiteralNatural{'0'}
                                                                        RLiteral{';'}
                                                                CForElseStatement
                                                                    RLiteral{'for'}
                                                                    RLiteral{'('}
                                                                    ROptional<CForIterator>
                                                                        CForIterator
                                                                            CVariable
                                                                                ROptional<ICVariableType>
                                                                                CLowerIdentifier{'index'}
                                                                                RStar<CParameters>
                                                                            CContainment
                                                                                CContainmentOperator{'in'}
                                                                                CRangeExpr
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'from'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CRangeOperator{':'}
                                                                                    CAdditiveExpr
                                                                                        CAdditiveExpr
                                                                                            CAdditiveExpr
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'len'}
                                                                                                    ROptional<CTypeArguments>
                                                                                                CAdditiveOperator{'-'}
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'from'}
                                                                                                    ROptional<CTypeArguments>
                                                                                            CAdditiveOperator{'+'}
                                                                                            CLiteralNatural{'1'}
                                                                                        CAdditiveOperator{'-'}
                                                                                        CSelectionExpr
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'sublist'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CMemberSelectionOperator{'.'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'size'}
                                                                                                ROptional<CTypeArguments>
                                                                    RLiteral{')'}
                                                                    CBlock
                                                                        RLiteral{'{'}
                                                                        CImports
                                                                        CStatements
                                                                            CIfElseStatement
                                                                                RLiteral{'if'}
                                                                                CConditions
                                                                                    RLiteral{'('}
                                                                                    ROptional<CConditionList>
                                                                                        CConditionList
                                                                                            CCallExpr
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'includesAt'}
                                                                                                    ROptional<CTypeArguments>
                                                                                                CPositionalArguments
                                                                                                    RLiteral{'('}
                                                                                                    ROptional<CSequencedArgumentList>
                                                                                                        CSequencedArgumentList
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'index'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'sublist'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                    RLiteral{')'}
                                                                                    RLiteral{')'}
                                                                                CBlock
                                                                                    RLiteral{'{'}
                                                                                    CImports
                                                                                    CStatements
                                                                                        CUnclosedStatement
                                                                                            CPostfixExpr
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'size'}
                                                                                                    ROptional<CTypeArguments>
                                                                                                CIncrementOperator{'++'}
                                                                                            RLiteral{';'}
                                                                                    RLiteral{'}'}
                                                                                RStar<CElseIf>
                                                                                ROptional<CElseBlock>
                                                                        RLiteral{'}'}
                                                                    ROptional<CElseBlock>
                                                                CUnclosedStatement
                                                                    CReturnStatement
                                                                        RLiteral{'return'}
                                                                        ROptional<ICExpression>
                                                                            CMemberReference
                                                                                CLowerIdentifier{'size'}
                                                                                ROptional<CTypeArguments>
                                                                    RLiteral{';'}
                                                            RLiteral{'}'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CMemberReference
                                                                CLowerIdentifier{'empty'}
                                                                ROptional<CTypeArguments>
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CCallExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'includes'}
                                                                        ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'sublist'}
                                                                                    ROptional<CTypeArguments>
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'from'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                                        RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CMemberReference
                                                                CLowerIdentifier{'first'}
                                                                ROptional<CTypeArguments>
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CCallExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'firstInclusion'}
                                                                        ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'sublist'}
                                                                                    ROptional<CTypeArguments>
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'from'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                                        RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CMemberReference
                                                                CLowerIdentifier{'last'}
                                                                ROptional<CTypeArguments>
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CCallExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'lastInclusion'}
                                                                        ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'sublist'}
                                                                                    ROptional<CTypeArguments>
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'from'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                                        RLiteral{';'}
                                                RLiteral{'}'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Determine if the given [[list|sublist]] occurs as a \r\n     sublist at some index in this list, at any index that \r\n     is greater than or equal to the optional \r\n     [[starting index|from]].\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Boolean'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'includes'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'List'}
                                                            ROptional<CTypeArguments>
                                                                CTypeArguments
                                                                    RLiteral{'<'}
                                                                    ROptional<CTypeArgumentList>
                                                                        CTypeArgumentList
                                                                            CVariancedType
                                                                                ROptional<ICVariance>
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Element'}
                                                                                        ROptional<CTypeArguments>
                                                                    RLiteral{'>'}
                                                    CLowerIdentifier{'sublist'}
                                                    ROptional<CValueSpecifier>
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The smallest index to consider.\"'}
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'from'}
                                                    ROptional<CValueSpecifier>
                                                        CValueSpecifier
                                                            RLiteral{'='}
                                                            CLiteralNatural{'0'}
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CExistsExpr
                                            CCallExpr
                                                CMemberReference
                                                    CLowerIdentifier{'firstInclusion'}
                                                    ROptional<CTypeArguments>
                                                CPositionalArguments
                                                    RLiteral{'('}
                                                    ROptional<CSequencedArgumentList>
                                                        CSequencedArgumentList
                                                            CMemberReference
                                                                CLowerIdentifier{'sublist'}
                                                                ROptional<CTypeArguments>
                                                            CMemberReference
                                                                CLowerIdentifier{'from'}
                                                                ROptional<CTypeArguments>
                                                    RLiteral{')'}
                                            RLiteral{'exists'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"The first index in this list at which the given \r\n     [[list|sublist]] occurs as a sublist, that is greater \r\n     than or equal to the optional [[starting index|from]].\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CNullableType
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Integer'}
                                        ROptional<CTypeArguments>
                                RLiteral{'?'}
                            CLowerIdentifier{'firstInclusion'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'List'}
                                                            ROptional<CTypeArguments>
                                                                CTypeArguments
                                                                    RLiteral{'<'}
                                                                    ROptional<CTypeArgumentList>
                                                                        CTypeArgumentList
                                                                            CVariancedType
                                                                                ROptional<ICVariance>
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Element'}
                                                                                        ROptional<CTypeArguments>
                                                                    RLiteral{'>'}
                                                    CLowerIdentifier{'sublist'}
                                                    ROptional<CValueSpecifier>
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The smallest index to consider.\"'}
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'from'}
                                                    ROptional<CValueSpecifier>
                                                        CValueSpecifier
                                                            RLiteral{'='}
                                                            CLiteralNatural{'0'}
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CForElseStatement
                                        RLiteral{'for'}
                                        RLiteral{'('}
                                        ROptional<CForIterator>
                                            CForIterator
                                                CVariable
                                                    ROptional<ICVariableType>
                                                    CLowerIdentifier{'index'}
                                                    RStar<CParameters>
                                                CContainment
                                                    CContainmentOperator{'in'}
                                                    CRangeExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'from'}
                                                            ROptional<CTypeArguments>
                                                        CRangeOperator{':'}
                                                        CAdditiveExpr
                                                            CAdditiveExpr
                                                                CAdditiveExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'size'}
                                                                        ROptional<CTypeArguments>
                                                                    CAdditiveOperator{'-'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'from'}
                                                                        ROptional<CTypeArguments>
                                                                CAdditiveOperator{'+'}
                                                                CLiteralNatural{'1'}
                                                            CAdditiveOperator{'-'}
                                                            CSelectionExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'sublist'}
                                                                    ROptional<CTypeArguments>
                                                                CMemberSelectionOperator{'.'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'size'}
                                                                    ROptional<CTypeArguments>
                                        RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CIfElseStatement
                                                    RLiteral{'if'}
                                                    CConditions
                                                        RLiteral{'('}
                                                        ROptional<CConditionList>
                                                            CConditionList
                                                                CCallExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'includesAt'}
                                                                        ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'index'}
                                                                                    ROptional<CTypeArguments>
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'sublist'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                                        RLiteral{')'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CUnclosedStatement
                                                                CReturnStatement
                                                                    RLiteral{'return'}
                                                                    ROptional<ICExpression>
                                                                        CMemberReference
                                                                            CLowerIdentifier{'index'}
                                                                            ROptional<CTypeArguments>
                                                                RLiteral{';'}
                                                        RLiteral{'}'}
                                                    RStar<CElseIf>
                                                    ROptional<CElseBlock>
                                            RLiteral{'}'}
                                        ROptional<CElseBlock>
                                            CElseBlock
                                                RLiteral{'else'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CMemberReference
                                                                        CLowerIdentifier{'null'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"The last index in this list at which the given \r\n     [[list|sublist]] occurs as a sublist, that falls within \r\n     the range `0:size-from+1-sublist.size` defined by the \r\n     optional [[starting index|from]], interpreted as a \r\n     reverse index counting from the _end_ of the list.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CNullableType
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Integer'}
                                        ROptional<CTypeArguments>
                                RLiteral{'?'}
                            CLowerIdentifier{'lastInclusion'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'List'}
                                                            ROptional<CTypeArguments>
                                                                CTypeArguments
                                                                    RLiteral{'<'}
                                                                    ROptional<CTypeArgumentList>
                                                                        CTypeArgumentList
                                                                            CVariancedType
                                                                                ROptional<ICVariance>
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Element'}
                                                                                        ROptional<CTypeArguments>
                                                                    RLiteral{'>'}
                                                    CLowerIdentifier{'sublist'}
                                                    ROptional<CValueSpecifier>
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The smallest index to consider, interpreted as\r\n         a reverse index counting from the _end_ of the \r\n         list, where `0` is the last element of the list, \r\n         and `size-1` is the first element of the list.\"'}
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'from'}
                                                    ROptional<CValueSpecifier>
                                                        CValueSpecifier
                                                            RLiteral{'='}
                                                            CLiteralNatural{'0'}
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CForElseStatement
                                        RLiteral{'for'}
                                        RLiteral{'('}
                                        ROptional<CForIterator>
                                            CForIterator
                                                CVariable
                                                    ROptional<ICVariableType>
                                                    CLowerIdentifier{'index'}
                                                    RStar<CParameters>
                                                CContainment
                                                    CContainmentOperator{'in'}
                                                    CSelectionExpr
                                                        CGroupedExpr
                                                            RLiteral{'('}
                                                            CRangeExpr
                                                                CLiteralNatural{'0'}
                                                                CRangeOperator{':'}
                                                                CAdditiveExpr
                                                                    CAdditiveExpr
                                                                        CAdditiveExpr
                                                                            CMemberReference
                                                                                CLowerIdentifier{'size'}
                                                                                ROptional<CTypeArguments>
                                                                            CAdditiveOperator{'-'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'from'}
                                                                                ROptional<CTypeArguments>
                                                                        CAdditiveOperator{'+'}
                                                                        CLiteralNatural{'1'}
                                                                    CAdditiveOperator{'-'}
                                                                    CSelectionExpr
                                                                        CMemberReference
                                                                            CLowerIdentifier{'sublist'}
                                                                            ROptional<CTypeArguments>
                                                                        CMemberSelectionOperator{'.'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'size'}
                                                                            ROptional<CTypeArguments>
                                                            RLiteral{')'}
                                                        CMemberSelectionOperator{'.'}
                                                        CMemberReference
                                                            CLowerIdentifier{'reversed'}
                                                            ROptional<CTypeArguments>
                                        RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CIfElseStatement
                                                    RLiteral{'if'}
                                                    CConditions
                                                        RLiteral{'('}
                                                        ROptional<CConditionList>
                                                            CConditionList
                                                                CCallExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'includesAt'}
                                                                        ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'index'}
                                                                                    ROptional<CTypeArguments>
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'sublist'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                                        RLiteral{')'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CUnclosedStatement
                                                                CReturnStatement
                                                                    RLiteral{'return'}
                                                                    ROptional<ICExpression>
                                                                        CMemberReference
                                                                            CLowerIdentifier{'index'}
                                                                            ROptional<CTypeArguments>
                                                                RLiteral{';'}
                                                        RLiteral{'}'}
                                                    RStar<CElseIf>
                                                    ROptional<CElseBlock>
                                            RLiteral{'}'}
                                        ROptional<CElseBlock>
                                            CElseBlock
                                                RLiteral{'else'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CMemberReference
                                                                        CLowerIdentifier{'null'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                RLiteral{'}'}
                    RLiteral{'}'}
    REof{''}
