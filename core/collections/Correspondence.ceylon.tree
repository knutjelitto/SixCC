CXStart
    CCodeUnit
        CNamespace
            CAnnotations
                ROptional<ICStringLiteral>
                RStar<CAnnotation>
            RLiteral{'namespace'}
            CNamespacePath
                CIdentifier{'six'}
                CIdentifier{'core'}
            RLiteral{';'}
        CImports
        CTopDeclarations
            CInterfaceDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Abstract supertype of objects which associate values with \r\n keys. A `Correspondence<Key,Item>` may be a viewed as a \r\n partial function from domain `Key` to range `Item`, where\r\n some `Key`s have no `Item`.\r\n \r\n `Correspondence` does not satisfy [[Category]], since in \r\n some cases&mdash;`List`, for example&mdash;it is convenient \r\n to consider the subtype a `Category` of its indexed items, \r\n and in other cases&mdash;`Map`, for example&mdash;it is \r\n convenient to treat the subtype as a `Category` of its \r\n [[entries|Entry]].\r\n \r\n The item corresponding to a given key may be obtained from \r\n a `Correspondence` using the item operator:\r\n \r\n     value bg = settings[\\\"backgroundColor\\\"] else white;\r\n \r\n The `get()` operation and item operator result in an\r\n optional type, to reflect the possibility that there may be\r\n no item for the given key.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'see'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CInterfaceLiteral
                                                RLiteral{'interface'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'Map'}
                                            CInterfaceLiteral
                                                RLiteral{'interface'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'List'}
                                            CInterfaceLiteral
                                                RLiteral{'interface'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'Category'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'by'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"Gavin\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'tagged'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"Collections\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                RLiteral{'interface'}
                CUpperIdentifier{'Correspondence'}
                ROptional<CTypeParameters>
                    CTypeParameters
                        RLiteral{'<'}
                        CTypeParameterList
                            CTypeParameter
                                ROptional<ICVariance>
                                    CVariance{'in'}
                                CUpperIdentifier{'Key'}
                                ROptional<CTypeDefault>
                            CTypeParameter
                                ROptional<ICVariance>
                                    CVariance{'out'}
                                CUpperIdentifier{'Item'}
                                ROptional<CTypeDefault>
                                    CTypeDefault
                                        RLiteral{'='}
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Anything'}
                                                ROptional<CTypeArguments>
                        RLiteral{'>'}
                ROptional<CCaseTypes>
                ROptional<CSatisfiedTypes>
                ROptional<CTypeConstraints>
                    CTypeConstraints
                        CTypeConstraint
                            RLiteral{'given'}
                            ROptional<ICTypeName>
                                CUpperIdentifier{'Key'}
                            ROptional<CTypeParameters>
                            ROptional<CCaseTypes>
                            ROptional<CSatisfiedTypes>
                                CSatisfiedTypes
                                    RLiteral{'satisfies'}
                                    CUnionTypeList
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Object'}
                                                ROptional<CTypeArguments>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Returns the value defined for the given key, or `null` \r\n     if there is no value defined for the given key.\r\n     \r\n     For any instance `c` of `Correspondence`, `c.get(key)` \r\n     may be written using the item operator:\r\n     \r\n         c[key]\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'Correspondence'}
                                                                    CIdentifier{'getAll'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'formal'}
                                        ROptional<ICArguments>
                            CNullableType
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Item'}
                                        ROptional<CTypeArguments>
                                RLiteral{'?'}
                            CLowerIdentifier{'get'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Key'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'key'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Determines if there is a value defined for the given \r\n     key.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'Correspondence'}
                                                                    CIdentifier{'definesAny'}
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'Correspondence'}
                                                                    CIdentifier{'definesEvery'}
                                                        CValueLiteral
                                                            CKwValue{'value'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'Correspondence'}
                                                                    CIdentifier{'keys'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'formal'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Boolean'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'defines'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Key'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'key'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                RLiteral{';'}
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"The `Category` of all keys for which a value is defined\r\n     by this `Correspondence`.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'Correspondence'}
                                                                    CIdentifier{'defines'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Category'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Key'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'keys'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CObjectExpr
                                            RLiteral{'object'}
                                            ROptional<CExtendedType>
                                            ROptional<CSatisfiedTypes>
                                                CSatisfiedTypes
                                                    RLiteral{'satisfies'}
                                                    CUnionTypeList
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Category'}
                                                                ROptional<CTypeArguments>
                                                                    CTypeArguments
                                                                        RLiteral{'<'}
                                                                        ROptional<CTypeArgumentList>
                                                                            CTypeArgumentList
                                                                                CVariancedType
                                                                                    ROptional<ICVariance>
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Key'}
                                                                                            ROptional<CTypeArguments>
                                                                        RLiteral{'>'}
                                            CBlock
                                                RLiteral{'{'}
                                                CImports
                                                CStatements
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CParametrizedMember
                                                                CLowerIdentifier{'contains'}
                                                                ROptional<CTypeParameters>
                                                                RPlus<CParameters>
                                                                    CParameters
                                                                        RLiteral{'('}
                                                                        ROptional<CParameterList>
                                                                            CParameterList
                                                                                CParameter
                                                                                    CAnnotations
                                                                                        ROptional<ICStringLiteral>
                                                                                        RStar<CAnnotation>
                                                                                    CTypedValueParameter
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Key'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CLowerIdentifier{'key'}
                                                                                        ROptional<CValueSpecifier>
                                                                        RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CCallExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'defines'}
                                                                        ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'key'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                                        RLiteral{';'}
                                                RLiteral{'}'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Determines if this `Correspondence` defines a value for\r\n     every one of the given keys.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'Correspondence'}
                                                                    CIdentifier{'defines'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Boolean'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'definesEvery'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CIterableType
                                                        RLiteral{'{'}
                                                        ROptional<ICVariadicType>
                                                            CVariadicTypeCore
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'Key'}
                                                                        ROptional<CTypeArguments>
                                                                CVariadicOperator{'*'}
                                                        RLiteral{'}'}
                                                    CLowerIdentifier{'keys'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CForElseStatement
                                        RLiteral{'for'}
                                        RLiteral{'('}
                                        ROptional<CForIterator>
                                            CForIterator
                                                CVariable
                                                    ROptional<ICVariableType>
                                                    CLowerIdentifier{'key'}
                                                    RStar<CParameters>
                                                CContainment
                                                    CContainmentOperator{'in'}
                                                    CMemberReference
                                                        CLowerIdentifier{'keys'}
                                                        ROptional<CTypeArguments>
                                        RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CIfElseStatement
                                                    RLiteral{'if'}
                                                    CConditions
                                                        RLiteral{'('}
                                                        ROptional<CConditionList>
                                                            CConditionList
                                                                CLogicalNegationExpr
                                                                    CNotOperator{'!'}
                                                                    CCallExpr
                                                                        CMemberReference
                                                                            CLowerIdentifier{'defines'}
                                                                            ROptional<CTypeArguments>
                                                                        CPositionalArguments
                                                                            RLiteral{'('}
                                                                            ROptional<CSequencedArgumentList>
                                                                                CSequencedArgumentList
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'key'}
                                                                                        ROptional<CTypeArguments>
                                                                            RLiteral{')'}
                                                        RLiteral{')'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CUnclosedStatement
                                                                CReturnStatement
                                                                    RLiteral{'return'}
                                                                    ROptional<ICExpression>
                                                                        CMemberReference
                                                                            CLowerIdentifier{'false'}
                                                                            ROptional<CTypeArguments>
                                                                RLiteral{';'}
                                                        RLiteral{'}'}
                                                    RStar<CElseIf>
                                                    ROptional<CElseBlock>
                                            RLiteral{'}'}
                                        ROptional<CElseBlock>
                                            CElseBlock
                                                RLiteral{'else'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CMemberReference
                                                                        CLowerIdentifier{'true'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Determines if this `Correspondence` defines a value for\r\n     any one of the given keys.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'Correspondence'}
                                                                    CIdentifier{'defines'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Boolean'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'definesAny'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CIterableType
                                                        RLiteral{'{'}
                                                        ROptional<ICVariadicType>
                                                            CVariadicTypeCore
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'Key'}
                                                                        ROptional<CTypeArguments>
                                                                CVariadicOperator{'*'}
                                                        RLiteral{'}'}
                                                    CLowerIdentifier{'keys'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CForElseStatement
                                        RLiteral{'for'}
                                        RLiteral{'('}
                                        ROptional<CForIterator>
                                            CForIterator
                                                CVariable
                                                    ROptional<ICVariableType>
                                                    CLowerIdentifier{'key'}
                                                    RStar<CParameters>
                                                CContainment
                                                    CContainmentOperator{'in'}
                                                    CMemberReference
                                                        CLowerIdentifier{'keys'}
                                                        ROptional<CTypeArguments>
                                        RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CIfElseStatement
                                                    RLiteral{'if'}
                                                    CConditions
                                                        RLiteral{'('}
                                                        ROptional<CConditionList>
                                                            CConditionList
                                                                CCallExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'defines'}
                                                                        ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'key'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                                        RLiteral{')'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CUnclosedStatement
                                                                CReturnStatement
                                                                    RLiteral{'return'}
                                                                    ROptional<ICExpression>
                                                                        CMemberReference
                                                                            CLowerIdentifier{'true'}
                                                                            ROptional<CTypeArguments>
                                                                RLiteral{';'}
                                                        RLiteral{'}'}
                                                    RStar<CElseIf>
                                                    ROptional<CElseBlock>
                                            RLiteral{'}'}
                                        ROptional<CElseBlock>
                                            CElseBlock
                                                RLiteral{'else'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CMemberReference
                                                                        CLowerIdentifier{'false'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Returns the items defined for the given keys, in the \r\n     same order as the corresponding keys. For any key which \r\n     does not have an item defined, the resulting stream \r\n     contains the value `null`.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'Correspondence'}
                                                                    CIdentifier{'get'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'since'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CLiteralString{'\"1.1.0\"'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Iterable'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CNullableType
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Item'}
                                                                    ROptional<CTypeArguments>
                                                            RLiteral{'?'}
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Absent'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'getAll'}
                            ROptional<CTypeParameters>
                                CTypeParameters
                                    RLiteral{'<'}
                                    CTypeParameterList
                                        CTypeParameter
                                            ROptional<ICVariance>
                                            CUpperIdentifier{'Absent'}
                                            ROptional<CTypeDefault>
                                    RLiteral{'>'}
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Iterable'}
                                                            ROptional<CTypeArguments>
                                                                CTypeArguments
                                                                    RLiteral{'<'}
                                                                    ROptional<CTypeArgumentList>
                                                                        CTypeArgumentList
                                                                            CVariancedType
                                                                                ROptional<ICVariance>
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Key'}
                                                                                        ROptional<CTypeArguments>
                                                                            CVariancedType
                                                                                ROptional<ICVariance>
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Absent'}
                                                                                        ROptional<CTypeArguments>
                                                                    RLiteral{'>'}
                                                    CLowerIdentifier{'keys'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                                CTypeConstraints
                                    CTypeConstraint
                                        RLiteral{'given'}
                                        ROptional<ICTypeName>
                                            CUpperIdentifier{'Absent'}
                                        ROptional<CTypeParameters>
                                        ROptional<CCaseTypes>
                                        ROptional<CSatisfiedTypes>
                                            CSatisfiedTypes
                                                RLiteral{'satisfies'}
                                                CUnionTypeList
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Null'}
                                                            ROptional<CTypeArguments>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CEnumerationExpr
                                            RLiteral{'{'}
                                            CStatements
                                            ROptional<CSequencedArgumentList>
                                                CSequencedArgumentList
                                                    CForComprehensionClause
                                                        RLiteral{'for'}
                                                        RLiteral{'('}
                                                        ROptional<CForIterator>
                                                            CForIterator
                                                                CVariable
                                                                    ROptional<ICVariableType>
                                                                    CLowerIdentifier{'key'}
                                                                    RStar<CParameters>
                                                                CContainment
                                                                    CContainmentOperator{'in'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'keys'}
                                                                        ROptional<CTypeArguments>
                                                        RLiteral{')'}
                                                        CCallExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'get'}
                                                                ROptional<CTypeArguments>
                                                            CPositionalArguments
                                                                RLiteral{'('}
                                                                ROptional<CSequencedArgumentList>
                                                                    CSequencedArgumentList
                                                                        CMemberReference
                                                                            CLowerIdentifier{'key'}
                                                                            ROptional<CTypeArguments>
                                                                RLiteral{')'}
                                            RLiteral{'}'}
                                RLiteral{';'}
                    RLiteral{'}'}
            CInterfaceDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"A [[Correspondence]] that supports mutation of its \r\n constituent key/item associations. Items may be mutated\r\n via the assignment and item operators:\r\n \r\n     array[i] = i^2;\r\n \r\n Every `CorrespondenceMutator` is either:\r\n  \r\n - a [[KeyedCorrespondenceMutator]], which allows the \r\n   creation of new key/item associations, or \r\n - an [[IndexedCorrespondenceMutator]], which only allows\r\n   mutation of items associated with a given range of \r\n   integer indexes.\r\n \r\n Most `CorrespondenceMutator`s are also instances of\r\n [[Correspondence]].\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'since'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"1.3.0\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'tagged'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"Collections\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'see'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CInterfaceLiteral
                                                RLiteral{'interface'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'Correspondence'}
                                            CInterfaceLiteral
                                                RLiteral{'interface'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'KeyedCorrespondenceMutator'}
                                            CInterfaceLiteral
                                                RLiteral{'interface'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'IndexedCorrespondenceMutator'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                RLiteral{'interface'}
                CUpperIdentifier{'CorrespondenceMutator'}
                ROptional<CTypeParameters>
                    CTypeParameters
                        RLiteral{'<'}
                        CTypeParameterList
                            CTypeParameter
                                ROptional<ICVariance>
                                    CVariance{'in'}
                                CUpperIdentifier{'Item'}
                                ROptional<CTypeDefault>
                        RLiteral{'>'}
                ROptional<CCaseTypes>
                    CCaseTypes
                        RLiteral{'of'}
                        CCaseTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'IndexedCorrespondenceMutator'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Item'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'KeyedCorrespondenceMutator'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Nothing'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Item'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CSatisfiedTypes>
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CInterfaceDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"A [[CorrespondenceMutator]] which allows mutation of the\r\n item associated with a given integer index from a range\r\n of adjacent indices.\r\n \r\n Many `IndexedCorrespondenceMutator`s are [[List]]s.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'since'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"1.3.0\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'tagged'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"Collections\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'see'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CInterfaceLiteral
                                                RLiteral{'interface'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'KeyedCorrespondenceMutator'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                RLiteral{'interface'}
                CUpperIdentifier{'IndexedCorrespondenceMutator'}
                ROptional<CTypeParameters>
                    CTypeParameters
                        RLiteral{'<'}
                        CTypeParameterList
                            CTypeParameter
                                ROptional<ICVariance>
                                    CVariance{'in'}
                                CUpperIdentifier{'Element'}
                                ROptional<CTypeDefault>
                        RLiteral{'>'}
                ROptional<CCaseTypes>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'CorrespondenceMutator'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Element'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                        CVoidMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Set the item associated with the given [[index]] to the\r\n     given [[item]], replacing the item previously \r\n     associated with this index.\r\n     \r\n     For any instance `c` of `IndexedCorrespondenceMutator`, \r\n     `c.set(index, item)` may be written using the item and \r\n     assignment operators:\r\n     \r\n         c[index] = item\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'throws'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CClassLiteral
                                                            RLiteral{'class'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'AssertionError'}
                                                        CLiteralString{'\"if the given [[index]] is outside the range of\r\n             indexes belonging to this objects\"'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'formal'}
                                        ROptional<ICArguments>
                            CKwVoid{'void'}
                            CLowerIdentifier{'set'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'index'}
                                                    ROptional<CValueSpecifier>
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Element'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'item'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                RLiteral{';'}
                    RLiteral{'}'}
            CInterfaceDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"A [[CorrespondenceMutator]] which allows mutation of the\r\n item associated with an existing key, and creation of a\r\n new key/item association.\r\n \r\n Many `KeyedCorrespondenceMutator`s are [[Map]]s.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'since'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"1.3.0\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'tagged'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"Collections\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'see'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CInterfaceLiteral
                                                RLiteral{'interface'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'IndexedCorrespondenceMutator'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                RLiteral{'interface'}
                CUpperIdentifier{'KeyedCorrespondenceMutator'}
                ROptional<CTypeParameters>
                    CTypeParameters
                        RLiteral{'<'}
                        CTypeParameterList
                            CTypeParameter
                                ROptional<ICVariance>
                                    CVariance{'in'}
                                CUpperIdentifier{'Key'}
                                ROptional<CTypeDefault>
                            CTypeParameter
                                ROptional<ICVariance>
                                    CVariance{'in'}
                                CUpperIdentifier{'Item'}
                                ROptional<CTypeDefault>
                        RLiteral{'>'}
                ROptional<CCaseTypes>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'CorrespondenceMutator'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Item'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                    CTypeConstraints
                        CTypeConstraint
                            RLiteral{'given'}
                            ROptional<ICTypeName>
                                CUpperIdentifier{'Key'}
                            ROptional<CTypeParameters>
                            ROptional<CCaseTypes>
                            ROptional<CSatisfiedTypes>
                                CSatisfiedTypes
                                    RLiteral{'satisfies'}
                                    CUnionTypeList
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Object'}
                                                ROptional<CTypeArguments>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                        CVoidMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Set the item associated with the given [[key]] to the\r\n     given [[item]]. If there is already an item associated\r\n     with this key, replace the association. Otherwise, \r\n     create a new association.\r\n     \r\n     For any instance `c` of `KeyedCorrespondenceMutator`, \r\n     `c.put(key, item)` may be written using the item and\r\n     assignment operators:\r\n     \r\n         c[key] = item\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'formal'}
                                        ROptional<ICArguments>
                            CKwVoid{'void'}
                            CLowerIdentifier{'put'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Key'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'key'}
                                                    ROptional<CValueSpecifier>
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Item'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'item'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                RLiteral{';'}
                    RLiteral{'}'}
    REof{'\r\n'}
