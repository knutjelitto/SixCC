CXStart
    CCodeUnit
        CNamespace
            CAnnotations
                ROptional<ICStringLiteral>
                RStar<CAnnotation>
            RLiteral{'namespace'}
            CNamespacePath
                CIdentifier{'six'}
                CIdentifier{'core'}
            RLiteral{';'}
        CImports
        CTopDeclarations
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CVerbatimString{'\"\"\"\r\nA pair containing a _key_ and an associated value called the _item_. Used primarily to represent the elements of a\r\n[[Map]]. The type `Entry<Key,Item>` may be abbreviated `Key->Item`. An instance of `Entry` may be constructed using\r\nthe `->` operator:\r\n\r\n    String->Person entry = person.name->person;\r\n\"\"\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'by'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"Gavin\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'tagged'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"Collections\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'serializable'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'Entry'}
                ROptional<CTypeParameters>
                    CTypeParameters
                        RLiteral{'<'}
                        CTypeParameterList
                            CTypeParameter
                                ROptional<ICVariance>
                                    CVariance{'out'}
                                CUpperIdentifier{'Key'}
                                ROptional<CTypeDefault>
                            CTypeParameter
                                ROptional<ICVariance>
                                    CVariance{'out'}
                                CUpperIdentifier{'Item'}
                                ROptional<CTypeDefault>
                        RLiteral{'>'}
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameterReference
                                    CLowerIdentifier{'key'}
                                    ROptional<CValueSpecifier>
                                CParameterReference
                                    CLowerIdentifier{'item'}
                                    ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                    CExtendedType
                        RLiteral{'extends'}
                        CClassInstantiation
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Object'}
                                    ROptional<CTypeArguments>
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                    RLiteral{')'}
                ROptional<CSatisfiedTypes>
                ROptional<CTypeConstraints>
                    CTypeConstraints
                        CTypeConstraint
                            RLiteral{'given'}
                            ROptional<ICTypeName>
                                CUpperIdentifier{'Key'}
                            ROptional<CTypeParameters>
                            ROptional<CCaseTypes>
                            ROptional<CSatisfiedTypes>
                                CSatisfiedTypes
                                    RLiteral{'satisfies'}
                                    CUnionTypeList
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Object'}
                                                ROptional<CTypeArguments>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"The key used to access the entry.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Key'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'key'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                RLiteral{';'}
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"The item associated with the key.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Item'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'item'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                RLiteral{';'}
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CVerbatimString{'\"\"\"\r\n    A pair (2 element tuple) with the key and item of this entry. For any `entry`:\r\n     \r\n        entry.pair == [entry.key,entry.item]\r\n    \"\"\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                            CTupleType
                                RLiteral{'['}
                                ROptional<ICTypeTypeArguments>
                                    CDefaultedTypeList
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Key'}
                                                ROptional<CTypeArguments>
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Item'}
                                                ROptional<CTypeArguments>
                                RLiteral{']'}
                            CLowerIdentifier{'pair'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CTupleExpr
                                            RLiteral{'['}
                                            ROptional<CSequencedArgumentList>
                                                CSequencedArgumentList
                                                    CMemberReference
                                                        CLowerIdentifier{'key'}
                                                        ROptional<CTypeArguments>
                                                    CMemberReference
                                                        CLowerIdentifier{'item'}
                                                        ROptional<CTypeArguments>
                                            RLiteral{']'}
                                RLiteral{';'}
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"An `Entry` with the key and item of this entry if this entry\'s item is non-null, or `null` otherwise.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                            CNullableType
                                CGroupedType
                                    RLiteral{'<'}
                                    CEntryType
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Key'}
                                                ROptional<CTypeArguments>
                                        CEntryOperator{'->'}
                                        CIntersectionTypeCore
                                            CTypePath
                                                CTypeReference
                                                    CUpperIdentifier{'Item'}
                                                    ROptional<CTypeArguments>
                                            CIntersectionOperator{'&'}
                                            CTypePath
                                                CTypeReference
                                                    CUpperIdentifier{'Object'}
                                                    ROptional<CTypeArguments>
                                    RLiteral{'>'}
                                RLiteral{'?'}
                            CLowerIdentifier{'coalesced'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CIfExpr
                                            RLiteral{'if'}
                                            CConditions
                                                RLiteral{'('}
                                                ROptional<CConditionList>
                                                    CConditionList
                                                        CExistsCondition
                                                            ROptional<RLiteral>
                                                            RLiteral{'exists'}
                                                            CMemberReference
                                                                CLowerIdentifier{'item'}
                                                                ROptional<CTypeArguments>
                                                RLiteral{')'}
                                            CThenExpression
                                                RLiteral{'then'}
                                                CEntryExpr
                                                    CMemberReference
                                                        CLowerIdentifier{'key'}
                                                        ROptional<CTypeArguments>
                                                    CEntryOperator{'->'}
                                                    CMemberReference
                                                        CLowerIdentifier{'item'}
                                                        ROptional<CTypeArguments>
                                            CElseExpression
                                                RLiteral{'else'}
                                                CMemberReference
                                                    CLowerIdentifier{'null'}
                                                    ROptional<CTypeArguments>
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CVerbatimString{'\"\"\"\r\n    Determines if this entry is equal to the given entry. Two entries are equal if they have the same key and the same item.\r\n    \r\n    - The keys are considered the same if they are equal, in the sense of [[value equality|Object.equals]].\r\n    - Two items are considered the same if they are both null or if neither is null and they are equal.\r\n    \"\"\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Boolean'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'equals'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Object'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'that'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CIfElseStatement
                                        RLiteral{'if'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CIsCondition
                                                        ROptional<RLiteral>
                                                        RLiteral{'is'}
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Entry'}
                                                                ROptional<CTypeArguments>
                                                                    CTypeArguments
                                                                        RLiteral{'<'}
                                                                        ROptional<CTypeArgumentList>
                                                                            CTypeArgumentList
                                                                                CVariancedType
                                                                                    ROptional<ICVariance>
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Object'}
                                                                                            ROptional<CTypeArguments>
                                                                                CVariancedType
                                                                                    ROptional<ICVariance>
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Anything'}
                                                                                            ROptional<CTypeArguments>
                                                                        RLiteral{'>'}
                                                        CIsConditionVariable
                                                            CLowerIdentifier{'that'}
                                                            ROptional<CValueSpecifier>
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CIfElseStatement
                                                    RLiteral{'if'}
                                                    CConditions
                                                        RLiteral{'('}
                                                        ROptional<CConditionList>
                                                            CConditionList
                                                                CEqualityExpr
                                                                    CSelectionExpr
                                                                        CSelfReference{'this'}
                                                                        CMemberSelectionOperator{'.'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'key'}
                                                                            ROptional<CTypeArguments>
                                                                    CEqualityOperator{'!='}
                                                                    CSelectionExpr
                                                                        CMemberReference
                                                                            CLowerIdentifier{'that'}
                                                                            ROptional<CTypeArguments>
                                                                        CMemberSelectionOperator{'.'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'key'}
                                                                            ROptional<CTypeArguments>
                                                        RLiteral{')'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CUnclosedStatement
                                                                CReturnStatement
                                                                    RLiteral{'return'}
                                                                    ROptional<ICExpression>
                                                                        CMemberReference
                                                                            CLowerIdentifier{'false'}
                                                                            ROptional<CTypeArguments>
                                                                RLiteral{';'}
                                                        RLiteral{'}'}
                                                    RStar<CElseIf>
                                                    ROptional<CElseBlock>
                                                CIfElseStatement
                                                    RLiteral{'if'}
                                                    CConditions
                                                        RLiteral{'('}
                                                        ROptional<CConditionList>
                                                            CConditionList
                                                                CExistsCondition
                                                                    ROptional<RLiteral>
                                                                    RLiteral{'exists'}
                                                                    CLetVariable
                                                                        CVariable
                                                                            ROptional<ICVariableType>
                                                                            CLowerIdentifier{'thisItem'}
                                                                            RStar<CParameters>
                                                                        CValueSpecifier
                                                                            RLiteral{'='}
                                                                            CSelectionExpr
                                                                                CSelfReference{'this'}
                                                                                CMemberSelectionOperator{'.'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'item'}
                                                                                    ROptional<CTypeArguments>
                                                                CExistsCondition
                                                                    ROptional<RLiteral>
                                                                    RLiteral{'exists'}
                                                                    CLetVariable
                                                                        CVariable
                                                                            ROptional<ICVariableType>
                                                                            CLowerIdentifier{'thatItem'}
                                                                            RStar<CParameters>
                                                                        CValueSpecifier
                                                                            RLiteral{'='}
                                                                            CSelectionExpr
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'that'}
                                                                                    ROptional<CTypeArguments>
                                                                                CMemberSelectionOperator{'.'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'item'}
                                                                                    ROptional<CTypeArguments>
                                                        RLiteral{')'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CUnclosedStatement
                                                                CReturnStatement
                                                                    RLiteral{'return'}
                                                                    ROptional<ICExpression>
                                                                        CEqualityExpr
                                                                            CMemberReference
                                                                                CLowerIdentifier{'thisItem'}
                                                                                ROptional<CTypeArguments>
                                                                            CEqualityOperator{'=='}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'thatItem'}
                                                                                ROptional<CTypeArguments>
                                                                RLiteral{';'}
                                                        RLiteral{'}'}
                                                    RStar<CElseIf>
                                                    ROptional<CElseBlock>
                                                        CElseBlock
                                                            RLiteral{'else'}
                                                            CBlock
                                                                RLiteral{'{'}
                                                                CImports
                                                                CStatements
                                                                    CUnclosedStatement
                                                                        CReturnStatement
                                                                            RLiteral{'return'}
                                                                            ROptional<ICExpression>
                                                                                CConjunctionExpr
                                                                                    CLogicalNegationExpr
                                                                                        CNotOperator{'!'}
                                                                                        CExistsExpr
                                                                                            CSelectionExpr
                                                                                                CSelfReference{'this'}
                                                                                                CMemberSelectionOperator{'.'}
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'item'}
                                                                                                    ROptional<CTypeArguments>
                                                                                            RLiteral{'exists'}
                                                                                    CConjunctionOperator{'&&'}
                                                                                    CLogicalNegationExpr
                                                                                        CNotOperator{'!'}
                                                                                        CExistsExpr
                                                                                            CSelectionExpr
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'that'}
                                                                                                    ROptional<CTypeArguments>
                                                                                                CMemberSelectionOperator{'.'}
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'item'}
                                                                                                    ROptional<CTypeArguments>
                                                                                            RLiteral{'exists'}
                                                                        RLiteral{';'}
                                                                RLiteral{'}'}
                                            RLiteral{'}'}
                                        RStar<CElseIf>
                                        ROptional<CElseBlock>
                                            CElseBlock
                                                RLiteral{'else'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CMemberReference
                                                                        CLowerIdentifier{'false'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                RLiteral{'}'}
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Integer'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'hash'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CAdditiveExpr
                                            CMultiplicativeExpr
                                                CGroupedExpr
                                                    RLiteral{'('}
                                                    CAdditiveExpr
                                                        CLiteralNatural{'31'}
                                                        CAdditiveOperator{'+'}
                                                        CSelectionExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'key'}
                                                                ROptional<CTypeArguments>
                                                            CMemberSelectionOperator{'.'}
                                                            CMemberReference
                                                                CLowerIdentifier{'hash'}
                                                                ROptional<CTypeArguments>
                                                    RLiteral{')'}
                                                CMultiplicativeOperator{'*'}
                                                CLiteralNatural{'31'}
                                            CAdditiveOperator{'+'}
                                            CGroupedExpr
                                                RLiteral{'('}
                                                CThenElseExpr
                                                    CSelectionExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'item'}
                                                            ROptional<CTypeArguments>
                                                        CMemberSelectionOperator{'?.'}
                                                        CMemberReference
                                                            CLowerIdentifier{'hash'}
                                                            ROptional<CTypeArguments>
                                                    CThenElseOperator{'else'}
                                                    CLiteralNatural{'0'}
                                                RLiteral{')'}
                                RLiteral{';'}
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"A description of the entry in the form `key->item`. If [[item]] is `null`, its string representation is the\r\n     string `\\\"<null>\\\"`.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'String'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'string'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CStringInterpolation
                                            CStringStart{'\"``'}
                                            CMemberReference
                                                CLowerIdentifier{'key'}
                                                ROptional<CTypeArguments>
                                            RStar<CInterpolationPart>
                                                CInterpolationPart
                                                    CStringMid{'``->``'}
                                                    CCallExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'stringify'}
                                                            ROptional<CTypeArguments>
                                                        CPositionalArguments
                                                            RLiteral{'('}
                                                            ROptional<CSequencedArgumentList>
                                                                CSequencedArgumentList
                                                                    CMemberReference
                                                                        CLowerIdentifier{'item'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{')'}
                                            CStringEnd{'``\"'}
                                RLiteral{';'}
                    RLiteral{'}'}
    REof{'\r\n'}
