CXStart
    CCodeUnit
        CNamespace
            CAnnotations
                ROptional<ICStringLiteral>
                RStar<CAnnotation>
            RLiteral{'namespace'}
            CNamespacePath
                CIdentifier{'six'}
                CIdentifier{'core'}
            RLiteral{';'}
        CImports
        CTopDeclarations
            CInterfaceDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CVerbatimString{'\"\"\"A collection which maps _keys_ to _items_, where a key \r\n   can map to at most one item. Each such mapping may be \r\n   represented by an [[Entry]]. Thus, each distinct key \r\n   occurs in at most one entry. Two \r\n   non-[[identical|Identifiable]] keys are considered \r\n   distinct only if they are unequal, according to their own \r\n   definition of [[value equality|Object.equals]].\r\n   \r\n   A `Map` is a [[Collection]] of its `Entry`s, and a \r\n   [[Correspondence]] from keys to items.\r\n   \r\n   A new `Map` may be obtained by calling the function \r\n   [[ceylon.language::map]].\r\n   \r\n       value settings = map { \"lang\"->\"en_AU\", \"loc\"->\"ES\" };\r\n   \r\n   The [[emptyMap]] is a `Map` with no entries.\r\n   \r\n   The presence of an entry in a map may be tested using the \r\n   `in` operator:\r\n   \r\n       if (\"lang\"->\"en_AU\" in settings) { ... }\r\n \r\n   The entries of the map may be iterated using `for`:\r\n   \r\n       for (key->item in settings) { ... }\r\n   \r\n   The item for a key may be obtained using the item\r\n   operator:\r\n   \r\n       String lang = settings[\"lang\"] else \"en_US\";\r\n   \r\n   An implementation of `Map` may compare keys for equality \r\n   using [[Object.equals]] or [[Comparable.compare]].\"\"\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'see'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CClassLiteral
                                                RLiteral{'class'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'Entry'}
                                            CFunctionLiteral
                                                CKwFunction{'function'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'package'}
                                                        CIdentifier{'map'}
                                            CFunctionLiteral
                                                CKwFunction{'function'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'forKey'}
                                            CFunctionLiteral
                                                CKwFunction{'function'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'forItem'}
                                            CFunctionLiteral
                                                CKwFunction{'function'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'byItem'}
                                            CFunctionLiteral
                                                CKwFunction{'function'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'byKey'}
                                            CValueLiteral
                                                CKwValue{'value'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'emptyMap'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'tagged'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"Collections\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                RLiteral{'interface'}
                CUpperIdentifier{'Map'}
                ROptional<CTypeParameters>
                    CTypeParameters
                        RLiteral{'<'}
                        CTypeParameterList
                            CTypeParameter
                                ROptional<ICVariance>
                                    CVariance{'out'}
                                CUpperIdentifier{'Key'}
                                ROptional<CTypeDefault>
                                    CTypeDefault
                                        RLiteral{'='}
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Object'}
                                                ROptional<CTypeArguments>
                            CTypeParameter
                                ROptional<ICVariance>
                                    CVariance{'out'}
                                CUpperIdentifier{'Item'}
                                ROptional<CTypeDefault>
                                    CTypeDefault
                                        RLiteral{'='}
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Anything'}
                                                ROptional<CTypeArguments>
                        RLiteral{'>'}
                ROptional<CCaseTypes>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CIntersectionTypeCore
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Collection'}
                                        ROptional<CTypeArguments>
                                            CTypeArguments
                                                RLiteral{'<'}
                                                ROptional<CTypeArgumentList>
                                                    CTypeArgumentList
                                                        CVariancedType
                                                            ROptional<ICVariance>
                                                            CEntryType
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'Key'}
                                                                        ROptional<CTypeArguments>
                                                                CEntryOperator{'->'}
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'Item'}
                                                                        ROptional<CTypeArguments>
                                                RLiteral{'>'}
                                CIntersectionOperator{'&'}
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Correspondence'}
                                        ROptional<CTypeArguments>
                                            CTypeArguments
                                                RLiteral{'<'}
                                                ROptional<CTypeArgumentList>
                                                    CTypeArgumentList
                                                        CVariancedType
                                                            ROptional<ICVariance>
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Object'}
                                                                    ROptional<CTypeArguments>
                                                        CVariancedType
                                                            ROptional<ICVariance>
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Item'}
                                                                    ROptional<CTypeArguments>
                                                RLiteral{'>'}
                ROptional<CTypeConstraints>
                    CTypeConstraints
                        CTypeConstraint
                            RLiteral{'given'}
                            ROptional<ICTypeName>
                                CUpperIdentifier{'Key'}
                            ROptional<CTypeParameters>
                            ROptional<CCaseTypes>
                            ROptional<CSatisfiedTypes>
                                CSatisfiedTypes
                                    RLiteral{'satisfies'}
                                    CUnionTypeList
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Object'}
                                                ROptional<CTypeArguments>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Returns the item of the entry with the given [[key]], \r\n     or `null` if there is no entry with the given `key` in\r\n     this map.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'getOrDefault'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'formal'}
                                        ROptional<ICArguments>
                            CNullableType
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Item'}
                                        ROptional<CTypeArguments>
                                RLiteral{'?'}
                            CLowerIdentifier{'get'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Object'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'key'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Determines if there is an entry in this map with the\r\n     given [[key]].\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'contains'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'formal'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Boolean'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'defines'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Object'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'key'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Returns the item of the entry with the given [[key]], \r\n     or the given [[default]] if there is no entry with the \r\n     given `key` in this map.\r\n     \r\n     For maps with non-null items, the expression:\r\n     \r\n         map.getOrDefault(key, def)\r\n     \r\n     is equivalent to this common idiom:\r\n     \r\n         map[key] else def\r\n     \r\n     However, when the map has null items, `getOrDefault()`\r\n     will preserve them.\r\n     \r\n     Note that high-quality implementations of `Map` should \r\n     refine this default implementation.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'get'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'since'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CLiteralString{'\"1.2.0\"'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CUnionTypeCore
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Item'}
                                        ROptional<CTypeArguments>
                                RLiteral{'|'}
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Default'}
                                        ROptional<CTypeArguments>
                            CLowerIdentifier{'getOrDefault'}
                            ROptional<CTypeParameters>
                                CTypeParameters
                                    RLiteral{'<'}
                                    CTypeParameterList
                                        CTypeParameter
                                            ROptional<ICVariance>
                                            CUpperIdentifier{'Default'}
                                            ROptional<CTypeDefault>
                                    RLiteral{'>'}
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Object'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'key'}
                                                    ROptional<CValueSpecifier>
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Default'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'default'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CIfElseStatement
                                        RLiteral{'if'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CCallExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'defines'}
                                                            ROptional<CTypeArguments>
                                                        CPositionalArguments
                                                            RLiteral{'('}
                                                            ROptional<CSequencedArgumentList>
                                                                CSequencedArgumentList
                                                                    CMemberReference
                                                                        CLowerIdentifier{'key'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{')'}
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CIfElseStatement
                                                    RLiteral{'if'}
                                                    CConditions
                                                        RLiteral{'('}
                                                        ROptional<CConditionList>
                                                            CConditionList
                                                                CExistsCondition
                                                                    ROptional<RLiteral>
                                                                    RLiteral{'exists'}
                                                                    CLetVariable
                                                                        CVariable
                                                                            ROptional<ICVariableType>
                                                                            CLowerIdentifier{'item'}
                                                                            RStar<CParameters>
                                                                        CValueSpecifier
                                                                            RLiteral{'='}
                                                                            CCallExpr
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'get'}
                                                                                    ROptional<CTypeArguments>
                                                                                CPositionalArguments
                                                                                    RLiteral{'('}
                                                                                    ROptional<CSequencedArgumentList>
                                                                                        CSequencedArgumentList
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'key'}
                                                                                                ROptional<CTypeArguments>
                                                                                    RLiteral{')'}
                                                        RLiteral{')'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CUnclosedStatement
                                                                CReturnStatement
                                                                    RLiteral{'return'}
                                                                    ROptional<ICExpression>
                                                                        CMemberReference
                                                                            CLowerIdentifier{'item'}
                                                                            ROptional<CTypeArguments>
                                                                RLiteral{';'}
                                                        RLiteral{'}'}
                                                    RStar<CElseIf>
                                                    ROptional<CElseBlock>
                                                        CElseBlock
                                                            RLiteral{'else'}
                                                            CBlock
                                                                RLiteral{'{'}
                                                                CImports
                                                                CStatements
                                                                    CUnclosedStatement
                                                                        CAssertionStatement
                                                                            ROptional<ICAssertionMessage>
                                                                            RLiteral{'assert'}
                                                                            CConditions
                                                                                RLiteral{'('}
                                                                                ROptional<CConditionList>
                                                                                    CConditionList
                                                                                        CIsCondition
                                                                                            ROptional<RLiteral>
                                                                                            RLiteral{'is'}
                                                                                            CTypePath
                                                                                                CTypeReference
                                                                                                    CUpperIdentifier{'Item'}
                                                                                                    ROptional<CTypeArguments>
                                                                                            CIsConditionVariable
                                                                                                CLowerIdentifier{'null'}
                                                                                                ROptional<CValueSpecifier>
                                                                                RLiteral{')'}
                                                                        RLiteral{';'}
                                                                    CUnclosedStatement
                                                                        CReturnStatement
                                                                            RLiteral{'return'}
                                                                            ROptional<ICExpression>
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'null'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{';'}
                                                                RLiteral{'}'}
                                            RLiteral{'}'}
                                        RStar<CElseIf>
                                        ROptional<CElseBlock>
                                            CElseBlock
                                                RLiteral{'else'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CMemberReference
                                                                        CLowerIdentifier{'default'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                RLiteral{'}'}
                        CInferredMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                            CKwFunction{'function'}
                            CLowerIdentifier{'lookup'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Object'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'key'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CCallExpr
                                            CMemberReference
                                                CLowerIdentifier{'getOrDefault'}
                                                ROptional<CTypeArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CMemberReference
                                                            CLowerIdentifier{'key'}
                                                            ROptional<CTypeArguments>
                                                        CSelectionExpr
                                                            CTypeReference
                                                                CUpperIdentifier{'Missing'}
                                                                ROptional<CTypeArguments>
                                                            CMemberSelectionOperator{'.'}
                                                            CMemberReference
                                                                CLowerIdentifier{'instance'}
                                                                ROptional<CTypeArguments>
                                                RLiteral{')'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Determines if the given [[value|entry]] is an [[Entry]]\r\n     belonging to this map.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'defines'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Boolean'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'contains'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Object'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'entry'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CIfElseStatement
                                        RLiteral{'if'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CIsCondition
                                                        ROptional<RLiteral>
                                                        RLiteral{'is'}
                                                        CEntryType
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Object'}
                                                                    ROptional<CTypeArguments>
                                                            CEntryOperator{'->'}
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Anything'}
                                                                    ROptional<CTypeArguments>
                                                        CIsConditionVariable
                                                            CLowerIdentifier{'entry'}
                                                            ROptional<CValueSpecifier>
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CUnclosedStatement
                                                    CLetStatement
                                                        RLiteral{'let'}
                                                        RLiteral{'('}
                                                        CLetVariableList
                                                            CLetVariable
                                                                CEntryPattern
                                                                    CVariable
                                                                        ROptional<ICVariableType>
                                                                        CLowerIdentifier{'key'}
                                                                        RStar<CParameters>
                                                                    CEntryOperator{'->'}
                                                                    CVariable
                                                                        ROptional<ICVariableType>
                                                                        CLowerIdentifier{'it'}
                                                                        RStar<CParameters>
                                                                CValueSpecifier
                                                                    RLiteral{'='}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'entry'}
                                                                        ROptional<CTypeArguments>
                                                        RLiteral{')'}
                                                    RLiteral{';'}
                                                CIfElseStatement
                                                    RLiteral{'if'}
                                                    CConditions
                                                        RLiteral{'('}
                                                        ROptional<CConditionList>
                                                            CConditionList
                                                                CCallExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'defines'}
                                                                        ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'key'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                                        RLiteral{')'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CInferredAttributeDeclaration
                                                                CAnnotations
                                                                    ROptional<ICStringLiteral>
                                                                    RStar<CAnnotation>
                                                                CKwValue{'value'}
                                                                CLowerIdentifier{'item'}
                                                                COptionalAnySpecifier
                                                                    ROptional<ICAnySpecifier>
                                                                        CValueSpecifier
                                                                            RLiteral{'='}
                                                                            CCallExpr
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'get'}
                                                                                    ROptional<CTypeArguments>
                                                                                CPositionalArguments
                                                                                    RLiteral{'('}
                                                                                    ROptional<CSequencedArgumentList>
                                                                                        CSequencedArgumentList
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'key'}
                                                                                                ROptional<CTypeArguments>
                                                                                    RLiteral{')'}
                                                                    RLiteral{';'}
                                                            CUnclosedStatement
                                                                CReturnStatement
                                                                    RLiteral{'return'}
                                                                    ROptional<ICExpression>
                                                                        CIfExpr
                                                                            RLiteral{'if'}
                                                                            CConditions
                                                                                RLiteral{'('}
                                                                                ROptional<CConditionList>
                                                                                    CConditionList
                                                                                        CExistsCondition
                                                                                            ROptional<RLiteral>
                                                                                            RLiteral{'exists'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'it'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CExistsCondition
                                                                                            ROptional<RLiteral>
                                                                                            RLiteral{'exists'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'item'}
                                                                                                ROptional<CTypeArguments>
                                                                                RLiteral{')'}
                                                                            CThenExpression
                                                                                RLiteral{'then'}
                                                                                CEqualityExpr
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'item'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CEqualityOperator{'=='}
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'it'}
                                                                                        ROptional<CTypeArguments>
                                                                            CElseExpression
                                                                                RLiteral{'else'}
                                                                                CEqualityExpr
                                                                                    CExistsExpr
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'it'}
                                                                                            ROptional<CTypeArguments>
                                                                                        RLiteral{'exists'}
                                                                                    CEqualityOperator{'=='}
                                                                                    CExistsExpr
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'item'}
                                                                                            ROptional<CTypeArguments>
                                                                                        RLiteral{'exists'}
                                                                RLiteral{';'}
                                                        RLiteral{'}'}
                                                    RStar<CElseIf>
                                                    ROptional<CElseBlock>
                                            RLiteral{'}'}
                                        RStar<CElseIf>
                                        ROptional<CElseBlock>
                                    CUnclosedStatement
                                        CReturnStatement
                                            RLiteral{'return'}
                                            ROptional<ICExpression>
                                                CMemberReference
                                                    CLowerIdentifier{'false'}
                                                    ROptional<CTypeArguments>
                                        RLiteral{';'}
                                RLiteral{'}'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CMemberReference
                                    CLowerIdentifier{'distinct'}
                                    ROptional<CTypeArguments>
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CSelfReference{'this'}
                            RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                            CIterableType
                                RLiteral{'{'}
                                ROptional<ICVariadicType>
                                    CVariadicTypeCore
                                        CGroupedType
                                            RLiteral{'<'}
                                            CEntryType
                                                CTypePath
                                                    CTypeReference
                                                        CUpperIdentifier{'Key'}
                                                        ROptional<CTypeArguments>
                                                CEntryOperator{'->'}
                                                CTypePath
                                                    CTypeReference
                                                        CUpperIdentifier{'Item'}
                                                        ROptional<CTypeArguments>
                                            RLiteral{'>'}
                                        CVariadicOperator{'*'}
                                RLiteral{'}'}
                            CLowerIdentifier{'defaultNullElements'}
                            ROptional<CTypeParameters>
                                CTypeParameters
                                    RLiteral{'<'}
                                    CTypeParameterList
                                        CTypeParameter
                                            ROptional<ICVariance>
                                            CUpperIdentifier{'Default'}
                                            ROptional<CTypeDefault>
                                    RLiteral{'>'}
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Default'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'defaultValue'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                                CTypeConstraints
                                    CTypeConstraint
                                        RLiteral{'given'}
                                        ROptional<ICTypeName>
                                            CUpperIdentifier{'Default'}
                                        ROptional<CTypeParameters>
                                        ROptional<CCaseTypes>
                                        ROptional<CSatisfiedTypes>
                                            CSatisfiedTypes
                                                RLiteral{'satisfies'}
                                                CUnionTypeList
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Object'}
                                                            ROptional<CTypeArguments>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CSelfReference{'this'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"A shallow copy of this map, that is, a map with the\r\n     same entries as this map, which do not change if the\r\n     entries in this map change.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Map'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Key'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Item'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'clone'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CCallExpr
                                            CSelectionExpr
                                                CSelfReference{'package'}
                                                CMemberSelectionOperator{'.'}
                                                CMemberReference
                                                    CLowerIdentifier{'map'}
                                                    ROptional<CTypeArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CSelfReference{'this'}
                                                RLiteral{')'}
                                RLiteral{';'}
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"A [[Set]] containing the keys of this map.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Set'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Key'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'keys'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CObjectExpr
                                            RLiteral{'object'}
                                            ROptional<CExtendedType>
                                                CExtendedType
                                                    RLiteral{'extends'}
                                                    CClassInstantiation
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Object'}
                                                                ROptional<CTypeArguments>
                                                        ROptional<ICArguments>
                                                            CPositionalArguments
                                                                RLiteral{'('}
                                                                ROptional<CSequencedArgumentList>
                                                                RLiteral{')'}
                                            ROptional<CSatisfiedTypes>
                                                CSatisfiedTypes
                                                    RLiteral{'satisfies'}
                                                    CUnionTypeList
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Set'}
                                                                ROptional<CTypeArguments>
                                                                    CTypeArguments
                                                                        RLiteral{'<'}
                                                                        ROptional<CTypeArgumentList>
                                                                            CTypeArgumentList
                                                                                CVariancedType
                                                                                    ROptional<ICVariance>
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Key'}
                                                                                            ROptional<CTypeArguments>
                                                                        RLiteral{'>'}
                                            CBlock
                                                RLiteral{'{'}
                                                CImports
                                                CStatements
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CParametrizedMember
                                                                CLowerIdentifier{'contains'}
                                                                ROptional<CTypeParameters>
                                                                RPlus<CParameters>
                                                                    CParameters
                                                                        RLiteral{'('}
                                                                        ROptional<CParameterList>
                                                                            CParameterList
                                                                                CParameter
                                                                                    CAnnotations
                                                                                        ROptional<ICStringLiteral>
                                                                                        RStar<CAnnotation>
                                                                                    CTypedValueParameter
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Object'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CLowerIdentifier{'key'}
                                                                                        ROptional<CValueSpecifier>
                                                                        RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CCallExpr
                                                                    CSelectionExpr
                                                                        CSelfReference{'outer'}
                                                                        CMemberSelectionOperator{'.'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'defines'}
                                                                            ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'key'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                                        RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CCallExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'iterator'}
                                                                    ROptional<CTypeArguments>
                                                                CPositionalArguments
                                                                    RLiteral{'('}
                                                                    ROptional<CSequencedArgumentList>
                                                                    RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CCallExpr
                                                                    CSelectionExpr
                                                                        CCallExpr
                                                                            CSelectionExpr
                                                                                CSelfReference{'outer'}
                                                                                CMemberSelectionOperator{'.'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'map'}
                                                                                    ROptional<CTypeArguments>
                                                                            CPositionalArguments
                                                                                RLiteral{'('}
                                                                                ROptional<CSequencedArgumentList>
                                                                                    CSequencedArgumentList
                                                                                        CSelectionExpr
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Entry'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CMemberSelectionOperator{'.'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'key'}
                                                                                                ROptional<CTypeArguments>
                                                                                RLiteral{')'}
                                                                        CMemberSelectionOperator{'.'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'iterator'}
                                                                            ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                        RLiteral{')'}
                                                        RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CMemberReference
                                                                CLowerIdentifier{'size'}
                                                                ROptional<CTypeArguments>
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CSelectionExpr
                                                                    CSelfReference{'outer'}
                                                                    CMemberSelectionOperator{'.'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'size'}
                                                                        ROptional<CTypeArguments>
                                                        RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CMemberReference
                                                                CLowerIdentifier{'empty'}
                                                                ROptional<CTypeArguments>
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CSelectionExpr
                                                                    CSelfReference{'outer'}
                                                                    CMemberSelectionOperator{'.'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'empty'}
                                                                        ROptional<CTypeArguments>
                                                        RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CCallExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'clone'}
                                                                    ROptional<CTypeArguments>
                                                                CPositionalArguments
                                                                    RLiteral{'('}
                                                                    ROptional<CSequencedArgumentList>
                                                                    RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CCallExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'set'}
                                                                        ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CSelfReference{'this'}
                                                                        RLiteral{')'}
                                                        RLiteral{';'}
                                                RLiteral{'}'}
                                RLiteral{';'}
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"A [[Collection]] containing the items stored in this \r\n     map. An element can be stored under more than one key \r\n     in the map, and so it can occur more than once in the \r\n     resulting collection.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'since'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CLiteralString{'\"1.1.0\"'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Collection'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Item'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'items'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CCallExpr
                                            CTypeReference
                                                CUpperIdentifier{'Items'}
                                                ROptional<CTypeArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                RLiteral{')'}
                                RLiteral{';'}
                        CClassDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"A bag of items.\"'}
                                RStar<CAnnotation>
                            RLiteral{'class'}
                            CUpperIdentifier{'Items'}
                            ROptional<CTypeParameters>
                            ROptional<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                    RLiteral{')'}
                            ROptional<CCaseTypes>
                            ROptional<CExtendedType>
                                CExtendedType
                                    RLiteral{'extends'}
                                    CClassInstantiation
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Object'}
                                                ROptional<CTypeArguments>
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                RLiteral{')'}
                            ROptional<CSatisfiedTypes>
                                CSatisfiedTypes
                                    RLiteral{'satisfies'}
                                    CUnionTypeList
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Collection'}
                                                ROptional<CTypeArguments>
                                                    CTypeArguments
                                                        RLiteral{'<'}
                                                        ROptional<CTypeArgumentList>
                                                            CTypeArgumentList
                                                                CVariancedType
                                                                    ROptional<ICVariance>
                                                                    CTypePath
                                                                        CTypeReference
                                                                            CUpperIdentifier{'Item'}
                                                                            ROptional<CTypeArguments>
                                                        RLiteral{'>'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CParametrizedMember
                                                CLowerIdentifier{'contains'}
                                                ROptional<CTypeParameters>
                                                RPlus<CParameters>
                                                    CParameters
                                                        RLiteral{'('}
                                                        ROptional<CParameterList>
                                                            CParameterList
                                                                CParameter
                                                                    CAnnotations
                                                                        ROptional<ICStringLiteral>
                                                                        RStar<CAnnotation>
                                                                    CTypedValueParameter
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Object'}
                                                                                ROptional<CTypeArguments>
                                                                        CLowerIdentifier{'item'}
                                                                        ROptional<CValueSpecifier>
                                                        RLiteral{')'}
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CCallExpr
                                                    CSelectionExpr
                                                        CSelfReference{'outer'}
                                                        CMemberSelectionOperator{'.'}
                                                        CMemberReference
                                                            CLowerIdentifier{'any'}
                                                            ROptional<CTypeArguments>
                                                    CPositionalArguments
                                                        RLiteral{'('}
                                                        ROptional<CSequencedArgumentList>
                                                            CSequencedArgumentList
                                                                CInferredFunctionExpr
                                                                    ROptional<RLiteral>
                                                                    ROptional<CTypeParameters>
                                                                    RPlus<CParameters>
                                                                        CParameters
                                                                            RLiteral{'('}
                                                                            ROptional<CParameterList>
                                                                                CParameterList
                                                                                    CEntryPattern
                                                                                        CVariable
                                                                                            ROptional<ICVariableType>
                                                                                            CLowerIdentifier{'_'}
                                                                                            RStar<CParameters>
                                                                                        CEntryOperator{'->'}
                                                                                        CVariable
                                                                                            ROptional<ICVariableType>
                                                                                            CLowerIdentifier{'it'}
                                                                                            RStar<CParameters>
                                                                            RLiteral{')'}
                                                                    ROptional<CTypeConstraints>
                                                                    CFunctionSpecifier
                                                                        RLiteral{'=>'}
                                                                        CIfExpr
                                                                            RLiteral{'if'}
                                                                            CConditions
                                                                                RLiteral{'('}
                                                                                ROptional<CConditionList>
                                                                                    CConditionList
                                                                                        CExistsCondition
                                                                                            ROptional<RLiteral>
                                                                                            RLiteral{'exists'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'it'}
                                                                                                ROptional<CTypeArguments>
                                                                                RLiteral{')'}
                                                                            CThenExpression
                                                                                RLiteral{'then'}
                                                                                CEqualityExpr
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'it'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CEqualityOperator{'=='}
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'item'}
                                                                                        ROptional<CTypeArguments>
                                                                            CElseExpression
                                                                                RLiteral{'else'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'false'}
                                                                                    ROptional<CTypeArguments>
                                                        RLiteral{')'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CCallExpr
                                                CMemberReference
                                                    CLowerIdentifier{'iterator'}
                                                    ROptional<CTypeArguments>
                                                CPositionalArguments
                                                    RLiteral{'('}
                                                    ROptional<CSequencedArgumentList>
                                                    RLiteral{')'}
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CCallExpr
                                                    CSelectionExpr
                                                        CCallExpr
                                                            CSelectionExpr
                                                                CSelfReference{'outer'}
                                                                CMemberSelectionOperator{'.'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'map'}
                                                                    ROptional<CTypeArguments>
                                                            CPositionalArguments
                                                                RLiteral{'('}
                                                                ROptional<CSequencedArgumentList>
                                                                    CSequencedArgumentList
                                                                        CSelectionExpr
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Entry'}
                                                                                ROptional<CTypeArguments>
                                                                            CMemberSelectionOperator{'.'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'item'}
                                                                                ROptional<CTypeArguments>
                                                                RLiteral{')'}
                                                        CMemberSelectionOperator{'.'}
                                                        CMemberReference
                                                            CLowerIdentifier{'iterator'}
                                                            ROptional<CTypeArguments>
                                                    CPositionalArguments
                                                        RLiteral{'('}
                                                        ROptional<CSequencedArgumentList>
                                                        RLiteral{')'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CMemberReference
                                                CLowerIdentifier{'size'}
                                                ROptional<CTypeArguments>
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CSelectionExpr
                                                    CSelfReference{'outer'}
                                                    CMemberSelectionOperator{'.'}
                                                    CMemberReference
                                                        CLowerIdentifier{'size'}
                                                        ROptional<CTypeArguments>
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CMemberReference
                                                CLowerIdentifier{'empty'}
                                                ROptional<CTypeArguments>
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CSelectionExpr
                                                    CSelfReference{'outer'}
                                                    CMemberSelectionOperator{'.'}
                                                    CMemberReference
                                                        CLowerIdentifier{'empty'}
                                                        ROptional<CTypeArguments>
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CCallExpr
                                                CMemberReference
                                                    CLowerIdentifier{'clone'}
                                                    ROptional<CTypeArguments>
                                                CPositionalArguments
                                                    RLiteral{'('}
                                                    ROptional<CSequencedArgumentList>
                                                    RLiteral{')'}
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CTupleExpr
                                                    RLiteral{'['}
                                                    ROptional<CSequencedArgumentList>
                                                        CSequencedArgumentList
                                                            CSpreadArgument
                                                                RLiteral{'*'}
                                                                CSelfReference{'this'}
                                                    RLiteral{']'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CMemberReference
                                                CLowerIdentifier{'hash'}
                                                ROptional<CTypeArguments>
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CSelectionExpr
                                                    CCallExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'frequencies'}
                                                            ROptional<CTypeArguments>
                                                        CPositionalArguments
                                                            RLiteral{'('}
                                                            ROptional<CSequencedArgumentList>
                                                            RLiteral{')'}
                                                    CMemberSelectionOperator{'.'}
                                                    CMemberReference
                                                        CLowerIdentifier{'hash'}
                                                        ROptional<CTypeArguments>
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CParametrizedMember
                                                CLowerIdentifier{'equals'}
                                                ROptional<CTypeParameters>
                                                RPlus<CParameters>
                                                    CParameters
                                                        RLiteral{'('}
                                                        ROptional<CParameterList>
                                                            CParameterList
                                                                CParameter
                                                                    CAnnotations
                                                                        ROptional<ICStringLiteral>
                                                                        RStar<CAnnotation>
                                                                    CTypedValueParameter
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Object'}
                                                                                ROptional<CTypeArguments>
                                                                        CLowerIdentifier{'that'}
                                                                        ROptional<CValueSpecifier>
                                                        RLiteral{')'}
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CIfExpr
                                                    RLiteral{'if'}
                                                    CConditions
                                                        RLiteral{'('}
                                                        ROptional<CConditionList>
                                                            CConditionList
                                                                CIsCondition
                                                                    ROptional<RLiteral>
                                                                    RLiteral{'is'}
                                                                    CTypePath
                                                                        CTypeReference
                                                                            CUpperIdentifier{'Items'}
                                                                            ROptional<CTypeArguments>
                                                                    CIsConditionVariable
                                                                        CLowerIdentifier{'that'}
                                                                        ROptional<CValueSpecifier>
                                                        RLiteral{')'}
                                                    CThenExpression
                                                        RLiteral{'then'}
                                                        CEqualityExpr
                                                            CCallExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'frequencies'}
                                                                    ROptional<CTypeArguments>
                                                                CPositionalArguments
                                                                    RLiteral{'('}
                                                                    ROptional<CSequencedArgumentList>
                                                                    RLiteral{')'}
                                                            CEqualityOperator{'=='}
                                                            CCallExpr
                                                                CSelectionExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'that'}
                                                                        ROptional<CTypeArguments>
                                                                    CMemberSelectionOperator{'.'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'frequencies'}
                                                                        ROptional<CTypeArguments>
                                                                CPositionalArguments
                                                                    RLiteral{'('}
                                                                    ROptional<CSequencedArgumentList>
                                                                    RLiteral{')'}
                                                    CElseExpression
                                                        RLiteral{'else'}
                                                        CMemberReference
                                                            CLowerIdentifier{'false'}
                                                            ROptional<CTypeArguments>
                                        RLiteral{';'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Invert this map, producing a new immutable map where \r\n     the keys of the new map are the non-null items of this\r\n     map, and each item of the new map is a nonempty \r\n     sequence of keys of this map.\r\n     \r\n     For example, the expression:\r\n     \r\n         { \\\"fee\\\", \\\"fi\\\", \\\"fo\\\", \\\"fum\\\", \\\"foo\\\" }\r\n            .tabulate(String.size)\r\n            .inverse()\r\n     \r\n     produces the map \r\n     `{ 2->[\\\"fo\\\", \\\"fi\\\"], 3->[ \\\"fum\\\", \\\"fee\\\", \\\"foo\\\"] }`.\r\n     \r\n     The order of keys in the key sequences is not defined\r\n     and should not be relied upon.\r\n     \r\n     This is an eager operation, and the resulting map does\r\n     not reflect changes to this map.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'since'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CLiteralString{'\"1.2.0\"'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Map'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CIntersectionTypeCore
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Item'}
                                                                    ROptional<CTypeArguments>
                                                            CIntersectionOperator{'&'}
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Object'}
                                                                    ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTupleType
                                                            RLiteral{'['}
                                                            ROptional<ICTypeTypeArguments>
                                                                CDefaultedTypeList
                                                                    CVariadicTypeCore
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Key'}
                                                                                ROptional<CTypeArguments>
                                                                        CVariadicOperator{'+'}
                                                            RLiteral{']'}
                                            RLiteral{'>'}
                            CLowerIdentifier{'inverse'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CCallExpr
                                            CSelectionExpr
                                                CCallExpr
                                                    CSelectionExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'coalescedMap'}
                                                            ROptional<CTypeArguments>
                                                        CMemberSelectionOperator{'.'}
                                                        CMemberReference
                                                            CLowerIdentifier{'summarize'}
                                                            ROptional<CTypeArguments>
                                                                CTypeArguments
                                                                    RLiteral{'<'}
                                                                    ROptional<CTypeArgumentList>
                                                                        CTypeArgumentList
                                                                            CVariancedType
                                                                                ROptional<ICVariance>
                                                                                CIntersectionTypeCore
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Item'}
                                                                                            ROptional<CTypeArguments>
                                                                                    CIntersectionOperator{'&'}
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Object'}
                                                                                            ROptional<CTypeArguments>
                                                                            CVariancedType
                                                                                ROptional<ICVariance>
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'ElementEntry'}
                                                                                        ROptional<CTypeArguments>
                                                                                            CTypeArguments
                                                                                                RLiteral{'<'}
                                                                                                ROptional<CTypeArgumentList>
                                                                                                    CTypeArgumentList
                                                                                                        CVariancedType
                                                                                                            ROptional<ICVariance>
                                                                                                            CTypePath
                                                                                                                CTypeReference
                                                                                                                    CUpperIdentifier{'Key'}
                                                                                                                    ROptional<CTypeArguments>
                                                                                                RLiteral{'>'}
                                                                    RLiteral{'>'}
                                                    CPositionalArguments
                                                        RLiteral{'('}
                                                        ROptional<CSequencedArgumentList>
                                                            CSequencedArgumentList
                                                                CSelectionExpr
                                                                    CTypeReference
                                                                        CUpperIdentifier{'Entry'}
                                                                        ROptional<CTypeArguments>
                                                                    CMemberSelectionOperator{'.'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'item'}
                                                                        ROptional<CTypeArguments>
                                                                CInferredFunctionExpr
                                                                    ROptional<RLiteral>
                                                                    ROptional<CTypeParameters>
                                                                    RPlus<CParameters>
                                                                        CParameters
                                                                            RLiteral{'('}
                                                                            ROptional<CParameterList>
                                                                                CParameterList
                                                                                    CParameterReference
                                                                                        CLowerIdentifier{'keys'}
                                                                                        ROptional<CValueSpecifier>
                                                                                    CEntryPattern
                                                                                        CVariable
                                                                                            ROptional<ICVariableType>
                                                                                            CLowerIdentifier{'key'}
                                                                                            RStar<CParameters>
                                                                                        CEntryOperator{'->'}
                                                                                        CVariable
                                                                                            ROptional<ICVariableType>
                                                                                            CLowerIdentifier{'_'}
                                                                                            RStar<CParameters>
                                                                            RLiteral{')'}
                                                                    ROptional<CTypeConstraints>
                                                                    CFunctionSpecifier
                                                                        RLiteral{'=>'}
                                                                        CCallExpr
                                                                            CTypeReference
                                                                                CUpperIdentifier{'ElementEntry'}
                                                                                ROptional<CTypeArguments>
                                                                            CPositionalArguments
                                                                                RLiteral{'('}
                                                                                ROptional<CSequencedArgumentList>
                                                                                    CSequencedArgumentList
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'keys'}
                                                                                            ROptional<CTypeArguments>
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'key'}
                                                                                            ROptional<CTypeArguments>
                                                                                RLiteral{')'}
                                                        RLiteral{')'}
                                                CMemberSelectionOperator{'.'}
                                                CMemberReference
                                                    CLowerIdentifier{'mapItems'}
                                                    ROptional<CTypeArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CInferredFunctionExpr
                                                            ROptional<RLiteral>
                                                            ROptional<CTypeParameters>
                                                            RPlus<CParameters>
                                                                CParameters
                                                                    RLiteral{'('}
                                                                    ROptional<CParameterList>
                                                                        CParameterList
                                                                            CParameterReference
                                                                                CLowerIdentifier{'_'}
                                                                                ROptional<CValueSpecifier>
                                                                            CParameterReference
                                                                                CLowerIdentifier{'item'}
                                                                                ROptional<CValueSpecifier>
                                                                    RLiteral{')'}
                                                            ROptional<CTypeConstraints>
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CCallExpr
                                                                    CSelectionExpr
                                                                        CMemberReference
                                                                            CLowerIdentifier{'item'}
                                                                            ROptional<CTypeArguments>
                                                                        CMemberSelectionOperator{'.'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'reversedSequence'}
                                                                            ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                        RLiteral{')'}
                                                RLiteral{')'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Two maps are considered equal iff they have the same _entry sets_. The entry set of a `Map` is\r\n     the set of `Entry`s belonging to the map. Therefore, the maps are equal iff they have same set\r\n     of `keys`, and for every key in the key set, the maps have equal items.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Boolean'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'equals'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Object'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'that'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CIfElseStatement
                                        RLiteral{'if'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CIsCondition
                                                        ROptional<RLiteral>
                                                        RLiteral{'is'}
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Map'}
                                                                ROptional<CTypeArguments>
                                                                    CTypeArguments
                                                                        RLiteral{'<'}
                                                                        ROptional<CTypeArgumentList>
                                                                        RLiteral{'>'}
                                                        CIsConditionVariable
                                                            CLowerIdentifier{'that'}
                                                            ROptional<CValueSpecifier>
                                                    CEqualityExpr
                                                        CSelectionExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'that'}
                                                                ROptional<CTypeArguments>
                                                            CMemberSelectionOperator{'.'}
                                                            CMemberReference
                                                                CLowerIdentifier{'size'}
                                                                ROptional<CTypeArguments>
                                                        CEqualityOperator{'=='}
                                                        CMemberReference
                                                            CLowerIdentifier{'size'}
                                                            ROptional<CTypeArguments>
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CForElseStatement
                                                    RLiteral{'for'}
                                                    RLiteral{'('}
                                                    ROptional<CForIterator>
                                                        CForIterator
                                                            CEntryPattern
                                                                CVariable
                                                                    ROptional<ICVariableType>
                                                                    CLowerIdentifier{'key'}
                                                                    RStar<CParameters>
                                                                CEntryOperator{'->'}
                                                                CVariable
                                                                    ROptional<ICVariableType>
                                                                    CLowerIdentifier{'thisItem'}
                                                                    RStar<CParameters>
                                                            CContainment
                                                                CContainmentOperator{'in'}
                                                                CSelfReference{'this'}
                                                    RLiteral{')'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CInferredAttributeDeclaration
                                                                CAnnotations
                                                                    ROptional<ICStringLiteral>
                                                                    RStar<CAnnotation>
                                                                CKwValue{'value'}
                                                                CLowerIdentifier{'thatItem'}
                                                                COptionalAnySpecifier
                                                                    ROptional<ICAnySpecifier>
                                                                        CValueSpecifier
                                                                            RLiteral{'='}
                                                                            CIndexedExpr
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'that'}
                                                                                    ROptional<CTypeArguments>
                                                                                RLiteral{'['}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'key'}
                                                                                    ROptional<CTypeArguments>
                                                                                RLiteral{']'}
                                                                    RLiteral{';'}
                                                            CIfElseStatement
                                                                RLiteral{'if'}
                                                                CConditions
                                                                    RLiteral{'('}
                                                                    ROptional<CConditionList>
                                                                        CConditionList
                                                                            CExistsCondition
                                                                                ROptional<RLiteral>
                                                                                RLiteral{'exists'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'thisItem'}
                                                                                    ROptional<CTypeArguments>
                                                                            CExistsCondition
                                                                                ROptional<RLiteral>
                                                                                RLiteral{'exists'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'thatItem'}
                                                                                    ROptional<CTypeArguments>
                                                                    RLiteral{')'}
                                                                CBlock
                                                                    RLiteral{'{'}
                                                                    CImports
                                                                    CStatements
                                                                        CIfElseStatement
                                                                            RLiteral{'if'}
                                                                            CConditions
                                                                                RLiteral{'('}
                                                                                ROptional<CConditionList>
                                                                                    CConditionList
                                                                                        CEqualityExpr
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'thisItem'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CEqualityOperator{'!='}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'thatItem'}
                                                                                                ROptional<CTypeArguments>
                                                                                RLiteral{')'}
                                                                            CBlock
                                                                                RLiteral{'{'}
                                                                                CImports
                                                                                CStatements
                                                                                    CUnclosedStatement
                                                                                        CReturnStatement
                                                                                            RLiteral{'return'}
                                                                                            ROptional<ICExpression>
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'false'}
                                                                                                    ROptional<CTypeArguments>
                                                                                        RLiteral{';'}
                                                                                RLiteral{'}'}
                                                                            RStar<CElseIf>
                                                                            ROptional<CElseBlock>
                                                                    RLiteral{'}'}
                                                                RStar<CElseIf>
                                                                    CElseIf
                                                                        RLiteral{'else'}
                                                                        RLiteral{'if'}
                                                                        CConditions
                                                                            RLiteral{'('}
                                                                            ROptional<CConditionList>
                                                                                CConditionList
                                                                                    CEqualityExpr
                                                                                        CExistsExpr
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'thisItem'}
                                                                                                ROptional<CTypeArguments>
                                                                                            RLiteral{'exists'}
                                                                                        CEqualityOperator{'!='}
                                                                                        CExistsExpr
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'thatItem'}
                                                                                                ROptional<CTypeArguments>
                                                                                            RLiteral{'exists'}
                                                                            RLiteral{')'}
                                                                        CBlock
                                                                            RLiteral{'{'}
                                                                            CImports
                                                                            CStatements
                                                                                CUnclosedStatement
                                                                                    CReturnStatement
                                                                                        RLiteral{'return'}
                                                                                        ROptional<ICExpression>
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'false'}
                                                                                                ROptional<CTypeArguments>
                                                                                    RLiteral{';'}
                                                                            RLiteral{'}'}
                                                                ROptional<CElseBlock>
                                                        RLiteral{'}'}
                                                    ROptional<CElseBlock>
                                                        CElseBlock
                                                            RLiteral{'else'}
                                                            CBlock
                                                                RLiteral{'{'}
                                                                CImports
                                                                CStatements
                                                                    CUnclosedStatement
                                                                        CReturnStatement
                                                                            RLiteral{'return'}
                                                                            ROptional<ICExpression>
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'true'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{';'}
                                                                RLiteral{'}'}
                                            RLiteral{'}'}
                                        RStar<CElseIf>
                                        ROptional<CElseBlock>
                                            CElseBlock
                                                RLiteral{'else'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CMemberReference
                                                                        CLowerIdentifier{'false'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                RLiteral{'}'}
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Integer'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'hash'}
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CInferredAttributeDeclaration
                                        CAnnotations
                                            ROptional<ICStringLiteral>
                                            RStar<CAnnotation>
                                                CAnnotation
                                                    CLowerIdentifier{'variable'}
                                                    ROptional<ICArguments>
                                        CKwValue{'value'}
                                        CLowerIdentifier{'hashCode'}
                                        COptionalAnySpecifier
                                            ROptional<ICAnySpecifier>
                                                CValueSpecifier
                                                    RLiteral{'='}
                                                    CLiteralNatural{'0'}
                                            RLiteral{';'}
                                    CForElseStatement
                                        RLiteral{'for'}
                                        RLiteral{'('}
                                        ROptional<CForIterator>
                                            CForIterator
                                                CVariable
                                                    ROptional<ICVariableType>
                                                    CLowerIdentifier{'elem'}
                                                    RStar<CParameters>
                                                CContainment
                                                    CContainmentOperator{'in'}
                                                    CSelfReference{'this'}
                                        RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CUnclosedStatement
                                                    CAssignmentExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'hashCode'}
                                                            ROptional<CTypeArguments>
                                                        CAssignmentOperator{'+='}
                                                        CSelectionExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'elem'}
                                                                ROptional<CTypeArguments>
                                                            CMemberSelectionOperator{'.'}
                                                            CMemberReference
                                                                CLowerIdentifier{'hash'}
                                                                ROptional<CTypeArguments>
                                                    RLiteral{';'}
                                            RLiteral{'}'}
                                        ROptional<CElseBlock>
                                    CUnclosedStatement
                                        CReturnStatement
                                            RLiteral{'return'}
                                            ROptional<ICExpression>
                                                CMemberReference
                                                    CLowerIdentifier{'hashCode'}
                                                    ROptional<CTypeArguments>
                                        RLiteral{';'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Produces a map with the same [[keys]] as this map. For every key, the item is the result of\r\n     applying the given [[transformation|Map.mapItems.mapping]] function to its associated item in\r\n     this map. This is a lazy operation, returning a view of this map.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Map'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Key'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Result'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'mapItems'}
                            ROptional<CTypeParameters>
                                CTypeParameters
                                    RLiteral{'<'}
                                    CTypeParameterList
                                        CTypeParameter
                                            ROptional<ICVariance>
                                            CUpperIdentifier{'Result'}
                                            ROptional<CTypeDefault>
                                    RLiteral{'>'}
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The function that transforms a key/item pair of\r\n         this map, producing the item of the resulting map.\"'}
                                                    RStar<CAnnotation>
                                                CTypedFunctionParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Result'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'mapping'}
                                                    ROptional<CTypeParameters>
                                                    RPlus<CParameters>
                                                        CParameters
                                                            RLiteral{'('}
                                                            ROptional<CParameterList>
                                                                CParameterList
                                                                    CParameter
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CTypedValueParameter
                                                                            CTypePath
                                                                                CTypeReference
                                                                                    CUpperIdentifier{'Key'}
                                                                                    ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'key'}
                                                                            ROptional<CValueSpecifier>
                                                                    CParameter
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CTypedValueParameter
                                                                            CTypePath
                                                                                CTypeReference
                                                                                    CUpperIdentifier{'Item'}
                                                                                    ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'item'}
                                                                            ROptional<CValueSpecifier>
                                                            RLiteral{')'}
                                                    ROptional<CFunctionSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CObjectExpr
                                            RLiteral{'object'}
                                            ROptional<CExtendedType>
                                                CExtendedType
                                                    RLiteral{'extends'}
                                                    CClassInstantiation
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Object'}
                                                                ROptional<CTypeArguments>
                                                        ROptional<ICArguments>
                                                            CPositionalArguments
                                                                RLiteral{'('}
                                                                ROptional<CSequencedArgumentList>
                                                                RLiteral{')'}
                                            ROptional<CSatisfiedTypes>
                                                CSatisfiedTypes
                                                    RLiteral{'satisfies'}
                                                    CUnionTypeList
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Map'}
                                                                ROptional<CTypeArguments>
                                                                    CTypeArguments
                                                                        RLiteral{'<'}
                                                                        ROptional<CTypeArgumentList>
                                                                            CTypeArgumentList
                                                                                CVariancedType
                                                                                    ROptional<ICVariance>
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Key'}
                                                                                            ROptional<CTypeArguments>
                                                                                CVariancedType
                                                                                    ROptional<ICVariance>
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Result'}
                                                                                            ROptional<CTypeArguments>
                                                                        RLiteral{'>'}
                                            CBlock
                                                RLiteral{'{'}
                                                CImports
                                                CStatements
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CParametrizedMember
                                                                CLowerIdentifier{'defines'}
                                                                ROptional<CTypeParameters>
                                                                RPlus<CParameters>
                                                                    CParameters
                                                                        RLiteral{'('}
                                                                        ROptional<CParameterList>
                                                                            CParameterList
                                                                                CParameter
                                                                                    CAnnotations
                                                                                        ROptional<ICStringLiteral>
                                                                                        RStar<CAnnotation>
                                                                                    CTypedValueParameter
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Object'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CLowerIdentifier{'key'}
                                                                                        ROptional<CValueSpecifier>
                                                                        RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CCallExpr
                                                                    CSelectionExpr
                                                                        CSelfReference{'outer'}
                                                                        CMemberSelectionOperator{'.'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'defines'}
                                                                            ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'key'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                                        RLiteral{';'}
                                                    CTypedMethodDeclaration
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                                CAnnotation
                                                                    CLowerIdentifier{'shared'}
                                                                    ROptional<ICArguments>
                                                                CAnnotation
                                                                    CLowerIdentifier{'actual'}
                                                                    ROptional<ICArguments>
                                                        CNullableType
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Result'}
                                                                    ROptional<CTypeArguments>
                                                            RLiteral{'?'}
                                                        CLowerIdentifier{'get'}
                                                        ROptional<CTypeParameters>
                                                        RPlus<CParameters>
                                                            CParameters
                                                                RLiteral{'('}
                                                                ROptional<CParameterList>
                                                                    CParameterList
                                                                        CParameter
                                                                            CAnnotations
                                                                                ROptional<ICStringLiteral>
                                                                                RStar<CAnnotation>
                                                                            CTypedValueParameter
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Object'}
                                                                                        ROptional<CTypeArguments>
                                                                                CLowerIdentifier{'key'}
                                                                                ROptional<CValueSpecifier>
                                                                RLiteral{')'}
                                                        ROptional<CTypeConstraints>
                                                        CBlock
                                                            RLiteral{'{'}
                                                            CImports
                                                            CStatements
                                                                CIfElseStatement
                                                                    RLiteral{'if'}
                                                                    CConditions
                                                                        RLiteral{'('}
                                                                        ROptional<CConditionList>
                                                                            CConditionList
                                                                                CIsCondition
                                                                                    ROptional<RLiteral>
                                                                                    RLiteral{'is'}
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Key'}
                                                                                            ROptional<CTypeArguments>
                                                                                    CIsConditionVariable
                                                                                        CLowerIdentifier{'key'}
                                                                                        ROptional<CValueSpecifier>
                                                                        RLiteral{')'}
                                                                    CBlock
                                                                        RLiteral{'{'}
                                                                        CImports
                                                                        CStatements
                                                                            CUnclosedStatement
                                                                                CReturnStatement
                                                                                    RLiteral{'return'}
                                                                                    ROptional<ICExpression>
                                                                                        CSwitchExpr
                                                                                            CSwitchHeader
                                                                                                RLiteral{'switch'}
                                                                                                RLiteral{'('}
                                                                                                CSpecifiedVariable
                                                                                                    CVariable
                                                                                                        ROptional<ICVariableType>
                                                                                                        CLowerIdentifier{'item'}
                                                                                                        RStar<CParameters>
                                                                                                    CValueSpecifier
                                                                                                        RLiteral{'='}
                                                                                                        CCallExpr
                                                                                                            CSelectionExpr
                                                                                                                CSelfReference{'outer'}
                                                                                                                CMemberSelectionOperator{'.'}
                                                                                                                CMemberReference
                                                                                                                    CLowerIdentifier{'lookup'}
                                                                                                                    ROptional<CTypeArguments>
                                                                                                            CPositionalArguments
                                                                                                                RLiteral{'('}
                                                                                                                ROptional<CSequencedArgumentList>
                                                                                                                    CSequencedArgumentList
                                                                                                                        CMemberReference
                                                                                                                            CLowerIdentifier{'key'}
                                                                                                                            ROptional<CTypeArguments>
                                                                                                                RLiteral{')'}
                                                                                                RLiteral{')'}
                                                                                            RPlus<CCaseExpression>
                                                                                                CCaseExpression
                                                                                                    ROptional<RLiteral>
                                                                                                    RLiteral{'case'}
                                                                                                    RLiteral{'('}
                                                                                                    CValueCaseList
                                                                                                        CSelectionExpr
                                                                                                            CTypeReference
                                                                                                                CUpperIdentifier{'Missing'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                            CMemberSelectionOperator{'.'}
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'instance'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                    RLiteral{')'}
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'null'}
                                                                                                        ROptional<CTypeArguments>
                                                                                            ROptional<CElseExpression>
                                                                                                CElseExpression
                                                                                                    RLiteral{'else'}
                                                                                                    CCallExpr
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'mapping'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                        CPositionalArguments
                                                                                                            RLiteral{'('}
                                                                                                            ROptional<CSequencedArgumentList>
                                                                                                                CSequencedArgumentList
                                                                                                                    CMemberReference
                                                                                                                        CLowerIdentifier{'key'}
                                                                                                                        ROptional<CTypeArguments>
                                                                                                                    CMemberReference
                                                                                                                        CLowerIdentifier{'item'}
                                                                                                                        ROptional<CTypeArguments>
                                                                                                            RLiteral{')'}
                                                                                RLiteral{';'}
                                                                        RLiteral{'}'}
                                                                    RStar<CElseIf>
                                                                    ROptional<CElseBlock>
                                                                        CElseBlock
                                                                            RLiteral{'else'}
                                                                            CBlock
                                                                                RLiteral{'{'}
                                                                                CImports
                                                                                CStatements
                                                                                    CUnclosedStatement
                                                                                        CReturnStatement
                                                                                            RLiteral{'return'}
                                                                                            ROptional<ICExpression>
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'null'}
                                                                                                    ROptional<CTypeArguments>
                                                                                        RLiteral{';'}
                                                                                RLiteral{'}'}
                                                            RLiteral{'}'}
                                                    CTypedMethodDeclaration
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                                CAnnotation
                                                                    CLowerIdentifier{'shared'}
                                                                    ROptional<ICArguments>
                                                                CAnnotation
                                                                    CLowerIdentifier{'actual'}
                                                                    ROptional<ICArguments>
                                                        CUnionTypeCore
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Result'}
                                                                    ROptional<CTypeArguments>
                                                            RLiteral{'|'}
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Default'}
                                                                    ROptional<CTypeArguments>
                                                        CLowerIdentifier{'getOrDefault'}
                                                        ROptional<CTypeParameters>
                                                            CTypeParameters
                                                                RLiteral{'<'}
                                                                CTypeParameterList
                                                                    CTypeParameter
                                                                        ROptional<ICVariance>
                                                                        CUpperIdentifier{'Default'}
                                                                        ROptional<CTypeDefault>
                                                                RLiteral{'>'}
                                                        RPlus<CParameters>
                                                            CParameters
                                                                RLiteral{'('}
                                                                ROptional<CParameterList>
                                                                    CParameterList
                                                                        CParameter
                                                                            CAnnotations
                                                                                ROptional<ICStringLiteral>
                                                                                RStar<CAnnotation>
                                                                            CTypedValueParameter
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Object'}
                                                                                        ROptional<CTypeArguments>
                                                                                CLowerIdentifier{'key'}
                                                                                ROptional<CValueSpecifier>
                                                                        CParameter
                                                                            CAnnotations
                                                                                ROptional<ICStringLiteral>
                                                                                RStar<CAnnotation>
                                                                            CTypedValueParameter
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Default'}
                                                                                        ROptional<CTypeArguments>
                                                                                CLowerIdentifier{'default'}
                                                                                ROptional<CValueSpecifier>
                                                                RLiteral{')'}
                                                        ROptional<CTypeConstraints>
                                                        CBlock
                                                            RLiteral{'{'}
                                                            CImports
                                                            CStatements
                                                                CIfElseStatement
                                                                    RLiteral{'if'}
                                                                    CConditions
                                                                        RLiteral{'('}
                                                                        ROptional<CConditionList>
                                                                            CConditionList
                                                                                CIsCondition
                                                                                    ROptional<RLiteral>
                                                                                    RLiteral{'is'}
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Key'}
                                                                                            ROptional<CTypeArguments>
                                                                                    CIsConditionVariable
                                                                                        CLowerIdentifier{'key'}
                                                                                        ROptional<CValueSpecifier>
                                                                        RLiteral{')'}
                                                                    CBlock
                                                                        RLiteral{'{'}
                                                                        CImports
                                                                        CStatements
                                                                            CUnclosedStatement
                                                                                CReturnStatement
                                                                                    RLiteral{'return'}
                                                                                    ROptional<ICExpression>
                                                                                        CSwitchExpr
                                                                                            CSwitchHeader
                                                                                                RLiteral{'switch'}
                                                                                                RLiteral{'('}
                                                                                                CSpecifiedVariable
                                                                                                    CVariable
                                                                                                        ROptional<ICVariableType>
                                                                                                        CLowerIdentifier{'item'}
                                                                                                        RStar<CParameters>
                                                                                                    CValueSpecifier
                                                                                                        RLiteral{'='}
                                                                                                        CCallExpr
                                                                                                            CSelectionExpr
                                                                                                                CSelfReference{'outer'}
                                                                                                                CMemberSelectionOperator{'.'}
                                                                                                                CMemberReference
                                                                                                                    CLowerIdentifier{'lookup'}
                                                                                                                    ROptional<CTypeArguments>
                                                                                                            CPositionalArguments
                                                                                                                RLiteral{'('}
                                                                                                                ROptional<CSequencedArgumentList>
                                                                                                                    CSequencedArgumentList
                                                                                                                        CMemberReference
                                                                                                                            CLowerIdentifier{'key'}
                                                                                                                            ROptional<CTypeArguments>
                                                                                                                RLiteral{')'}
                                                                                                RLiteral{')'}
                                                                                            RPlus<CCaseExpression>
                                                                                                CCaseExpression
                                                                                                    ROptional<RLiteral>
                                                                                                    RLiteral{'case'}
                                                                                                    RLiteral{'('}
                                                                                                    CValueCaseList
                                                                                                        CSelectionExpr
                                                                                                            CTypeReference
                                                                                                                CUpperIdentifier{'Missing'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                            CMemberSelectionOperator{'.'}
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'instance'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                    RLiteral{')'}
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'default'}
                                                                                                        ROptional<CTypeArguments>
                                                                                            ROptional<CElseExpression>
                                                                                                CElseExpression
                                                                                                    RLiteral{'else'}
                                                                                                    CCallExpr
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'mapping'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                        CPositionalArguments
                                                                                                            RLiteral{'('}
                                                                                                            ROptional<CSequencedArgumentList>
                                                                                                                CSequencedArgumentList
                                                                                                                    CMemberReference
                                                                                                                        CLowerIdentifier{'key'}
                                                                                                                        ROptional<CTypeArguments>
                                                                                                                    CMemberReference
                                                                                                                        CLowerIdentifier{'item'}
                                                                                                                        ROptional<CTypeArguments>
                                                                                                            RLiteral{')'}
                                                                                RLiteral{';'}
                                                                        RLiteral{'}'}
                                                                    RStar<CElseIf>
                                                                    ROptional<CElseBlock>
                                                                        CElseBlock
                                                                            RLiteral{'else'}
                                                                            CBlock
                                                                                RLiteral{'{'}
                                                                                CImports
                                                                                CStatements
                                                                                    CUnclosedStatement
                                                                                        CReturnStatement
                                                                                            RLiteral{'return'}
                                                                                            ROptional<ICExpression>
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'default'}
                                                                                                    ROptional<CTypeArguments>
                                                                                        RLiteral{';'}
                                                                                RLiteral{'}'}
                                                            RLiteral{'}'}
                                                    CInferredMethodDeclaration
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                        CKwFunction{'function'}
                                                        CLowerIdentifier{'mapEntry'}
                                                        ROptional<CTypeParameters>
                                                        RPlus<CParameters>
                                                            CParameters
                                                                RLiteral{'('}
                                                                ROptional<CParameterList>
                                                                    CParameterList
                                                                        CParameter
                                                                            CAnnotations
                                                                                ROptional<ICStringLiteral>
                                                                                RStar<CAnnotation>
                                                                            CTypedValueParameter
                                                                                CEntryType
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Key'}
                                                                                            ROptional<CTypeArguments>
                                                                                    CEntryOperator{'->'}
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Item'}
                                                                                            ROptional<CTypeArguments>
                                                                                CLowerIdentifier{'entry'}
                                                                                ROptional<CValueSpecifier>
                                                                RLiteral{')'}
                                                        ROptional<CTypeConstraints>
                                                        COptionalFunctionSpecifier
                                                            ROptional<CFunctionSpecifier>
                                                                CFunctionSpecifier
                                                                    RLiteral{'=>'}
                                                                    CEntryExpr
                                                                        CSelectionExpr
                                                                            CMemberReference
                                                                                CLowerIdentifier{'entry'}
                                                                                ROptional<CTypeArguments>
                                                                            CMemberSelectionOperator{'.'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'key'}
                                                                                ROptional<CTypeArguments>
                                                                        CEntryOperator{'->'}
                                                                        CCallExpr
                                                                            CMemberReference
                                                                                CLowerIdentifier{'mapping'}
                                                                                ROptional<CTypeArguments>
                                                                            CPositionalArguments
                                                                                RLiteral{'('}
                                                                                ROptional<CSequencedArgumentList>
                                                                                    CSequencedArgumentList
                                                                                        CSelectionExpr
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'entry'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CMemberSelectionOperator{'.'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'key'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CSelectionExpr
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'entry'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CMemberSelectionOperator{'.'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'item'}
                                                                                                ROptional<CTypeArguments>
                                                                                RLiteral{')'}
                                                            RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CCallExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'iterator'}
                                                                    ROptional<CTypeArguments>
                                                                CPositionalArguments
                                                                    RLiteral{'('}
                                                                    ROptional<CSequencedArgumentList>
                                                                    RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CCallExpr
                                                                    CSelectionExpr
                                                                        CCallExpr
                                                                            CSelectionExpr
                                                                                CSelfReference{'outer'}
                                                                                CMemberSelectionOperator{'.'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'map'}
                                                                                    ROptional<CTypeArguments>
                                                                            CPositionalArguments
                                                                                RLiteral{'('}
                                                                                ROptional<CSequencedArgumentList>
                                                                                    CSequencedArgumentList
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'mapEntry'}
                                                                                            ROptional<CTypeArguments>
                                                                                RLiteral{')'}
                                                                        CMemberSelectionOperator{'.'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'iterator'}
                                                                            ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                        RLiteral{')'}
                                                        RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CMemberReference
                                                                CLowerIdentifier{'size'}
                                                                ROptional<CTypeArguments>
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CSelectionExpr
                                                                    CSelfReference{'outer'}
                                                                    CMemberSelectionOperator{'.'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'size'}
                                                                        ROptional<CTypeArguments>
                                                        RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CMemberReference
                                                                CLowerIdentifier{'keys'}
                                                                ROptional<CTypeArguments>
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CSelectionExpr
                                                                    CSelfReference{'outer'}
                                                                    CMemberSelectionOperator{'.'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'keys'}
                                                                        ROptional<CTypeArguments>
                                                        RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CCallExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'clone'}
                                                                    ROptional<CTypeArguments>
                                                                CPositionalArguments
                                                                    RLiteral{'('}
                                                                    ROptional<CSequencedArgumentList>
                                                                    RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CCallExpr
                                                                    CSelectionExpr
                                                                        CCallExpr
                                                                            CSelectionExpr
                                                                                CSelfReference{'outer'}
                                                                                CMemberSelectionOperator{'.'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'clone'}
                                                                                    ROptional<CTypeArguments>
                                                                            CPositionalArguments
                                                                                RLiteral{'('}
                                                                                ROptional<CSequencedArgumentList>
                                                                                RLiteral{')'}
                                                                        CMemberSelectionOperator{'.'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'mapItems'}
                                                                            ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'mapping'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                                        RLiteral{';'}
                                                RLiteral{'}'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Produces a map containing the elements of this map, after replacing every `null` item in the\r\n     map with the [[given default value|defaultValue]]. The item `null` does not ocur in the\r\n     resulting map.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CValueLiteral
                                                            CKwValue{'value'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'coalescedMap'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'since'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CLiteralString{'\"1.2.0\"'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Map'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Key'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CUnionTypeCore
                                                            CIntersectionTypeCore
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'Item'}
                                                                        ROptional<CTypeArguments>
                                                                CIntersectionOperator{'&'}
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'Object'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{'|'}
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Default'}
                                                                    ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'defaultNullItems'}
                            ROptional<CTypeParameters>
                                CTypeParameters
                                    RLiteral{'<'}
                                    CTypeParameterList
                                        CTypeParameter
                                            ROptional<ICVariance>
                                            CUpperIdentifier{'Default'}
                                            ROptional<CTypeDefault>
                                    RLiteral{'>'}
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"A default value that replaces `null` items.\"'}
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Default'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'defaultValue'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                                CTypeConstraints
                                    CTypeConstraint
                                        RLiteral{'given'}
                                        ROptional<ICTypeName>
                                            CUpperIdentifier{'Default'}
                                        ROptional<CTypeParameters>
                                        ROptional<CCaseTypes>
                                        ROptional<CSatisfiedTypes>
                                            CSatisfiedTypes
                                                RLiteral{'satisfies'}
                                                CUnionTypeList
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Object'}
                                                            ROptional<CTypeArguments>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CCallExpr
                                            CMemberReference
                                                CLowerIdentifier{'mapItems'}
                                                ROptional<CTypeArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CInferredFunctionExpr
                                                            ROptional<RLiteral>
                                                            ROptional<CTypeParameters>
                                                            RPlus<CParameters>
                                                                CParameters
                                                                    RLiteral{'('}
                                                                    ROptional<CParameterList>
                                                                        CParameterList
                                                                            CParameterReference
                                                                                CLowerIdentifier{'key'}
                                                                                ROptional<CValueSpecifier>
                                                                            CParameterReference
                                                                                CLowerIdentifier{'elem'}
                                                                                ROptional<CValueSpecifier>
                                                                    RLiteral{')'}
                                                            ROptional<CTypeConstraints>
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CThenElseExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'elem'}
                                                                        ROptional<CTypeArguments>
                                                                    CThenElseOperator{'else'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'defaultValue'}
                                                                        ROptional<CTypeArguments>
                                                RLiteral{')'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Produces a map by applying a [[filtering]] function to the [[keys]] of this map. This is a\r\n     lazy operation, returning a view of this map.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'since'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CLiteralString{'\"1.1.0\"'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Map'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Key'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Item'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'filterKeys'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The predicate function that filters the keys of this map, determining if there is a\r\n         corresponding entry in the resulting map.\"'}
                                                    RStar<CAnnotation>
                                                CTypedFunctionParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Boolean'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'filtering'}
                                                    ROptional<CTypeParameters>
                                                    RPlus<CParameters>
                                                        CParameters
                                                            RLiteral{'('}
                                                            ROptional<CParameterList>
                                                                CParameterList
                                                                    CParameter
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CTypedValueParameter
                                                                            CTypePath
                                                                                CTypeReference
                                                                                    CUpperIdentifier{'Key'}
                                                                                    ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'key'}
                                                                            ROptional<CValueSpecifier>
                                                            RLiteral{')'}
                                                    ROptional<CFunctionSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CObjectExpr
                                            RLiteral{'object'}
                                            ROptional<CExtendedType>
                                                CExtendedType
                                                    RLiteral{'extends'}
                                                    CClassInstantiation
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Object'}
                                                                ROptional<CTypeArguments>
                                                        ROptional<ICArguments>
                                                            CPositionalArguments
                                                                RLiteral{'('}
                                                                ROptional<CSequencedArgumentList>
                                                                RLiteral{')'}
                                            ROptional<CSatisfiedTypes>
                                                CSatisfiedTypes
                                                    RLiteral{'satisfies'}
                                                    CUnionTypeList
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Map'}
                                                                ROptional<CTypeArguments>
                                                                    CTypeArguments
                                                                        RLiteral{'<'}
                                                                        ROptional<CTypeArgumentList>
                                                                            CTypeArgumentList
                                                                                CVariancedType
                                                                                    ROptional<ICVariance>
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Key'}
                                                                                            ROptional<CTypeArguments>
                                                                                CVariancedType
                                                                                    ROptional<ICVariance>
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Item'}
                                                                                            ROptional<CTypeArguments>
                                                                        RLiteral{'>'}
                                            CBlock
                                                RLiteral{'{'}
                                                CImports
                                                CStatements
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CParametrizedMember
                                                                CLowerIdentifier{'get'}
                                                                ROptional<CTypeParameters>
                                                                RPlus<CParameters>
                                                                    CParameters
                                                                        RLiteral{'('}
                                                                        ROptional<CParameterList>
                                                                            CParameterList
                                                                                CParameter
                                                                                    CAnnotations
                                                                                        ROptional<ICStringLiteral>
                                                                                        RStar<CAnnotation>
                                                                                    CTypedValueParameter
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Object'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CLowerIdentifier{'key'}
                                                                                        ROptional<CValueSpecifier>
                                                                        RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CIfExpr
                                                                    RLiteral{'if'}
                                                                    CConditions
                                                                        RLiteral{'('}
                                                                        ROptional<CConditionList>
                                                                            CConditionList
                                                                                CIsCondition
                                                                                    ROptional<RLiteral>
                                                                                    RLiteral{'is'}
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Key'}
                                                                                            ROptional<CTypeArguments>
                                                                                    CIsConditionVariable
                                                                                        CLowerIdentifier{'key'}
                                                                                        ROptional<CValueSpecifier>
                                                                                CCallExpr
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'filtering'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CPositionalArguments
                                                                                        RLiteral{'('}
                                                                                        ROptional<CSequencedArgumentList>
                                                                                            CSequencedArgumentList
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'key'}
                                                                                                    ROptional<CTypeArguments>
                                                                                        RLiteral{')'}
                                                                        RLiteral{')'}
                                                                    CThenExpression
                                                                        RLiteral{'then'}
                                                                        CIndexedExpr
                                                                            CSelfReference{'outer'}
                                                                            RLiteral{'['}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'key'}
                                                                                ROptional<CTypeArguments>
                                                                            RLiteral{']'}
                                                                    CElseExpression
                                                                        RLiteral{'else'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'null'}
                                                                            ROptional<CTypeArguments>
                                                        RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CParametrizedMember
                                                                CLowerIdentifier{'defines'}
                                                                ROptional<CTypeParameters>
                                                                RPlus<CParameters>
                                                                    CParameters
                                                                        RLiteral{'('}
                                                                        ROptional<CParameterList>
                                                                            CParameterList
                                                                                CParameter
                                                                                    CAnnotations
                                                                                        ROptional<ICStringLiteral>
                                                                                        RStar<CAnnotation>
                                                                                    CTypedValueParameter
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Object'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CLowerIdentifier{'key'}
                                                                                        ROptional<CValueSpecifier>
                                                                        RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CIfExpr
                                                                    RLiteral{'if'}
                                                                    CConditions
                                                                        RLiteral{'('}
                                                                        ROptional<CConditionList>
                                                                            CConditionList
                                                                                CIsCondition
                                                                                    ROptional<RLiteral>
                                                                                    RLiteral{'is'}
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Key'}
                                                                                            ROptional<CTypeArguments>
                                                                                    CIsConditionVariable
                                                                                        CLowerIdentifier{'key'}
                                                                                        ROptional<CValueSpecifier>
                                                                                CCallExpr
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'filtering'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CPositionalArguments
                                                                                        RLiteral{'('}
                                                                                        ROptional<CSequencedArgumentList>
                                                                                            CSequencedArgumentList
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'key'}
                                                                                                    ROptional<CTypeArguments>
                                                                                        RLiteral{')'}
                                                                        RLiteral{')'}
                                                                    CThenExpression
                                                                        RLiteral{'then'}
                                                                        CCallExpr
                                                                            CSelectionExpr
                                                                                CSelfReference{'outer'}
                                                                                CMemberSelectionOperator{'.'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'defines'}
                                                                                    ROptional<CTypeArguments>
                                                                            CPositionalArguments
                                                                                RLiteral{'('}
                                                                                ROptional<CSequencedArgumentList>
                                                                                    CSequencedArgumentList
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'key'}
                                                                                            ROptional<CTypeArguments>
                                                                                RLiteral{')'}
                                                                    CElseExpression
                                                                        RLiteral{'else'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'false'}
                                                                            ROptional<CTypeArguments>
                                                        RLiteral{';'}
                                                    CTypedMethodDeclaration
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                                CAnnotation
                                                                    CLowerIdentifier{'shared'}
                                                                    ROptional<ICArguments>
                                                                CAnnotation
                                                                    CLowerIdentifier{'actual'}
                                                                    ROptional<ICArguments>
                                                        CUnionTypeCore
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Item'}
                                                                    ROptional<CTypeArguments>
                                                            RLiteral{'|'}
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Default'}
                                                                    ROptional<CTypeArguments>
                                                        CLowerIdentifier{'getOrDefault'}
                                                        ROptional<CTypeParameters>
                                                            CTypeParameters
                                                                RLiteral{'<'}
                                                                CTypeParameterList
                                                                    CTypeParameter
                                                                        ROptional<ICVariance>
                                                                        CUpperIdentifier{'Default'}
                                                                        ROptional<CTypeDefault>
                                                                RLiteral{'>'}
                                                        RPlus<CParameters>
                                                            CParameters
                                                                RLiteral{'('}
                                                                ROptional<CParameterList>
                                                                    CParameterList
                                                                        CParameter
                                                                            CAnnotations
                                                                                ROptional<ICStringLiteral>
                                                                                RStar<CAnnotation>
                                                                            CTypedValueParameter
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Object'}
                                                                                        ROptional<CTypeArguments>
                                                                                CLowerIdentifier{'key'}
                                                                                ROptional<CValueSpecifier>
                                                                        CParameter
                                                                            CAnnotations
                                                                                ROptional<ICStringLiteral>
                                                                                RStar<CAnnotation>
                                                                            CTypedValueParameter
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Default'}
                                                                                        ROptional<CTypeArguments>
                                                                                CLowerIdentifier{'default'}
                                                                                ROptional<CValueSpecifier>
                                                                RLiteral{')'}
                                                        ROptional<CTypeConstraints>
                                                        COptionalFunctionSpecifier
                                                            ROptional<CFunctionSpecifier>
                                                                CFunctionSpecifier
                                                                    RLiteral{'=>'}
                                                                    CIfExpr
                                                                        RLiteral{'if'}
                                                                        CConditions
                                                                            RLiteral{'('}
                                                                            ROptional<CConditionList>
                                                                                CConditionList
                                                                                    CIsCondition
                                                                                        ROptional<RLiteral>
                                                                                        RLiteral{'is'}
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Key'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CIsConditionVariable
                                                                                            CLowerIdentifier{'key'}
                                                                                            ROptional<CValueSpecifier>
                                                                                    CCallExpr
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'filtering'}
                                                                                            ROptional<CTypeArguments>
                                                                                        CPositionalArguments
                                                                                            RLiteral{'('}
                                                                                            ROptional<CSequencedArgumentList>
                                                                                                CSequencedArgumentList
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'key'}
                                                                                                        ROptional<CTypeArguments>
                                                                                            RLiteral{')'}
                                                                            RLiteral{')'}
                                                                        CThenExpression
                                                                            RLiteral{'then'}
                                                                            CCallExpr
                                                                                CSelectionExpr
                                                                                    CSelfReference{'outer'}
                                                                                    CMemberSelectionOperator{'.'}
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'getOrDefault'}
                                                                                        ROptional<CTypeArguments>
                                                                                CPositionalArguments
                                                                                    RLiteral{'('}
                                                                                    ROptional<CSequencedArgumentList>
                                                                                        CSequencedArgumentList
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'key'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'default'}
                                                                                                ROptional<CTypeArguments>
                                                                                    RLiteral{')'}
                                                                        CElseExpression
                                                                            RLiteral{'else'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'default'}
                                                                                ROptional<CTypeArguments>
                                                            RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CCallExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'iterator'}
                                                                    ROptional<CTypeArguments>
                                                                CPositionalArguments
                                                                    RLiteral{'('}
                                                                    ROptional<CSequencedArgumentList>
                                                                    RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CCallExpr
                                                                    CSelectionExpr
                                                                        CCallExpr
                                                                            CSelectionExpr
                                                                                CSelfReference{'outer'}
                                                                                CMemberSelectionOperator{'.'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'filter'}
                                                                                    ROptional<CTypeArguments>
                                                                            CPositionalArguments
                                                                                RLiteral{'('}
                                                                                ROptional<CSequencedArgumentList>
                                                                                    CSequencedArgumentList
                                                                                        CCallExpr
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'forKey'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CPositionalArguments
                                                                                                RLiteral{'('}
                                                                                                ROptional<CSequencedArgumentList>
                                                                                                    CSequencedArgumentList
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'filtering'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                RLiteral{')'}
                                                                                RLiteral{')'}
                                                                        CMemberSelectionOperator{'.'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'iterator'}
                                                                            ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                        RLiteral{')'}
                                                        RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CCallExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'clone'}
                                                                    ROptional<CTypeArguments>
                                                                CPositionalArguments
                                                                    RLiteral{'('}
                                                                    ROptional<CSequencedArgumentList>
                                                                    RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CCallExpr
                                                                    CSelectionExpr
                                                                        CCallExpr
                                                                            CSelectionExpr
                                                                                CSelfReference{'outer'}
                                                                                CMemberSelectionOperator{'.'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'clone'}
                                                                                    ROptional<CTypeArguments>
                                                                            CPositionalArguments
                                                                                RLiteral{'('}
                                                                                ROptional<CSequencedArgumentList>
                                                                                RLiteral{')'}
                                                                        CMemberSelectionOperator{'.'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'filterKeys'}
                                                                            ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'filtering'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                                        RLiteral{';'}
                                                RLiteral{'}'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Produces a map whose keys are the union of the keys of this map, with the keys of the given\r\n     [[map|other]]. For any given key in the resulting map, its associated item is the item\r\n     associated with the key in the given map, if any, or the item associated with the key in this\r\n     map otherwise.\r\n     \r\n     That is, for any `key` in the resulting patched map:\r\n     \r\n         map.patch(other)[key] == other.getOrDefault(key, map[key])\r\n     \r\n     This is a lazy operation producing a view of this map and the given map.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'since'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CLiteralString{'\"1.1.0\"'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Map'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CUnionTypeCore
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Key'}
                                                                    ROptional<CTypeArguments>
                                                            RLiteral{'|'}
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'OtherKey'}
                                                                    ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CUnionTypeCore
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Item'}
                                                                    ROptional<CTypeArguments>
                                                            RLiteral{'|'}
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'OtherItem'}
                                                                    ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'patch'}
                            ROptional<CTypeParameters>
                                CTypeParameters
                                    RLiteral{'<'}
                                    CTypeParameterList
                                        CTypeParameter
                                            ROptional<ICVariance>
                                            CUpperIdentifier{'OtherKey'}
                                            ROptional<CTypeDefault>
                                        CTypeParameter
                                            ROptional<ICVariance>
                                            CUpperIdentifier{'OtherItem'}
                                            ROptional<CTypeDefault>
                                    RLiteral{'>'}
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Map'}
                                                            ROptional<CTypeArguments>
                                                                CTypeArguments
                                                                    RLiteral{'<'}
                                                                    ROptional<CTypeArgumentList>
                                                                        CTypeArgumentList
                                                                            CVariancedType
                                                                                ROptional<ICVariance>
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'OtherKey'}
                                                                                        ROptional<CTypeArguments>
                                                                            CVariancedType
                                                                                ROptional<ICVariance>
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'OtherItem'}
                                                                                        ROptional<CTypeArguments>
                                                                    RLiteral{'>'}
                                                    CLowerIdentifier{'other'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                                CTypeConstraints
                                    CTypeConstraint
                                        RLiteral{'given'}
                                        ROptional<ICTypeName>
                                            CUpperIdentifier{'OtherKey'}
                                        ROptional<CTypeParameters>
                                        ROptional<CCaseTypes>
                                        ROptional<CSatisfiedTypes>
                                            CSatisfiedTypes
                                                RLiteral{'satisfies'}
                                                CUnionTypeList
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Object'}
                                                            ROptional<CTypeArguments>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CObjectExpr
                                            RLiteral{'object'}
                                            ROptional<CExtendedType>
                                                CExtendedType
                                                    RLiteral{'extends'}
                                                    CClassInstantiation
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Object'}
                                                                ROptional<CTypeArguments>
                                                        ROptional<ICArguments>
                                                            CPositionalArguments
                                                                RLiteral{'('}
                                                                ROptional<CSequencedArgumentList>
                                                                RLiteral{')'}
                                            ROptional<CSatisfiedTypes>
                                                CSatisfiedTypes
                                                    RLiteral{'satisfies'}
                                                    CUnionTypeList
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Map'}
                                                                ROptional<CTypeArguments>
                                                                    CTypeArguments
                                                                        RLiteral{'<'}
                                                                        ROptional<CTypeArgumentList>
                                                                            CTypeArgumentList
                                                                                CVariancedType
                                                                                    ROptional<ICVariance>
                                                                                    CUnionTypeCore
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Key'}
                                                                                                ROptional<CTypeArguments>
                                                                                        RLiteral{'|'}
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'OtherKey'}
                                                                                                ROptional<CTypeArguments>
                                                                                CVariancedType
                                                                                    ROptional<ICVariance>
                                                                                    CUnionTypeCore
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Item'}
                                                                                                ROptional<CTypeArguments>
                                                                                        RLiteral{'|'}
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'OtherItem'}
                                                                                                ROptional<CTypeArguments>
                                                                        RLiteral{'>'}
                                            CBlock
                                                RLiteral{'{'}
                                                CImports
                                                CStatements
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CParametrizedMember
                                                                CLowerIdentifier{'defines'}
                                                                ROptional<CTypeParameters>
                                                                RPlus<CParameters>
                                                                    CParameters
                                                                        RLiteral{'('}
                                                                        ROptional<CParameterList>
                                                                            CParameterList
                                                                                CParameter
                                                                                    CAnnotations
                                                                                        ROptional<ICStringLiteral>
                                                                                        RStar<CAnnotation>
                                                                                    CTypedValueParameter
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Object'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CLowerIdentifier{'key'}
                                                                                        ROptional<CValueSpecifier>
                                                                        RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CDisjunctionExpr
                                                                    CCallExpr
                                                                        CSelectionExpr
                                                                            CMemberReference
                                                                                CLowerIdentifier{'other'}
                                                                                ROptional<CTypeArguments>
                                                                            CMemberSelectionOperator{'.'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'defines'}
                                                                                ROptional<CTypeArguments>
                                                                        CPositionalArguments
                                                                            RLiteral{'('}
                                                                            ROptional<CSequencedArgumentList>
                                                                                CSequencedArgumentList
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'key'}
                                                                                        ROptional<CTypeArguments>
                                                                            RLiteral{')'}
                                                                    CDisjunctionOperator{'||'}
                                                                    CCallExpr
                                                                        CSelectionExpr
                                                                            CSelfReference{'outer'}
                                                                            CMemberSelectionOperator{'.'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'defines'}
                                                                                ROptional<CTypeArguments>
                                                                        CPositionalArguments
                                                                            RLiteral{'('}
                                                                            ROptional<CSequencedArgumentList>
                                                                                CSequencedArgumentList
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'key'}
                                                                                        ROptional<CTypeArguments>
                                                                            RLiteral{')'}
                                                        RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CParametrizedMember
                                                                CLowerIdentifier{'get'}
                                                                ROptional<CTypeParameters>
                                                                RPlus<CParameters>
                                                                    CParameters
                                                                        RLiteral{'('}
                                                                        ROptional<CParameterList>
                                                                            CParameterList
                                                                                CParameter
                                                                                    CAnnotations
                                                                                        ROptional<ICStringLiteral>
                                                                                        RStar<CAnnotation>
                                                                                    CTypedValueParameter
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Object'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CLowerIdentifier{'key'}
                                                                                        ROptional<CValueSpecifier>
                                                                        RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CSwitchExpr
                                                                    CSwitchHeader
                                                                        RLiteral{'switch'}
                                                                        RLiteral{'('}
                                                                        CSpecifiedVariable
                                                                            CVariable
                                                                                ROptional<ICVariableType>
                                                                                CLowerIdentifier{'result'}
                                                                                RStar<CParameters>
                                                                            CValueSpecifier
                                                                                RLiteral{'='}
                                                                                CCallExpr
                                                                                    CSelectionExpr
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'other'}
                                                                                            ROptional<CTypeArguments>
                                                                                        CMemberSelectionOperator{'.'}
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'lookup'}
                                                                                            ROptional<CTypeArguments>
                                                                                    CPositionalArguments
                                                                                        RLiteral{'('}
                                                                                        ROptional<CSequencedArgumentList>
                                                                                            CSequencedArgumentList
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'key'}
                                                                                                    ROptional<CTypeArguments>
                                                                                        RLiteral{')'}
                                                                        RLiteral{')'}
                                                                    RPlus<CCaseExpression>
                                                                        CCaseExpression
                                                                            ROptional<RLiteral>
                                                                            RLiteral{'case'}
                                                                            RLiteral{'('}
                                                                            CValueCaseList
                                                                                CSelectionExpr
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Missing'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CMemberSelectionOperator{'.'}
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'instance'}
                                                                                        ROptional<CTypeArguments>
                                                                            RLiteral{')'}
                                                                            CCallExpr
                                                                                CSelectionExpr
                                                                                    CSelfReference{'outer'}
                                                                                    CMemberSelectionOperator{'.'}
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'get'}
                                                                                        ROptional<CTypeArguments>
                                                                                CPositionalArguments
                                                                                    RLiteral{'('}
                                                                                    ROptional<CSequencedArgumentList>
                                                                                        CSequencedArgumentList
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'key'}
                                                                                                ROptional<CTypeArguments>
                                                                                    RLiteral{')'}
                                                                    ROptional<CElseExpression>
                                                                        CElseExpression
                                                                            RLiteral{'else'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'result'}
                                                                                ROptional<CTypeArguments>
                                                        RLiteral{';'}
                                                    CTypedMethodDeclaration
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                                CAnnotation
                                                                    CLowerIdentifier{'shared'}
                                                                    ROptional<ICArguments>
                                                                CAnnotation
                                                                    CLowerIdentifier{'actual'}
                                                                    ROptional<ICArguments>
                                                        CUnionTypeCore
                                                            CUnionTypeCore
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'OtherItem'}
                                                                        ROptional<CTypeArguments>
                                                                RLiteral{'|'}
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'Item'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{'|'}
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Default'}
                                                                    ROptional<CTypeArguments>
                                                        CLowerIdentifier{'getOrDefault'}
                                                        ROptional<CTypeParameters>
                                                            CTypeParameters
                                                                RLiteral{'<'}
                                                                CTypeParameterList
                                                                    CTypeParameter
                                                                        ROptional<ICVariance>
                                                                        CUpperIdentifier{'Default'}
                                                                        ROptional<CTypeDefault>
                                                                RLiteral{'>'}
                                                        RPlus<CParameters>
                                                            CParameters
                                                                RLiteral{'('}
                                                                ROptional<CParameterList>
                                                                    CParameterList
                                                                        CParameter
                                                                            CAnnotations
                                                                                ROptional<ICStringLiteral>
                                                                                RStar<CAnnotation>
                                                                            CTypedValueParameter
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Object'}
                                                                                        ROptional<CTypeArguments>
                                                                                CLowerIdentifier{'key'}
                                                                                ROptional<CValueSpecifier>
                                                                        CParameter
                                                                            CAnnotations
                                                                                ROptional<ICStringLiteral>
                                                                                RStar<CAnnotation>
                                                                            CTypedValueParameter
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Default'}
                                                                                        ROptional<CTypeArguments>
                                                                                CLowerIdentifier{'default'}
                                                                                ROptional<CValueSpecifier>
                                                                RLiteral{')'}
                                                        ROptional<CTypeConstraints>
                                                        COptionalFunctionSpecifier
                                                            ROptional<CFunctionSpecifier>
                                                                CFunctionSpecifier
                                                                    RLiteral{'=>'}
                                                                    CSwitchExpr
                                                                        CSwitchHeader
                                                                            RLiteral{'switch'}
                                                                            RLiteral{'('}
                                                                            CSpecifiedVariable
                                                                                CVariable
                                                                                    ROptional<ICVariableType>
                                                                                    CLowerIdentifier{'result'}
                                                                                    RStar<CParameters>
                                                                                CValueSpecifier
                                                                                    RLiteral{'='}
                                                                                    CCallExpr
                                                                                        CSelectionExpr
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'other'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CMemberSelectionOperator{'.'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'lookup'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CPositionalArguments
                                                                                            RLiteral{'('}
                                                                                            ROptional<CSequencedArgumentList>
                                                                                                CSequencedArgumentList
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'key'}
                                                                                                        ROptional<CTypeArguments>
                                                                                            RLiteral{')'}
                                                                            RLiteral{')'}
                                                                        RPlus<CCaseExpression>
                                                                            CCaseExpression
                                                                                ROptional<RLiteral>
                                                                                RLiteral{'case'}
                                                                                RLiteral{'('}
                                                                                CValueCaseList
                                                                                    CSelectionExpr
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Missing'}
                                                                                            ROptional<CTypeArguments>
                                                                                        CMemberSelectionOperator{'.'}
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'instance'}
                                                                                            ROptional<CTypeArguments>
                                                                                RLiteral{')'}
                                                                                CCallExpr
                                                                                    CSelectionExpr
                                                                                        CSelfReference{'outer'}
                                                                                        CMemberSelectionOperator{'.'}
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'getOrDefault'}
                                                                                            ROptional<CTypeArguments>
                                                                                    CPositionalArguments
                                                                                        RLiteral{'('}
                                                                                        ROptional<CSequencedArgumentList>
                                                                                            CSequencedArgumentList
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'key'}
                                                                                                    ROptional<CTypeArguments>
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'default'}
                                                                                                    ROptional<CTypeArguments>
                                                                                        RLiteral{')'}
                                                                        ROptional<CElseExpression>
                                                                            CElseExpression
                                                                                RLiteral{'else'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'result'}
                                                                                    ROptional<CTypeArguments>
                                                            RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CCallExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'clone'}
                                                                    ROptional<CTypeArguments>
                                                                CPositionalArguments
                                                                    RLiteral{'('}
                                                                    ROptional<CSequencedArgumentList>
                                                                    RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CCallExpr
                                                                    CSelectionExpr
                                                                        CCallExpr
                                                                            CSelectionExpr
                                                                                CSelfReference{'outer'}
                                                                                CMemberSelectionOperator{'.'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'clone'}
                                                                                    ROptional<CTypeArguments>
                                                                            CPositionalArguments
                                                                                RLiteral{'('}
                                                                                ROptional<CSequencedArgumentList>
                                                                                RLiteral{')'}
                                                                        CMemberSelectionOperator{'.'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'patch'}
                                                                            ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CCallExpr
                                                                                    CSelectionExpr
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'other'}
                                                                                            ROptional<CTypeArguments>
                                                                                        CMemberSelectionOperator{'.'}
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'clone'}
                                                                                            ROptional<CTypeArguments>
                                                                                    CPositionalArguments
                                                                                        RLiteral{'('}
                                                                                        ROptional<CSequencedArgumentList>
                                                                                        RLiteral{')'}
                                                                        RLiteral{')'}
                                                        RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CParametrizedMember
                                                                CLowerIdentifier{'contains'}
                                                                ROptional<CTypeParameters>
                                                                RPlus<CParameters>
                                                                    CParameters
                                                                        RLiteral{'('}
                                                                        ROptional<CParameterList>
                                                                            CParameterList
                                                                                CParameter
                                                                                    CAnnotations
                                                                                        ROptional<ICStringLiteral>
                                                                                        RStar<CAnnotation>
                                                                                    CTypedValueParameter
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Object'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CLowerIdentifier{'entry'}
                                                                                        ROptional<CValueSpecifier>
                                                                        RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CIfExpr
                                                                    RLiteral{'if'}
                                                                    CConditions
                                                                        RLiteral{'('}
                                                                        ROptional<CConditionList>
                                                                            CConditionList
                                                                                CIsCondition
                                                                                    ROptional<RLiteral>
                                                                                    RLiteral{'is'}
                                                                                    CEntryType
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Object'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CEntryOperator{'->'}
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Anything'}
                                                                                                ROptional<CTypeArguments>
                                                                                    CIsConditionVariable
                                                                                        CLowerIdentifier{'entry'}
                                                                                        ROptional<CValueSpecifier>
                                                                        RLiteral{')'}
                                                                    CThenExpression
                                                                        RLiteral{'then'}
                                                                        CDisjunctionExpr
                                                                            CComparisonExpr
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'entry'}
                                                                                    ROptional<CTypeArguments>
                                                                                CComparisonOperator{'in'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'other'}
                                                                                    ROptional<CTypeArguments>
                                                                            CDisjunctionOperator{'||'}
                                                                            CConjunctionExpr
                                                                                CLogicalNegationExpr
                                                                                    CNotOperator{'!'}
                                                                                    CCallExpr
                                                                                        CSelectionExpr
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'other'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CMemberSelectionOperator{'.'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'defines'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CPositionalArguments
                                                                                            RLiteral{'('}
                                                                                            ROptional<CSequencedArgumentList>
                                                                                                CSequencedArgumentList
                                                                                                    CSelectionExpr
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'entry'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                        CMemberSelectionOperator{'.'}
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'key'}
                                                                                                            ROptional<CTypeArguments>
                                                                                            RLiteral{')'}
                                                                                CConjunctionOperator{'&&'}
                                                                                CComparisonExpr
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'entry'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CComparisonOperator{'in'}
                                                                                    CSelfReference{'outer'}
                                                                    CElseExpression
                                                                        RLiteral{'else'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'false'}
                                                                            ROptional<CTypeArguments>
                                                        RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CMemberReference
                                                                CLowerIdentifier{'size'}
                                                                ROptional<CTypeArguments>
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CAdditiveExpr
                                                                    CSelectionExpr
                                                                        CSelfReference{'outer'}
                                                                        CMemberSelectionOperator{'.'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'size'}
                                                                            ROptional<CTypeArguments>
                                                                    CAdditiveOperator{'+'}
                                                                    CCallExpr
                                                                        CSelectionExpr
                                                                            CSelectionExpr
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'other'}
                                                                                    ROptional<CTypeArguments>
                                                                                CMemberSelectionOperator{'.'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'keys'}
                                                                                    ROptional<CTypeArguments>
                                                                            CMemberSelectionOperator{'.'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'count'}
                                                                                ROptional<CTypeArguments>
                                                                        CPositionalArguments
                                                                            RLiteral{'('}
                                                                            ROptional<CSequencedArgumentList>
                                                                                CSequencedArgumentList
                                                                                    CCallExpr
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'not'}
                                                                                            ROptional<CTypeArguments>
                                                                                        CPositionalArguments
                                                                                            RLiteral{'('}
                                                                                            ROptional<CSequencedArgumentList>
                                                                                                CSequencedArgumentList
                                                                                                    CSelectionExpr
                                                                                                        CSelfReference{'outer'}
                                                                                                        CMemberSelectionOperator{'.'}
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'defines'}
                                                                                                            ROptional<CTypeArguments>
                                                                                            RLiteral{')'}
                                                                            RLiteral{')'}
                                                        RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CCallExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'iterator'}
                                                                    ROptional<CTypeArguments>
                                                                CPositionalArguments
                                                                    RLiteral{'('}
                                                                    ROptional<CSequencedArgumentList>
                                                                    RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CCallExpr
                                                                    CTypeReference
                                                                        CUpperIdentifier{'ChainedIterator'}
                                                                        ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'other'}
                                                                                    ROptional<CTypeArguments>
                                                                                CCallExpr
                                                                                    CSelectionExpr
                                                                                        CSelfReference{'outer'}
                                                                                        CMemberSelectionOperator{'.'}
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'filter'}
                                                                                            ROptional<CTypeArguments>
                                                                                    CPositionalArguments
                                                                                        RLiteral{'('}
                                                                                        ROptional<CSequencedArgumentList>
                                                                                            CSequencedArgumentList
                                                                                                CInferredFunctionExpr
                                                                                                    ROptional<RLiteral>
                                                                                                    ROptional<CTypeParameters>
                                                                                                    RPlus<CParameters>
                                                                                                        CParameters
                                                                                                            RLiteral{'('}
                                                                                                            ROptional<CParameterList>
                                                                                                                CParameterList
                                                                                                                    CEntryPattern
                                                                                                                        CVariable
                                                                                                                            ROptional<ICVariableType>
                                                                                                                            CLowerIdentifier{'key'}
                                                                                                                            RStar<CParameters>
                                                                                                                        CEntryOperator{'->'}
                                                                                                                        CVariable
                                                                                                                            ROptional<ICVariableType>
                                                                                                                            CLowerIdentifier{'_'}
                                                                                                                            RStar<CParameters>
                                                                                                            RLiteral{')'}
                                                                                                    ROptional<CTypeConstraints>
                                                                                                    CFunctionSpecifier
                                                                                                        RLiteral{'=>'}
                                                                                                        CLogicalNegationExpr
                                                                                                            CNotOperator{'!'}
                                                                                                            CCallExpr
                                                                                                                CSelectionExpr
                                                                                                                    CMemberReference
                                                                                                                        CLowerIdentifier{'other'}
                                                                                                                        ROptional<CTypeArguments>
                                                                                                                    CMemberSelectionOperator{'.'}
                                                                                                                    CMemberReference
                                                                                                                        CLowerIdentifier{'defines'}
                                                                                                                        ROptional<CTypeArguments>
                                                                                                                CPositionalArguments
                                                                                                                    RLiteral{'('}
                                                                                                                    ROptional<CSequencedArgumentList>
                                                                                                                        CSequencedArgumentList
                                                                                                                            CMemberReference
                                                                                                                                CLowerIdentifier{'key'}
                                                                                                                                ROptional<CTypeArguments>
                                                                                                                    RLiteral{')'}
                                                                                        RLiteral{')'}
                                                                        RLiteral{')'}
                                                        RLiteral{';'}
                                                RLiteral{'}'}
                                RLiteral{';'}
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"A map with every entry of this map whose item is non-null.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'defaultNullItems'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'since'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CLiteralString{'\"1.2.0\"'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Map'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Key'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CIntersectionTypeCore
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Item'}
                                                                    ROptional<CTypeArguments>
                                                            CIntersectionOperator{'&'}
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Object'}
                                                                    ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'coalescedMap'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CObjectExpr
                                            RLiteral{'object'}
                                            ROptional<CExtendedType>
                                                CExtendedType
                                                    RLiteral{'extends'}
                                                    CClassInstantiation
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Object'}
                                                                ROptional<CTypeArguments>
                                                        ROptional<ICArguments>
                                                            CPositionalArguments
                                                                RLiteral{'('}
                                                                ROptional<CSequencedArgumentList>
                                                                RLiteral{')'}
                                            ROptional<CSatisfiedTypes>
                                                CSatisfiedTypes
                                                    RLiteral{'satisfies'}
                                                    CUnionTypeList
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Map'}
                                                                ROptional<CTypeArguments>
                                                                    CTypeArguments
                                                                        RLiteral{'<'}
                                                                        ROptional<CTypeArgumentList>
                                                                            CTypeArgumentList
                                                                                CVariancedType
                                                                                    ROptional<ICVariance>
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Key'}
                                                                                            ROptional<CTypeArguments>
                                                                                CVariancedType
                                                                                    ROptional<ICVariance>
                                                                                    CIntersectionTypeCore
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Item'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CIntersectionOperator{'&'}
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Object'}
                                                                                                ROptional<CTypeArguments>
                                                                        RLiteral{'>'}
                                            CBlock
                                                RLiteral{'{'}
                                                CImports
                                                CStatements
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CParametrizedMember
                                                                CLowerIdentifier{'defines'}
                                                                ROptional<CTypeParameters>
                                                                RPlus<CParameters>
                                                                    CParameters
                                                                        RLiteral{'('}
                                                                        ROptional<CParameterList>
                                                                            CParameterList
                                                                                CParameter
                                                                                    CAnnotations
                                                                                        ROptional<ICStringLiteral>
                                                                                        RStar<CAnnotation>
                                                                                    CTypedValueParameter
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Object'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CLowerIdentifier{'key'}
                                                                                        ROptional<CValueSpecifier>
                                                                        RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CExistsExpr
                                                                    CIndexedExpr
                                                                        CSelfReference{'outer'}
                                                                        RLiteral{'['}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'key'}
                                                                            ROptional<CTypeArguments>
                                                                        RLiteral{']'}
                                                                    RLiteral{'exists'}
                                                        RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CParametrizedMember
                                                                CLowerIdentifier{'get'}
                                                                ROptional<CTypeParameters>
                                                                RPlus<CParameters>
                                                                    CParameters
                                                                        RLiteral{'('}
                                                                        ROptional<CParameterList>
                                                                            CParameterList
                                                                                CParameter
                                                                                    CAnnotations
                                                                                        ROptional<ICStringLiteral>
                                                                                        RStar<CAnnotation>
                                                                                    CTypedValueParameter
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Object'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CLowerIdentifier{'key'}
                                                                                        ROptional<CValueSpecifier>
                                                                        RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CTypecheckExpr
                                                                    CIndexedExpr
                                                                        CSelfReference{'outer'}
                                                                        RLiteral{'['}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'key'}
                                                                            ROptional<CTypeArguments>
                                                                        RLiteral{']'}
                                                                    CTypeOperator{'of'}
                                                                    CNullableType
                                                                        CGroupedType
                                                                            RLiteral{'<'}
                                                                            CIntersectionTypeCore
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Item'}
                                                                                        ROptional<CTypeArguments>
                                                                                CIntersectionOperator{'&'}
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Object'}
                                                                                        ROptional<CTypeArguments>
                                                                            RLiteral{'>'}
                                                                        RLiteral{'?'}
                                                        RLiteral{';'}
                                                    CTypedMethodDeclaration
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                                CAnnotation
                                                                    CLowerIdentifier{'shared'}
                                                                    ROptional<ICArguments>
                                                                CAnnotation
                                                                    CLowerIdentifier{'actual'}
                                                                    ROptional<ICArguments>
                                                        CUnionTypeCore
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Default'}
                                                                    ROptional<CTypeArguments>
                                                            RLiteral{'|'}
                                                            CIntersectionTypeCore
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'Item'}
                                                                        ROptional<CTypeArguments>
                                                                CIntersectionOperator{'&'}
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'Object'}
                                                                        ROptional<CTypeArguments>
                                                        CLowerIdentifier{'getOrDefault'}
                                                        ROptional<CTypeParameters>
                                                            CTypeParameters
                                                                RLiteral{'<'}
                                                                CTypeParameterList
                                                                    CTypeParameter
                                                                        ROptional<ICVariance>
                                                                        CUpperIdentifier{'Default'}
                                                                        ROptional<CTypeDefault>
                                                                RLiteral{'>'}
                                                        RPlus<CParameters>
                                                            CParameters
                                                                RLiteral{'('}
                                                                ROptional<CParameterList>
                                                                    CParameterList
                                                                        CParameter
                                                                            CAnnotations
                                                                                ROptional<ICStringLiteral>
                                                                                RStar<CAnnotation>
                                                                            CTypedValueParameter
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Object'}
                                                                                        ROptional<CTypeArguments>
                                                                                CLowerIdentifier{'key'}
                                                                                ROptional<CValueSpecifier>
                                                                        CParameter
                                                                            CAnnotations
                                                                                ROptional<ICStringLiteral>
                                                                                RStar<CAnnotation>
                                                                            CTypedValueParameter
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Default'}
                                                                                        ROptional<CTypeArguments>
                                                                                CLowerIdentifier{'default'}
                                                                                ROptional<CValueSpecifier>
                                                                RLiteral{')'}
                                                        ROptional<CTypeConstraints>
                                                        COptionalFunctionSpecifier
                                                            ROptional<CFunctionSpecifier>
                                                                CFunctionSpecifier
                                                                    RLiteral{'=>'}
                                                                    CThenElseExpr
                                                                        CCallExpr
                                                                            CSelectionExpr
                                                                                CSelfReference{'outer'}
                                                                                CMemberSelectionOperator{'.'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'getOrDefault'}
                                                                                    ROptional<CTypeArguments>
                                                                            CPositionalArguments
                                                                                RLiteral{'('}
                                                                                ROptional<CSequencedArgumentList>
                                                                                    CSequencedArgumentList
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'key'}
                                                                                            ROptional<CTypeArguments>
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'default'}
                                                                                            ROptional<CTypeArguments>
                                                                                RLiteral{')'}
                                                                        CThenElseOperator{'else'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'default'}
                                                                            ROptional<CTypeArguments>
                                                            RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CCallExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'iterator'}
                                                                    ROptional<CTypeArguments>
                                                                CPositionalArguments
                                                                    RLiteral{'('}
                                                                    ROptional<CSequencedArgumentList>
                                                                    RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CCallExpr
                                                                    CSelectionExpr
                                                                        CEnumerationExpr
                                                                            RLiteral{'{'}
                                                                            CStatements
                                                                            ROptional<CSequencedArgumentList>
                                                                                CSequencedArgumentList
                                                                                    CForComprehensionClause
                                                                                        RLiteral{'for'}
                                                                                        RLiteral{'('}
                                                                                        ROptional<CForIterator>
                                                                                            CForIterator
                                                                                                CVariable
                                                                                                    ROptional<ICVariableType>
                                                                                                    CLowerIdentifier{'entry'}
                                                                                                    RStar<CParameters>
                                                                                                CContainment
                                                                                                    CContainmentOperator{'in'}
                                                                                                    CSelfReference{'outer'}
                                                                                        RLiteral{')'}
                                                                                        CIfComprehensionClause
                                                                                            RLiteral{'if'}
                                                                                            CConditions
                                                                                                RLiteral{'('}
                                                                                                ROptional<CConditionList>
                                                                                                    CConditionList
                                                                                                        CExistsCondition
                                                                                                            ROptional<RLiteral>
                                                                                                            RLiteral{'exists'}
                                                                                                            CLetVariable
                                                                                                                CVariable
                                                                                                                    ROptional<ICVariableType>
                                                                                                                    CLowerIdentifier{'it'}
                                                                                                                    RStar<CParameters>
                                                                                                                CValueSpecifier
                                                                                                                    RLiteral{'='}
                                                                                                                    CSelectionExpr
                                                                                                                        CMemberReference
                                                                                                                            CLowerIdentifier{'entry'}
                                                                                                                            ROptional<CTypeArguments>
                                                                                                                        CMemberSelectionOperator{'.'}
                                                                                                                        CMemberReference
                                                                                                                            CLowerIdentifier{'item'}
                                                                                                                            ROptional<CTypeArguments>
                                                                                                RLiteral{')'}
                                                                                            CEntryExpr
                                                                                                CSelectionExpr
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'entry'}
                                                                                                        ROptional<CTypeArguments>
                                                                                                    CMemberSelectionOperator{'.'}
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'key'}
                                                                                                        ROptional<CTypeArguments>
                                                                                                CEntryOperator{'->'}
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'it'}
                                                                                                    ROptional<CTypeArguments>
                                                                            RLiteral{'}'}
                                                                        CMemberSelectionOperator{'.'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'iterator'}
                                                                            ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                        RLiteral{')'}
                                                        RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CCallExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'clone'}
                                                                    ROptional<CTypeArguments>
                                                                CPositionalArguments
                                                                    RLiteral{'('}
                                                                    ROptional<CSequencedArgumentList>
                                                                    RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CSelectionExpr
                                                                    CCallExpr
                                                                        CSelectionExpr
                                                                            CSelfReference{'outer'}
                                                                            CMemberSelectionOperator{'.'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'clone'}
                                                                                ROptional<CTypeArguments>
                                                                        CPositionalArguments
                                                                            RLiteral{'('}
                                                                            ROptional<CSequencedArgumentList>
                                                                            RLiteral{')'}
                                                                    CMemberSelectionOperator{'.'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'coalescedMap'}
                                                                        ROptional<CTypeArguments>
                                                        RLiteral{';'}
                                                RLiteral{'}'}
                                RLiteral{';'}
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"\r\nCreate a new immutable [[Map]] containing every [[Entry]] produced by the given [[stream]],\r\nresolving items with duplicate keys according to the given [[function|choosing]].\r\n\r\nFor example:\r\n\r\n    map { 1->\\\"hello\\\", 2->\\\"goodbye\\\" }\r\n\r\nproduces the map `{ 1->\\\"hello\\\", 2->\\\"goodbye\\\" }`.\r\n\r\nThis is an eager operation and the resulting map does not reflect changes to the given [[stream]].\r\n\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'since'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"1.2.0\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'Map'}
                        ROptional<CTypeArguments>
                            CTypeArguments
                                RLiteral{'<'}
                                ROptional<CTypeArgumentList>
                                    CTypeArgumentList
                                        CVariancedType
                                            ROptional<ICVariance>
                                            CTypePath
                                                CTypeReference
                                                    CUpperIdentifier{'Key'}
                                                    ROptional<CTypeArguments>
                                        CVariancedType
                                            ROptional<ICVariance>
                                            CTypePath
                                                CTypeReference
                                                    CUpperIdentifier{'Item'}
                                                    ROptional<CTypeArguments>
                                RLiteral{'>'}
                CLowerIdentifier{'map'}
                ROptional<CTypeParameters>
                    CTypeParameters
                        RLiteral{'<'}
                        CTypeParameterList
                            CTypeParameter
                                ROptional<ICVariance>
                                CUpperIdentifier{'Key'}
                                ROptional<CTypeDefault>
                            CTypeParameter
                                ROptional<ICVariance>
                                CUpperIdentifier{'Item'}
                                ROptional<CTypeDefault>
                        RLiteral{'>'}
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"The stream of entries.\"'}
                                        RStar<CAnnotation>
                                    CTypedValueParameter
                                        CIterableType
                                            RLiteral{'{'}
                                            ROptional<ICVariadicType>
                                                CVariadicTypeCore
                                                    CGroupedType
                                                        RLiteral{'<'}
                                                        CEntryType
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Key'}
                                                                    ROptional<CTypeArguments>
                                                            CEntryOperator{'->'}
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Item'}
                                                                    ROptional<CTypeArguments>
                                                        RLiteral{'>'}
                                                    CVariadicOperator{'*'}
                                            RLiteral{'}'}
                                        CLowerIdentifier{'stream'}
                                        ROptional<CValueSpecifier>
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"A function that chooses between items with duplicate keys. By default, the item that occurs\r\n     _earlier_ in the stream is chosen.\"'}
                                        RStar<CAnnotation>
                                    CTypedFunctionParameter
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Item'}
                                                ROptional<CTypeArguments>
                                        CLowerIdentifier{'choosing'}
                                        ROptional<CTypeParameters>
                                        RPlus<CParameters>
                                            CParameters
                                                RLiteral{'('}
                                                ROptional<CParameterList>
                                                    CParameterList
                                                        CParameter
                                                            CAnnotations
                                                                ROptional<ICStringLiteral>
                                                                RStar<CAnnotation>
                                                            CTypedValueParameter
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'Item'}
                                                                        ROptional<CTypeArguments>
                                                                CLowerIdentifier{'earlier'}
                                                                ROptional<CValueSpecifier>
                                                        CParameter
                                                            CAnnotations
                                                                ROptional<ICStringLiteral>
                                                                RStar<CAnnotation>
                                                            CTypedValueParameter
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'Item'}
                                                                        ROptional<CTypeArguments>
                                                                CLowerIdentifier{'later'}
                                                                ROptional<CValueSpecifier>
                                                RLiteral{')'}
                                        ROptional<CFunctionSpecifier>
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CMemberReference
                                                    CLowerIdentifier{'earlier'}
                                                    ROptional<CTypeArguments>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                    CTypeConstraints
                        CTypeConstraint
                            RLiteral{'given'}
                            ROptional<ICTypeName>
                                CUpperIdentifier{'Key'}
                            ROptional<CTypeParameters>
                            ROptional<CCaseTypes>
                            ROptional<CSatisfiedTypes>
                                CSatisfiedTypes
                                    RLiteral{'satisfies'}
                                    CUnionTypeList
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Object'}
                                                ROptional<CTypeArguments>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CSelectionExpr
                                    CMemberReference
                                        CLowerIdentifier{'stream'}
                                        ROptional<CTypeArguments>
                                    CMemberSelectionOperator{'.'}
                                    CMemberReference
                                        CLowerIdentifier{'summarize'}
                                        ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CSelectionExpr
                                                CTypeReference
                                                    CUpperIdentifier{'Entry'}
                                                    ROptional<CTypeArguments>
                                                CMemberSelectionOperator{'.'}
                                                CMemberReference
                                                    CLowerIdentifier{'key'}
                                                    ROptional<CTypeArguments>
                                            CInferredFunctionExpr
                                                ROptional<RLiteral>
                                                ROptional<CTypeParameters>
                                                RPlus<CParameters>
                                                    CParameters
                                                        RLiteral{'('}
                                                        ROptional<CParameterList>
                                                            CParameterList
                                                                CParameter
                                                                    CAnnotations
                                                                        ROptional<ICStringLiteral>
                                                                        RStar<CAnnotation>
                                                                    CTypedValueParameter
                                                                        CNullableType
                                                                            CTypePath
                                                                                CTypeReference
                                                                                    CUpperIdentifier{'Item'}
                                                                                    ROptional<CTypeArguments>
                                                                            RLiteral{'?'}
                                                                        CLowerIdentifier{'item'}
                                                                        ROptional<CValueSpecifier>
                                                                CParameterReference
                                                                    CLowerIdentifier{'entry'}
                                                                    ROptional<CValueSpecifier>
                                                        RLiteral{')'}
                                                ROptional<CTypeConstraints>
                                                CFunctionSpecifier
                                                    RLiteral{'=>'}
                                                    CIfExpr
                                                        RLiteral{'if'}
                                                        CConditions
                                                            RLiteral{'('}
                                                            ROptional<CConditionList>
                                                                CConditionList
                                                                    CExistsCondition
                                                                        ROptional<RLiteral>
                                                                        RLiteral{'exists'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'item'}
                                                                            ROptional<CTypeArguments>
                                                            RLiteral{')'}
                                                        CThenExpression
                                                            RLiteral{'then'}
                                                            CCallExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'choosing'}
                                                                    ROptional<CTypeArguments>
                                                                CPositionalArguments
                                                                    RLiteral{'('}
                                                                    ROptional<CSequencedArgumentList>
                                                                        CSequencedArgumentList
                                                                            CMemberReference
                                                                                CLowerIdentifier{'item'}
                                                                                ROptional<CTypeArguments>
                                                                            CSelectionExpr
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'entry'}
                                                                                    ROptional<CTypeArguments>
                                                                                CMemberSelectionOperator{'.'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'item'}
                                                                                    ROptional<CTypeArguments>
                                                                    RLiteral{')'}
                                                        CElseExpression
                                                            RLiteral{'else'}
                                                            CSelectionExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'entry'}
                                                                    ROptional<CTypeArguments>
                                                                CMemberSelectionOperator{'.'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'item'}
                                                                    ROptional<CTypeArguments>
                                    RLiteral{')'}
                    RLiteral{';'}
            CObjectDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"An immutable [[Map]] with no entries.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'tagged'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"Collections\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                RLiteral{'object'}
                CLowerIdentifier{'emptyMap'}
                ROptional<CExtendedType>
                    CExtendedType
                        RLiteral{'extends'}
                        CClassInstantiation
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Object'}
                                    ROptional<CTypeArguments>
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                    RLiteral{')'}
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Map'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Nothing'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Nothing'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                        CUnclosedStatement
                            CSpecificationStatement
                                CParametrizedMember
                                    CLowerIdentifier{'get'}
                                    ROptional<CTypeParameters>
                                    RPlus<CParameters>
                                        CParameters
                                            RLiteral{'('}
                                            ROptional<CParameterList>
                                                CParameterList
                                                    CParameter
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                        CTypedValueParameter
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Object'}
                                                                    ROptional<CTypeArguments>
                                                            CLowerIdentifier{'key'}
                                                            ROptional<CValueSpecifier>
                                            RLiteral{')'}
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CMemberReference
                                        CLowerIdentifier{'null'}
                                        ROptional<CTypeArguments>
                            RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Default'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'getOrDefault'}
                            ROptional<CTypeParameters>
                                CTypeParameters
                                    RLiteral{'<'}
                                    CTypeParameterList
                                        CTypeParameter
                                            ROptional<ICVariance>
                                            CUpperIdentifier{'Default'}
                                            ROptional<CTypeDefault>
                                    RLiteral{'>'}
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Object'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'key'}
                                                    ROptional<CValueSpecifier>
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Default'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'default'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CMemberReference
                                            CLowerIdentifier{'default'}
                                            ROptional<CTypeArguments>
                                RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CMemberReference
                                    CLowerIdentifier{'keys'}
                                    ROptional<CTypeArguments>
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CMemberReference
                                        CLowerIdentifier{'emptySet'}
                                        ROptional<CTypeArguments>
                            RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CMemberReference
                                    CLowerIdentifier{'items'}
                                    ROptional<CTypeArguments>
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CMemberReference
                                        CLowerIdentifier{'emptySet'}
                                        ROptional<CTypeArguments>
                            RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CCallExpr
                                    CMemberReference
                                        CLowerIdentifier{'clone'}
                                        ROptional<CTypeArguments>
                                    CPositionalArguments
                                        RLiteral{'('}
                                        ROptional<CSequencedArgumentList>
                                        RLiteral{')'}
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CSelfReference{'this'}
                            RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CCallExpr
                                    CMemberReference
                                        CLowerIdentifier{'iterator'}
                                        ROptional<CTypeArguments>
                                    CPositionalArguments
                                        RLiteral{'('}
                                        ROptional<CSequencedArgumentList>
                                        RLiteral{')'}
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CMemberReference
                                        CLowerIdentifier{'emptyIterator'}
                                        ROptional<CTypeArguments>
                            RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CMemberReference
                                    CLowerIdentifier{'size'}
                                    ROptional<CTypeArguments>
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CLiteralNatural{'0'}
                            RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CMemberReference
                                    CLowerIdentifier{'empty'}
                                    ROptional<CTypeArguments>
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CMemberReference
                                        CLowerIdentifier{'true'}
                                        ROptional<CTypeArguments>
                            RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CParametrizedMember
                                    CLowerIdentifier{'defines'}
                                    ROptional<CTypeParameters>
                                    RPlus<CParameters>
                                        CParameters
                                            RLiteral{'('}
                                            ROptional<CParameterList>
                                                CParameterList
                                                    CParameter
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                        CTypedValueParameter
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Object'}
                                                                    ROptional<CTypeArguments>
                                                            CLowerIdentifier{'index'}
                                                            ROptional<CValueSpecifier>
                                            RLiteral{')'}
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CMemberReference
                                        CLowerIdentifier{'false'}
                                        ROptional<CTypeArguments>
                            RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CParametrizedMember
                                    CLowerIdentifier{'contains'}
                                    ROptional<CTypeParameters>
                                    RPlus<CParameters>
                                        CParameters
                                            RLiteral{'('}
                                            ROptional<CParameterList>
                                                CParameterList
                                                    CParameter
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                        CTypedValueParameter
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Object'}
                                                                    ROptional<CTypeArguments>
                                                            CLowerIdentifier{'element'}
                                                            ROptional<CValueSpecifier>
                                            RLiteral{')'}
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CMemberReference
                                        CLowerIdentifier{'false'}
                                        ROptional<CTypeArguments>
                            RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CParametrizedMember
                                    CLowerIdentifier{'containsAny'}
                                    ROptional<CTypeParameters>
                                    RPlus<CParameters>
                                        CParameters
                                            RLiteral{'('}
                                            ROptional<CParameterList>
                                                CParameterList
                                                    CParameter
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                        CTypedValueParameter
                                                            CIterableType
                                                                RLiteral{'{'}
                                                                ROptional<ICVariadicType>
                                                                    CVariadicTypeCore
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Object'}
                                                                                ROptional<CTypeArguments>
                                                                        CVariadicOperator{'*'}
                                                                RLiteral{'}'}
                                                            CLowerIdentifier{'elements'}
                                                            ROptional<CValueSpecifier>
                                            RLiteral{')'}
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CMemberReference
                                        CLowerIdentifier{'false'}
                                        ROptional<CTypeArguments>
                            RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CParametrizedMember
                                    CLowerIdentifier{'containsEvery'}
                                    ROptional<CTypeParameters>
                                    RPlus<CParameters>
                                        CParameters
                                            RLiteral{'('}
                                            ROptional<CParameterList>
                                                CParameterList
                                                    CParameter
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                        CTypedValueParameter
                                                            CIterableType
                                                                RLiteral{'{'}
                                                                ROptional<ICVariadicType>
                                                                    CVariadicTypeCore
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Object'}
                                                                                ROptional<CTypeArguments>
                                                                        CVariadicOperator{'*'}
                                                                RLiteral{'}'}
                                                            CLowerIdentifier{'elements'}
                                                            ROptional<CValueSpecifier>
                                            RLiteral{')'}
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CSelectionExpr
                                        CMemberReference
                                            CLowerIdentifier{'elements'}
                                            ROptional<CTypeArguments>
                                        CMemberSelectionOperator{'.'}
                                        CMemberReference
                                            CLowerIdentifier{'empty'}
                                            ROptional<CTypeArguments>
                            RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Map'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Nothing'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Nothing'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'mapItems'}
                            ROptional<CTypeParameters>
                                CTypeParameters
                                    RLiteral{'<'}
                                    CTypeParameterList
                                        CTypeParameter
                                            ROptional<ICVariance>
                                            CUpperIdentifier{'Result'}
                                            ROptional<CTypeDefault>
                                    RLiteral{'>'}
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedFunctionParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Result'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'mapping'}
                                                    ROptional<CTypeParameters>
                                                    RPlus<CParameters>
                                                        CParameters
                                                            RLiteral{'('}
                                                            ROptional<CParameterList>
                                                                CParameterList
                                                                    CParameter
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CTypedValueParameter
                                                                            CTypePath
                                                                                CTypeReference
                                                                                    CUpperIdentifier{'Nothing'}
                                                                                    ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'key'}
                                                                            ROptional<CValueSpecifier>
                                                                    CParameter
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CTypedValueParameter
                                                                            CTypePath
                                                                                CTypeReference
                                                                                    CUpperIdentifier{'Nothing'}
                                                                                    ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'item'}
                                                                            ROptional<CValueSpecifier>
                                                            RLiteral{')'}
                                                    ROptional<CFunctionSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CMemberReference
                                            CLowerIdentifier{'emptyMap'}
                                            ROptional<CTypeArguments>
                                RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CParametrizedMember
                                    CLowerIdentifier{'count'}
                                    ROptional<CTypeParameters>
                                    RPlus<CParameters>
                                        CParameters
                                            RLiteral{'('}
                                            ROptional<CParameterList>
                                                CParameterList
                                                    CParameter
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                        CTypedFunctionParameter
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Boolean'}
                                                                    ROptional<CTypeArguments>
                                                            CLowerIdentifier{'selecting'}
                                                            ROptional<CTypeParameters>
                                                            RPlus<CParameters>
                                                                CParameters
                                                                    RLiteral{'('}
                                                                    ROptional<CParameterList>
                                                                        CParameterList
                                                                            CParameter
                                                                                CAnnotations
                                                                                    ROptional<ICStringLiteral>
                                                                                    RStar<CAnnotation>
                                                                                CTypedValueParameter
                                                                                    CEntryType
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Nothing'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CEntryOperator{'->'}
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Nothing'}
                                                                                                ROptional<CTypeArguments>
                                                                                    CLowerIdentifier{'element'}
                                                                                    ROptional<CValueSpecifier>
                                                                    RLiteral{')'}
                                                            ROptional<CFunctionSpecifier>
                                            RLiteral{')'}
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CLiteralNatural{'0'}
                            RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CParametrizedMember
                                    CLowerIdentifier{'any'}
                                    ROptional<CTypeParameters>
                                    RPlus<CParameters>
                                        CParameters
                                            RLiteral{'('}
                                            ROptional<CParameterList>
                                                CParameterList
                                                    CParameter
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                        CTypedFunctionParameter
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Boolean'}
                                                                    ROptional<CTypeArguments>
                                                            CLowerIdentifier{'selecting'}
                                                            ROptional<CTypeParameters>
                                                            RPlus<CParameters>
                                                                CParameters
                                                                    RLiteral{'('}
                                                                    ROptional<CParameterList>
                                                                        CParameterList
                                                                            CParameter
                                                                                CAnnotations
                                                                                    ROptional<ICStringLiteral>
                                                                                    RStar<CAnnotation>
                                                                                CTypedValueParameter
                                                                                    CEntryType
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Nothing'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CEntryOperator{'->'}
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Nothing'}
                                                                                                ROptional<CTypeArguments>
                                                                                    CLowerIdentifier{'element'}
                                                                                    ROptional<CValueSpecifier>
                                                                    RLiteral{')'}
                                                            ROptional<CFunctionSpecifier>
                                            RLiteral{')'}
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CMemberReference
                                        CLowerIdentifier{'false'}
                                        ROptional<CTypeArguments>
                            RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CParametrizedMember
                                    CLowerIdentifier{'every'}
                                    ROptional<CTypeParameters>
                                    RPlus<CParameters>
                                        CParameters
                                            RLiteral{'('}
                                            ROptional<CParameterList>
                                                CParameterList
                                                    CParameter
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                        CTypedFunctionParameter
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Boolean'}
                                                                    ROptional<CTypeArguments>
                                                            CLowerIdentifier{'selecting'}
                                                            ROptional<CTypeParameters>
                                                            RPlus<CParameters>
                                                                CParameters
                                                                    RLiteral{'('}
                                                                    ROptional<CParameterList>
                                                                        CParameterList
                                                                            CParameter
                                                                                CAnnotations
                                                                                    ROptional<ICStringLiteral>
                                                                                    RStar<CAnnotation>
                                                                                CTypedValueParameter
                                                                                    CEntryType
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Nothing'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CEntryOperator{'->'}
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Nothing'}
                                                                                                ROptional<CTypeArguments>
                                                                                    CLowerIdentifier{'element'}
                                                                                    ROptional<CValueSpecifier>
                                                                    RLiteral{')'}
                                                            ROptional<CFunctionSpecifier>
                                            RLiteral{')'}
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CMemberReference
                                        CLowerIdentifier{'true'}
                                        ROptional<CTypeArguments>
                            RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Null'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'find'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedFunctionParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Boolean'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'selecting'}
                                                    ROptional<CTypeParameters>
                                                    RPlus<CParameters>
                                                        CParameters
                                                            RLiteral{'('}
                                                            ROptional<CParameterList>
                                                                CParameterList
                                                                    CParameter
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CTypedValueParameter
                                                                            CEntryType
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Nothing'}
                                                                                        ROptional<CTypeArguments>
                                                                                CEntryOperator{'->'}
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Nothing'}
                                                                                        ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'element'}
                                                                            ROptional<CValueSpecifier>
                                                            RLiteral{')'}
                                                    ROptional<CFunctionSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CMemberReference
                                            CLowerIdentifier{'null'}
                                            ROptional<CTypeArguments>
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Null'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'findLast'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedFunctionParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Boolean'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'selecting'}
                                                    ROptional<CTypeParameters>
                                                    RPlus<CParameters>
                                                        CParameters
                                                            RLiteral{'('}
                                                            ROptional<CParameterList>
                                                                CParameterList
                                                                    CParameter
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CTypedValueParameter
                                                                            CEntryType
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Nothing'}
                                                                                        ROptional<CTypeArguments>
                                                                                CEntryOperator{'->'}
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Nothing'}
                                                                                        ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'element'}
                                                                            ROptional<CValueSpecifier>
                                                            RLiteral{')'}
                                                    ROptional<CFunctionSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CMemberReference
                                            CLowerIdentifier{'null'}
                                            ROptional<CTypeArguments>
                                RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CParametrizedMember
                                    CLowerIdentifier{'skip'}
                                    ROptional<CTypeParameters>
                                    RPlus<CParameters>
                                        CParameters
                                            RLiteral{'('}
                                            ROptional<CParameterList>
                                                CParameterList
                                                    CParameter
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                        CTypedValueParameter
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Integer'}
                                                                    ROptional<CTypeArguments>
                                                            CLowerIdentifier{'skipping'}
                                                            ROptional<CValueSpecifier>
                                            RLiteral{')'}
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CSelfReference{'this'}
                            RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CParametrizedMember
                                    CLowerIdentifier{'take'}
                                    ROptional<CTypeParameters>
                                    RPlus<CParameters>
                                        CParameters
                                            RLiteral{'('}
                                            ROptional<CParameterList>
                                                CParameterList
                                                    CParameter
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                        CTypedValueParameter
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Integer'}
                                                                    ROptional<CTypeArguments>
                                                            CLowerIdentifier{'taking'}
                                                            ROptional<CValueSpecifier>
                                            RLiteral{')'}
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CSelfReference{'this'}
                            RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CParametrizedMember
                                    CLowerIdentifier{'by'}
                                    ROptional<CTypeParameters>
                                    RPlus<CParameters>
                                        CParameters
                                            RLiteral{'('}
                                            ROptional<CParameterList>
                                                CParameterList
                                                    CParameter
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                        CTypedValueParameter
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Integer'}
                                                                    ROptional<CTypeArguments>
                                                            CLowerIdentifier{'step'}
                                                            ROptional<CValueSpecifier>
                                            RLiteral{')'}
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CSelfReference{'this'}
                            RLiteral{';'}
                        CVoidMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                            CKwVoid{'void'}
                            CLowerIdentifier{'each'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CVoidFunctionParameter
                                                    CKwVoid{'void'}
                                                    CLowerIdentifier{'step'}
                                                    ROptional<CTypeParameters>
                                                    RPlus<CParameters>
                                                        CParameters
                                                            RLiteral{'('}
                                                            ROptional<CParameterList>
                                                                CParameterList
                                                                    CParameter
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CTypedValueParameter
                                                                            CEntryType
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Nothing'}
                                                                                        ROptional<CTypeArguments>
                                                                                CEntryOperator{'->'}
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Nothing'}
                                                                                        ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'element'}
                                                                            ROptional<CValueSpecifier>
                                                            RLiteral{')'}
                                                    ROptional<CFunctionSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                RLiteral{'}'}
                    RLiteral{'}'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                    RStar<CAnnotation>
                RLiteral{'class'}
                CUpperIdentifier{'Missing'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                ROptional<CCaseTypes>
                    CCaseTypes
                        RLiteral{'of'}
                        CCaseTypeList
                            CQualifiedCaseType
                                ROptional<CPackageQualifier>
                                CLowerIdentifier{'instance'}
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                        CEnumeratedObjectDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                            RLiteral{'new'}
                            CLowerIdentifier{'instance'}
                            ROptional<CDelegatedConstructor>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                RLiteral{'}'}
                    RLiteral{'}'}
    REof{'\r\n'}
