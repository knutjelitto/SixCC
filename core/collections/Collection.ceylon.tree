CXStart
    CCodeUnit
        CNamespace
            CAnnotations
                ROptional<ICStringLiteral>
                RStar<CAnnotation>
            RLiteral{'namespace'}
            CNamespacePath
                CIdentifier{'six'}
                CIdentifier{'core'}
            RLiteral{';'}
        CImports
        CTopDeclarations
            CInterfaceDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CVerbatimString{'\"\"\"\r\nAn iterable collection of elements of finite [[size]], with a well-defined notion of [[value equality|equals]].\r\n`Collection` is the abstract supertype of [[List]], [[Map]], and [[Set]].\r\n\r\nA `Collection` forms a [[Category]] of its elements, and is [[Iterable]]. The elements of a collection are not\r\nnecessarily distinct when compared using [[Object.equals]].\r\n\r\nA `Collection` may be [[cloned|clone]]. If a collection is immutable, it is acceptable that `clone()` produce a\r\nreference to the collection itself. If a collection is mutable, `clone()` should produce a collection containing\r\nreferences to the same elements, with the same structure as the original collection&mdash;that is, it should produce a\r\nshallow copy of the collection.\r\n\r\nAll `Collection`s are required to support a well-defined notion of [[value equality|Object.equals]], but the definition\r\nof equality depends upon the kind of collection. Equality for `Map`s and `Set`s has a quite different definition to\r\nequality for `List`s. Instances of two different kinds of collection are never equal&mdash;for example, a `Map` is\r\nnever equal to a `List`.\r\n\"\"\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'see'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CInterfaceLiteral
                                                RLiteral{'interface'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'List'}
                                            CInterfaceLiteral
                                                RLiteral{'interface'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'Map'}
                                            CInterfaceLiteral
                                                RLiteral{'interface'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'Set'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'tagged'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"Collections\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                RLiteral{'interface'}
                CUpperIdentifier{'Collection'}
                ROptional<CTypeParameters>
                    CTypeParameters
                        RLiteral{'<'}
                        CTypeParameterList
                            CTypeParameter
                                ROptional<ICVariance>
                                    CVariance{'out'}
                                CUpperIdentifier{'Element'}
                                ROptional<CTypeDefault>
                                    CTypeDefault
                                        RLiteral{'='}
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Anything'}
                                                ROptional<CTypeArguments>
                        RLiteral{'>'}
                ROptional<CCaseTypes>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CIterableType
                                RLiteral{'{'}
                                ROptional<ICVariadicType>
                                    CVariadicTypeCore
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Element'}
                                                ROptional<CTypeArguments>
                                        CVariadicOperator{'*'}
                                RLiteral{'}'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CVerbatimString{'\"\"\"\r\n    A shallow copy of this collection, that is, a collection with identical elements which does not change if this\r\n    collection changes. If this collection is immutable, it is acceptable to return a reference to this collection. If this\r\n    collection is mutable, a newly instantiated collection must be returned.\r\n    \"\"\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'formal'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Collection'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Element'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'clone'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                RLiteral{';'}
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Determine if the collection is empty, that is, if it has no elements.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Boolean'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'empty'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CEqualityExpr
                                            CMemberReference
                                                CLowerIdentifier{'size'}
                                                ROptional<CTypeArguments>
                                            CEqualityOperator{'=='}
                                            CLiteralNatural{'0'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CVerbatimString{'\"\"\"\r\n    Return `true` if the given object is an element of this collection. In this default implementation, and in most\r\n    refining implementations, return `false` otherwise. An  acceptable refining implementation may return `true` for\r\n    objects which are not elements of the collection, but this is not recommended. (For example, the `contains()` method of\r\n    `String` returns `true` for any substring of the string.)\r\n    \"\"\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Boolean'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'contains'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Object'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'element'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CForElseStatement
                                        RLiteral{'for'}
                                        RLiteral{'('}
                                        ROptional<CForIterator>
                                            CForIterator
                                                CVariable
                                                    ROptional<ICVariableType>
                                                    CLowerIdentifier{'elem'}
                                                    RStar<CParameters>
                                                CContainment
                                                    CContainmentOperator{'in'}
                                                    CSelfReference{'this'}
                                        RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CIfElseStatement
                                                    RLiteral{'if'}
                                                    CConditions
                                                        RLiteral{'('}
                                                        ROptional<CConditionList>
                                                            CConditionList
                                                                CExistsCondition
                                                                    ROptional<RLiteral>
                                                                    RLiteral{'exists'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'elem'}
                                                                        ROptional<CTypeArguments>
                                                                CEqualityExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'elem'}
                                                                        ROptional<CTypeArguments>
                                                                    CEqualityOperator{'=='}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'element'}
                                                                        ROptional<CTypeArguments>
                                                        RLiteral{')'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CUnclosedStatement
                                                                CReturnStatement
                                                                    RLiteral{'return'}
                                                                    ROptional<ICExpression>
                                                                        CMemberReference
                                                                            CLowerIdentifier{'true'}
                                                                            ROptional<CTypeArguments>
                                                                RLiteral{';'}
                                                        RLiteral{'}'}
                                                    RStar<CElseIf>
                                                    ROptional<CElseBlock>
                                            RLiteral{'}'}
                                        ROptional<CElseBlock>
                                            CElseBlock
                                                RLiteral{'else'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CMemberReference
                                                                        CLowerIdentifier{'false'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                RLiteral{'}'}
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CVerbatimString{'\"\"\"\r\n    A string of form `\"{ x, y, z }\"` where `x`, `y`, and `z` are the `string` representations of the elements of this\r\n    collection, as produced by the iterator of the collection, or the string `\"{}\"` if this collection is empty. If the\r\n    collection iterator produces the value `null`, the string representation contains the string `\"<null>\"`.\r\n    \"\"\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'String'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'string'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CThenElseExpr
                                            CThenElseExpr
                                                CMemberReference
                                                    CLowerIdentifier{'empty'}
                                                    ROptional<CTypeArguments>
                                                CThenElseOperator{'then'}
                                                CLiteralString{'\"{}\"'}
                                            CThenElseOperator{'else'}
                                            CStringInterpolation
                                                CStringStart{'\"{ ``'}
                                                CCallExpr
                                                    CMemberReference
                                                        CLowerIdentifier{'commaList'}
                                                        ROptional<CTypeArguments>
                                                    CPositionalArguments
                                                        RLiteral{'('}
                                                        ROptional<CSequencedArgumentList>
                                                            CSequencedArgumentList
                                                                CSelfReference{'this'}
                                                        RLiteral{')'}
                                                RStar<CInterpolationPart>
                                                CStringEnd{'`` }\"'}
                                RLiteral{';'}
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CVerbatimString{'\"\"\"\r\n    The permutations of this collection, as a stream of nonempty [[sequences|Sequence]]. That is, a stream producing every\r\n    distinct ordering of the elements of this collection.\r\n    \r\n    For example,\r\n    \r\n        \"ABC\".permutations.map(String)\r\n    \r\n    is the stream of strings `{ \"ABC\", \"ACB\", \"BAC\", \"BCA\", \"CAB\", \"CBA\" }`.\r\n    \r\n    If this collection is empty, the resulting stream is empty.\r\n    \r\n    The permutations are enumerated lexicographically according to the order in which each distinct element of this\r\n    collection is first produced by its iterator. No permutation is repeated.\r\n    \r\n    Two elements are considered distinct if either:\r\n    \r\n    - they are both instances of `Object`, and are [[unequal|Object.equals]], or\r\n    - one element is an `Object` and the other is `null`.\r\n    \"\"\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                            CIterableType
                                RLiteral{'{'}
                                ROptional<ICVariadicType>
                                    CVariadicTypeCore
                                        CTupleType
                                            RLiteral{'['}
                                            ROptional<ICTypeTypeArguments>
                                                CDefaultedTypeList
                                                    CVariadicTypeCore
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Element'}
                                                                ROptional<CTypeArguments>
                                                        CVariadicOperator{'+'}
                                            RLiteral{']'}
                                        CVariadicOperator{'*'}
                                RLiteral{'}'}
                            CLowerIdentifier{'permutations'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CObjectExpr
                                            RLiteral{'object'}
                                            ROptional<CExtendedType>
                                            ROptional<CSatisfiedTypes>
                                                CSatisfiedTypes
                                                    RLiteral{'satisfies'}
                                                    CUnionTypeList
                                                        CIterableType
                                                            RLiteral{'{'}
                                                            ROptional<ICVariadicType>
                                                                CVariadicTypeCore
                                                                    CTupleType
                                                                        RLiteral{'['}
                                                                        ROptional<ICTypeTypeArguments>
                                                                            CDefaultedTypeList
                                                                                CVariadicTypeCore
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Element'}
                                                                                            ROptional<CTypeArguments>
                                                                                    CVariadicOperator{'+'}
                                                                        RLiteral{']'}
                                                                    CVariadicOperator{'*'}
                                                            RLiteral{'}'}
                                            CBlock
                                                RLiteral{'{'}
                                                CImports
                                                CStatements
                                                    CInferredAttributeDeclaration
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                        CKwValue{'value'}
                                                        CLowerIdentifier{'multiset'}
                                                        COptionalAnySpecifier
                                                            ROptional<ICAnySpecifier>
                                                                CValueSpecifier
                                                                    RLiteral{'='}
                                                                    CCallExpr
                                                                        CSelectionExpr
                                                                            CSelectionExpr
                                                                                CCallExpr
                                                                                    CSelectionExpr
                                                                                        CSelectionExpr
                                                                                            CCallExpr
                                                                                                CSelectionExpr
                                                                                                    CSelectionExpr
                                                                                                        CSelfReference{'outer'}
                                                                                                        CMemberSelectionOperator{'.'}
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'indexed'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                    CMemberSelectionOperator{'.'}
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'group'}
                                                                                                        ROptional<CTypeArguments>
                                                                                                CPositionalArguments
                                                                                                    RLiteral{'('}
                                                                                                    ROptional<CSequencedArgumentList>
                                                                                                        CSequencedArgumentList
                                                                                                            CInferredFunctionExpr
                                                                                                                ROptional<RLiteral>
                                                                                                                ROptional<CTypeParameters>
                                                                                                                RPlus<CParameters>
                                                                                                                    CParameters
                                                                                                                        RLiteral{'('}
                                                                                                                        ROptional<CParameterList>
                                                                                                                            CParameterList
                                                                                                                                CEntryPattern
                                                                                                                                    CVariable
                                                                                                                                        ROptional<ICVariableType>
                                                                                                                                        CLowerIdentifier{'_'}
                                                                                                                                        RStar<CParameters>
                                                                                                                                    CEntryOperator{'->'}
                                                                                                                                    CVariable
                                                                                                                                        ROptional<ICVariableType>
                                                                                                                                        CLowerIdentifier{'item'}
                                                                                                                                        RStar<CParameters>
                                                                                                                        RLiteral{')'}
                                                                                                                ROptional<CTypeConstraints>
                                                                                                                CFunctionSpecifier
                                                                                                                    RLiteral{'=>'}
                                                                                                                    CThenElseExpr
                                                                                                                        CMemberReference
                                                                                                                            CLowerIdentifier{'item'}
                                                                                                                            ROptional<CTypeArguments>
                                                                                                                        CThenElseOperator{'else'}
                                                                                                                        CMemberReference
                                                                                                                            CLowerIdentifier{'nullElement'}
                                                                                                                            ROptional<CTypeArguments>
                                                                                                    RLiteral{')'}
                                                                                            CMemberSelectionOperator{'.'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'items'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CMemberSelectionOperator{'.'}
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'sort'}
                                                                                            ROptional<CTypeArguments>
                                                                                    CPositionalArguments
                                                                                        RLiteral{'('}
                                                                                        ROptional<CSequencedArgumentList>
                                                                                            CSequencedArgumentList
                                                                                                CInferredFunctionExpr
                                                                                                    ROptional<RLiteral>
                                                                                                    ROptional<CTypeParameters>
                                                                                                    RPlus<CParameters>
                                                                                                        CParameters
                                                                                                            RLiteral{'('}
                                                                                                            ROptional<CParameterList>
                                                                                                                CParameterList
                                                                                                                    CParameterReference
                                                                                                                        CLowerIdentifier{'x'}
                                                                                                                        ROptional<CValueSpecifier>
                                                                                                                    CParameterReference
                                                                                                                        CLowerIdentifier{'y'}
                                                                                                                        ROptional<CValueSpecifier>
                                                                                                            RLiteral{')'}
                                                                                                    ROptional<CTypeConstraints>
                                                                                                    CFunctionSpecifier
                                                                                                        RLiteral{'=>'}
                                                                                                        CComparisonExpr
                                                                                                            CSelectionExpr
                                                                                                                CSelectionExpr
                                                                                                                    CMemberReference
                                                                                                                        CLowerIdentifier{'x'}
                                                                                                                        ROptional<CTypeArguments>
                                                                                                                    CMemberSelectionOperator{'.'}
                                                                                                                    CMemberReference
                                                                                                                        CLowerIdentifier{'first'}
                                                                                                                        ROptional<CTypeArguments>
                                                                                                                CMemberSelectionOperator{'.'}
                                                                                                                CMemberReference
                                                                                                                    CLowerIdentifier{'key'}
                                                                                                                    ROptional<CTypeArguments>
                                                                                                            CComparisonOperator{'<=>'}
                                                                                                            CSelectionExpr
                                                                                                                CSelectionExpr
                                                                                                                    CMemberReference
                                                                                                                        CLowerIdentifier{'y'}
                                                                                                                        ROptional<CTypeArguments>
                                                                                                                    CMemberSelectionOperator{'.'}
                                                                                                                    CMemberReference
                                                                                                                        CLowerIdentifier{'first'}
                                                                                                                        ROptional<CTypeArguments>
                                                                                                                CMemberSelectionOperator{'.'}
                                                                                                                CMemberReference
                                                                                                                    CLowerIdentifier{'key'}
                                                                                                                    ROptional<CTypeArguments>
                                                                                        RLiteral{')'}
                                                                                CMemberSelectionOperator{'.'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'indexed'}
                                                                                    ROptional<CTypeArguments>
                                                                            CMemberSelectionOperator{'.'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'flatMap'}
                                                                                ROptional<CTypeArguments>
                                                                        CPositionalArguments
                                                                            RLiteral{'('}
                                                                            ROptional<CSequencedArgumentList>
                                                                                CSequencedArgumentList
                                                                                    CInferredFunctionExpr
                                                                                        ROptional<RLiteral>
                                                                                        ROptional<CTypeParameters>
                                                                                        RPlus<CParameters>
                                                                                            CParameters
                                                                                                RLiteral{'('}
                                                                                                ROptional<CParameterList>
                                                                                                    CParameterList
                                                                                                        CEntryPattern
                                                                                                            CVariable
                                                                                                                ROptional<ICVariableType>
                                                                                                                CLowerIdentifier{'index'}
                                                                                                                RStar<CParameters>
                                                                                                            CEntryOperator{'->'}
                                                                                                            CVariable
                                                                                                                ROptional<ICVariableType>
                                                                                                                CLowerIdentifier{'entries'}
                                                                                                                RStar<CParameters>
                                                                                                RLiteral{')'}
                                                                                        ROptional<CTypeConstraints>
                                                                                        CFunctionSpecifier
                                                                                            RLiteral{'=>'}
                                                                                            CCallExpr
                                                                                                CSelectionExpr
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'entries'}
                                                                                                        ROptional<CTypeArguments>
                                                                                                    CMemberSelectionOperator{'.'}
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'map'}
                                                                                                        ROptional<CTypeArguments>
                                                                                                CPositionalArguments
                                                                                                    RLiteral{'('}
                                                                                                    ROptional<CSequencedArgumentList>
                                                                                                        CSequencedArgumentList
                                                                                                            CInferredFunctionExpr
                                                                                                                ROptional<RLiteral>
                                                                                                                ROptional<CTypeParameters>
                                                                                                                RPlus<CParameters>
                                                                                                                    CParameters
                                                                                                                        RLiteral{'('}
                                                                                                                        ROptional<CParameterList>
                                                                                                                            CParameterList
                                                                                                                                CEntryPattern
                                                                                                                                    CVariable
                                                                                                                                        ROptional<ICVariableType>
                                                                                                                                        CLowerIdentifier{'_'}
                                                                                                                                        RStar<CParameters>
                                                                                                                                    CEntryOperator{'->'}
                                                                                                                                    CVariable
                                                                                                                                        ROptional<ICVariableType>
                                                                                                                                        CLowerIdentifier{'item'}
                                                                                                                                        RStar<CParameters>
                                                                                                                        RLiteral{')'}
                                                                                                                ROptional<CTypeConstraints>
                                                                                                                CFunctionSpecifier
                                                                                                                    RLiteral{'=>'}
                                                                                                                    CEntryExpr
                                                                                                                        CMemberReference
                                                                                                                            CLowerIdentifier{'index'}
                                                                                                                            ROptional<CTypeArguments>
                                                                                                                        CEntryOperator{'->'}
                                                                                                                        CMemberReference
                                                                                                                            CLowerIdentifier{'item'}
                                                                                                                            ROptional<CTypeArguments>
                                                                                                    RLiteral{')'}
                                                                            RLiteral{')'}
                                                            RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CMemberReference
                                                                CLowerIdentifier{'empty'}
                                                                ROptional<CTypeArguments>
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CSelectionExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'multiset'}
                                                                        ROptional<CTypeArguments>
                                                                    CMemberSelectionOperator{'.'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'empty'}
                                                                        ROptional<CTypeArguments>
                                                        RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CCallExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'iterator'}
                                                                    ROptional<CTypeArguments>
                                                                CPositionalArguments
                                                                    RLiteral{'('}
                                                                    ROptional<CSequencedArgumentList>
                                                                    RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CObjectExpr
                                                                    RLiteral{'object'}
                                                                    ROptional<CExtendedType>
                                                                    ROptional<CSatisfiedTypes>
                                                                        CSatisfiedTypes
                                                                            RLiteral{'satisfies'}
                                                                            CUnionTypeList
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Iterator'}
                                                                                        ROptional<CTypeArguments>
                                                                                            CTypeArguments
                                                                                                RLiteral{'<'}
                                                                                                ROptional<CTypeArgumentList>
                                                                                                    CTypeArgumentList
                                                                                                        CVariancedType
                                                                                                            ROptional<ICVariance>
                                                                                                            CTupleType
                                                                                                                RLiteral{'['}
                                                                                                                ROptional<ICTypeTypeArguments>
                                                                                                                    CDefaultedTypeList
                                                                                                                        CVariadicTypeCore
                                                                                                                            CTypePath
                                                                                                                                CTypeReference
                                                                                                                                    CUpperIdentifier{'Element'}
                                                                                                                                    ROptional<CTypeArguments>
                                                                                                                            CVariadicOperator{'+'}
                                                                                                                RLiteral{']'}
                                                                                                RLiteral{'>'}
                                                                    CBlock
                                                                        RLiteral{'{'}
                                                                        CImports
                                                                        CStatements
                                                                            CInferredAttributeDeclaration
                                                                                CAnnotations
                                                                                    ROptional<ICStringLiteral>
                                                                                    RStar<CAnnotation>
                                                                                CKwValue{'value'}
                                                                                CLowerIdentifier{'elements'}
                                                                                COptionalAnySpecifier
                                                                                    ROptional<ICAnySpecifier>
                                                                                        CValueSpecifier
                                                                                            RLiteral{'='}
                                                                                            CCallExpr
                                                                                                CTypeReference
                                                                                                    CUpperIdentifier{'Array'}
                                                                                                    ROptional<CTypeArguments>
                                                                                                CPositionalArguments
                                                                                                    RLiteral{'('}
                                                                                                    ROptional<CSequencedArgumentList>
                                                                                                        CSequencedArgumentList
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'multiset'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                    RLiteral{')'}
                                                                                    RLiteral{';'}
                                                                            CInferredAttributeDeclaration
                                                                                CAnnotations
                                                                                    ROptional<ICStringLiteral>
                                                                                    RStar<CAnnotation>
                                                                                CKwValue{'value'}
                                                                                CLowerIdentifier{'size'}
                                                                                COptionalAnySpecifier
                                                                                    ROptional<ICAnySpecifier>
                                                                                        CValueSpecifier
                                                                                            RLiteral{'='}
                                                                                            CSelectionExpr
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'elements'}
                                                                                                    ROptional<CTypeArguments>
                                                                                                CMemberSelectionOperator{'.'}
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'size'}
                                                                                                    ROptional<CTypeArguments>
                                                                                    RLiteral{';'}
                                                                            CInferredAttributeDeclaration
                                                                                CAnnotations
                                                                                    ROptional<ICStringLiteral>
                                                                                    RStar<CAnnotation>
                                                                                        CAnnotation
                                                                                            CLowerIdentifier{'variable'}
                                                                                            ROptional<ICArguments>
                                                                                CKwValue{'value'}
                                                                                CLowerIdentifier{'initial'}
                                                                                COptionalAnySpecifier
                                                                                    ROptional<ICAnySpecifier>
                                                                                        CValueSpecifier
                                                                                            RLiteral{'='}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'true'}
                                                                                                ROptional<CTypeArguments>
                                                                                    RLiteral{';'}
                                                                            CTypedMethodDeclaration
                                                                                CAnnotations
                                                                                    ROptional<ICStringLiteral>
                                                                                    RStar<CAnnotation>
                                                                                        CAnnotation
                                                                                            CLowerIdentifier{'shared'}
                                                                                            ROptional<ICArguments>
                                                                                        CAnnotation
                                                                                            CLowerIdentifier{'actual'}
                                                                                            ROptional<ICArguments>
                                                                                CUnionTypeCore
                                                                                    CTupleType
                                                                                        RLiteral{'['}
                                                                                        ROptional<ICTypeTypeArguments>
                                                                                            CDefaultedTypeList
                                                                                                CVariadicTypeCore
                                                                                                    CTypePath
                                                                                                        CTypeReference
                                                                                                            CUpperIdentifier{'Element'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                    CVariadicOperator{'+'}
                                                                                        RLiteral{']'}
                                                                                    RLiteral{'|'}
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Finished'}
                                                                                            ROptional<CTypeArguments>
                                                                                CLowerIdentifier{'next'}
                                                                                ROptional<CTypeParameters>
                                                                                RPlus<CParameters>
                                                                                    CParameters
                                                                                        RLiteral{'('}
                                                                                        ROptional<CParameterList>
                                                                                        RLiteral{')'}
                                                                                ROptional<CTypeConstraints>
                                                                                CBlock
                                                                                    RLiteral{'{'}
                                                                                    CImports
                                                                                    CStatements
                                                                                        CIfElseStatement
                                                                                            RLiteral{'if'}
                                                                                            CConditions
                                                                                                RLiteral{'('}
                                                                                                ROptional<CConditionList>
                                                                                                    CConditionList
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'initial'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                RLiteral{')'}
                                                                                            CBlock
                                                                                                RLiteral{'{'}
                                                                                                CImports
                                                                                                CStatements
                                                                                                    CUnclosedStatement
                                                                                                        CAssignmentExpr
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'initial'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                            CAssignmentOperator{'='}
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'false'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                        RLiteral{';'}
                                                                                                RLiteral{'}'}
                                                                                            RStar<CElseIf>
                                                                                                CElseIf
                                                                                                    RLiteral{'else'}
                                                                                                    RLiteral{'if'}
                                                                                                    CConditions
                                                                                                        RLiteral{'('}
                                                                                                        ROptional<CConditionList>
                                                                                                            CConditionList
                                                                                                                CExistsCondition
                                                                                                                    ROptional<RLiteral>
                                                                                                                    RLiteral{'exists'}
                                                                                                                    CLetVariable
                                                                                                                        CEntryPattern
                                                                                                                            CVariable
                                                                                                                                ROptional<ICVariableType>
                                                                                                                                CLowerIdentifier{'i'}
                                                                                                                                RStar<CParameters>
                                                                                                                            CEntryOperator{'->'}
                                                                                                                            CTuplePattern
                                                                                                                                RLiteral{'['}
                                                                                                                                ROptional<CVariadicPatternList>
                                                                                                                                    CVariadicPatternList
                                                                                                                                        CEntryPattern
                                                                                                                                            CVariable
                                                                                                                                                ROptional<ICVariableType>
                                                                                                                                                CLowerIdentifier{'key'}
                                                                                                                                                RStar<CParameters>
                                                                                                                                            CEntryOperator{'->'}
                                                                                                                                            CVariable
                                                                                                                                                ROptional<ICVariableType>
                                                                                                                                                CLowerIdentifier{'_'}
                                                                                                                                                RStar<CParameters>
                                                                                                                                        CVariable
                                                                                                                                            ROptional<ICVariableType>
                                                                                                                                            CLowerIdentifier{'__'}
                                                                                                                                            RStar<CParameters>
                                                                                                                                RLiteral{']'}
                                                                                                                        CValueSpecifier
                                                                                                                            RLiteral{'='}
                                                                                                                            CCallExpr
                                                                                                                                CSelectionExpr
                                                                                                                                    CSelectionExpr
                                                                                                                                        CMemberReference
                                                                                                                                            CLowerIdentifier{'elements'}
                                                                                                                                            ROptional<CTypeArguments>
                                                                                                                                        CMemberSelectionOperator{'.'}
                                                                                                                                        CMemberReference
                                                                                                                                            CLowerIdentifier{'paired'}
                                                                                                                                            ROptional<CTypeArguments>
                                                                                                                                    CMemberSelectionOperator{'.'}
                                                                                                                                    CMemberReference
                                                                                                                                        CLowerIdentifier{'locateLast'}
                                                                                                                                        ROptional<CTypeArguments>
                                                                                                                                CPositionalArguments
                                                                                                                                    RLiteral{'('}
                                                                                                                                    ROptional<CSequencedArgumentList>
                                                                                                                                        CSequencedArgumentList
                                                                                                                                            CInferredFunctionExpr
                                                                                                                                                ROptional<RLiteral>
                                                                                                                                                ROptional<CTypeParameters>
                                                                                                                                                RPlus<CParameters>
                                                                                                                                                    CParameters
                                                                                                                                                        RLiteral{'('}
                                                                                                                                                        ROptional<CParameterList>
                                                                                                                                                            CParameterList
                                                                                                                                                                CTuplePattern
                                                                                                                                                                    RLiteral{'['}
                                                                                                                                                                    ROptional<CVariadicPatternList>
                                                                                                                                                                        CVariadicPatternList
                                                                                                                                                                            CEntryPattern
                                                                                                                                                                                CVariable
                                                                                                                                                                                    ROptional<ICVariableType>
                                                                                                                                                                                    CLowerIdentifier{'m'}
                                                                                                                                                                                    RStar<CParameters>
                                                                                                                                                                                CEntryOperator{'->'}
                                                                                                                                                                                CVariable
                                                                                                                                                                                    ROptional<ICVariableType>
                                                                                                                                                                                    CLowerIdentifier{'_'}
                                                                                                                                                                                    RStar<CParameters>
                                                                                                                                                                            CEntryPattern
                                                                                                                                                                                CVariable
                                                                                                                                                                                    ROptional<ICVariableType>
                                                                                                                                                                                    CLowerIdentifier{'n'}
                                                                                                                                                                                    RStar<CParameters>
                                                                                                                                                                                CEntryOperator{'->'}
                                                                                                                                                                                CVariable
                                                                                                                                                                                    ROptional<ICVariableType>
                                                                                                                                                                                    CLowerIdentifier{'__'}
                                                                                                                                                                                    RStar<CParameters>
                                                                                                                                                                    RLiteral{']'}
                                                                                                                                                        RLiteral{')'}
                                                                                                                                                ROptional<CTypeConstraints>
                                                                                                                                                CFunctionSpecifier
                                                                                                                                                    RLiteral{'=>'}
                                                                                                                                                    CSmallerExpr
                                                                                                                                                        CMemberReference
                                                                                                                                                            CLowerIdentifier{'m'}
                                                                                                                                                            ROptional<CTypeArguments>
                                                                                                                                                        CSmallerOperator{'<'}
                                                                                                                                                        CMemberReference
                                                                                                                                                            CLowerIdentifier{'n'}
                                                                                                                                                            ROptional<CTypeArguments>
                                                                                                                                    RLiteral{')'}
                                                                                                        RLiteral{')'}
                                                                                                    CBlock
                                                                                                        RLiteral{'{'}
                                                                                                        CImports
                                                                                                        CStatements
                                                                                                            CUnclosedStatement
                                                                                                                CAssertionStatement
                                                                                                                    ROptional<ICAssertionMessage>
                                                                                                                    RLiteral{'assert'}
                                                                                                                    CConditions
                                                                                                                        RLiteral{'('}
                                                                                                                        ROptional<CConditionList>
                                                                                                                            CConditionList
                                                                                                                                CExistsCondition
                                                                                                                                    ROptional<RLiteral>
                                                                                                                                    RLiteral{'exists'}
                                                                                                                                    CLetVariable
                                                                                                                                        CVariable
                                                                                                                                            ROptional<ICVariableType>
                                                                                                                                            CLowerIdentifier{'j'}
                                                                                                                                            RStar<CParameters>
                                                                                                                                        CValueSpecifier
                                                                                                                                            RLiteral{'='}
                                                                                                                                            CCallExpr
                                                                                                                                                CSelectionExpr
                                                                                                                                                    CMemberReference
                                                                                                                                                        CLowerIdentifier{'elements'}
                                                                                                                                                        ROptional<CTypeArguments>
                                                                                                                                                    CMemberSelectionOperator{'.'}
                                                                                                                                                    CMemberReference
                                                                                                                                                        CLowerIdentifier{'lastIndexWhere'}
                                                                                                                                                        ROptional<CTypeArguments>
                                                                                                                                                CPositionalArguments
                                                                                                                                                    RLiteral{'('}
                                                                                                                                                    ROptional<CSequencedArgumentList>
                                                                                                                                                        CSequencedArgumentList
                                                                                                                                                            CInferredFunctionExpr
                                                                                                                                                                ROptional<RLiteral>
                                                                                                                                                                ROptional<CTypeParameters>
                                                                                                                                                                RPlus<CParameters>
                                                                                                                                                                    CParameters
                                                                                                                                                                        RLiteral{'('}
                                                                                                                                                                        ROptional<CParameterList>
                                                                                                                                                                            CParameterList
                                                                                                                                                                                CEntryPattern
                                                                                                                                                                                    CVariable
                                                                                                                                                                                        ROptional<ICVariableType>
                                                                                                                                                                                        CLowerIdentifier{'k'}
                                                                                                                                                                                        RStar<CParameters>
                                                                                                                                                                                    CEntryOperator{'->'}
                                                                                                                                                                                    CVariable
                                                                                                                                                                                        ROptional<ICVariableType>
                                                                                                                                                                                        CLowerIdentifier{'_'}
                                                                                                                                                                                        RStar<CParameters>
                                                                                                                                                                        RLiteral{')'}
                                                                                                                                                                ROptional<CTypeConstraints>
                                                                                                                                                                CFunctionSpecifier
                                                                                                                                                                    RLiteral{'=>'}
                                                                                                                                                                    CLargerExpr
                                                                                                                                                                        CMemberReference
                                                                                                                                                                            CLowerIdentifier{'k'}
                                                                                                                                                                            ROptional<CTypeArguments>
                                                                                                                                                                        CLargerOperator{'>'}
                                                                                                                                                                        CMemberReference
                                                                                                                                                                            CLowerIdentifier{'key'}
                                                                                                                                                                            ROptional<CTypeArguments>
                                                                                                                                                    RLiteral{')'}
                                                                                                                        RLiteral{')'}
                                                                                                                RLiteral{';'}
                                                                                                            CUnclosedStatement
                                                                                                                CCallExpr
                                                                                                                    CSelectionExpr
                                                                                                                        CMemberReference
                                                                                                                            CLowerIdentifier{'elements'}
                                                                                                                            ROptional<CTypeArguments>
                                                                                                                        CMemberSelectionOperator{'.'}
                                                                                                                        CMemberReference
                                                                                                                            CLowerIdentifier{'swap'}
                                                                                                                            ROptional<CTypeArguments>
                                                                                                                    CPositionalArguments
                                                                                                                        RLiteral{'('}
                                                                                                                        ROptional<CSequencedArgumentList>
                                                                                                                            CSequencedArgumentList
                                                                                                                                CMemberReference
                                                                                                                                    CLowerIdentifier{'i'}
                                                                                                                                    ROptional<CTypeArguments>
                                                                                                                                CMemberReference
                                                                                                                                    CLowerIdentifier{'j'}
                                                                                                                                    ROptional<CTypeArguments>
                                                                                                                        RLiteral{')'}
                                                                                                                RLiteral{';'}
                                                                                                            CForElseStatement
                                                                                                                RLiteral{'for'}
                                                                                                                RLiteral{'('}
                                                                                                                ROptional<CForIterator>
                                                                                                                    CForIterator
                                                                                                                        CVariable
                                                                                                                            ROptional<ICVariableType>
                                                                                                                            CLowerIdentifier{'k'}
                                                                                                                            RStar<CParameters>
                                                                                                                        CContainment
                                                                                                                            CContainmentOperator{'in'}
                                                                                                                            CRangeExpr
                                                                                                                                CLiteralNatural{'0'}
                                                                                                                                CRangeOperator{':'}
                                                                                                                                CMultiplicativeExpr
                                                                                                                                    CGroupedExpr
                                                                                                                                        RLiteral{'('}
                                                                                                                                        CAdditiveExpr
                                                                                                                                            CAdditiveExpr
                                                                                                                                                CMemberReference
                                                                                                                                                    CLowerIdentifier{'size'}
                                                                                                                                                    ROptional<CTypeArguments>
                                                                                                                                                CAdditiveOperator{'-'}
                                                                                                                                                CMemberReference
                                                                                                                                                    CLowerIdentifier{'i'}
                                                                                                                                                    ROptional<CTypeArguments>
                                                                                                                                            CAdditiveOperator{'-'}
                                                                                                                                            CLiteralNatural{'1'}
                                                                                                                                        RLiteral{')'}
                                                                                                                                    CMultiplicativeOperator{'/'}
                                                                                                                                    CLiteralNatural{'2'}
                                                                                                                RLiteral{')'}
                                                                                                                CBlock
                                                                                                                    RLiteral{'{'}
                                                                                                                    CImports
                                                                                                                    CStatements
                                                                                                                        CUnclosedStatement
                                                                                                                            CCallExpr
                                                                                                                                CSelectionExpr
                                                                                                                                    CMemberReference
                                                                                                                                        CLowerIdentifier{'elements'}
                                                                                                                                        ROptional<CTypeArguments>
                                                                                                                                    CMemberSelectionOperator{'.'}
                                                                                                                                    CMemberReference
                                                                                                                                        CLowerIdentifier{'swap'}
                                                                                                                                        ROptional<CTypeArguments>
                                                                                                                                CPositionalArguments
                                                                                                                                    RLiteral{'('}
                                                                                                                                    ROptional<CSequencedArgumentList>
                                                                                                                                        CSequencedArgumentList
                                                                                                                                            CAdditiveExpr
                                                                                                                                                CAdditiveExpr
                                                                                                                                                    CMemberReference
                                                                                                                                                        CLowerIdentifier{'i'}
                                                                                                                                                        ROptional<CTypeArguments>
                                                                                                                                                    CAdditiveOperator{'+'}
                                                                                                                                                    CLiteralNatural{'1'}
                                                                                                                                                CAdditiveOperator{'+'}
                                                                                                                                                CMemberReference
                                                                                                                                                    CLowerIdentifier{'k'}
                                                                                                                                                    ROptional<CTypeArguments>
                                                                                                                                            CAdditiveExpr
                                                                                                                                                CAdditiveExpr
                                                                                                                                                    CMemberReference
                                                                                                                                                        CLowerIdentifier{'size'}
                                                                                                                                                        ROptional<CTypeArguments>
                                                                                                                                                    CAdditiveOperator{'-'}
                                                                                                                                                    CLiteralNatural{'1'}
                                                                                                                                                CAdditiveOperator{'-'}
                                                                                                                                                CMemberReference
                                                                                                                                                    CLowerIdentifier{'k'}
                                                                                                                                                    ROptional<CTypeArguments>
                                                                                                                                    RLiteral{')'}
                                                                                                                            RLiteral{';'}
                                                                                                                    RLiteral{'}'}
                                                                                                                ROptional<CElseBlock>
                                                                                                        RLiteral{'}'}
                                                                                            ROptional<CElseBlock>
                                                                                                CElseBlock
                                                                                                    RLiteral{'else'}
                                                                                                    CBlock
                                                                                                        RLiteral{'{'}
                                                                                                        CImports
                                                                                                        CStatements
                                                                                                            CUnclosedStatement
                                                                                                                CReturnStatement
                                                                                                                    RLiteral{'return'}
                                                                                                                    ROptional<ICExpression>
                                                                                                                        CMemberReference
                                                                                                                            CLowerIdentifier{'finished'}
                                                                                                                            ROptional<CTypeArguments>
                                                                                                                RLiteral{';'}
                                                                                                        RLiteral{'}'}
                                                                                        CUnclosedStatement
                                                                                            CReturnStatement
                                                                                                RLiteral{'return'}
                                                                                                ROptional<ICExpression>
                                                                                                    CIfExpr
                                                                                                        RLiteral{'if'}
                                                                                                        CConditions
                                                                                                            RLiteral{'('}
                                                                                                            ROptional<CConditionList>
                                                                                                                CConditionList
                                                                                                                    CNonemptyCondition
                                                                                                                        ROptional<RLiteral>
                                                                                                                        RLiteral{'nonempty'}
                                                                                                                        CLetVariable
                                                                                                                            CVariable
                                                                                                                                ROptional<ICVariableType>
                                                                                                                                CLowerIdentifier{'permutation'}
                                                                                                                                RStar<CParameters>
                                                                                                                            CValueSpecifier
                                                                                                                                RLiteral{'='}
                                                                                                                                CSelectionExpr
                                                                                                                                    CMemberReference
                                                                                                                                        CLowerIdentifier{'elements'}
                                                                                                                                        ROptional<CTypeArguments>
                                                                                                                                    CMemberSelectionOperator{'*.'}
                                                                                                                                    CMemberReference
                                                                                                                                        CLowerIdentifier{'item'}
                                                                                                                                        ROptional<CTypeArguments>
                                                                                                            RLiteral{')'}
                                                                                                        CThenExpression
                                                                                                            RLiteral{'then'}
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'permutation'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                        CElseExpression
                                                                                                            RLiteral{'else'}
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'finished'}
                                                                                                                ROptional<CTypeArguments>
                                                                                            RLiteral{';'}
                                                                                    RLiteral{'}'}
                                                                        RLiteral{'}'}
                                                        RLiteral{';'}
                                                RLiteral{'}'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CVerbatimString{'\"\"\"\r\n    The combinations of elements of this collection, of the given positive [[size|length]], as a stream of nonempty\r\n    [[sequences|Sequence]]. That is, a stream producing every distinct selection of `length` elements of this collection.\r\n    \r\n    For example,\r\n    \r\n        \"ABCD\".combinations(2).map(String)\r\n    \r\n    is the stream of strings `{ \"AB\", \"AC\", \"AD\", \"BC\", \"BD\", \"CD\" }`.\r\n    \r\n    If this collection is empty, the resulting stream is empty.\r\n    \r\n    The combinations are enumerated lexicographically according to the order in which each distinct element of this\r\n    collection is first produced by its iterator. No combination is repeated.\r\n    \r\n    Two elements are considered distinct if either:\r\n    \r\n    - they are both instances of `Object`, and are [[unequal|Object.equals]], or\r\n    - one element is an `Object` and the other is `null`.\r\n    \"\"\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'throws'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CClassLiteral
                                                            RLiteral{'class'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'AssertionError'}
                                                        CLiteralString{'\"if [[length]] is nonpositive or if `length` is larger than the number of distinct elements of this collection\"'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                            CIterableType
                                RLiteral{'{'}
                                ROptional<ICVariadicType>
                                    CVariadicTypeCore
                                        CTupleType
                                            RLiteral{'['}
                                            ROptional<ICTypeTypeArguments>
                                                CDefaultedTypeList
                                                    CVariadicTypeCore
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Element'}
                                                                ROptional<CTypeArguments>
                                                        CVariadicOperator{'+'}
                                            RLiteral{']'}
                                        CVariadicOperator{'*'}
                                RLiteral{'}'}
                            CLowerIdentifier{'combinations'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The number of distinct elements in each combination\"'}
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'length'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CUnclosedStatement
                                        CAssertionStatement
                                            ROptional<ICAssertionMessage>
                                                CLiteralString{'\"length must be strictly positive\"'}
                                            RLiteral{'assert'}
                                            CConditions
                                                RLiteral{'('}
                                                ROptional<CConditionList>
                                                    CConditionList
                                                        CLargerExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'length'}
                                                                ROptional<CTypeArguments>
                                                            CLargerOperator{'>'}
                                                            CLiteralNatural{'0'}
                                                RLiteral{')'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CReturnStatement
                                            RLiteral{'return'}
                                            ROptional<ICExpression>
                                                CObjectExpr
                                                    RLiteral{'object'}
                                                    ROptional<CExtendedType>
                                                    ROptional<CSatisfiedTypes>
                                                        CSatisfiedTypes
                                                            RLiteral{'satisfies'}
                                                            CUnionTypeList
                                                                CIterableType
                                                                    RLiteral{'{'}
                                                                    ROptional<ICVariadicType>
                                                                        CVariadicTypeCore
                                                                            CTupleType
                                                                                RLiteral{'['}
                                                                                ROptional<ICTypeTypeArguments>
                                                                                    CDefaultedTypeList
                                                                                        CVariadicTypeCore
                                                                                            CTypePath
                                                                                                CTypeReference
                                                                                                    CUpperIdentifier{'Element'}
                                                                                                    ROptional<CTypeArguments>
                                                                                            CVariadicOperator{'+'}
                                                                                RLiteral{']'}
                                                                            CVariadicOperator{'*'}
                                                                    RLiteral{'}'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CInferredAttributeDeclaration
                                                                CAnnotations
                                                                    ROptional<ICStringLiteral>
                                                                    RStar<CAnnotation>
                                                                CKwValue{'value'}
                                                                CLowerIdentifier{'distinctElements'}
                                                                COptionalAnySpecifier
                                                                    ROptional<ICAnySpecifier>
                                                                        CValueSpecifier
                                                                            RLiteral{'='}
                                                                            CSelectionExpr
                                                                                CSelfReference{'outer'}
                                                                                CMemberSelectionOperator{'.'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'distinct'}
                                                                                    ROptional<CTypeArguments>
                                                                    RLiteral{';'}
                                                            CUnclosedStatement
                                                                CSpecificationStatement
                                                                    CMemberReference
                                                                        CLowerIdentifier{'empty'}
                                                                        ROptional<CTypeArguments>
                                                                    CFunctionSpecifier
                                                                        RLiteral{'=>'}
                                                                        CSelectionExpr
                                                                            CSelfReference{'outer'}
                                                                            CMemberSelectionOperator{'.'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'empty'}
                                                                                ROptional<CTypeArguments>
                                                                RLiteral{';'}
                                                            CUnclosedStatement
                                                                CSpecificationStatement
                                                                    CCallExpr
                                                                        CMemberReference
                                                                            CLowerIdentifier{'iterator'}
                                                                            ROptional<CTypeArguments>
                                                                        CPositionalArguments
                                                                            RLiteral{'('}
                                                                            ROptional<CSequencedArgumentList>
                                                                            RLiteral{')'}
                                                                    CFunctionSpecifier
                                                                        RLiteral{'=>'}
                                                                        CObjectExpr
                                                                            RLiteral{'object'}
                                                                            ROptional<CExtendedType>
                                                                            ROptional<CSatisfiedTypes>
                                                                                CSatisfiedTypes
                                                                                    RLiteral{'satisfies'}
                                                                                    CUnionTypeList
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Iterator'}
                                                                                                ROptional<CTypeArguments>
                                                                                                    CTypeArguments
                                                                                                        RLiteral{'<'}
                                                                                                        ROptional<CTypeArgumentList>
                                                                                                            CTypeArgumentList
                                                                                                                CVariancedType
                                                                                                                    ROptional<ICVariance>
                                                                                                                    CTupleType
                                                                                                                        RLiteral{'['}
                                                                                                                        ROptional<ICTypeTypeArguments>
                                                                                                                            CDefaultedTypeList
                                                                                                                                CVariadicTypeCore
                                                                                                                                    CTypePath
                                                                                                                                        CTypeReference
                                                                                                                                            CUpperIdentifier{'Element'}
                                                                                                                                            ROptional<CTypeArguments>
                                                                                                                                    CVariadicOperator{'+'}
                                                                                                                        RLiteral{']'}
                                                                                                        RLiteral{'>'}
                                                                            CBlock
                                                                                RLiteral{'{'}
                                                                                CImports
                                                                                CStatements
                                                                                    CInferredAttributeDeclaration
                                                                                        CAnnotations
                                                                                            ROptional<ICStringLiteral>
                                                                                            RStar<CAnnotation>
                                                                                        CKwValue{'value'}
                                                                                        CLowerIdentifier{'elements'}
                                                                                        COptionalAnySpecifier
                                                                                            ROptional<ICAnySpecifier>
                                                                                                CValueSpecifier
                                                                                                    RLiteral{'='}
                                                                                                    CCallExpr
                                                                                                        CSelectionExpr
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'distinctElements'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                            CMemberSelectionOperator{'.'}
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'sequence'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                        CPositionalArguments
                                                                                                            RLiteral{'('}
                                                                                                            ROptional<CSequencedArgumentList>
                                                                                                            RLiteral{')'}
                                                                                            RLiteral{';'}
                                                                                    CInferredAttributeDeclaration
                                                                                        CAnnotations
                                                                                            ROptional<ICStringLiteral>
                                                                                            RStar<CAnnotation>
                                                                                        CKwValue{'value'}
                                                                                        CLowerIdentifier{'size'}
                                                                                        COptionalAnySpecifier
                                                                                            ROptional<ICAnySpecifier>
                                                                                                CValueSpecifier
                                                                                                    RLiteral{'='}
                                                                                                    CSelectionExpr
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'elements'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                        CMemberSelectionOperator{'.'}
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'size'}
                                                                                                            ROptional<CTypeArguments>
                                                                                            RLiteral{';'}
                                                                                    CUnclosedStatement
                                                                                        CAssertionStatement
                                                                                            ROptional<ICAssertionMessage>
                                                                                                CLiteralString{'\"length is larger than the number of distinct elements\"'}
                                                                                            RLiteral{'assert'}
                                                                                            CConditions
                                                                                                RLiteral{'('}
                                                                                                ROptional<CConditionList>
                                                                                                    CConditionList
                                                                                                        CSmallerExpr
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'length'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                            CSmallerOperator{'<='}
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'size'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                RLiteral{')'}
                                                                                        RLiteral{';'}
                                                                                    CInferredAttributeDeclaration
                                                                                        CAnnotations
                                                                                            ROptional<ICStringLiteral>
                                                                                            RStar<CAnnotation>
                                                                                        CKwValue{'value'}
                                                                                        CLowerIdentifier{'selection'}
                                                                                        COptionalAnySpecifier
                                                                                            ROptional<ICAnySpecifier>
                                                                                                CValueSpecifier
                                                                                                    RLiteral{'='}
                                                                                                    CCallExpr
                                                                                                        CTypeReference
                                                                                                            CUpperIdentifier{'Array'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                        CPositionalArguments
                                                                                                            RLiteral{'('}
                                                                                                            ROptional<CSequencedArgumentList>
                                                                                                                CSequencedArgumentList
                                                                                                                    CRangeExpr
                                                                                                                        CLiteralNatural{'0'}
                                                                                                                        CRangeOperator{':'}
                                                                                                                        CMemberReference
                                                                                                                            CLowerIdentifier{'length'}
                                                                                                                            ROptional<CTypeArguments>
                                                                                                            RLiteral{')'}
                                                                                            RLiteral{';'}
                                                                                    CInferredAttributeDeclaration
                                                                                        CAnnotations
                                                                                            ROptional<ICStringLiteral>
                                                                                            RStar<CAnnotation>
                                                                                                CAnnotation
                                                                                                    CLowerIdentifier{'variable'}
                                                                                                    ROptional<ICArguments>
                                                                                        CKwValue{'value'}
                                                                                        CLowerIdentifier{'done'}
                                                                                        COptionalAnySpecifier
                                                                                            ROptional<ICAnySpecifier>
                                                                                                CValueSpecifier
                                                                                                    RLiteral{'='}
                                                                                                    CSelectionExpr
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'elements'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                        CMemberSelectionOperator{'.'}
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'empty'}
                                                                                                            ROptional<CTypeArguments>
                                                                                            RLiteral{';'}
                                                                                    CTypedMethodDeclaration
                                                                                        CAnnotations
                                                                                            ROptional<ICStringLiteral>
                                                                                            RStar<CAnnotation>
                                                                                                CAnnotation
                                                                                                    CLowerIdentifier{'shared'}
                                                                                                    ROptional<ICArguments>
                                                                                                CAnnotation
                                                                                                    CLowerIdentifier{'actual'}
                                                                                                    ROptional<ICArguments>
                                                                                        CUnionTypeCore
                                                                                            CTupleType
                                                                                                RLiteral{'['}
                                                                                                ROptional<ICTypeTypeArguments>
                                                                                                    CDefaultedTypeList
                                                                                                        CVariadicTypeCore
                                                                                                            CTypePath
                                                                                                                CTypeReference
                                                                                                                    CUpperIdentifier{'Element'}
                                                                                                                    ROptional<CTypeArguments>
                                                                                                            CVariadicOperator{'+'}
                                                                                                RLiteral{']'}
                                                                                            RLiteral{'|'}
                                                                                            CTypePath
                                                                                                CTypeReference
                                                                                                    CUpperIdentifier{'Finished'}
                                                                                                    ROptional<CTypeArguments>
                                                                                        CLowerIdentifier{'next'}
                                                                                        ROptional<CTypeParameters>
                                                                                        RPlus<CParameters>
                                                                                            CParameters
                                                                                                RLiteral{'('}
                                                                                                ROptional<CParameterList>
                                                                                                RLiteral{')'}
                                                                                        ROptional<CTypeConstraints>
                                                                                        CBlock
                                                                                            RLiteral{'{'}
                                                                                            CImports
                                                                                            CStatements
                                                                                                CIfElseStatement
                                                                                                    RLiteral{'if'}
                                                                                                    CConditions
                                                                                                        RLiteral{'('}
                                                                                                        ROptional<CConditionList>
                                                                                                            CConditionList
                                                                                                                CMemberReference
                                                                                                                    CLowerIdentifier{'done'}
                                                                                                                    ROptional<CTypeArguments>
                                                                                                        RLiteral{')'}
                                                                                                    CBlock
                                                                                                        RLiteral{'{'}
                                                                                                        CImports
                                                                                                        CStatements
                                                                                                            CUnclosedStatement
                                                                                                                CReturnStatement
                                                                                                                    RLiteral{'return'}
                                                                                                                    ROptional<ICExpression>
                                                                                                                        CMemberReference
                                                                                                                            CLowerIdentifier{'finished'}
                                                                                                                            ROptional<CTypeArguments>
                                                                                                                RLiteral{';'}
                                                                                                        RLiteral{'}'}
                                                                                                    RStar<CElseIf>
                                                                                                    ROptional<CElseBlock>
                                                                                                CInferredAttributeDeclaration
                                                                                                    CAnnotations
                                                                                                        ROptional<ICStringLiteral>
                                                                                                        RStar<CAnnotation>
                                                                                                    CKwValue{'value'}
                                                                                                    CLowerIdentifier{'current'}
                                                                                                    COptionalAnySpecifier
                                                                                                        ROptional<ICAnySpecifier>
                                                                                                            CValueSpecifier
                                                                                                                RLiteral{'='}
                                                                                                                CCallExpr
                                                                                                                    CSelectionExpr
                                                                                                                        CMemberReference
                                                                                                                            CLowerIdentifier{'selection'}
                                                                                                                            ROptional<CTypeArguments>
                                                                                                                        CMemberSelectionOperator{'.'}
                                                                                                                        CMemberReference
                                                                                                                            CLowerIdentifier{'collect'}
                                                                                                                            ROptional<CTypeArguments>
                                                                                                                    CPositionalArguments
                                                                                                                        RLiteral{'('}
                                                                                                                        ROptional<CSequencedArgumentList>
                                                                                                                            CSequencedArgumentList
                                                                                                                                CInferredFunctionExpr
                                                                                                                                    ROptional<RLiteral>
                                                                                                                                    ROptional<CTypeParameters>
                                                                                                                                    RPlus<CParameters>
                                                                                                                                        CParameters
                                                                                                                                            RLiteral{'('}
                                                                                                                                            ROptional<CParameterList>
                                                                                                                                                CParameterList
                                                                                                                                                    CParameterReference
                                                                                                                                                        CLowerIdentifier{'i'}
                                                                                                                                                        ROptional<CValueSpecifier>
                                                                                                                                            RLiteral{')'}
                                                                                                                                    ROptional<CTypeConstraints>
                                                                                                                                    CBlock
                                                                                                                                        RLiteral{'{'}
                                                                                                                                        CImports
                                                                                                                                        CStatements
                                                                                                                                            CIfElseStatement
                                                                                                                                                RLiteral{'if'}
                                                                                                                                                CConditions
                                                                                                                                                    RLiteral{'('}
                                                                                                                                                    ROptional<CConditionList>
                                                                                                                                                        CConditionList
                                                                                                                                                            CExistsCondition
                                                                                                                                                                ROptional<RLiteral>
                                                                                                                                                                RLiteral{'exists'}
                                                                                                                                                                CLetVariable
                                                                                                                                                                    CVariable
                                                                                                                                                                        ROptional<ICVariableType>
                                                                                                                                                                        CLowerIdentifier{'e'}
                                                                                                                                                                        RStar<CParameters>
                                                                                                                                                                    CValueSpecifier
                                                                                                                                                                        RLiteral{'='}
                                                                                                                                                                        CCallExpr
                                                                                                                                                                            CSelectionExpr
                                                                                                                                                                                CMemberReference
                                                                                                                                                                                    CLowerIdentifier{'elements'}
                                                                                                                                                                                    ROptional<CTypeArguments>
                                                                                                                                                                                CMemberSelectionOperator{'.'}
                                                                                                                                                                                CMemberReference
                                                                                                                                                                                    CLowerIdentifier{'getFromFirst'}
                                                                                                                                                                                    ROptional<CTypeArguments>
                                                                                                                                                                            CPositionalArguments
                                                                                                                                                                                RLiteral{'('}
                                                                                                                                                                                ROptional<CSequencedArgumentList>
                                                                                                                                                                                    CSequencedArgumentList
                                                                                                                                                                                        CMemberReference
                                                                                                                                                                                            CLowerIdentifier{'i'}
                                                                                                                                                                                            ROptional<CTypeArguments>
                                                                                                                                                                                RLiteral{')'}
                                                                                                                                                    RLiteral{')'}
                                                                                                                                                CBlock
                                                                                                                                                    RLiteral{'{'}
                                                                                                                                                    CImports
                                                                                                                                                    CStatements
                                                                                                                                                        CUnclosedStatement
                                                                                                                                                            CReturnStatement
                                                                                                                                                                RLiteral{'return'}
                                                                                                                                                                ROptional<ICExpression>
                                                                                                                                                                    CMemberReference
                                                                                                                                                                        CLowerIdentifier{'e'}
                                                                                                                                                                        ROptional<CTypeArguments>
                                                                                                                                                            RLiteral{';'}
                                                                                                                                                    RLiteral{'}'}
                                                                                                                                                RStar<CElseIf>
                                                                                                                                                ROptional<CElseBlock>
                                                                                                                                                    CElseBlock
                                                                                                                                                        RLiteral{'else'}
                                                                                                                                                        CBlock
                                                                                                                                                            RLiteral{'{'}
                                                                                                                                                            CImports
                                                                                                                                                            CStatements
                                                                                                                                                                CUnclosedStatement
                                                                                                                                                                    CAssertionStatement
                                                                                                                                                                        ROptional<ICAssertionMessage>
                                                                                                                                                                        RLiteral{'assert'}
                                                                                                                                                                        CConditions
                                                                                                                                                                            RLiteral{'('}
                                                                                                                                                                            ROptional<CConditionList>
                                                                                                                                                                                CConditionList
                                                                                                                                                                                    CIsCondition
                                                                                                                                                                                        ROptional<RLiteral>
                                                                                                                                                                                        RLiteral{'is'}
                                                                                                                                                                                        CTypePath
                                                                                                                                                                                            CTypeReference
                                                                                                                                                                                                CUpperIdentifier{'Element'}
                                                                                                                                                                                                ROptional<CTypeArguments>
                                                                                                                                                                                        CIsConditionVariable
                                                                                                                                                                                            CLowerIdentifier{'null'}
                                                                                                                                                                                            ROptional<CValueSpecifier>
                                                                                                                                                                            RLiteral{')'}
                                                                                                                                                                    RLiteral{';'}
                                                                                                                                                                CUnclosedStatement
                                                                                                                                                                    CReturnStatement
                                                                                                                                                                        RLiteral{'return'}
                                                                                                                                                                        ROptional<ICExpression>
                                                                                                                                                                            CMemberReference
                                                                                                                                                                                CLowerIdentifier{'null'}
                                                                                                                                                                                ROptional<CTypeArguments>
                                                                                                                                                                    RLiteral{';'}
                                                                                                                                                            RLiteral{'}'}
                                                                                                                                        RLiteral{'}'}
                                                                                                                        RLiteral{')'}
                                                                                                        RLiteral{';'}
                                                                                                CUnclosedStatement
                                                                                                    CAssertionStatement
                                                                                                        ROptional<ICAssertionMessage>
                                                                                                        RLiteral{'assert'}
                                                                                                        CConditions
                                                                                                            RLiteral{'('}
                                                                                                            ROptional<CConditionList>
                                                                                                                CConditionList
                                                                                                                    CNonemptyCondition
                                                                                                                        ROptional<RLiteral>
                                                                                                                        RLiteral{'nonempty'}
                                                                                                                        CMemberReference
                                                                                                                            CLowerIdentifier{'current'}
                                                                                                                            ROptional<CTypeArguments>
                                                                                                            RLiteral{')'}
                                                                                                    RLiteral{';'}
                                                                                                CInferredAttributeDeclaration
                                                                                                    CAnnotations
                                                                                                        ROptional<ICStringLiteral>
                                                                                                        RStar<CAnnotation>
                                                                                                            CAnnotation
                                                                                                                CLowerIdentifier{'variable'}
                                                                                                                ROptional<ICArguments>
                                                                                                    CKwValue{'value'}
                                                                                                    CLowerIdentifier{'i'}
                                                                                                    COptionalAnySpecifier
                                                                                                        ROptional<ICAnySpecifier>
                                                                                                            CValueSpecifier
                                                                                                                RLiteral{'='}
                                                                                                                CAdditiveExpr
                                                                                                                    CMemberReference
                                                                                                                        CLowerIdentifier{'length'}
                                                                                                                        ROptional<CTypeArguments>
                                                                                                                    CAdditiveOperator{'-'}
                                                                                                                    CLiteralNatural{'1'}
                                                                                                        RLiteral{';'}
                                                                                                CWhileStatement
                                                                                                    RLiteral{'while'}
                                                                                                    CConditions
                                                                                                        RLiteral{'('}
                                                                                                        ROptional<CConditionList>
                                                                                                            CConditionList
                                                                                                                CMemberReference
                                                                                                                    CLowerIdentifier{'true'}
                                                                                                                    ROptional<CTypeArguments>
                                                                                                        RLiteral{')'}
                                                                                                    CBlock
                                                                                                        RLiteral{'{'}
                                                                                                        CImports
                                                                                                        CStatements
                                                                                                            CIfElseStatement
                                                                                                                RLiteral{'if'}
                                                                                                                CConditions
                                                                                                                    RLiteral{'('}
                                                                                                                    ROptional<CConditionList>
                                                                                                                        CConditionList
                                                                                                                            CSmallerExpr
                                                                                                                                CMemberReference
                                                                                                                                    CLowerIdentifier{'i'}
                                                                                                                                    ROptional<CTypeArguments>
                                                                                                                                CSmallerOperator{'<'}
                                                                                                                                CLiteralNatural{'0'}
                                                                                                                    RLiteral{')'}
                                                                                                                CBlock
                                                                                                                    RLiteral{'{'}
                                                                                                                    CImports
                                                                                                                    CStatements
                                                                                                                        CUnclosedStatement
                                                                                                                            CAssignmentExpr
                                                                                                                                CMemberReference
                                                                                                                                    CLowerIdentifier{'done'}
                                                                                                                                    ROptional<CTypeArguments>
                                                                                                                                CAssignmentOperator{'='}
                                                                                                                                CMemberReference
                                                                                                                                    CLowerIdentifier{'true'}
                                                                                                                                    ROptional<CTypeArguments>
                                                                                                                            RLiteral{';'}
                                                                                                                        CUnclosedStatement
                                                                                                                            CBreakStatement{'break'}
                                                                                                                            RLiteral{';'}
                                                                                                                    RLiteral{'}'}
                                                                                                                RStar<CElseIf>
                                                                                                                ROptional<CElseBlock>
                                                                                                            CUnclosedStatement
                                                                                                                CAssertionStatement
                                                                                                                    ROptional<ICAssertionMessage>
                                                                                                                    RLiteral{'assert'}
                                                                                                                    CConditions
                                                                                                                        RLiteral{'('}
                                                                                                                        ROptional<CConditionList>
                                                                                                                            CConditionList
                                                                                                                                CExistsCondition
                                                                                                                                    ROptional<RLiteral>
                                                                                                                                    RLiteral{'exists'}
                                                                                                                                    CLetVariable
                                                                                                                                        CVariable
                                                                                                                                            ROptional<ICVariableType>
                                                                                                                                            CLowerIdentifier{'s'}
                                                                                                                                            RStar<CParameters>
                                                                                                                                        CValueSpecifier
                                                                                                                                            RLiteral{'='}
                                                                                                                                            CIndexedExpr
                                                                                                                                                CMemberReference
                                                                                                                                                    CLowerIdentifier{'selection'}
                                                                                                                                                    ROptional<CTypeArguments>
                                                                                                                                                RLiteral{'['}
                                                                                                                                                CMemberReference
                                                                                                                                                    CLowerIdentifier{'i'}
                                                                                                                                                    ROptional<CTypeArguments>
                                                                                                                                                RLiteral{']'}
                                                                                                                        RLiteral{')'}
                                                                                                                RLiteral{';'}
                                                                                                            CIfElseStatement
                                                                                                                RLiteral{'if'}
                                                                                                                CConditions
                                                                                                                    RLiteral{'('}
                                                                                                                    ROptional<CConditionList>
                                                                                                                        CConditionList
                                                                                                                            CEqualityExpr
                                                                                                                                CMemberReference
                                                                                                                                    CLowerIdentifier{'s'}
                                                                                                                                    ROptional<CTypeArguments>
                                                                                                                                CEqualityOperator{'=='}
                                                                                                                                CAdditiveExpr
                                                                                                                                    CAdditiveExpr
                                                                                                                                        CMemberReference
                                                                                                                                            CLowerIdentifier{'size'}
                                                                                                                                            ROptional<CTypeArguments>
                                                                                                                                        CAdditiveOperator{'-'}
                                                                                                                                        CMemberReference
                                                                                                                                            CLowerIdentifier{'length'}
                                                                                                                                            ROptional<CTypeArguments>
                                                                                                                                    CAdditiveOperator{'+'}
                                                                                                                                    CMemberReference
                                                                                                                                        CLowerIdentifier{'i'}
                                                                                                                                        ROptional<CTypeArguments>
                                                                                                                    RLiteral{')'}
                                                                                                                CBlock
                                                                                                                    RLiteral{'{'}
                                                                                                                    CImports
                                                                                                                    CStatements
                                                                                                                        CUnclosedStatement
                                                                                                                            CPostfixExpr
                                                                                                                                CMemberReference
                                                                                                                                    CLowerIdentifier{'i'}
                                                                                                                                    ROptional<CTypeArguments>
                                                                                                                                CIncrementOperator{'--'}
                                                                                                                            RLiteral{';'}
                                                                                                                    RLiteral{'}'}
                                                                                                                RStar<CElseIf>
                                                                                                                ROptional<CElseBlock>
                                                                                                                    CElseBlock
                                                                                                                        RLiteral{'else'}
                                                                                                                        CBlock
                                                                                                                            RLiteral{'{'}
                                                                                                                            CImports
                                                                                                                            CStatements
                                                                                                                                CInferredAttributeDeclaration
                                                                                                                                    CAnnotations
                                                                                                                                        ROptional<ICStringLiteral>
                                                                                                                                        RStar<CAnnotation>
                                                                                                                                            CAnnotation
                                                                                                                                                CLowerIdentifier{'variable'}
                                                                                                                                                ROptional<ICArguments>
                                                                                                                                    CKwValue{'value'}
                                                                                                                                    CLowerIdentifier{'j'}
                                                                                                                                    COptionalAnySpecifier
                                                                                                                                        ROptional<ICAnySpecifier>
                                                                                                                                            CValueSpecifier
                                                                                                                                                RLiteral{'='}
                                                                                                                                                CMemberReference
                                                                                                                                                    CLowerIdentifier{'s'}
                                                                                                                                                    ROptional<CTypeArguments>
                                                                                                                                        RLiteral{';'}
                                                                                                                                CWhileStatement
                                                                                                                                    RLiteral{'while'}
                                                                                                                                    CConditions
                                                                                                                                        RLiteral{'('}
                                                                                                                                        ROptional<CConditionList>
                                                                                                                                            CConditionList
                                                                                                                                                CSmallerExpr
                                                                                                                                                    CMemberReference
                                                                                                                                                        CLowerIdentifier{'i'}
                                                                                                                                                        ROptional<CTypeArguments>
                                                                                                                                                    CSmallerOperator{'<'}
                                                                                                                                                    CMemberReference
                                                                                                                                                        CLowerIdentifier{'length'}
                                                                                                                                                        ROptional<CTypeArguments>
                                                                                                                                        RLiteral{')'}
                                                                                                                                    CBlock
                                                                                                                                        RLiteral{'{'}
                                                                                                                                        CImports
                                                                                                                                        CStatements
                                                                                                                                            CUnclosedStatement
                                                                                                                                                CAssignmentExpr
                                                                                                                                                    CIndexedExpr
                                                                                                                                                        CMemberReference
                                                                                                                                                            CLowerIdentifier{'selection'}
                                                                                                                                                            ROptional<CTypeArguments>
                                                                                                                                                        RLiteral{'['}
                                                                                                                                                        CPostfixExpr
                                                                                                                                                            CMemberReference
                                                                                                                                                                CLowerIdentifier{'i'}
                                                                                                                                                                ROptional<CTypeArguments>
                                                                                                                                                            CIncrementOperator{'++'}
                                                                                                                                                        RLiteral{']'}
                                                                                                                                                    CAssignmentOperator{'='}
                                                                                                                                                    CPrefixExpr
                                                                                                                                                        CIncrementOperator{'++'}
                                                                                                                                                        CMemberReference
                                                                                                                                                            CLowerIdentifier{'j'}
                                                                                                                                                            ROptional<CTypeArguments>
                                                                                                                                                RLiteral{';'}
                                                                                                                                        RLiteral{'}'}
                                                                                                                                CUnclosedStatement
                                                                                                                                    CBreakStatement{'break'}
                                                                                                                                    RLiteral{';'}
                                                                                                                            RLiteral{'}'}
                                                                                                        RLiteral{'}'}
                                                                                                CUnclosedStatement
                                                                                                    CReturnStatement
                                                                                                        RLiteral{'return'}
                                                                                                        ROptional<ICExpression>
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'current'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                    RLiteral{';'}
                                                                                            RLiteral{'}'}
                                                                                RLiteral{'}'}
                                                                RLiteral{';'}
                                                        RLiteral{'}'}
                                        RLiteral{';'}
                                RLiteral{'}'}
                    RLiteral{'}'}
            CObjectDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Used by [[Collection.permutations]] to group nulls together.\"'}
                    RStar<CAnnotation>
                RLiteral{'object'}
                CLowerIdentifier{'nullElement'}
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
    REof{'\r\n'}
