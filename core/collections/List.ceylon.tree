CXStart
    CCodeUnit
        CNamespace
            CAnnotations
                ROptional<ICStringLiteral>
                RStar<CAnnotation>
            RLiteral{'namespace'}
            CNamespacePath
                CIdentifier{'six'}
                CIdentifier{'core'}
            RLiteral{';'}
        CImports
        CTopDeclarations
            CInterfaceDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CVerbatimString{'\"\"\"A collection in which every element has a unique \r\n   non-negative integer index. The elements of a nonempty \r\n   list are indexed starting with `0` at the [[first]] \r\n   element of the list, and ending with the index \r\n   [[lastIndex]] at the [[last]] element of the list.\r\n   \r\n   - For any nonempty list, `lastIndex==size-1`. \r\n   - For an empty list, `size==0` and the `lastIndex` is \r\n     `null`.\r\n   \r\n   Thus, the range of indexes of the list is formed by the \r\n   expression `0:list.size`.\r\n   \r\n   A `List` is a [[Collection]] of its elements, and a \r\n   [[Correspondence]] from indexes to elements.\r\n   \r\n   Every list has a well-defined and stable iteration order.\r\n   An [[iterator]] of a nonempty list is required to return \r\n   the elements of the list in order of increasing index, \r\n   beginning with the element at index `0`, and ending with\r\n   the element at index `lastIndex`. Thus, every iterator of \r\n   an immutable list produces exactly the same elements in \r\n   exactly the same order.\r\n   \r\n   Direct access to a list element by index produces a value \r\n   of optional type. The following idiom may be used instead \r\n   of upfront bounds-checking, as long as the list element \r\n   type is a non-`null` type:\r\n   \r\n       if (exists char = \"hello world\"[index]) { \r\n           //do something with char\r\n       }\r\n       else {\r\n           //out of bounds\r\n       }\r\n   \r\n   When an algorithm guarantees that a list contains a given \r\n   index, the following idiom may be used:\r\n   \r\n       assert (exists char = \"hello world\"[index]);\r\n       //do something with char\r\n   \r\n   To iterate the indexes of a `List`, use the following\r\n   idiom:\r\n   \r\n       for (i->char in \"hello world\".indexed) { ... }\r\n   \r\n   [[Strings|String]], [[sequences|Sequential]], \r\n   [[tuples|Tuple]], and [[arrays|Array]] are all `List`s,\r\n   and are all of fixed length. Variable-length mutable\r\n   `List`s are also possible.\"\"\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'see'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CInterfaceLiteral
                                                RLiteral{'interface'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'Sequence'}
                                            CInterfaceLiteral
                                                RLiteral{'interface'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'Empty'}
                                            CClassLiteral
                                                RLiteral{'class'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'Array'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'tagged'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"Collections\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                RLiteral{'interface'}
                CUpperIdentifier{'List'}
                ROptional<CTypeParameters>
                    CTypeParameters
                        RLiteral{'<'}
                        CTypeParameterList
                            CTypeParameter
                                ROptional<ICVariance>
                                    CVariance{'out'}
                                CUpperIdentifier{'Element'}
                                ROptional<CTypeDefault>
                                    CTypeDefault
                                        RLiteral{'='}
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Anything'}
                                                ROptional<CTypeArguments>
                        RLiteral{'>'}
                ROptional<CCaseTypes>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CIntersectionTypeCore
                                CIntersectionTypeCore
                                    CTypePath
                                        CTypeReference
                                            CUpperIdentifier{'Collection'}
                                            ROptional<CTypeArguments>
                                                CTypeArguments
                                                    RLiteral{'<'}
                                                    ROptional<CTypeArgumentList>
                                                        CTypeArgumentList
                                                            CVariancedType
                                                                ROptional<ICVariance>
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'Element'}
                                                                        ROptional<CTypeArguments>
                                                    RLiteral{'>'}
                                    CIntersectionOperator{'&'}
                                    CTypePath
                                        CTypeReference
                                            CUpperIdentifier{'Correspondence'}
                                            ROptional<CTypeArguments>
                                                CTypeArguments
                                                    RLiteral{'<'}
                                                    ROptional<CTypeArgumentList>
                                                        CTypeArgumentList
                                                            CVariancedType
                                                                ROptional<ICVariance>
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'Integer'}
                                                                        ROptional<CTypeArguments>
                                                            CVariancedType
                                                                ROptional<ICVariance>
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'Element'}
                                                                        ROptional<CTypeArguments>
                                                    RLiteral{'>'}
                                CIntersectionOperator{'&'}
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Ranged'}
                                        ROptional<CTypeArguments>
                                            CTypeArguments
                                                RLiteral{'<'}
                                                ROptional<CTypeArgumentList>
                                                    CTypeArgumentList
                                                        CVariancedType
                                                            ROptional<ICVariance>
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Integer'}
                                                                    ROptional<CTypeArguments>
                                                        CVariancedType
                                                            ROptional<ICVariance>
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Element'}
                                                                    ROptional<CTypeArguments>
                                                        CVariancedType
                                                            ROptional<ICVariance>
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'List'}
                                                                    ROptional<CTypeArguments>
                                                                        CTypeArguments
                                                                            RLiteral{'<'}
                                                                            ROptional<CTypeArgumentList>
                                                                                CTypeArgumentList
                                                                                    CVariancedType
                                                                                        ROptional<ICVariance>
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Element'}
                                                                                                ROptional<CTypeArguments>
                                                                            RLiteral{'>'}
                                                RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"The first element of this `List`, if any.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CNullableType
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Element'}
                                        ROptional<CTypeArguments>
                                RLiteral{'?'}
                            CLowerIdentifier{'first'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CCallExpr
                                            CMemberReference
                                                CLowerIdentifier{'getFromFirst'}
                                                ROptional<CTypeArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CLiteralNatural{'0'}
                                                RLiteral{')'}
                                RLiteral{';'}
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"The last element of this `List`, if any.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CNullableType
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Element'}
                                        ROptional<CTypeArguments>
                                RLiteral{'?'}
                            CLowerIdentifier{'last'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CCallExpr
                                            CMemberReference
                                                CLowerIdentifier{'getFromLast'}
                                                ROptional<CTypeArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CLiteralNatural{'0'}
                                                RLiteral{')'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Returns the element of this list with the given [[index]] if the index refers to an element of\r\n     this list, that is, if `0<=index<=list.lastIndex`, or `null` otherwise. The first element of\r\n     the list has index `0`, and the last element has index [[lastIndex]].\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                            CNullableType
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Element'}
                                        ROptional<CTypeArguments>
                                RLiteral{'?'}
                            CLowerIdentifier{'get'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'index'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CCallExpr
                                            CMemberReference
                                                CLowerIdentifier{'getFromFirst'}
                                                ROptional<CTypeArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CMemberReference
                                                            CLowerIdentifier{'index'}
                                                            ROptional<CTypeArguments>
                                                RLiteral{')'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Returns the element of this list with the given [[index]] if the index refers to an element of\r\n     this list, that is, if `0<=index<=list.lastIndex`, or `null` otherwise. The first element of\r\n     the list has index `0`, and the last element has index [[lastIndex]].\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'getFromLast'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'formal'}
                                        ROptional<ICArguments>
                            CNullableType
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Element'}
                                        ROptional<CTypeArguments>
                                RLiteral{'?'}
                            CLowerIdentifier{'getFromFirst'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'index'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Returns the element of this list with the given [[index]], where the list is indexed from the\r\n     _end_ of the list instead of from the start, if the index refers to an element of this list,\r\n     or `null` otherwise. The last element of the list has index `0`, and the first element has\r\n     index [[lastIndex]].\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'since'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CLiteralString{'\"1.1.0\"'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CNullableType
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Element'}
                                        ROptional<CTypeArguments>
                                RLiteral{'?'}
                            CLowerIdentifier{'getFromLast'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'index'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CCallExpr
                                            CMemberReference
                                                CLowerIdentifier{'getFromFirst'}
                                                ROptional<CTypeArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CAdditiveExpr
                                                            CAdditiveExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'size'}
                                                                    ROptional<CTypeArguments>
                                                                CAdditiveOperator{'-'}
                                                                CLiteralNatural{'1'}
                                                            CAdditiveOperator{'-'}
                                                            CMemberReference
                                                                CLowerIdentifier{'index'}
                                                                ROptional<CTypeArguments>
                                                RLiteral{')'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Element'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'getElement'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'index'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CIfElseStatement
                                        RLiteral{'if'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CExistsCondition
                                                        ROptional<RLiteral>
                                                        RLiteral{'exists'}
                                                        CLetVariable
                                                            CVariable
                                                                ROptional<ICVariableType>
                                                                CLowerIdentifier{'element'}
                                                                RStar<CParameters>
                                                            CValueSpecifier
                                                                RLiteral{'='}
                                                                CCallExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'getFromFirst'}
                                                                        ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'index'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CUnclosedStatement
                                                    CReturnStatement
                                                        RLiteral{'return'}
                                                        ROptional<ICExpression>
                                                            CMemberReference
                                                                CLowerIdentifier{'element'}
                                                                ROptional<CTypeArguments>
                                                    RLiteral{';'}
                                            RLiteral{'}'}
                                        RStar<CElseIf>
                                        ROptional<CElseBlock>
                                            CElseBlock
                                                RLiteral{'else'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CAssertionStatement
                                                                ROptional<ICAssertionMessage>
                                                                RLiteral{'assert'}
                                                                CConditions
                                                                    RLiteral{'('}
                                                                    ROptional<CConditionList>
                                                                        CConditionList
                                                                            CIsCondition
                                                                                ROptional<RLiteral>
                                                                                RLiteral{'is'}
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Element'}
                                                                                        ROptional<CTypeArguments>
                                                                                CIsConditionVariable
                                                                                    CLowerIdentifier{'null'}
                                                                                    ROptional<CValueSpecifier>
                                                                    RLiteral{')'}
                                                            RLiteral{';'}
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CMemberReference
                                                                        CLowerIdentifier{'null'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                RLiteral{'}'}
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"The index of the last element of the list, or `null` if the list is empty. Always\r\n    `size>0 then size-1`.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CValueLiteral
                                                            CKwValue{'value'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'List'}
                                                                    CIdentifier{'size'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'formal'}
                                        ROptional<ICArguments>
                            CNullableType
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Integer'}
                                        ROptional<CTypeArguments>
                                RLiteral{'?'}
                            CLowerIdentifier{'lastIndex'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                RLiteral{';'}
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"The number of elements in this list, always `1 + (lastIndex else -1)`.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CValueLiteral
                                                            CKwValue{'value'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'List'}
                                                                    CIdentifier{'lastIndex'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Integer'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'size'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CAdditiveExpr
                                            CLiteralNatural{'1'}
                                            CAdditiveOperator{'+'}
                                            CGroupedExpr
                                                RLiteral{'('}
                                                CThenElseExpr
                                                    CMemberReference
                                                        CLowerIdentifier{'lastIndex'}
                                                        ROptional<CTypeArguments>
                                                    CThenElseOperator{'else'}
                                                    CNegationOrComplementExpr
                                                        CNegateOperator
                                                            RLiteral{'-'}
                                                            RNot<RLiteral>
                                                        CLiteralNatural{'1'}
                                                RLiteral{')'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Determines if the given index refers to an element of this list, that is, if\r\n     `0 <= index <= list.lastIndex`.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Boolean'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'defines'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'index'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CSmallerBoundsExpr
                                            CLiteralNatural{'0'}
                                            CSmallerOperator{'<='}
                                            CMemberReference
                                                CLowerIdentifier{'index'}
                                                ROptional<CTypeArguments>
                                            CSmallerOperator{'<'}
                                            CMemberReference
                                                CLowerIdentifier{'size'}
                                                ROptional<CTypeArguments>
                                RLiteral{';'}
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"The rest of the list, without the first element.\r\n     \r\n     This is a lazy operation returning a view of this list.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'List'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Element'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'rest'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CThenElseExpr
                                            CThenElseExpr
                                                CLargerExpr
                                                    CMemberReference
                                                        CLowerIdentifier{'size'}
                                                        ROptional<CTypeArguments>
                                                    CLargerOperator{'>'}
                                                    CLiteralNatural{'1'}
                                                CThenElseOperator{'then'}
                                                CCallExpr
                                                    CTypeReference
                                                        CUpperIdentifier{'Sublist'}
                                                        ROptional<CTypeArguments>
                                                    CPositionalArguments
                                                        RLiteral{'('}
                                                        ROptional<CSequencedArgumentList>
                                                            CSequencedArgumentList
                                                                CLiteralNatural{'1'}
                                                                CAdditiveExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'size'}
                                                                        ROptional<CTypeArguments>
                                                                    CAdditiveOperator{'-'}
                                                                    CLiteralNatural{'1'}
                                                        RLiteral{')'}
                                            CThenElseOperator{'else'}
                                            CTupleExpr
                                                RLiteral{'['}
                                                ROptional<CSequencedArgumentList>
                                                RLiteral{']'}
                                RLiteral{';'}
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'List'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Element'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'exceptLast'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CThenElseExpr
                                            CThenElseExpr
                                                CLargerExpr
                                                    CMemberReference
                                                        CLowerIdentifier{'size'}
                                                        ROptional<CTypeArguments>
                                                    CLargerOperator{'>'}
                                                    CLiteralNatural{'1'}
                                                CThenElseOperator{'then'}
                                                CCallExpr
                                                    CTypeReference
                                                        CUpperIdentifier{'Sublist'}
                                                        ROptional<CTypeArguments>
                                                    CPositionalArguments
                                                        RLiteral{'('}
                                                        ROptional<CSequencedArgumentList>
                                                            CSequencedArgumentList
                                                                CLiteralNatural{'0'}
                                                                CAdditiveExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'size'}
                                                                        ROptional<CTypeArguments>
                                                                    CAdditiveOperator{'-'}
                                                                    CLiteralNatural{'2'}
                                                        RLiteral{')'}
                                            CThenElseOperator{'else'}
                                            CTupleExpr
                                                RLiteral{'['}
                                                ROptional<CSequencedArgumentList>
                                                RLiteral{']'}
                                RLiteral{';'}
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"A list containing all indexes of this list.\r\n     \r\n     This is a lazy operation returning a view of this list.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'indexes'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'List'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Integer'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'keys'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CCallExpr
                                            CTypeReference
                                                CUpperIdentifier{'Indexes'}
                                                ROptional<CTypeArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                RLiteral{')'}
                                RLiteral{';'}
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"A list containing the elements of this list in reverse order to the order in which they occur\r\n     in this list. For every `index` of a reversed `list`:\r\n     \r\n         list.reversed[index]==list[size-1-index]\r\n     \r\n     This is a lazy operation returning a view of this list.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'List'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Element'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'reversed'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CCallExpr
                                            CTypeReference
                                                CUpperIdentifier{'Reversed'}
                                                ROptional<CTypeArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                RLiteral{')'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"A shallow copy of this list, that is, a list with the same elements as this list, which do not\r\n     change if the elements of this list change.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'List'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Element'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'clone'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CCallExpr
                                            CMemberReference
                                                CLowerIdentifier{'sequence'}
                                                ROptional<CTypeArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                RLiteral{')'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Iterator'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Element'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'iterator'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CIfElseStatement
                                        RLiteral{'if'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CLargerExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'size'}
                                                            ROptional<CTypeArguments>
                                                        CLargerOperator{'>'}
                                                        CLiteralNatural{'0'}
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CUnclosedStatement
                                                    CReturnStatement
                                                        RLiteral{'return'}
                                                        ROptional<ICExpression>
                                                            CObjectExpr
                                                                RLiteral{'object'}
                                                                ROptional<CExtendedType>
                                                                ROptional<CSatisfiedTypes>
                                                                    CSatisfiedTypes
                                                                        RLiteral{'satisfies'}
                                                                        CUnionTypeList
                                                                            CTypePath
                                                                                CTypeReference
                                                                                    CUpperIdentifier{'Iterator'}
                                                                                    ROptional<CTypeArguments>
                                                                                        CTypeArguments
                                                                                            RLiteral{'<'}
                                                                                            ROptional<CTypeArgumentList>
                                                                                                CTypeArgumentList
                                                                                                    CVariancedType
                                                                                                        ROptional<ICVariance>
                                                                                                        CTypePath
                                                                                                            CTypeReference
                                                                                                                CUpperIdentifier{'Element'}
                                                                                                                ROptional<CTypeArguments>
                                                                                            RLiteral{'>'}
                                                                CBlock
                                                                    RLiteral{'{'}
                                                                    CImports
                                                                    CStatements
                                                                        CTypedAttributeDeclaration
                                                                            CAnnotations
                                                                                ROptional<ICStringLiteral>
                                                                                RStar<CAnnotation>
                                                                                    CAnnotation
                                                                                        CLowerIdentifier{'variable'}
                                                                                        ROptional<ICArguments>
                                                                            CTypePath
                                                                                CTypeReference
                                                                                    CUpperIdentifier{'Integer'}
                                                                                    ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'index'}
                                                                            COptionalAnySpecifier
                                                                                ROptional<ICAnySpecifier>
                                                                                    CValueSpecifier
                                                                                        RLiteral{'='}
                                                                                        CLiteralNatural{'0'}
                                                                                RLiteral{';'}
                                                                        CInferredAttributeDeclaration
                                                                            CAnnotations
                                                                                ROptional<ICStringLiteral>
                                                                                RStar<CAnnotation>
                                                                            CKwValue{'value'}
                                                                            CLowerIdentifier{'size'}
                                                                            COptionalAnySpecifier
                                                                                ROptional<ICAnySpecifier>
                                                                                    CValueSpecifier
                                                                                        RLiteral{'='}
                                                                                        CSelectionExpr
                                                                                            CSelfReference{'outer'}
                                                                                            CMemberSelectionOperator{'.'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'size'}
                                                                                                ROptional<CTypeArguments>
                                                                                RLiteral{';'}
                                                                        CUnclosedStatement
                                                                            CSpecificationStatement
                                                                                CCallExpr
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'next'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CPositionalArguments
                                                                                        RLiteral{'('}
                                                                                        ROptional<CSequencedArgumentList>
                                                                                        RLiteral{')'}
                                                                                CFunctionSpecifier
                                                                                    RLiteral{'=>'}
                                                                                    CThenElseExpr
                                                                                        CThenElseExpr
                                                                                            CLargerExpr
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'index'}
                                                                                                    ROptional<CTypeArguments>
                                                                                                CLargerOperator{'>='}
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'size'}
                                                                                                    ROptional<CTypeArguments>
                                                                                            CThenElseOperator{'then'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'finished'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CThenElseOperator{'else'}
                                                                                        CCallExpr
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'getElement'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CPositionalArguments
                                                                                                RLiteral{'('}
                                                                                                ROptional<CSequencedArgumentList>
                                                                                                    CSequencedArgumentList
                                                                                                        CPostfixExpr
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'index'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                            CIncrementOperator{'++'}
                                                                                                RLiteral{')'}
                                                                            RLiteral{';'}
                                                                        CUnclosedStatement
                                                                            CSpecificationStatement
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'string'}
                                                                                    ROptional<CTypeArguments>
                                                                                CFunctionSpecifier
                                                                                    RLiteral{'=>'}
                                                                                    CAdditiveExpr
                                                                                        CSelectionExpr
                                                                                            CSelfReference{'outer'}
                                                                                            CMemberSelectionOperator{'.'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'string'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CAdditiveOperator{'+'}
                                                                                        CLiteralString{'\".iterator()\"'}
                                                                            RLiteral{';'}
                                                                    RLiteral{'}'}
                                                    RLiteral{';'}
                                            RLiteral{'}'}
                                        RStar<CElseIf>
                                        ROptional<CElseBlock>
                                            CElseBlock
                                                RLiteral{'else'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CMemberReference
                                                                        CLowerIdentifier{'emptyIterator'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Two `List`s are considered equal iff they have the same `size` and _entry sets_. The entry set\r\n     of a list `list` is the set of elements of `list.indexed`. This definition is equivalent to the\r\n     more intuitive notion that two lists are equal iff they have the same `size` and for every\r\n     index either:\r\n     \r\n     - the lists both have the element `null`, or\r\n     - the lists both have a non-null element, and the two elements are equal.\r\n     \r\n     As a special exception, a [[String]] is not equal to any list which is not also a [[String]].\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Boolean'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'equals'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Object'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'that'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CIfElseStatement
                                        RLiteral{'if'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CIsCondition
                                                        ROptional<RLiteral>
                                                        RLiteral{'is'}
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'String'}
                                                                ROptional<CTypeArguments>
                                                        CIsConditionVariable
                                                            CLowerIdentifier{'that'}
                                                            ROptional<CValueSpecifier>
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CUnclosedStatement
                                                    CReturnStatement
                                                        RLiteral{'return'}
                                                        ROptional<ICExpression>
                                                            CMemberReference
                                                                CLowerIdentifier{'false'}
                                                                ROptional<CTypeArguments>
                                                    RLiteral{';'}
                                            RLiteral{'}'}
                                        RStar<CElseIf>
                                            CElseIf
                                                RLiteral{'else'}
                                                RLiteral{'if'}
                                                CConditions
                                                    RLiteral{'('}
                                                    ROptional<CConditionList>
                                                        CConditionList
                                                            CIsCondition
                                                                ROptional<RLiteral>
                                                                RLiteral{'is'}
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'List'}
                                                                        ROptional<CTypeArguments>
                                                                            CTypeArguments
                                                                                RLiteral{'<'}
                                                                                ROptional<CTypeArgumentList>
                                                                                RLiteral{'>'}
                                                                CIsConditionVariable
                                                                    CLowerIdentifier{'that'}
                                                                    ROptional<CValueSpecifier>
                                                    RLiteral{')'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CIfElseStatement
                                                            RLiteral{'if'}
                                                            CConditions
                                                                RLiteral{'('}
                                                                ROptional<CConditionList>
                                                                    CConditionList
                                                                        CEqualityExpr
                                                                            CSelectionExpr
                                                                                CSelfReference{'this'}
                                                                                CMemberSelectionOperator{'.'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'size'}
                                                                                    ROptional<CTypeArguments>
                                                                            CEqualityOperator{'!='}
                                                                            CSelectionExpr
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'that'}
                                                                                    ROptional<CTypeArguments>
                                                                                CMemberSelectionOperator{'.'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'size'}
                                                                                    ROptional<CTypeArguments>
                                                                RLiteral{')'}
                                                            CBlock
                                                                RLiteral{'{'}
                                                                CImports
                                                                CStatements
                                                                    CUnclosedStatement
                                                                        CReturnStatement
                                                                            RLiteral{'return'}
                                                                            ROptional<ICExpression>
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'false'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{';'}
                                                                RLiteral{'}'}
                                                            RStar<CElseIf>
                                                            ROptional<CElseBlock>
                                                        CInferredAttributeDeclaration
                                                            CAnnotations
                                                                ROptional<ICStringLiteral>
                                                                RStar<CAnnotation>
                                                            CKwValue{'value'}
                                                            CLowerIdentifier{'thisIterator'}
                                                            COptionalAnySpecifier
                                                                ROptional<ICAnySpecifier>
                                                                    CValueSpecifier
                                                                        RLiteral{'='}
                                                                        CCallExpr
                                                                            CSelectionExpr
                                                                                CSelfReference{'this'}
                                                                                CMemberSelectionOperator{'.'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'iterator'}
                                                                                    ROptional<CTypeArguments>
                                                                            CPositionalArguments
                                                                                RLiteral{'('}
                                                                                ROptional<CSequencedArgumentList>
                                                                                RLiteral{')'}
                                                                RLiteral{';'}
                                                        CInferredAttributeDeclaration
                                                            CAnnotations
                                                                ROptional<ICStringLiteral>
                                                                RStar<CAnnotation>
                                                            CKwValue{'value'}
                                                            CLowerIdentifier{'thatIterator'}
                                                            COptionalAnySpecifier
                                                                ROptional<ICAnySpecifier>
                                                                    CValueSpecifier
                                                                        RLiteral{'='}
                                                                        CCallExpr
                                                                            CSelectionExpr
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'that'}
                                                                                    ROptional<CTypeArguments>
                                                                                CMemberSelectionOperator{'.'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'iterator'}
                                                                                    ROptional<CTypeArguments>
                                                                            CPositionalArguments
                                                                                RLiteral{'('}
                                                                                ROptional<CSequencedArgumentList>
                                                                                RLiteral{')'}
                                                                RLiteral{';'}
                                                        CForElseStatement
                                                            RLiteral{'for'}
                                                            RLiteral{'('}
                                                            ROptional<CForIterator>
                                                                CForIterator
                                                                    CVariable
                                                                        ROptional<ICVariableType>
                                                                        CLowerIdentifier{'_'}
                                                                        RStar<CParameters>
                                                                    CContainment
                                                                        CContainmentOperator{'in'}
                                                                        CRangeExpr
                                                                            CLiteralNatural{'0'}
                                                                            CRangeOperator{':'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'size'}
                                                                                ROptional<CTypeArguments>
                                                            RLiteral{')'}
                                                            CBlock
                                                                RLiteral{'{'}
                                                                CImports
                                                                CStatements
                                                                    CInferredAttributeDeclaration
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CKwValue{'value'}
                                                                        CLowerIdentifier{'thisElement'}
                                                                        COptionalAnySpecifier
                                                                            ROptional<ICAnySpecifier>
                                                                                CValueSpecifier
                                                                                    RLiteral{'='}
                                                                                    CCallExpr
                                                                                        CSelectionExpr
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'thisIterator'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CMemberSelectionOperator{'.'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'next'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CPositionalArguments
                                                                                            RLiteral{'('}
                                                                                            ROptional<CSequencedArgumentList>
                                                                                            RLiteral{')'}
                                                                            RLiteral{';'}
                                                                    CInferredAttributeDeclaration
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CKwValue{'value'}
                                                                        CLowerIdentifier{'thatElement'}
                                                                        COptionalAnySpecifier
                                                                            ROptional<ICAnySpecifier>
                                                                                CValueSpecifier
                                                                                    RLiteral{'='}
                                                                                    CCallExpr
                                                                                        CSelectionExpr
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'thatIterator'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CMemberSelectionOperator{'.'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'next'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CPositionalArguments
                                                                                            RLiteral{'('}
                                                                                            ROptional<CSequencedArgumentList>
                                                                                            RLiteral{')'}
                                                                            RLiteral{';'}
                                                                    CIfElseStatement
                                                                        RLiteral{'if'}
                                                                        CConditions
                                                                            RLiteral{'('}
                                                                            ROptional<CConditionList>
                                                                                CConditionList
                                                                                    CExistsCondition
                                                                                        ROptional<RLiteral>
                                                                                        RLiteral{'exists'}
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'thisElement'}
                                                                                            ROptional<CTypeArguments>
                                                                            RLiteral{')'}
                                                                        CBlock
                                                                            RLiteral{'{'}
                                                                            CImports
                                                                            CStatements
                                                                                CIfElseStatement
                                                                                    RLiteral{'if'}
                                                                                    CConditions
                                                                                        RLiteral{'('}
                                                                                        ROptional<CConditionList>
                                                                                            CConditionList
                                                                                                CExistsCondition
                                                                                                    ROptional<RLiteral>
                                                                                                        CNotOperator{'!'}
                                                                                                    RLiteral{'exists'}
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'thatElement'}
                                                                                                        ROptional<CTypeArguments>
                                                                                        RLiteral{')'}
                                                                                    CBlock
                                                                                        RLiteral{'{'}
                                                                                        CImports
                                                                                        CStatements
                                                                                            CUnclosedStatement
                                                                                                CReturnStatement
                                                                                                    RLiteral{'return'}
                                                                                                    ROptional<ICExpression>
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'false'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                RLiteral{';'}
                                                                                        RLiteral{'}'}
                                                                                    RStar<CElseIf>
                                                                                        CElseIf
                                                                                            RLiteral{'else'}
                                                                                            RLiteral{'if'}
                                                                                            CConditions
                                                                                                RLiteral{'('}
                                                                                                ROptional<CConditionList>
                                                                                                    CConditionList
                                                                                                        CEqualityExpr
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'thisElement'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                            CEqualityOperator{'!='}
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'thatElement'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                RLiteral{')'}
                                                                                            CBlock
                                                                                                RLiteral{'{'}
                                                                                                CImports
                                                                                                CStatements
                                                                                                    CUnclosedStatement
                                                                                                        CReturnStatement
                                                                                                            RLiteral{'return'}
                                                                                                            ROptional<ICExpression>
                                                                                                                CMemberReference
                                                                                                                    CLowerIdentifier{'false'}
                                                                                                                    ROptional<CTypeArguments>
                                                                                                        RLiteral{';'}
                                                                                                RLiteral{'}'}
                                                                                    ROptional<CElseBlock>
                                                                            RLiteral{'}'}
                                                                        RStar<CElseIf>
                                                                            CElseIf
                                                                                RLiteral{'else'}
                                                                                RLiteral{'if'}
                                                                                CConditions
                                                                                    RLiteral{'('}
                                                                                    ROptional<CConditionList>
                                                                                        CConditionList
                                                                                            CExistsExpr
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'thatElement'}
                                                                                                    ROptional<CTypeArguments>
                                                                                                RLiteral{'exists'}
                                                                                    RLiteral{')'}
                                                                                CBlock
                                                                                    RLiteral{'{'}
                                                                                    CImports
                                                                                    CStatements
                                                                                        CUnclosedStatement
                                                                                            CReturnStatement
                                                                                                RLiteral{'return'}
                                                                                                ROptional<ICExpression>
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'false'}
                                                                                                        ROptional<CTypeArguments>
                                                                                            RLiteral{';'}
                                                                                    RLiteral{'}'}
                                                                        ROptional<CElseBlock>
                                                                RLiteral{'}'}
                                                            ROptional<CElseBlock>
                                                                CElseBlock
                                                                    RLiteral{'else'}
                                                                    CBlock
                                                                        RLiteral{'{'}
                                                                        CImports
                                                                        CStatements
                                                                            CUnclosedStatement
                                                                                CReturnStatement
                                                                                    RLiteral{'return'}
                                                                                    ROptional<ICExpression>
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'true'}
                                                                                            ROptional<CTypeArguments>
                                                                                RLiteral{';'}
                                                                        RLiteral{'}'}
                                                    RLiteral{'}'}
                                        ROptional<CElseBlock>
                                            CElseBlock
                                                RLiteral{'else'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CMemberReference
                                                                        CLowerIdentifier{'false'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                RLiteral{'}'}
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Integer'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'hash'}
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CInferredAttributeDeclaration
                                        CAnnotations
                                            ROptional<ICStringLiteral>
                                            RStar<CAnnotation>
                                                CAnnotation
                                                    CLowerIdentifier{'variable'}
                                                    ROptional<ICArguments>
                                        CKwValue{'value'}
                                        CLowerIdentifier{'hash'}
                                        COptionalAnySpecifier
                                            ROptional<ICAnySpecifier>
                                                CValueSpecifier
                                                    RLiteral{'='}
                                                    CLiteralNatural{'1'}
                                            RLiteral{';'}
                                    CForElseStatement
                                        RLiteral{'for'}
                                        RLiteral{'('}
                                        ROptional<CForIterator>
                                            CForIterator
                                                CVariable
                                                    ROptional<ICVariableType>
                                                    CLowerIdentifier{'elem'}
                                                    RStar<CParameters>
                                                CContainment
                                                    CContainmentOperator{'in'}
                                                    CSelfReference{'this'}
                                        RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CUnclosedStatement
                                                    CAssignmentExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'hash'}
                                                            ROptional<CTypeArguments>
                                                        CAssignmentOperator{'*='}
                                                        CLiteralNatural{'31'}
                                                    RLiteral{';'}
                                                CIfElseStatement
                                                    RLiteral{'if'}
                                                    CConditions
                                                        RLiteral{'('}
                                                        ROptional<CConditionList>
                                                            CConditionList
                                                                CExistsCondition
                                                                    ROptional<RLiteral>
                                                                    RLiteral{'exists'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'elem'}
                                                                        ROptional<CTypeArguments>
                                                        RLiteral{')'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CUnclosedStatement
                                                                CAssignmentExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'hash'}
                                                                        ROptional<CTypeArguments>
                                                                    CAssignmentOperator{'+='}
                                                                    CSelectionExpr
                                                                        CMemberReference
                                                                            CLowerIdentifier{'elem'}
                                                                            ROptional<CTypeArguments>
                                                                        CMemberSelectionOperator{'.'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'hash'}
                                                                            ROptional<CTypeArguments>
                                                                RLiteral{';'}
                                                        RLiteral{'}'}
                                                    RStar<CElseIf>
                                                    ROptional<CElseBlock>
                                            RLiteral{'}'}
                                        ROptional<CElseBlock>
                                    CUnclosedStatement
                                        CReturnStatement
                                            RLiteral{'return'}
                                            ROptional<ICExpression>
                                                CMemberReference
                                                    CLowerIdentifier{'hash'}
                                                    ROptional<CTypeArguments>
                                        RLiteral{';'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Boolean'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'shorterThan'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'length'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CSmallerExpr
                                            CMemberReference
                                                CLowerIdentifier{'size'}
                                                ROptional<CTypeArguments>
                                            CSmallerOperator{'<'}
                                            CMemberReference
                                                CLowerIdentifier{'length'}
                                                ROptional<CTypeArguments>
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Boolean'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'longerThan'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'length'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CLargerExpr
                                            CMemberReference
                                                CLowerIdentifier{'size'}
                                                ROptional<CTypeArguments>
                                            CLargerOperator{'>'}
                                            CMemberReference
                                                CLowerIdentifier{'length'}
                                                ROptional<CTypeArguments>
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"A list containing the elements of this list repeated the [[given number of times|times]], or\r\n     an empty list if `times<=0`. For every `index` of a repeated `list`:\r\n     \r\n         list.repeat(n)[index]==list[index%n]\r\n     \r\n     This is a lazy operation returning a view of this list.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'List'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Element'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'repeat'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'times'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CSwitchExpr
                                            CSwitchHeader
                                                RLiteral{'switch'}
                                                RLiteral{'('}
                                                CComparisonExpr
                                                    CMemberReference
                                                        CLowerIdentifier{'times'}
                                                        ROptional<CTypeArguments>
                                                    CComparisonOperator{'<=>'}
                                                    CLiteralNatural{'1'}
                                                RLiteral{')'}
                                            RPlus<CCaseExpression>
                                                CCaseExpression
                                                    ROptional<RLiteral>
                                                    RLiteral{'case'}
                                                    RLiteral{'('}
                                                    CValueCaseList
                                                        CMemberReference
                                                            CLowerIdentifier{'smaller'}
                                                            ROptional<CTypeArguments>
                                                    RLiteral{')'}
                                                    CTupleExpr
                                                        RLiteral{'['}
                                                        ROptional<CSequencedArgumentList>
                                                        RLiteral{']'}
                                                CCaseExpression
                                                    ROptional<RLiteral>
                                                    RLiteral{'case'}
                                                    RLiteral{'('}
                                                    CValueCaseList
                                                        CMemberReference
                                                            CLowerIdentifier{'equal'}
                                                            ROptional<CTypeArguments>
                                                    RLiteral{')'}
                                                    CSelfReference{'this'}
                                                CCaseExpression
                                                    ROptional<RLiteral>
                                                    RLiteral{'case'}
                                                    RLiteral{'('}
                                                    CValueCaseList
                                                        CMemberReference
                                                            CLowerIdentifier{'larger'}
                                                            ROptional<CTypeArguments>
                                                    RLiteral{')'}
                                                    CCallExpr
                                                        CTypeReference
                                                            CUpperIdentifier{'Repeat'}
                                                            ROptional<CTypeArguments>
                                                        CPositionalArguments
                                                            RLiteral{'('}
                                                            ROptional<CSequencedArgumentList>
                                                                CSequencedArgumentList
                                                                    CMemberReference
                                                                        CLowerIdentifier{'times'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{')'}
                                            ROptional<CElseExpression>
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                            CNullableType
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Element'}
                                        ROptional<CTypeArguments>
                                RLiteral{'?'}
                            CLowerIdentifier{'find'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedFunctionParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Boolean'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'selecting'}
                                                    ROptional<CTypeParameters>
                                                    RPlus<CParameters>
                                                        CParameters
                                                            RLiteral{'('}
                                                            ROptional<CParameterList>
                                                                CParameterList
                                                                    CParameter
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CTypedValueParameter
                                                                            CIntersectionTypeCore
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Element'}
                                                                                        ROptional<CTypeArguments>
                                                                                CIntersectionOperator{'&'}
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Object'}
                                                                                        ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'elem'}
                                                                            ROptional<CValueSpecifier>
                                                            RLiteral{')'}
                                                    ROptional<CFunctionSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CInferredAttributeDeclaration
                                        CAnnotations
                                            ROptional<ICStringLiteral>
                                            RStar<CAnnotation>
                                                CAnnotation
                                                    CLowerIdentifier{'variable'}
                                                    ROptional<ICArguments>
                                        CKwValue{'value'}
                                        CLowerIdentifier{'index'}
                                        COptionalAnySpecifier
                                            ROptional<ICAnySpecifier>
                                                CValueSpecifier
                                                    RLiteral{'='}
                                                    CLiteralNatural{'0'}
                                            RLiteral{';'}
                                    CWhileStatement
                                        RLiteral{'while'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CSmallerExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'index'}
                                                            ROptional<CTypeArguments>
                                                        CSmallerOperator{'<'}
                                                        CMemberReference
                                                            CLowerIdentifier{'size'}
                                                            ROptional<CTypeArguments>
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CIfElseStatement
                                                    RLiteral{'if'}
                                                    CConditions
                                                        RLiteral{'('}
                                                        ROptional<CConditionList>
                                                            CConditionList
                                                                CExistsCondition
                                                                    ROptional<RLiteral>
                                                                    RLiteral{'exists'}
                                                                    CLetVariable
                                                                        CVariable
                                                                            ROptional<ICVariableType>
                                                                            CLowerIdentifier{'elem'}
                                                                            RStar<CParameters>
                                                                        CValueSpecifier
                                                                            RLiteral{'='}
                                                                            CCallExpr
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'getFromFirst'}
                                                                                    ROptional<CTypeArguments>
                                                                                CPositionalArguments
                                                                                    RLiteral{'('}
                                                                                    ROptional<CSequencedArgumentList>
                                                                                        CSequencedArgumentList
                                                                                            CPostfixExpr
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'index'}
                                                                                                    ROptional<CTypeArguments>
                                                                                                CIncrementOperator{'++'}
                                                                                    RLiteral{')'}
                                                        RLiteral{')'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CIfElseStatement
                                                                RLiteral{'if'}
                                                                CConditions
                                                                    RLiteral{'('}
                                                                    ROptional<CConditionList>
                                                                        CConditionList
                                                                            CCallExpr
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'selecting'}
                                                                                    ROptional<CTypeArguments>
                                                                                CPositionalArguments
                                                                                    RLiteral{'('}
                                                                                    ROptional<CSequencedArgumentList>
                                                                                        CSequencedArgumentList
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'elem'}
                                                                                                ROptional<CTypeArguments>
                                                                                    RLiteral{')'}
                                                                    RLiteral{')'}
                                                                CBlock
                                                                    RLiteral{'{'}
                                                                    CImports
                                                                    CStatements
                                                                        CUnclosedStatement
                                                                            CReturnStatement
                                                                                RLiteral{'return'}
                                                                                ROptional<ICExpression>
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'elem'}
                                                                                        ROptional<CTypeArguments>
                                                                            RLiteral{';'}
                                                                    RLiteral{'}'}
                                                                RStar<CElseIf>
                                                                ROptional<CElseBlock>
                                                        RLiteral{'}'}
                                                    RStar<CElseIf>
                                                    ROptional<CElseBlock>
                                            RLiteral{'}'}
                                    CUnclosedStatement
                                        CReturnStatement
                                            RLiteral{'return'}
                                            ROptional<ICExpression>
                                                CMemberReference
                                                    CLowerIdentifier{'null'}
                                                    ROptional<CTypeArguments>
                                        RLiteral{';'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                            CNullableType
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Element'}
                                        ROptional<CTypeArguments>
                                RLiteral{'?'}
                            CLowerIdentifier{'findLast'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedFunctionParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Boolean'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'selecting'}
                                                    ROptional<CTypeParameters>
                                                    RPlus<CParameters>
                                                        CParameters
                                                            RLiteral{'('}
                                                            ROptional<CParameterList>
                                                                CParameterList
                                                                    CParameter
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CTypedValueParameter
                                                                            CIntersectionTypeCore
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Element'}
                                                                                        ROptional<CTypeArguments>
                                                                                CIntersectionOperator{'&'}
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Object'}
                                                                                        ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'elem'}
                                                                            ROptional<CValueSpecifier>
                                                            RLiteral{')'}
                                                    ROptional<CFunctionSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CInferredAttributeDeclaration
                                        CAnnotations
                                            ROptional<ICStringLiteral>
                                            RStar<CAnnotation>
                                                CAnnotation
                                                    CLowerIdentifier{'variable'}
                                                    ROptional<ICArguments>
                                        CKwValue{'value'}
                                        CLowerIdentifier{'index'}
                                        COptionalAnySpecifier
                                            ROptional<ICAnySpecifier>
                                                CValueSpecifier
                                                    RLiteral{'='}
                                                    CAdditiveExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'size'}
                                                            ROptional<CTypeArguments>
                                                        CAdditiveOperator{'-'}
                                                        CLiteralNatural{'1'}
                                            RLiteral{';'}
                                    CWhileStatement
                                        RLiteral{'while'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CLargerExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'index'}
                                                            ROptional<CTypeArguments>
                                                        CLargerOperator{'>='}
                                                        CLiteralNatural{'0'}
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CIfElseStatement
                                                    RLiteral{'if'}
                                                    CConditions
                                                        RLiteral{'('}
                                                        ROptional<CConditionList>
                                                            CConditionList
                                                                CExistsCondition
                                                                    ROptional<RLiteral>
                                                                    RLiteral{'exists'}
                                                                    CLetVariable
                                                                        CVariable
                                                                            ROptional<ICVariableType>
                                                                            CLowerIdentifier{'elem'}
                                                                            RStar<CParameters>
                                                                        CValueSpecifier
                                                                            RLiteral{'='}
                                                                            CCallExpr
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'getFromFirst'}
                                                                                    ROptional<CTypeArguments>
                                                                                CPositionalArguments
                                                                                    RLiteral{'('}
                                                                                    ROptional<CSequencedArgumentList>
                                                                                        CSequencedArgumentList
                                                                                            CPostfixExpr
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'index'}
                                                                                                    ROptional<CTypeArguments>
                                                                                                CIncrementOperator{'--'}
                                                                                    RLiteral{')'}
                                                                CCallExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'selecting'}
                                                                        ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'elem'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                                        RLiteral{')'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CUnclosedStatement
                                                                CReturnStatement
                                                                    RLiteral{'return'}
                                                                    ROptional<ICExpression>
                                                                        CMemberReference
                                                                            CLowerIdentifier{'elem'}
                                                                            ROptional<CTypeArguments>
                                                                RLiteral{';'}
                                                        RLiteral{'}'}
                                                    RStar<CElseIf>
                                                    ROptional<CElseBlock>
                                            RLiteral{'}'}
                                    CUnclosedStatement
                                        CReturnStatement
                                            RLiteral{'return'}
                                            ROptional<ICExpression>
                                                CMemberReference
                                                    CLowerIdentifier{'null'}
                                                    ROptional<CTypeArguments>
                                        RLiteral{';'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"A sublist of this list, starting at the element with the given [[index|from]].\r\n     \r\n     This is a lazy operation, returning a view of this list.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'skip'}
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'sublistTo'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'since'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CLiteralString{'\"1.1.0\"'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'List'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Element'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'sublistFrom'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'from'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CCallExpr
                                            CMemberReference
                                                CLowerIdentifier{'sublist'}
                                                ROptional<CTypeArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CMemberReference
                                                            CLowerIdentifier{'from'}
                                                            ROptional<CTypeArguments>
                                                        CAdditiveExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'size'}
                                                                ROptional<CTypeArguments>
                                                            CAdditiveOperator{'-'}
                                                            CLiteralNatural{'1'}
                                                RLiteral{')'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"A sublist of this list, ending at the element with the given [[index|to]].\r\n     \r\n     This is a lazy operation, returning a view of this list.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'take'}
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'initial'}
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'sublistFrom'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'since'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CLiteralString{'\"1.1.0\"'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'List'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Element'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'sublistTo'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'to'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CCallExpr
                                            CMemberReference
                                                CLowerIdentifier{'sublist'}
                                                ROptional<CTypeArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CLiteralNatural{'0'}
                                                        CMemberReference
                                                            CLowerIdentifier{'to'}
                                                            ROptional<CTypeArguments>
                                                RLiteral{')'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"A sublist of this list, starting at the element with index [[from]], ending at the element\r\n     with the index [[to]].\r\n     \r\n     This is a lazy operation, returning a view of this list.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'sublistTo'}
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'sublistFrom'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'since'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CLiteralString{'\"1.1.0\"'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'List'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Element'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'sublist'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'from'}
                                                    ROptional<CValueSpecifier>
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'to'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CThenElseExpr
                                            CThenElseExpr
                                                CConjunctionExpr
                                                    CConjunctionExpr
                                                        CSmallerExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'from'}
                                                                ROptional<CTypeArguments>
                                                            CSmallerOperator{'<='}
                                                            CMemberReference
                                                                CLowerIdentifier{'to'}
                                                                ROptional<CTypeArguments>
                                                        CConjunctionOperator{'&&'}
                                                        CSmallerExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'from'}
                                                                ROptional<CTypeArguments>
                                                            CSmallerOperator{'<'}
                                                            CMemberReference
                                                                CLowerIdentifier{'size'}
                                                                ROptional<CTypeArguments>
                                                    CConjunctionOperator{'&&'}
                                                    CLargerExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'to'}
                                                            ROptional<CTypeArguments>
                                                        CLargerOperator{'>='}
                                                        CLiteralNatural{'0'}
                                                CThenElseOperator{'then'}
                                                CCallExpr
                                                    CTypeReference
                                                        CUpperIdentifier{'Sublist'}
                                                        ROptional<CTypeArguments>
                                                    CPatternedArguments
                                                        RLiteral{'{'}
                                                        RStar<ICStructuredArgument>
                                                            CAnonymousArgument
                                                                CAssignmentExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'from'}
                                                                        ROptional<CTypeArguments>
                                                                    CAssignmentOperator{'='}
                                                                    CCallExpr
                                                                        CSelectionExpr
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Integer'}
                                                                                ROptional<CTypeArguments>
                                                                            CMemberSelectionOperator{'.'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'largest'}
                                                                                ROptional<CTypeArguments>
                                                                        CPositionalArguments
                                                                            RLiteral{'('}
                                                                            ROptional<CSequencedArgumentList>
                                                                                CSequencedArgumentList
                                                                                    CLiteralNatural{'0'}
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'from'}
                                                                                        ROptional<CTypeArguments>
                                                                            RLiteral{')'}
                                                                RLiteral{';'}
                                                            CAnonymousArgument
                                                                CAssignmentExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'to'}
                                                                        ROptional<CTypeArguments>
                                                                    CAssignmentOperator{'='}
                                                                    CCallExpr
                                                                        CSelectionExpr
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Integer'}
                                                                                ROptional<CTypeArguments>
                                                                            CMemberSelectionOperator{'.'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'smallest'}
                                                                                ROptional<CTypeArguments>
                                                                        CPositionalArguments
                                                                            RLiteral{'('}
                                                                            ROptional<CSequencedArgumentList>
                                                                                CSequencedArgumentList
                                                                                    CAdditiveExpr
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'size'}
                                                                                            ROptional<CTypeArguments>
                                                                                        CAdditiveOperator{'-'}
                                                                                        CLiteralNatural{'1'}
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'to'}
                                                                                        ROptional<CTypeArguments>
                                                                            RLiteral{')'}
                                                                RLiteral{';'}
                                                        ROptional<CSequencedArgumentList>
                                                        RLiteral{'}'}
                                            CThenElseOperator{'else'}
                                            CTupleExpr
                                                RLiteral{'['}
                                                ROptional<CSequencedArgumentList>
                                                RLiteral{']'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Return a list formed by patching the given [[list]] in place of a segment of this list\r\n     identified by the given [[starting index|from]] and [[length]].\r\n     \r\n     This is a lazy operations, returning a view over this list and the given list.\r\n     \r\n     Four special cases are interesting:\r\n     \r\n     - If `length==0`, the patched list has the given values \\\"inserted\\\" into this list at the\r\n       given index `from`.\r\n     - If the given `list` is empty, the patched list has the measure of this list identified by\r\n       `from:length` \\\"deleted\\\".\r\n     - If `from==size`, the patched list is formed by appending the given list.\r\n     - If `from==0`, the patched list is formed by prepending the given list.\r\n     \r\n     For example:\r\n     \r\n     - `(-2..2).patch([], 1, 3)` produces the list `{-2, 2}`,\r\n     - `[-2, 2].patch(-1..1, 1)` produces the list `{-2, -1, 0, 1, 2}`, and\r\n     - `0:3.patch(2..0)` produces the list `{0, 1, 2, 2, 1, 0}`.\r\n     \r\n     Finally, to patch a single element, leaving the `size` of the list unchanged, explicitly\r\n     specify `length==1`:\r\n     \r\n     - `[0, 1, 0, 1].patch([-1], 2, 1)` produces the list `{0, 1, -1, 1}`.\r\n     \r\n     If `length<0`, or if `from` is outside the range `0..size`, return this list.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'since'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CLiteralString{'\"1.1.0\"'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'List'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CUnionTypeCore
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Element'}
                                                                    ROptional<CTypeArguments>
                                                            RLiteral{'|'}
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Other'}
                                                                    ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'patch'}
                            ROptional<CTypeParameters>
                                CTypeParameters
                                    RLiteral{'<'}
                                    CTypeParameterList
                                        CTypeParameter
                                            ROptional<ICVariance>
                                            CUpperIdentifier{'Other'}
                                            ROptional<CTypeDefault>
                                    RLiteral{'>'}
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The list of new elements.\"'}
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'List'}
                                                            ROptional<CTypeArguments>
                                                                CTypeArguments
                                                                    RLiteral{'<'}
                                                                    ROptional<CTypeArgumentList>
                                                                        CTypeArgumentList
                                                                            CVariancedType
                                                                                ROptional<ICVariance>
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Other'}
                                                                                        ROptional<CTypeArguments>
                                                                    RLiteral{'>'}
                                                    CLowerIdentifier{'list'}
                                                    ROptional<CValueSpecifier>
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The index at which the elements will occur, and the start index of the segment to replace.\"'}
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'from'}
                                                    ROptional<CValueSpecifier>
                                                        CValueSpecifier
                                                            RLiteral{'='}
                                                            CMemberReference
                                                                CLowerIdentifier{'size'}
                                                                ROptional<CTypeArguments>
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The length of the segment to replace.\"'}
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'length'}
                                                    ROptional<CValueSpecifier>
                                                        CValueSpecifier
                                                            RLiteral{'='}
                                                            CLiteralNatural{'0'}
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CThenElseExpr
                                            CThenElseExpr
                                                CConjunctionExpr
                                                    CLargerExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'length'}
                                                            ROptional<CTypeArguments>
                                                        CLargerOperator{'>='}
                                                        CLiteralNatural{'0'}
                                                    CConjunctionOperator{'&&'}
                                                    CSmallerBoundsExpr
                                                        CLiteralNatural{'0'}
                                                        CSmallerOperator{'<='}
                                                        CMemberReference
                                                            CLowerIdentifier{'from'}
                                                            ROptional<CTypeArguments>
                                                        CSmallerOperator{'<='}
                                                        CMemberReference
                                                            CLowerIdentifier{'size'}
                                                            ROptional<CTypeArguments>
                                                CThenElseOperator{'then'}
                                                CCallExpr
                                                    CTypeReference
                                                        CUpperIdentifier{'Patch'}
                                                        ROptional<CTypeArguments>
                                                    CPositionalArguments
                                                        RLiteral{'('}
                                                        ROptional<CSequencedArgumentList>
                                                            CSequencedArgumentList
                                                                CMemberReference
                                                                    CLowerIdentifier{'list'}
                                                                    ROptional<CTypeArguments>
                                                                CMemberReference
                                                                    CLowerIdentifier{'from'}
                                                                    ROptional<CTypeArguments>
                                                                CMemberReference
                                                                    CLowerIdentifier{'length'}
                                                                    ROptional<CTypeArguments>
                                                        RLiteral{')'}
                                            CThenElseOperator{'else'}
                                            CSelfReference{'this'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Determine if the given [[list|sublist]] occurs at the start of this list.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'endsWith'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Boolean'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'startsWith'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'List'}
                                                            ROptional<CTypeArguments>
                                                                CTypeArguments
                                                                    RLiteral{'<'}
                                                                    ROptional<CTypeArgumentList>
                                                                    RLiteral{'>'}
                                                    CLowerIdentifier{'sublist'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CConjunctionExpr
                                            CLogicalNegationExpr
                                                CNotOperator{'!'}
                                                CCallExpr
                                                    CMemberReference
                                                        CLowerIdentifier{'shorterThan'}
                                                        ROptional<CTypeArguments>
                                                    CPositionalArguments
                                                        RLiteral{'('}
                                                        ROptional<CSequencedArgumentList>
                                                            CSequencedArgumentList
                                                                CSelectionExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'sublist'}
                                                                        ROptional<CTypeArguments>
                                                                    CMemberSelectionOperator{'.'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'size'}
                                                                        ROptional<CTypeArguments>
                                                        RLiteral{')'}
                                            CConjunctionOperator{'&&'}
                                            CCallExpr
                                                CMemberReference
                                                    CLowerIdentifier{'everyPair'}
                                                    ROptional<CTypeArguments>
                                                CPositionalArguments
                                                    RLiteral{'('}
                                                    ROptional<CSequencedArgumentList>
                                                        CSequencedArgumentList
                                                            CSelfReference{'this'}
                                                            CMemberReference
                                                                CLowerIdentifier{'sublist'}
                                                                ROptional<CTypeArguments>
                                                            CInferredFunctionExpr
                                                                ROptional<RLiteral>
                                                                ROptional<CTypeParameters>
                                                                RPlus<CParameters>
                                                                    CParameters
                                                                        RLiteral{'('}
                                                                        ROptional<CParameterList>
                                                                            CParameterList
                                                                                CParameterReference
                                                                                    CLowerIdentifier{'first'}
                                                                                    ROptional<CValueSpecifier>
                                                                                CParameterReference
                                                                                    CLowerIdentifier{'second'}
                                                                                    ROptional<CValueSpecifier>
                                                                        RLiteral{')'}
                                                                ROptional<CTypeConstraints>
                                                                CFunctionSpecifier
                                                                    RLiteral{'=>'}
                                                                    CIfExpr
                                                                        RLiteral{'if'}
                                                                        CConditions
                                                                            RLiteral{'('}
                                                                            ROptional<CConditionList>
                                                                                CConditionList
                                                                                    CExistsCondition
                                                                                        ROptional<RLiteral>
                                                                                        RLiteral{'exists'}
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'first'}
                                                                                            ROptional<CTypeArguments>
                                                                                    CExistsCondition
                                                                                        ROptional<RLiteral>
                                                                                        RLiteral{'exists'}
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'second'}
                                                                                            ROptional<CTypeArguments>
                                                                            RLiteral{')'}
                                                                        CThenExpression
                                                                            RLiteral{'then'}
                                                                            CEqualityExpr
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'first'}
                                                                                    ROptional<CTypeArguments>
                                                                                CEqualityOperator{'=='}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'second'}
                                                                                    ROptional<CTypeArguments>
                                                                        CElseExpression
                                                                            RLiteral{'else'}
                                                                            CEqualityExpr
                                                                                CExistsExpr
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'first'}
                                                                                        ROptional<CTypeArguments>
                                                                                    RLiteral{'exists'}
                                                                                CEqualityOperator{'=='}
                                                                                CExistsExpr
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'second'}
                                                                                        ROptional<CTypeArguments>
                                                                                    RLiteral{'exists'}
                                                    RLiteral{')'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Determine if the given [[list|sublist]] occurs at the end of this list.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'startsWith'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Boolean'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'endsWith'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'List'}
                                                            ROptional<CTypeArguments>
                                                                CTypeArguments
                                                                    RLiteral{'<'}
                                                                    ROptional<CTypeArgumentList>
                                                                    RLiteral{'>'}
                                                    CLowerIdentifier{'sublist'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CConjunctionExpr
                                            CLogicalNegationExpr
                                                CNotOperator{'!'}
                                                CCallExpr
                                                    CMemberReference
                                                        CLowerIdentifier{'shorterThan'}
                                                        ROptional<CTypeArguments>
                                                    CPositionalArguments
                                                        RLiteral{'('}
                                                        ROptional<CSequencedArgumentList>
                                                            CSequencedArgumentList
                                                                CSelectionExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'sublist'}
                                                                        ROptional<CTypeArguments>
                                                                    CMemberSelectionOperator{'.'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'size'}
                                                                        ROptional<CTypeArguments>
                                                        RLiteral{')'}
                                            CConjunctionOperator{'&&'}
                                            CCallExpr
                                                CMemberReference
                                                    CLowerIdentifier{'everyPair'}
                                                    ROptional<CTypeArguments>
                                                CPositionalArguments
                                                    RLiteral{'('}
                                                    ROptional<CSequencedArgumentList>
                                                        CSequencedArgumentList
                                                            CCallExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'skip'}
                                                                    ROptional<CTypeArguments>
                                                                CPositionalArguments
                                                                    RLiteral{'('}
                                                                    ROptional<CSequencedArgumentList>
                                                                        CSequencedArgumentList
                                                                            CAdditiveExpr
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'size'}
                                                                                    ROptional<CTypeArguments>
                                                                                CAdditiveOperator{'-'}
                                                                                CSelectionExpr
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'sublist'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CMemberSelectionOperator{'.'}
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'size'}
                                                                                        ROptional<CTypeArguments>
                                                                    RLiteral{')'}
                                                            CMemberReference
                                                                CLowerIdentifier{'sublist'}
                                                                ROptional<CTypeArguments>
                                                            CInferredFunctionExpr
                                                                ROptional<RLiteral>
                                                                ROptional<CTypeParameters>
                                                                RPlus<CParameters>
                                                                    CParameters
                                                                        RLiteral{'('}
                                                                        ROptional<CParameterList>
                                                                            CParameterList
                                                                                CParameterReference
                                                                                    CLowerIdentifier{'first'}
                                                                                    ROptional<CValueSpecifier>
                                                                                CParameterReference
                                                                                    CLowerIdentifier{'second'}
                                                                                    ROptional<CValueSpecifier>
                                                                        RLiteral{')'}
                                                                ROptional<CTypeConstraints>
                                                                CFunctionSpecifier
                                                                    RLiteral{'=>'}
                                                                    CIfExpr
                                                                        RLiteral{'if'}
                                                                        CConditions
                                                                            RLiteral{'('}
                                                                            ROptional<CConditionList>
                                                                                CConditionList
                                                                                    CExistsCondition
                                                                                        ROptional<RLiteral>
                                                                                        RLiteral{'exists'}
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'first'}
                                                                                            ROptional<CTypeArguments>
                                                                                    CExistsCondition
                                                                                        ROptional<RLiteral>
                                                                                        RLiteral{'exists'}
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'second'}
                                                                                            ROptional<CTypeArguments>
                                                                            RLiteral{')'}
                                                                        CThenExpression
                                                                            RLiteral{'then'}
                                                                            CEqualityExpr
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'first'}
                                                                                    ROptional<CTypeArguments>
                                                                                CEqualityOperator{'=='}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'second'}
                                                                                    ROptional<CTypeArguments>
                                                                        CElseExpression
                                                                            RLiteral{'else'}
                                                                            CEqualityExpr
                                                                                CExistsExpr
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'first'}
                                                                                        ROptional<CTypeArguments>
                                                                                    RLiteral{'exists'}
                                                                                CEqualityOperator{'=='}
                                                                                CExistsExpr
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'second'}
                                                                                        ROptional<CTypeArguments>
                                                                                    RLiteral{'exists'}
                                                    RLiteral{')'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"The indexes in this list for which the element is not null and satisfies the given\r\n     [[predicate function|selecting]].\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'locations'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'since'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CLiteralString{'\"1.1.0\"'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CIterableType
                                RLiteral{'{'}
                                ROptional<ICVariadicType>
                                    CVariadicTypeCore
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Integer'}
                                                ROptional<CTypeArguments>
                                        CVariadicOperator{'*'}
                                RLiteral{'}'}
                            CLowerIdentifier{'indexesWhere'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The predicate function the indexed elements must satisfy.\"'}
                                                    RStar<CAnnotation>
                                                CTypedFunctionParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Boolean'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'selecting'}
                                                    ROptional<CTypeParameters>
                                                    RPlus<CParameters>
                                                        CParameters
                                                            RLiteral{'('}
                                                            ROptional<CParameterList>
                                                                CParameterList
                                                                    CParameter
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CTypedValueParameter
                                                                            CIntersectionTypeCore
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Element'}
                                                                                        ROptional<CTypeArguments>
                                                                                CIntersectionOperator{'&'}
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Object'}
                                                                                        ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'element'}
                                                                            ROptional<CValueSpecifier>
                                                            RLiteral{')'}
                                                    ROptional<CFunctionSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CEnumerationExpr
                                            RLiteral{'{'}
                                            CStatements
                                            ROptional<CSequencedArgumentList>
                                                CSequencedArgumentList
                                                    CForComprehensionClause
                                                        RLiteral{'for'}
                                                        RLiteral{'('}
                                                        ROptional<CForIterator>
                                                            CForIterator
                                                                CVariable
                                                                    ROptional<ICVariableType>
                                                                    CLowerIdentifier{'index'}
                                                                    RStar<CParameters>
                                                                CContainment
                                                                    CContainmentOperator{'in'}
                                                                    CRangeExpr
                                                                        CLiteralNatural{'0'}
                                                                        CRangeOperator{':'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'size'}
                                                                            ROptional<CTypeArguments>
                                                        RLiteral{')'}
                                                        CIfComprehensionClause
                                                            RLiteral{'if'}
                                                            CConditions
                                                                RLiteral{'('}
                                                                ROptional<CConditionList>
                                                                    CConditionList
                                                                        CExistsCondition
                                                                            ROptional<RLiteral>
                                                                            RLiteral{'exists'}
                                                                            CLetVariable
                                                                                CVariable
                                                                                    ROptional<ICVariableType>
                                                                                    CLowerIdentifier{'element'}
                                                                                    RStar<CParameters>
                                                                                CValueSpecifier
                                                                                    RLiteral{'='}
                                                                                    CCallExpr
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'getFromFirst'}
                                                                                            ROptional<CTypeArguments>
                                                                                        CPositionalArguments
                                                                                            RLiteral{'('}
                                                                                            ROptional<CSequencedArgumentList>
                                                                                                CSequencedArgumentList
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'index'}
                                                                                                        ROptional<CTypeArguments>
                                                                                            RLiteral{')'}
                                                                        CCallExpr
                                                                            CMemberReference
                                                                                CLowerIdentifier{'selecting'}
                                                                                ROptional<CTypeArguments>
                                                                            CPositionalArguments
                                                                                RLiteral{'('}
                                                                                ROptional<CSequencedArgumentList>
                                                                                    CSequencedArgumentList
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'element'}
                                                                                            ROptional<CTypeArguments>
                                                                                RLiteral{')'}
                                                                RLiteral{')'}
                                                            CMemberReference
                                                                CLowerIdentifier{'index'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'}'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"The first index in this list for which the element is\r\n     not null and satisfies the given \r\n     [[predicate function|selecting]].\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'locate'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'since'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CLiteralString{'\"1.1.0\"'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CNullableType
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Integer'}
                                        ROptional<CTypeArguments>
                                RLiteral{'?'}
                            CLowerIdentifier{'firstIndexWhere'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The predicate function the indexed elements must \r\n         satisfy.\"'}
                                                    RStar<CAnnotation>
                                                CTypedFunctionParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Boolean'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'selecting'}
                                                    ROptional<CTypeParameters>
                                                    RPlus<CParameters>
                                                        CParameters
                                                            RLiteral{'('}
                                                            ROptional<CParameterList>
                                                                CParameterList
                                                                    CParameter
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CTypedValueParameter
                                                                            CIntersectionTypeCore
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Element'}
                                                                                        ROptional<CTypeArguments>
                                                                                CIntersectionOperator{'&'}
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Object'}
                                                                                        ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'element'}
                                                                            ROptional<CValueSpecifier>
                                                            RLiteral{')'}
                                                    ROptional<CFunctionSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CInferredAttributeDeclaration
                                        CAnnotations
                                            ROptional<ICStringLiteral>
                                            RStar<CAnnotation>
                                                CAnnotation
                                                    CLowerIdentifier{'variable'}
                                                    ROptional<ICArguments>
                                        CKwValue{'value'}
                                        CLowerIdentifier{'index'}
                                        COptionalAnySpecifier
                                            ROptional<ICAnySpecifier>
                                                CValueSpecifier
                                                    RLiteral{'='}
                                                    CLiteralNatural{'0'}
                                            RLiteral{';'}
                                    CWhileStatement
                                        RLiteral{'while'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CSmallerExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'index'}
                                                            ROptional<CTypeArguments>
                                                        CSmallerOperator{'<'}
                                                        CMemberReference
                                                            CLowerIdentifier{'size'}
                                                            ROptional<CTypeArguments>
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CIfElseStatement
                                                    RLiteral{'if'}
                                                    CConditions
                                                        RLiteral{'('}
                                                        ROptional<CConditionList>
                                                            CConditionList
                                                                CExistsCondition
                                                                    ROptional<RLiteral>
                                                                    RLiteral{'exists'}
                                                                    CLetVariable
                                                                        CVariable
                                                                            ROptional<ICVariableType>
                                                                            CLowerIdentifier{'element'}
                                                                            RStar<CParameters>
                                                                        CValueSpecifier
                                                                            RLiteral{'='}
                                                                            CCallExpr
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'getFromFirst'}
                                                                                    ROptional<CTypeArguments>
                                                                                CPositionalArguments
                                                                                    RLiteral{'('}
                                                                                    ROptional<CSequencedArgumentList>
                                                                                        CSequencedArgumentList
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'index'}
                                                                                                ROptional<CTypeArguments>
                                                                                    RLiteral{')'}
                                                                CCallExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'selecting'}
                                                                        ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'element'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                                        RLiteral{')'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CUnclosedStatement
                                                                CReturnStatement
                                                                    RLiteral{'return'}
                                                                    ROptional<ICExpression>
                                                                        CMemberReference
                                                                            CLowerIdentifier{'index'}
                                                                            ROptional<CTypeArguments>
                                                                RLiteral{';'}
                                                        RLiteral{'}'}
                                                    RStar<CElseIf>
                                                    ROptional<CElseBlock>
                                                CUnclosedStatement
                                                    CPostfixExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'index'}
                                                            ROptional<CTypeArguments>
                                                        CIncrementOperator{'++'}
                                                    RLiteral{';'}
                                            RLiteral{'}'}
                                    CUnclosedStatement
                                        CReturnStatement
                                            RLiteral{'return'}
                                            ROptional<ICExpression>
                                                CMemberReference
                                                    CLowerIdentifier{'null'}
                                                    ROptional<CTypeArguments>
                                        RLiteral{';'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"The last index in this list for which the element is\r\n     not null and satisfies the given \r\n     [[predicate function|selecting]].\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'locateLast'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'since'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CLiteralString{'\"1.1.0\"'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CNullableType
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Integer'}
                                        ROptional<CTypeArguments>
                                RLiteral{'?'}
                            CLowerIdentifier{'lastIndexWhere'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The predicate function the indexed elements must \r\n         satisfy.\"'}
                                                    RStar<CAnnotation>
                                                CTypedFunctionParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Boolean'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'selecting'}
                                                    ROptional<CTypeParameters>
                                                    RPlus<CParameters>
                                                        CParameters
                                                            RLiteral{'('}
                                                            ROptional<CParameterList>
                                                                CParameterList
                                                                    CParameter
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CTypedValueParameter
                                                                            CIntersectionTypeCore
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Element'}
                                                                                        ROptional<CTypeArguments>
                                                                                CIntersectionOperator{'&'}
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Object'}
                                                                                        ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'element'}
                                                                            ROptional<CValueSpecifier>
                                                            RLiteral{')'}
                                                    ROptional<CFunctionSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CInferredAttributeDeclaration
                                        CAnnotations
                                            ROptional<ICStringLiteral>
                                            RStar<CAnnotation>
                                                CAnnotation
                                                    CLowerIdentifier{'variable'}
                                                    ROptional<ICArguments>
                                        CKwValue{'value'}
                                        CLowerIdentifier{'index'}
                                        COptionalAnySpecifier
                                            ROptional<ICAnySpecifier>
                                                CValueSpecifier
                                                    RLiteral{'='}
                                                    CMemberReference
                                                        CLowerIdentifier{'size'}
                                                        ROptional<CTypeArguments>
                                            RLiteral{';'}
                                    CWhileStatement
                                        RLiteral{'while'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CLargerExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'index'}
                                                            ROptional<CTypeArguments>
                                                        CLargerOperator{'>'}
                                                        CLiteralNatural{'0'}
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CUnclosedStatement
                                                    CPostfixExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'index'}
                                                            ROptional<CTypeArguments>
                                                        CIncrementOperator{'--'}
                                                    RLiteral{';'}
                                                CIfElseStatement
                                                    RLiteral{'if'}
                                                    CConditions
                                                        RLiteral{'('}
                                                        ROptional<CConditionList>
                                                            CConditionList
                                                                CExistsCondition
                                                                    ROptional<RLiteral>
                                                                    RLiteral{'exists'}
                                                                    CLetVariable
                                                                        CVariable
                                                                            ROptional<ICVariableType>
                                                                            CLowerIdentifier{'element'}
                                                                            RStar<CParameters>
                                                                        CValueSpecifier
                                                                            RLiteral{'='}
                                                                            CCallExpr
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'getFromFirst'}
                                                                                    ROptional<CTypeArguments>
                                                                                CPositionalArguments
                                                                                    RLiteral{'('}
                                                                                    ROptional<CSequencedArgumentList>
                                                                                        CSequencedArgumentList
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'index'}
                                                                                                ROptional<CTypeArguments>
                                                                                    RLiteral{')'}
                                                                CCallExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'selecting'}
                                                                        ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'element'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                                        RLiteral{')'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CUnclosedStatement
                                                                CReturnStatement
                                                                    RLiteral{'return'}
                                                                    ROptional<ICExpression>
                                                                        CMemberReference
                                                                            CLowerIdentifier{'index'}
                                                                            ROptional<CTypeArguments>
                                                                RLiteral{';'}
                                                        RLiteral{'}'}
                                                    RStar<CElseIf>
                                                    ROptional<CElseBlock>
                                            RLiteral{'}'}
                                    CUnclosedStatement
                                        CReturnStatement
                                            RLiteral{'return'}
                                            ROptional<ICExpression>
                                                CMemberReference
                                                    CLowerIdentifier{'null'}
                                                    ROptional<CTypeArguments>
                                        RLiteral{';'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Trim the elements satisfying the given [[predicate \r\n     function|trimming]], along with any null elements, from \r\n     the start and end of this list, returning a list no \r\n     longer than this list.\r\n     \r\n     This is an eager operation.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'List'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Element'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'trim'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The predicate function that the trimmed elements \r\n         satisfy.\"'}
                                                    RStar<CAnnotation>
                                                CTypedFunctionParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Boolean'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'trimming'}
                                                    ROptional<CTypeParameters>
                                                    RPlus<CParameters>
                                                        CParameters
                                                            RLiteral{'('}
                                                            ROptional<CParameterList>
                                                                CParameterList
                                                                    CParameter
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CTypedValueParameter
                                                                            CIntersectionTypeCore
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Element'}
                                                                                        ROptional<CTypeArguments>
                                                                                CIntersectionOperator{'&'}
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Object'}
                                                                                        ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'elem'}
                                                                            ROptional<CValueSpecifier>
                                                            RLiteral{')'}
                                                    ROptional<CFunctionSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CIfElseStatement
                                        RLiteral{'if'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CLargerExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'size'}
                                                            ROptional<CTypeArguments>
                                                        CLargerOperator{'>'}
                                                        CLiteralNatural{'0'}
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CInferredAttributeDeclaration
                                                    CAnnotations
                                                        ROptional<ICStringLiteral>
                                                        RStar<CAnnotation>
                                                    CKwValue{'value'}
                                                    CLowerIdentifier{'end'}
                                                    COptionalAnySpecifier
                                                        ROptional<ICAnySpecifier>
                                                            CValueSpecifier
                                                                RLiteral{'='}
                                                                CAdditiveExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'size'}
                                                                        ROptional<CTypeArguments>
                                                                    CAdditiveOperator{'-'}
                                                                    CLiteralNatural{'1'}
                                                        RLiteral{';'}
                                                CTypedAttributeDeclaration
                                                    CAnnotations
                                                        ROptional<ICStringLiteral>
                                                        RStar<CAnnotation>
                                                            CAnnotation
                                                                CLowerIdentifier{'variable'}
                                                                ROptional<ICArguments>
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'from'}
                                                    COptionalAnySpecifier
                                                        ROptional<ICAnySpecifier>
                                                            CValueSpecifier
                                                                RLiteral{'='}
                                                                CNegationOrComplementExpr
                                                                    CNegateOperator
                                                                        RLiteral{'-'}
                                                                        RNot<RLiteral>
                                                                    CLiteralNatural{'1'}
                                                        RLiteral{';'}
                                                CTypedAttributeDeclaration
                                                    CAnnotations
                                                        ROptional<ICStringLiteral>
                                                        RStar<CAnnotation>
                                                            CAnnotation
                                                                CLowerIdentifier{'variable'}
                                                                ROptional<ICArguments>
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'to'}
                                                    COptionalAnySpecifier
                                                        ROptional<ICAnySpecifier>
                                                            CValueSpecifier
                                                                RLiteral{'='}
                                                                CNegationOrComplementExpr
                                                                    CNegateOperator
                                                                        RLiteral{'-'}
                                                                        RNot<RLiteral>
                                                                    CLiteralNatural{'1'}
                                                        RLiteral{';'}
                                                CForElseStatement
                                                    RLiteral{'for'}
                                                    RLiteral{'('}
                                                    ROptional<CForIterator>
                                                        CForIterator
                                                            CVariable
                                                                ROptional<ICVariableType>
                                                                CLowerIdentifier{'index'}
                                                                RStar<CParameters>
                                                            CContainment
                                                                CContainmentOperator{'in'}
                                                                CRangeExpr
                                                                    CLiteralNatural{'0'}
                                                                    CRangeOperator{'..'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'end'}
                                                                        ROptional<CTypeArguments>
                                                    RLiteral{')'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CIfElseStatement
                                                                RLiteral{'if'}
                                                                CConditions
                                                                    RLiteral{'('}
                                                                    ROptional<CConditionList>
                                                                        CConditionList
                                                                            CExistsCondition
                                                                                ROptional<RLiteral>
                                                                                RLiteral{'exists'}
                                                                                CLetVariable
                                                                                    CVariable
                                                                                        ROptional<ICVariableType>
                                                                                        CLowerIdentifier{'elem'}
                                                                                        RStar<CParameters>
                                                                                    CValueSpecifier
                                                                                        RLiteral{'='}
                                                                                        CCallExpr
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'getFromFirst'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CPositionalArguments
                                                                                                RLiteral{'('}
                                                                                                ROptional<CSequencedArgumentList>
                                                                                                    CSequencedArgumentList
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'index'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                RLiteral{')'}
                                                                            CLogicalNegationExpr
                                                                                CNotOperator{'!'}
                                                                                CCallExpr
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'trimming'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CPositionalArguments
                                                                                        RLiteral{'('}
                                                                                        ROptional<CSequencedArgumentList>
                                                                                            CSequencedArgumentList
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'elem'}
                                                                                                    ROptional<CTypeArguments>
                                                                                        RLiteral{')'}
                                                                    RLiteral{')'}
                                                                CBlock
                                                                    RLiteral{'{'}
                                                                    CImports
                                                                    CStatements
                                                                        CUnclosedStatement
                                                                            CAssignmentExpr
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'from'}
                                                                                    ROptional<CTypeArguments>
                                                                                CAssignmentOperator{'='}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'index'}
                                                                                    ROptional<CTypeArguments>
                                                                            RLiteral{';'}
                                                                        CUnclosedStatement
                                                                            CBreakStatement{'break'}
                                                                            RLiteral{';'}
                                                                    RLiteral{'}'}
                                                                RStar<CElseIf>
                                                                ROptional<CElseBlock>
                                                        RLiteral{'}'}
                                                    ROptional<CElseBlock>
                                                        CElseBlock
                                                            RLiteral{'else'}
                                                            CBlock
                                                                RLiteral{'{'}
                                                                CImports
                                                                CStatements
                                                                    CUnclosedStatement
                                                                        CReturnStatement
                                                                            RLiteral{'return'}
                                                                            ROptional<ICExpression>
                                                                                CTupleExpr
                                                                                    RLiteral{'['}
                                                                                    ROptional<CSequencedArgumentList>
                                                                                    RLiteral{']'}
                                                                        RLiteral{';'}
                                                                RLiteral{'}'}
                                                CForElseStatement
                                                    RLiteral{'for'}
                                                    RLiteral{'('}
                                                    ROptional<CForIterator>
                                                        CForIterator
                                                            CVariable
                                                                ROptional<ICVariableType>
                                                                CLowerIdentifier{'index'}
                                                                RStar<CParameters>
                                                            CContainment
                                                                CContainmentOperator{'in'}
                                                                CRangeExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'end'}
                                                                        ROptional<CTypeArguments>
                                                                    CRangeOperator{'..'}
                                                                    CLiteralNatural{'0'}
                                                    RLiteral{')'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CIfElseStatement
                                                                RLiteral{'if'}
                                                                CConditions
                                                                    RLiteral{'('}
                                                                    ROptional<CConditionList>
                                                                        CConditionList
                                                                            CExistsCondition
                                                                                ROptional<RLiteral>
                                                                                RLiteral{'exists'}
                                                                                CLetVariable
                                                                                    CVariable
                                                                                        ROptional<ICVariableType>
                                                                                        CLowerIdentifier{'elem'}
                                                                                        RStar<CParameters>
                                                                                    CValueSpecifier
                                                                                        RLiteral{'='}
                                                                                        CCallExpr
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'getFromFirst'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CPositionalArguments
                                                                                                RLiteral{'('}
                                                                                                ROptional<CSequencedArgumentList>
                                                                                                    CSequencedArgumentList
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'index'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                RLiteral{')'}
                                                                            CLogicalNegationExpr
                                                                                CNotOperator{'!'}
                                                                                CCallExpr
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'trimming'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CPositionalArguments
                                                                                        RLiteral{'('}
                                                                                        ROptional<CSequencedArgumentList>
                                                                                            CSequencedArgumentList
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'elem'}
                                                                                                    ROptional<CTypeArguments>
                                                                                        RLiteral{')'}
                                                                    RLiteral{')'}
                                                                CBlock
                                                                    RLiteral{'{'}
                                                                    CImports
                                                                    CStatements
                                                                        CUnclosedStatement
                                                                            CAssignmentExpr
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'to'}
                                                                                    ROptional<CTypeArguments>
                                                                                CAssignmentOperator{'='}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'index'}
                                                                                    ROptional<CTypeArguments>
                                                                            RLiteral{';'}
                                                                        CUnclosedStatement
                                                                            CBreakStatement{'break'}
                                                                            RLiteral{';'}
                                                                    RLiteral{'}'}
                                                                RStar<CElseIf>
                                                                ROptional<CElseBlock>
                                                        RLiteral{'}'}
                                                    ROptional<CElseBlock>
                                                        CElseBlock
                                                            RLiteral{'else'}
                                                            CBlock
                                                                RLiteral{'{'}
                                                                CImports
                                                                CStatements
                                                                    CUnclosedStatement
                                                                        CReturnStatement
                                                                            RLiteral{'return'}
                                                                            ROptional<ICExpression>
                                                                                CTupleExpr
                                                                                    RLiteral{'['}
                                                                                    ROptional<CSequencedArgumentList>
                                                                                    RLiteral{']'}
                                                                        RLiteral{';'}
                                                                RLiteral{'}'}
                                                CUnclosedStatement
                                                    CReturnStatement
                                                        RLiteral{'return'}
                                                        ROptional<ICExpression>
                                                            CIndexedExpr
                                                                CSelfReference{'this'}
                                                                RLiteral{'['}
                                                                CSpanned
                                                                    CMemberReference
                                                                        CLowerIdentifier{'from'}
                                                                        ROptional<CTypeArguments>
                                                                    RLiteral{'..'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'to'}
                                                                        ROptional<CTypeArguments>
                                                                RLiteral{']'}
                                                    RLiteral{';'}
                                            RLiteral{'}'}
                                        RStar<CElseIf>
                                        ROptional<CElseBlock>
                                            CElseBlock
                                                RLiteral{'else'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CTupleExpr
                                                                        RLiteral{'['}
                                                                        ROptional<CSequencedArgumentList>
                                                                        RLiteral{']'}
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Trim the elements satisfying the given [[predicate \r\n     function|trimming]], along with any null elements, from\r\n     the start of this list, returning a list no longer than \r\n     this list.\r\n     \r\n     This is an eager operation.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'List'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Element'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'trimLeading'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The predicate function that the trimmed elements \r\n         satisfy.\"'}
                                                    RStar<CAnnotation>
                                                CTypedFunctionParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Boolean'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'trimming'}
                                                    ROptional<CTypeParameters>
                                                    RPlus<CParameters>
                                                        CParameters
                                                            RLiteral{'('}
                                                            ROptional<CParameterList>
                                                                CParameterList
                                                                    CParameter
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CTypedValueParameter
                                                                            CIntersectionTypeCore
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Element'}
                                                                                        ROptional<CTypeArguments>
                                                                                CIntersectionOperator{'&'}
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Object'}
                                                                                        ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'elem'}
                                                                            ROptional<CValueSpecifier>
                                                            RLiteral{')'}
                                                    ROptional<CFunctionSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CIfElseStatement
                                        RLiteral{'if'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CLargerExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'size'}
                                                            ROptional<CTypeArguments>
                                                        CLargerOperator{'>'}
                                                        CLiteralNatural{'0'}
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CInferredAttributeDeclaration
                                                    CAnnotations
                                                        ROptional<ICStringLiteral>
                                                        RStar<CAnnotation>
                                                    CKwValue{'value'}
                                                    CLowerIdentifier{'end'}
                                                    COptionalAnySpecifier
                                                        ROptional<ICAnySpecifier>
                                                            CValueSpecifier
                                                                RLiteral{'='}
                                                                CAdditiveExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'size'}
                                                                        ROptional<CTypeArguments>
                                                                    CAdditiveOperator{'-'}
                                                                    CLiteralNatural{'1'}
                                                        RLiteral{';'}
                                                CForElseStatement
                                                    RLiteral{'for'}
                                                    RLiteral{'('}
                                                    ROptional<CForIterator>
                                                        CForIterator
                                                            CVariable
                                                                ROptional<ICVariableType>
                                                                CLowerIdentifier{'index'}
                                                                RStar<CParameters>
                                                            CContainment
                                                                CContainmentOperator{'in'}
                                                                CRangeExpr
                                                                    CLiteralNatural{'0'}
                                                                    CRangeOperator{'..'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'end'}
                                                                        ROptional<CTypeArguments>
                                                    RLiteral{')'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CIfElseStatement
                                                                RLiteral{'if'}
                                                                CConditions
                                                                    RLiteral{'('}
                                                                    ROptional<CConditionList>
                                                                        CConditionList
                                                                            CExistsCondition
                                                                                ROptional<RLiteral>
                                                                                RLiteral{'exists'}
                                                                                CLetVariable
                                                                                    CVariable
                                                                                        ROptional<ICVariableType>
                                                                                        CLowerIdentifier{'elem'}
                                                                                        RStar<CParameters>
                                                                                    CValueSpecifier
                                                                                        RLiteral{'='}
                                                                                        CCallExpr
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'getFromFirst'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CPositionalArguments
                                                                                                RLiteral{'('}
                                                                                                ROptional<CSequencedArgumentList>
                                                                                                    CSequencedArgumentList
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'index'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                RLiteral{')'}
                                                                            CLogicalNegationExpr
                                                                                CNotOperator{'!'}
                                                                                CCallExpr
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'trimming'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CPositionalArguments
                                                                                        RLiteral{'('}
                                                                                        ROptional<CSequencedArgumentList>
                                                                                            CSequencedArgumentList
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'elem'}
                                                                                                    ROptional<CTypeArguments>
                                                                                        RLiteral{')'}
                                                                    RLiteral{')'}
                                                                CBlock
                                                                    RLiteral{'{'}
                                                                    CImports
                                                                    CStatements
                                                                        CUnclosedStatement
                                                                            CReturnStatement
                                                                                RLiteral{'return'}
                                                                                ROptional<ICExpression>
                                                                                    CIndexedExpr
                                                                                        CSelfReference{'this'}
                                                                                        RLiteral{'['}
                                                                                        CSpanned
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'index'}
                                                                                                ROptional<CTypeArguments>
                                                                                            RLiteral{'..'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'end'}
                                                                                                ROptional<CTypeArguments>
                                                                                        RLiteral{']'}
                                                                            RLiteral{';'}
                                                                    RLiteral{'}'}
                                                                RStar<CElseIf>
                                                                ROptional<CElseBlock>
                                                        RLiteral{'}'}
                                                    ROptional<CElseBlock>
                                            RLiteral{'}'}
                                        RStar<CElseIf>
                                        ROptional<CElseBlock>
                                    CUnclosedStatement
                                        CReturnStatement
                                            RLiteral{'return'}
                                            ROptional<ICExpression>
                                                CTupleExpr
                                                    RLiteral{'['}
                                                    ROptional<CSequencedArgumentList>
                                                    RLiteral{']'}
                                        RLiteral{';'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Trim the elements satisfying the given [[predicate \r\n     function|trimming]], along with any null elements, from \r\n     the end of this list, returning a list no longer than \r\n     this list.\r\n     \r\n     This is an eager operation.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'List'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Element'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'trimTrailing'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The predicate function that the trimmed elements \r\n         satisfy.\"'}
                                                    RStar<CAnnotation>
                                                CTypedFunctionParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Boolean'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'trimming'}
                                                    ROptional<CTypeParameters>
                                                    RPlus<CParameters>
                                                        CParameters
                                                            RLiteral{'('}
                                                            ROptional<CParameterList>
                                                                CParameterList
                                                                    CParameter
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CTypedValueParameter
                                                                            CIntersectionTypeCore
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Element'}
                                                                                        ROptional<CTypeArguments>
                                                                                CIntersectionOperator{'&'}
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Object'}
                                                                                        ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'elem'}
                                                                            ROptional<CValueSpecifier>
                                                            RLiteral{')'}
                                                    ROptional<CFunctionSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CIfElseStatement
                                        RLiteral{'if'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CLargerExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'size'}
                                                            ROptional<CTypeArguments>
                                                        CLargerOperator{'>'}
                                                        CLiteralNatural{'0'}
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CInferredAttributeDeclaration
                                                    CAnnotations
                                                        ROptional<ICStringLiteral>
                                                        RStar<CAnnotation>
                                                    CKwValue{'value'}
                                                    CLowerIdentifier{'end'}
                                                    COptionalAnySpecifier
                                                        ROptional<ICAnySpecifier>
                                                            CValueSpecifier
                                                                RLiteral{'='}
                                                                CAdditiveExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'size'}
                                                                        ROptional<CTypeArguments>
                                                                    CAdditiveOperator{'-'}
                                                                    CLiteralNatural{'1'}
                                                        RLiteral{';'}
                                                CForElseStatement
                                                    RLiteral{'for'}
                                                    RLiteral{'('}
                                                    ROptional<CForIterator>
                                                        CForIterator
                                                            CVariable
                                                                ROptional<ICVariableType>
                                                                CLowerIdentifier{'index'}
                                                                RStar<CParameters>
                                                            CContainment
                                                                CContainmentOperator{'in'}
                                                                CRangeExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'end'}
                                                                        ROptional<CTypeArguments>
                                                                    CRangeOperator{'..'}
                                                                    CLiteralNatural{'0'}
                                                    RLiteral{')'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CIfElseStatement
                                                                RLiteral{'if'}
                                                                CConditions
                                                                    RLiteral{'('}
                                                                    ROptional<CConditionList>
                                                                        CConditionList
                                                                            CExistsCondition
                                                                                ROptional<RLiteral>
                                                                                RLiteral{'exists'}
                                                                                CLetVariable
                                                                                    CVariable
                                                                                        ROptional<ICVariableType>
                                                                                        CLowerIdentifier{'elem'}
                                                                                        RStar<CParameters>
                                                                                    CValueSpecifier
                                                                                        RLiteral{'='}
                                                                                        CCallExpr
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'getFromFirst'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CPositionalArguments
                                                                                                RLiteral{'('}
                                                                                                ROptional<CSequencedArgumentList>
                                                                                                    CSequencedArgumentList
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'index'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                RLiteral{')'}
                                                                            CLogicalNegationExpr
                                                                                CNotOperator{'!'}
                                                                                CCallExpr
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'trimming'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CPositionalArguments
                                                                                        RLiteral{'('}
                                                                                        ROptional<CSequencedArgumentList>
                                                                                            CSequencedArgumentList
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'elem'}
                                                                                                    ROptional<CTypeArguments>
                                                                                        RLiteral{')'}
                                                                    RLiteral{')'}
                                                                CBlock
                                                                    RLiteral{'{'}
                                                                    CImports
                                                                    CStatements
                                                                        CUnclosedStatement
                                                                            CReturnStatement
                                                                                RLiteral{'return'}
                                                                                ROptional<ICExpression>
                                                                                    CIndexedExpr
                                                                                        CSelfReference{'this'}
                                                                                        RLiteral{'['}
                                                                                        CSpanned
                                                                                            CLiteralNatural{'0'}
                                                                                            RLiteral{'..'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'index'}
                                                                                                ROptional<CTypeArguments>
                                                                                        RLiteral{']'}
                                                                            RLiteral{';'}
                                                                    RLiteral{'}'}
                                                                RStar<CElseIf>
                                                                ROptional<CElseBlock>
                                                        RLiteral{'}'}
                                                    ROptional<CElseBlock>
                                            RLiteral{'}'}
                                        RStar<CElseIf>
                                        ROptional<CElseBlock>
                                    CUnclosedStatement
                                        CReturnStatement
                                            RLiteral{'return'}
                                            ROptional<ICExpression>
                                                CTupleExpr
                                                    RLiteral{'['}
                                                    ROptional<CSequencedArgumentList>
                                                    RLiteral{']'}
                                        RLiteral{';'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Return two lists, the first containing the elements\r\n     that occur before the given [[index]], the second with\r\n     the elements that occur after the given `index`. If the\r\n     given `index` is outside the range of indexes of this\r\n     list, one of the returned lists will be empty.\r\n     \r\n     For any `list`, and for any integer `index`:\r\n     \r\n         list.slice(index) == [list[...index-1], list[index...]]\r\n     \r\n     This is an eager operation.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'since'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CLiteralString{'\"1.1.0\"'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CArrayType
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'List'}
                                        ROptional<CTypeArguments>
                                            CTypeArguments
                                                RLiteral{'<'}
                                                ROptional<CTypeArgumentList>
                                                    CTypeArgumentList
                                                        CVariancedType
                                                            ROptional<ICVariance>
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Element'}
                                                                    ROptional<CTypeArguments>
                                                RLiteral{'>'}
                                RLiteral{'['}
                                ROptional<CLiteralNatural>
                                    CLiteralNatural{'2'}
                                RLiteral{']'}
                            CLowerIdentifier{'slice'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'index'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CTupleExpr
                                            RLiteral{'['}
                                            ROptional<CSequencedArgumentList>
                                                CSequencedArgumentList
                                                    CIndexedExpr
                                                        CSelfReference{'this'}
                                                        RLiteral{'['}
                                                        CLowerSpanned
                                                            CImportWildcard{'...'}
                                                            CAdditiveExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'index'}
                                                                    ROptional<CTypeArguments>
                                                                CAdditiveOperator{'-'}
                                                                CLiteralNatural{'1'}
                                                        RLiteral{']'}
                                                    CIndexedExpr
                                                        CSelfReference{'this'}
                                                        RLiteral{'['}
                                                        CUpperSpanned
                                                            CMemberReference
                                                                CLowerIdentifier{'index'}
                                                                ROptional<CTypeArguments>
                                                            CImportWildcard{'...'}
                                                        RLiteral{']'}
                                            RLiteral{']'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Select the first elements of this list, returning a \r\n     list no longer than the given length. If this list is \r\n     shorter than the given length, return this list. \r\n     Otherwise return a list of the given length. If \r\n     `length<=0` return an empty list.\r\n     \r\n     For any `list`, and for any integer `length`:\r\n     \r\n         list.initial(length) == list[...length-1] == list[0:length]\r\n     \r\n     This is an eager operation.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'terminal'}
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'sublistTo'}
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'take'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'List'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Element'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'initial'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'length'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CIndexedExpr
                                            CSelfReference{'this'}
                                            RLiteral{'['}
                                            CLowerSpanned
                                                CImportWildcard{'...'}
                                                CAdditiveExpr
                                                    CMemberReference
                                                        CLowerIdentifier{'length'}
                                                        ROptional<CTypeArguments>
                                                    CAdditiveOperator{'-'}
                                                    CLiteralNatural{'1'}
                                            RLiteral{']'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Select the last elements of the list, returning a list \r\n     no longer than the given length. If this list is \r\n     shorter than the given length, return this list. \r\n     Otherwise return a list of the given length.\r\n     \r\n     For any `list`, and for any integer `length`:\r\n     \r\n         list.terminal(length) == list[size-length...]\r\n     \r\n     This is an eager operation.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'see'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CFunctionLiteral
                                                            CKwFunction{'function'}
                                                            CReferencePath
                                                                ROptional<CPackageQualifier>
                                                                CReferencePathElementList
                                                                    CIdentifier{'initial'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'List'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Element'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'terminal'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'length'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CIndexedExpr
                                            CSelfReference{'this'}
                                            RLiteral{'['}
                                            CUpperSpanned
                                                CAdditiveExpr
                                                    CMemberReference
                                                        CLowerIdentifier{'size'}
                                                        ROptional<CTypeArguments>
                                                    CAdditiveOperator{'-'}
                                                    CMemberReference
                                                        CLowerIdentifier{'length'}
                                                        ROptional<CTypeArguments>
                                                CImportWildcard{'...'}
                                            RLiteral{']'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'List'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Element'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'span'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'from'}
                                                    ROptional<CValueSpecifier>
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'to'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CIfElseStatement
                                        RLiteral{'if'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CLargerExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'size'}
                                                            ROptional<CTypeArguments>
                                                        CLargerOperator{'>'}
                                                        CLiteralNatural{'0'}
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CInferredAttributeDeclaration
                                                    CAnnotations
                                                        ROptional<ICStringLiteral>
                                                        RStar<CAnnotation>
                                                    CKwValue{'value'}
                                                    CLowerIdentifier{'end'}
                                                    COptionalAnySpecifier
                                                        ROptional<ICAnySpecifier>
                                                            CValueSpecifier
                                                                RLiteral{'='}
                                                                CAdditiveExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'size'}
                                                                        ROptional<CTypeArguments>
                                                                    CAdditiveOperator{'-'}
                                                                    CLiteralNatural{'1'}
                                                        RLiteral{';'}
                                                CIfElseStatement
                                                    RLiteral{'if'}
                                                    CConditions
                                                        RLiteral{'('}
                                                        ROptional<CConditionList>
                                                            CConditionList
                                                                CSmallerExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'from'}
                                                                        ROptional<CTypeArguments>
                                                                    CSmallerOperator{'<='}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'to'}
                                                                        ROptional<CTypeArguments>
                                                        RLiteral{')'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CUnclosedStatement
                                                                CReturnStatement
                                                                    RLiteral{'return'}
                                                                    ROptional<ICExpression>
                                                                        CIfExpr
                                                                            RLiteral{'if'}
                                                                            CConditions
                                                                                RLiteral{'('}
                                                                                ROptional<CConditionList>
                                                                                    CConditionList
                                                                                        CConjunctionExpr
                                                                                            CLargerExpr
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'to'}
                                                                                                    ROptional<CTypeArguments>
                                                                                                CLargerOperator{'>='}
                                                                                                CLiteralNatural{'0'}
                                                                                            CConjunctionOperator{'&&'}
                                                                                            CSmallerExpr
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'from'}
                                                                                                    ROptional<CTypeArguments>
                                                                                                CSmallerOperator{'<='}
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'end'}
                                                                                                    ROptional<CTypeArguments>
                                                                                RLiteral{')'}
                                                                            CThenExpression
                                                                                RLiteral{'then'}
                                                                                CCallExpr
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'ArraySequence'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CPositionalArguments
                                                                                        RLiteral{'('}
                                                                                        ROptional<CSequencedArgumentList>
                                                                                            CSequencedArgumentList
                                                                                                CCallExpr
                                                                                                    CTypeReference
                                                                                                        CUpperIdentifier{'Array'}
                                                                                                        ROptional<CTypeArguments>
                                                                                                    CPositionalArguments
                                                                                                        RLiteral{'('}
                                                                                                        ROptional<CSequencedArgumentList>
                                                                                                            CSequencedArgumentList
                                                                                                                CCallExpr
                                                                                                                    CMemberReference
                                                                                                                        CLowerIdentifier{'sublist'}
                                                                                                                        ROptional<CTypeArguments>
                                                                                                                    CPositionalArguments
                                                                                                                        RLiteral{'('}
                                                                                                                        ROptional<CSequencedArgumentList>
                                                                                                                            CSequencedArgumentList
                                                                                                                                CMemberReference
                                                                                                                                    CLowerIdentifier{'from'}
                                                                                                                                    ROptional<CTypeArguments>
                                                                                                                                CMemberReference
                                                                                                                                    CLowerIdentifier{'to'}
                                                                                                                                    ROptional<CTypeArguments>
                                                                                                                        RLiteral{')'}
                                                                                                        RLiteral{')'}
                                                                                        RLiteral{')'}
                                                                            CElseExpression
                                                                                RLiteral{'else'}
                                                                                CTupleExpr
                                                                                    RLiteral{'['}
                                                                                    ROptional<CSequencedArgumentList>
                                                                                    RLiteral{']'}
                                                                RLiteral{';'}
                                                        RLiteral{'}'}
                                                    RStar<CElseIf>
                                                    ROptional<CElseBlock>
                                                        CElseBlock
                                                            RLiteral{'else'}
                                                            CBlock
                                                                RLiteral{'{'}
                                                                CImports
                                                                CStatements
                                                                    CUnclosedStatement
                                                                        CReturnStatement
                                                                            RLiteral{'return'}
                                                                            ROptional<ICExpression>
                                                                                CIfExpr
                                                                                    RLiteral{'if'}
                                                                                    CConditions
                                                                                        RLiteral{'('}
                                                                                        ROptional<CConditionList>
                                                                                            CConditionList
                                                                                                CConjunctionExpr
                                                                                                    CLargerExpr
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'from'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                        CLargerOperator{'>='}
                                                                                                        CLiteralNatural{'0'}
                                                                                                    CConjunctionOperator{'&&'}
                                                                                                    CSmallerExpr
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'to'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                        CSmallerOperator{'<='}
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'end'}
                                                                                                            ROptional<CTypeArguments>
                                                                                        RLiteral{')'}
                                                                                    CThenExpression
                                                                                        RLiteral{'then'}
                                                                                        CCallExpr
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'ArraySequence'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CPositionalArguments
                                                                                                RLiteral{'('}
                                                                                                ROptional<CSequencedArgumentList>
                                                                                                    CSequencedArgumentList
                                                                                                        CCallExpr
                                                                                                            CTypeReference
                                                                                                                CUpperIdentifier{'Array'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                            CPositionalArguments
                                                                                                                RLiteral{'('}
                                                                                                                ROptional<CSequencedArgumentList>
                                                                                                                    CSequencedArgumentList
                                                                                                                        CSelectionExpr
                                                                                                                            CCallExpr
                                                                                                                                CMemberReference
                                                                                                                                    CLowerIdentifier{'sublist'}
                                                                                                                                    ROptional<CTypeArguments>
                                                                                                                                CPositionalArguments
                                                                                                                                    RLiteral{'('}
                                                                                                                                    ROptional<CSequencedArgumentList>
                                                                                                                                        CSequencedArgumentList
                                                                                                                                            CMemberReference
                                                                                                                                                CLowerIdentifier{'to'}
                                                                                                                                                ROptional<CTypeArguments>
                                                                                                                                            CMemberReference
                                                                                                                                                CLowerIdentifier{'from'}
                                                                                                                                                ROptional<CTypeArguments>
                                                                                                                                    RLiteral{')'}
                                                                                                                            CMemberSelectionOperator{'.'}
                                                                                                                            CMemberReference
                                                                                                                                CLowerIdentifier{'reversed'}
                                                                                                                                ROptional<CTypeArguments>
                                                                                                                RLiteral{')'}
                                                                                                RLiteral{')'}
                                                                                    CElseExpression
                                                                                        RLiteral{'else'}
                                                                                        CTupleExpr
                                                                                            RLiteral{'['}
                                                                                            ROptional<CSequencedArgumentList>
                                                                                            RLiteral{']'}
                                                                        RLiteral{';'}
                                                                RLiteral{'}'}
                                            RLiteral{'}'}
                                        RStar<CElseIf>
                                        ROptional<CElseBlock>
                                            CElseBlock
                                                RLiteral{'else'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CTupleExpr
                                                                        RLiteral{'['}
                                                                        ROptional<CSequencedArgumentList>
                                                                        RLiteral{']'}
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'List'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Element'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'spanFrom'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'from'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CThenElseExpr
                                            CThenElseExpr
                                                CSmallerExpr
                                                    CMemberReference
                                                        CLowerIdentifier{'from'}
                                                        ROptional<CTypeArguments>
                                                    CSmallerOperator{'<'}
                                                    CMemberReference
                                                        CLowerIdentifier{'size'}
                                                        ROptional<CTypeArguments>
                                                CThenElseOperator{'then'}
                                                CCallExpr
                                                    CMemberReference
                                                        CLowerIdentifier{'span'}
                                                        ROptional<CTypeArguments>
                                                    CPositionalArguments
                                                        RLiteral{'('}
                                                        ROptional<CSequencedArgumentList>
                                                            CSequencedArgumentList
                                                                CMemberReference
                                                                    CLowerIdentifier{'from'}
                                                                    ROptional<CTypeArguments>
                                                                CAdditiveExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'size'}
                                                                        ROptional<CTypeArguments>
                                                                    CAdditiveOperator{'-'}
                                                                    CLiteralNatural{'1'}
                                                        RLiteral{')'}
                                            CThenElseOperator{'else'}
                                            CTupleExpr
                                                RLiteral{'['}
                                                ROptional<CSequencedArgumentList>
                                                RLiteral{']'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'List'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Element'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'spanTo'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'to'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CThenElseExpr
                                            CThenElseExpr
                                                CLargerExpr
                                                    CMemberReference
                                                        CLowerIdentifier{'to'}
                                                        ROptional<CTypeArguments>
                                                    CLargerOperator{'>='}
                                                    CLiteralNatural{'0'}
                                                CThenElseOperator{'then'}
                                                CCallExpr
                                                    CMemberReference
                                                        CLowerIdentifier{'span'}
                                                        ROptional<CTypeArguments>
                                                    CPositionalArguments
                                                        RLiteral{'('}
                                                        ROptional<CSequencedArgumentList>
                                                            CSequencedArgumentList
                                                                CLiteralNatural{'0'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'to'}
                                                                    ROptional<CTypeArguments>
                                                        RLiteral{')'}
                                            CThenElseOperator{'else'}
                                            CTupleExpr
                                                RLiteral{'['}
                                                ROptional<CSequencedArgumentList>
                                                RLiteral{']'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'List'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Element'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'measure'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'from'}
                                                    ROptional<CValueSpecifier>
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'length'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CThenElseExpr
                                            CThenElseExpr
                                                CLargerExpr
                                                    CMemberReference
                                                        CLowerIdentifier{'length'}
                                                        ROptional<CTypeArguments>
                                                    CLargerOperator{'>'}
                                                    CLiteralNatural{'0'}
                                                CThenElseOperator{'then'}
                                                CCallExpr
                                                    CMemberReference
                                                        CLowerIdentifier{'span'}
                                                        ROptional<CTypeArguments>
                                                    CPositionalArguments
                                                        RLiteral{'('}
                                                        ROptional<CSequencedArgumentList>
                                                            CSequencedArgumentList
                                                                CMemberReference
                                                                    CLowerIdentifier{'from'}
                                                                    ROptional<CTypeArguments>
                                                                CAdditiveExpr
                                                                    CAdditiveExpr
                                                                        CMemberReference
                                                                            CLowerIdentifier{'from'}
                                                                            ROptional<CTypeArguments>
                                                                        CAdditiveOperator{'+'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'length'}
                                                                            ROptional<CTypeArguments>
                                                                    CAdditiveOperator{'-'}
                                                                    CLiteralNatural{'1'}
                                                        RLiteral{')'}
                                            CThenElseOperator{'else'}
                                            CTupleExpr
                                                RLiteral{'['}
                                                ROptional<CSequencedArgumentList>
                                                RLiteral{']'}
                                RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"A sequence containing the results of applying the given \r\n     mapping to the elements of this list.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                            CUnionTypeCore
                                CTupleType
                                    RLiteral{'['}
                                    ROptional<ICTypeTypeArguments>
                                        CDefaultedTypeList
                                            CVariadicTypeCore
                                                CTypePath
                                                    CTypeReference
                                                        CUpperIdentifier{'Result'}
                                                        ROptional<CTypeArguments>
                                                CVariadicOperator{'+'}
                                    RLiteral{']'}
                                RLiteral{'|'}
                                CTupleType
                                    RLiteral{'['}
                                    ROptional<ICTypeTypeArguments>
                                    RLiteral{']'}
                            CLowerIdentifier{'collect'}
                            ROptional<CTypeParameters>
                                CTypeParameters
                                    RLiteral{'<'}
                                    CTypeParameterList
                                        CTypeParameter
                                            ROptional<ICVariance>
                                            CUpperIdentifier{'Result'}
                                            ROptional<CTypeDefault>
                                    RLiteral{'>'}
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The transformation applied to the elements.\"'}
                                                    RStar<CAnnotation>
                                                CTypedFunctionParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Result'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'collecting'}
                                                    ROptional<CTypeParameters>
                                                    RPlus<CParameters>
                                                        CParameters
                                                            RLiteral{'('}
                                                            ROptional<CParameterList>
                                                                CParameterList
                                                                    CParameter
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CTypedValueParameter
                                                                            CTypePath
                                                                                CTypeReference
                                                                                    CUpperIdentifier{'Element'}
                                                                                    ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'element'}
                                                                            ROptional<CValueSpecifier>
                                                            RLiteral{')'}
                                                    ROptional<CFunctionSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CIfElseStatement
                                        RLiteral{'if'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CMemberReference
                                                        CLowerIdentifier{'empty'}
                                                        ROptional<CTypeArguments>
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CUnclosedStatement
                                                    CReturnStatement
                                                        RLiteral{'return'}
                                                        ROptional<ICExpression>
                                                            CTupleExpr
                                                                RLiteral{'['}
                                                                ROptional<CSequencedArgumentList>
                                                                RLiteral{']'}
                                                    RLiteral{';'}
                                            RLiteral{'}'}
                                        RStar<CElseIf>
                                        ROptional<CElseBlock>
                                            CElseBlock
                                                RLiteral{'else'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CObjectDeclaration
                                                            CAnnotations
                                                                ROptional<ICStringLiteral>
                                                                RStar<CAnnotation>
                                                            RLiteral{'object'}
                                                            CLowerIdentifier{'list'}
                                                            ROptional<CExtendedType>
                                                                CExtendedType
                                                                    RLiteral{'extends'}
                                                                    CClassInstantiation
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Object'}
                                                                                ROptional<CTypeArguments>
                                                                        ROptional<ICArguments>
                                                                            CPositionalArguments
                                                                                RLiteral{'('}
                                                                                ROptional<CSequencedArgumentList>
                                                                                RLiteral{')'}
                                                            ROptional<CSatisfiedTypes>
                                                                CSatisfiedTypes
                                                                    RLiteral{'satisfies'}
                                                                    CUnionTypeList
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'List'}
                                                                                ROptional<CTypeArguments>
                                                                                    CTypeArguments
                                                                                        RLiteral{'<'}
                                                                                        ROptional<CTypeArgumentList>
                                                                                            CTypeArgumentList
                                                                                                CVariancedType
                                                                                                    ROptional<ICVariance>
                                                                                                    CTypePath
                                                                                                        CTypeReference
                                                                                                            CUpperIdentifier{'Result'}
                                                                                                            ROptional<CTypeArguments>
                                                                                        RLiteral{'>'}
                                                            CBlock
                                                                RLiteral{'{'}
                                                                CImports
                                                                CStatements
                                                                    CUnclosedStatement
                                                                        CSpecificationStatement
                                                                            CMemberReference
                                                                                CLowerIdentifier{'lastIndex'}
                                                                                ROptional<CTypeArguments>
                                                                            CFunctionSpecifier
                                                                                RLiteral{'=>'}
                                                                                CSelectionExpr
                                                                                    CSelfReference{'outer'}
                                                                                    CMemberSelectionOperator{'.'}
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'lastIndex'}
                                                                                        ROptional<CTypeArguments>
                                                                        RLiteral{';'}
                                                                    CUnclosedStatement
                                                                        CAssignmentExpr
                                                                            CMemberReference
                                                                                CLowerIdentifier{'size'}
                                                                                ROptional<CTypeArguments>
                                                                            CAssignmentOperator{'='}
                                                                            CSelectionExpr
                                                                                CSelfReference{'outer'}
                                                                                CMemberSelectionOperator{'.'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'size'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{';'}
                                                                    CUnclosedStatement
                                                                        CSpecificationStatement
                                                                            CParametrizedMember
                                                                                CLowerIdentifier{'getFromFirst'}
                                                                                ROptional<CTypeParameters>
                                                                                RPlus<CParameters>
                                                                                    CParameters
                                                                                        RLiteral{'('}
                                                                                        ROptional<CParameterList>
                                                                                            CParameterList
                                                                                                CParameter
                                                                                                    CAnnotations
                                                                                                        ROptional<ICStringLiteral>
                                                                                                        RStar<CAnnotation>
                                                                                                    CTypedValueParameter
                                                                                                        CTypePath
                                                                                                            CTypeReference
                                                                                                                CUpperIdentifier{'Integer'}
                                                                                                                ROptional<CTypeArguments>
                                                                                                        CLowerIdentifier{'index'}
                                                                                                        ROptional<CValueSpecifier>
                                                                                        RLiteral{')'}
                                                                            CFunctionSpecifier
                                                                                RLiteral{'=>'}
                                                                                CIfExpr
                                                                                    RLiteral{'if'}
                                                                                    CConditions
                                                                                        RLiteral{'('}
                                                                                        ROptional<CConditionList>
                                                                                            CConditionList
                                                                                                CSmallerBoundsExpr
                                                                                                    CLiteralNatural{'0'}
                                                                                                    CSmallerOperator{'<='}
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'index'}
                                                                                                        ROptional<CTypeArguments>
                                                                                                    CSmallerOperator{'<'}
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'size'}
                                                                                                        ROptional<CTypeArguments>
                                                                                        RLiteral{')'}
                                                                                    CThenExpression
                                                                                        RLiteral{'then'}
                                                                                        CCallExpr
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'collecting'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CPositionalArguments
                                                                                                RLiteral{'('}
                                                                                                ROptional<CSequencedArgumentList>
                                                                                                    CSequencedArgumentList
                                                                                                        CCallExpr
                                                                                                            CSelectionExpr
                                                                                                                CSelfReference{'outer'}
                                                                                                                CMemberSelectionOperator{'.'}
                                                                                                                CMemberReference
                                                                                                                    CLowerIdentifier{'getElement'}
                                                                                                                    ROptional<CTypeArguments>
                                                                                                            CPositionalArguments
                                                                                                                RLiteral{'('}
                                                                                                                ROptional<CSequencedArgumentList>
                                                                                                                    CSequencedArgumentList
                                                                                                                        CMemberReference
                                                                                                                            CLowerIdentifier{'index'}
                                                                                                                            ROptional<CTypeArguments>
                                                                                                                RLiteral{')'}
                                                                                                RLiteral{')'}
                                                                                    CElseExpression
                                                                                        RLiteral{'else'}
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'null'}
                                                                                            ROptional<CTypeArguments>
                                                                        RLiteral{';'}
                                                                RLiteral{'}'}
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CCallExpr
                                                                        CTypeReference
                                                                            CUpperIdentifier{'ArraySequence'}
                                                                            ROptional<CTypeArguments>
                                                                        CPositionalArguments
                                                                            RLiteral{'('}
                                                                            ROptional<CSequencedArgumentList>
                                                                                CSequencedArgumentList
                                                                                    CCallExpr
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Array'}
                                                                                            ROptional<CTypeArguments>
                                                                                        CPositionalArguments
                                                                                            RLiteral{'('}
                                                                                            ROptional<CSequencedArgumentList>
                                                                                                CSequencedArgumentList
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'list'}
                                                                                                        ROptional<CTypeArguments>
                                                                                            RLiteral{')'}
                                                                            RLiteral{')'}
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                RLiteral{'}'}
                        CClassDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                            RLiteral{'class'}
                            CUpperIdentifier{'Indexes'}
                            ROptional<CTypeParameters>
                            ROptional<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                    RLiteral{')'}
                            ROptional<CCaseTypes>
                            ROptional<CExtendedType>
                                CExtendedType
                                    RLiteral{'extends'}
                                    CClassInstantiation
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Object'}
                                                ROptional<CTypeArguments>
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                RLiteral{')'}
                            ROptional<CSatisfiedTypes>
                                CSatisfiedTypes
                                    RLiteral{'satisfies'}
                                    CUnionTypeList
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'List'}
                                                ROptional<CTypeArguments>
                                                    CTypeArguments
                                                        RLiteral{'<'}
                                                        ROptional<CTypeArgumentList>
                                                            CTypeArgumentList
                                                                CVariancedType
                                                                    ROptional<ICVariance>
                                                                    CTypePath
                                                                        CTypeReference
                                                                            CUpperIdentifier{'Integer'}
                                                                            ROptional<CTypeArguments>
                                                        RLiteral{'>'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CMemberReference
                                                CLowerIdentifier{'lastIndex'}
                                                ROptional<CTypeArguments>
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CSelectionExpr
                                                    CSelfReference{'outer'}
                                                    CMemberSelectionOperator{'.'}
                                                    CMemberReference
                                                        CLowerIdentifier{'lastIndex'}
                                                        ROptional<CTypeArguments>
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CParametrizedMember
                                                CLowerIdentifier{'getFromFirst'}
                                                ROptional<CTypeParameters>
                                                RPlus<CParameters>
                                                    CParameters
                                                        RLiteral{'('}
                                                        ROptional<CParameterList>
                                                            CParameterList
                                                                CParameter
                                                                    CAnnotations
                                                                        ROptional<ICStringLiteral>
                                                                        RStar<CAnnotation>
                                                                    CTypedValueParameter
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Integer'}
                                                                                ROptional<CTypeArguments>
                                                                        CLowerIdentifier{'index'}
                                                                        ROptional<CValueSpecifier>
                                                        RLiteral{')'}
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CThenElseExpr
                                                    CCallExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'defines'}
                                                            ROptional<CTypeArguments>
                                                        CPositionalArguments
                                                            RLiteral{'('}
                                                            ROptional<CSequencedArgumentList>
                                                                CSequencedArgumentList
                                                                    CMemberReference
                                                                        CLowerIdentifier{'index'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{')'}
                                                    CThenElseOperator{'then'}
                                                    CMemberReference
                                                        CLowerIdentifier{'index'}
                                                        ROptional<CTypeArguments>
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CCallExpr
                                                CMemberReference
                                                    CLowerIdentifier{'clone'}
                                                    ROptional<CTypeArguments>
                                                CPositionalArguments
                                                    RLiteral{'('}
                                                    ROptional<CSequencedArgumentList>
                                                    RLiteral{')'}
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CRangeExpr
                                                    CLiteralNatural{'0'}
                                                    CRangeOperator{':'}
                                                    CMemberReference
                                                        CLowerIdentifier{'size'}
                                                        ROptional<CTypeArguments>
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CParametrizedMember
                                                CLowerIdentifier{'span'}
                                                ROptional<CTypeParameters>
                                                RPlus<CParameters>
                                                    CParameters
                                                        RLiteral{'('}
                                                        ROptional<CParameterList>
                                                            CParameterList
                                                                CParameter
                                                                    CAnnotations
                                                                        ROptional<ICStringLiteral>
                                                                        RStar<CAnnotation>
                                                                    CTypedValueParameter
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Integer'}
                                                                                ROptional<CTypeArguments>
                                                                        CLowerIdentifier{'from'}
                                                                        ROptional<CValueSpecifier>
                                                                CParameter
                                                                    CAnnotations
                                                                        ROptional<ICStringLiteral>
                                                                        RStar<CAnnotation>
                                                                    CTypedValueParameter
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Integer'}
                                                                                ROptional<CTypeArguments>
                                                                        CLowerIdentifier{'to'}
                                                                        ROptional<CValueSpecifier>
                                                        RLiteral{')'}
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CIndexedExpr
                                                    CCallExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'clone'}
                                                            ROptional<CTypeArguments>
                                                        CPositionalArguments
                                                            RLiteral{'('}
                                                            ROptional<CSequencedArgumentList>
                                                            RLiteral{')'}
                                                    RLiteral{'['}
                                                    CSpanned
                                                        CMemberReference
                                                            CLowerIdentifier{'from'}
                                                            ROptional<CTypeArguments>
                                                        RLiteral{'..'}
                                                        CMemberReference
                                                            CLowerIdentifier{'to'}
                                                            ROptional<CTypeArguments>
                                                    RLiteral{']'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CMemberReference
                                                CLowerIdentifier{'string'}
                                                ROptional<CTypeArguments>
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CIfExpr
                                                    RLiteral{'if'}
                                                    CConditions
                                                        RLiteral{'('}
                                                        ROptional<CConditionList>
                                                            CConditionList
                                                                CExistsCondition
                                                                    ROptional<RLiteral>
                                                                    RLiteral{'exists'}
                                                                    CLetVariable
                                                                        CVariable
                                                                            ROptional<ICVariableType>
                                                                            CLowerIdentifier{'endIndex'}
                                                                            RStar<CParameters>
                                                                        CValueSpecifier
                                                                            RLiteral{'='}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'lastIndex'}
                                                                                ROptional<CTypeArguments>
                                                        RLiteral{')'}
                                                    CThenExpression
                                                        RLiteral{'then'}
                                                        CStringInterpolation
                                                            CStringStart{'\"{ 0, ... , ``'}
                                                            CMemberReference
                                                                CLowerIdentifier{'endIndex'}
                                                                ROptional<CTypeArguments>
                                                            RStar<CInterpolationPart>
                                                            CStringEnd{'`` }\"'}
                                                    CElseExpression
                                                        RLiteral{'else'}
                                                        CLiteralString{'\"{}\"'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CCallExpr
                                                CMemberReference
                                                    CLowerIdentifier{'iterator'}
                                                    ROptional<CTypeArguments>
                                                CPositionalArguments
                                                    RLiteral{'('}
                                                    ROptional<CSequencedArgumentList>
                                                    RLiteral{')'}
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CObjectExpr
                                                    RLiteral{'object'}
                                                    ROptional<CExtendedType>
                                                    ROptional<CSatisfiedTypes>
                                                        CSatisfiedTypes
                                                            RLiteral{'satisfies'}
                                                            CUnionTypeList
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'Iterator'}
                                                                        ROptional<CTypeArguments>
                                                                            CTypeArguments
                                                                                RLiteral{'<'}
                                                                                ROptional<CTypeArgumentList>
                                                                                    CTypeArgumentList
                                                                                        CVariancedType
                                                                                            ROptional<ICVariance>
                                                                                            CTypePath
                                                                                                CTypeReference
                                                                                                    CUpperIdentifier{'Integer'}
                                                                                                    ROptional<CTypeArguments>
                                                                                RLiteral{'>'}
                                                    CBlock
                                                        RLiteral{'{'}
                                                        CImports
                                                        CStatements
                                                            CInferredAttributeDeclaration
                                                                CAnnotations
                                                                    ROptional<ICStringLiteral>
                                                                    RStar<CAnnotation>
                                                                        CAnnotation
                                                                            CLowerIdentifier{'variable'}
                                                                            ROptional<ICArguments>
                                                                CKwValue{'value'}
                                                                CLowerIdentifier{'i'}
                                                                COptionalAnySpecifier
                                                                    ROptional<ICAnySpecifier>
                                                                        CValueSpecifier
                                                                            RLiteral{'='}
                                                                            CLiteralNatural{'0'}
                                                                    RLiteral{';'}
                                                            CUnclosedStatement
                                                                CSpecificationStatement
                                                                    CCallExpr
                                                                        CMemberReference
                                                                            CLowerIdentifier{'next'}
                                                                            ROptional<CTypeArguments>
                                                                        CPositionalArguments
                                                                            RLiteral{'('}
                                                                            ROptional<CSequencedArgumentList>
                                                                            RLiteral{')'}
                                                                    CFunctionSpecifier
                                                                        RLiteral{'=>'}
                                                                        CThenElseExpr
                                                                            CThenElseExpr
                                                                                CSmallerExpr
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'i'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CSmallerOperator{'<'}
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'size'}
                                                                                        ROptional<CTypeArguments>
                                                                                CThenElseOperator{'then'}
                                                                                CPostfixExpr
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'i'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CIncrementOperator{'++'}
                                                                            CThenElseOperator{'else'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'finished'}
                                                                                ROptional<CTypeArguments>
                                                                RLiteral{';'}
                                                            CUnclosedStatement
                                                                CSpecificationStatement
                                                                    CMemberReference
                                                                        CLowerIdentifier{'string'}
                                                                        ROptional<CTypeArguments>
                                                                    CFunctionSpecifier
                                                                        RLiteral{'=>'}
                                                                        CStringInterpolation
                                                                            CStringStart{'\"``'}
                                                                            CSelectionExpr
                                                                                CSelfReference{'outer'}
                                                                                CMemberSelectionOperator{'.'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'string'}
                                                                                    ROptional<CTypeArguments>
                                                                            RStar<CInterpolationPart>
                                                                            CStringEnd{'``.iterator()\"'}
                                                                RLiteral{';'}
                                                        RLiteral{'}'}
                                        RLiteral{';'}
                                RLiteral{'}'}
                        CClassDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                            RLiteral{'class'}
                            CUpperIdentifier{'Sublist'}
                            ROptional<CTypeParameters>
                            ROptional<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'from'}
                                                    ROptional<CValueSpecifier>
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'to'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CCaseTypes>
                            ROptional<CExtendedType>
                                CExtendedType
                                    RLiteral{'extends'}
                                    CClassInstantiation
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Object'}
                                                ROptional<CTypeArguments>
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                RLiteral{')'}
                            ROptional<CSatisfiedTypes>
                                CSatisfiedTypes
                                    RLiteral{'satisfies'}
                                    CUnionTypeList
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'List'}
                                                ROptional<CTypeArguments>
                                                    CTypeArguments
                                                        RLiteral{'<'}
                                                        ROptional<CTypeArgumentList>
                                                            CTypeArgumentList
                                                                CVariancedType
                                                                    ROptional<ICVariance>
                                                                    CTypePath
                                                                        CTypeReference
                                                                            CUpperIdentifier{'Element'}
                                                                            ROptional<CTypeArguments>
                                                        RLiteral{'>'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CUnclosedStatement
                                        CAssertionStatement
                                            ROptional<ICAssertionMessage>
                                            RLiteral{'assert'}
                                            CConditions
                                                RLiteral{'('}
                                                ROptional<CConditionList>
                                                    CConditionList
                                                        CLargerExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'from'}
                                                                ROptional<CTypeArguments>
                                                            CLargerOperator{'>='}
                                                            CLiteralNatural{'0'}
                                                        CLargerExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'to'}
                                                                ROptional<CTypeArguments>
                                                            CLargerOperator{'>='}
                                                            CLiteralNatural{'0'}
                                                        CSmallerExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'from'}
                                                                ROptional<CTypeArguments>
                                                            CSmallerOperator{'<='}
                                                            CMemberReference
                                                                CLowerIdentifier{'to'}
                                                                ROptional<CTypeArguments>
                                                RLiteral{')'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CMemberReference
                                                CLowerIdentifier{'first'}
                                                ROptional<CTypeArguments>
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CIndexedExpr
                                                    CSelfReference{'outer'}
                                                    RLiteral{'['}
                                                    CMemberReference
                                                        CLowerIdentifier{'from'}
                                                        ROptional<CTypeArguments>
                                                    RLiteral{']'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CMemberReference
                                                CLowerIdentifier{'last'}
                                                ROptional<CTypeArguments>
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CIndexedExpr
                                                    CSelfReference{'outer'}
                                                    RLiteral{'['}
                                                    CMemberReference
                                                        CLowerIdentifier{'to'}
                                                        ROptional<CTypeArguments>
                                                    RLiteral{']'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CMemberReference
                                                CLowerIdentifier{'size'}
                                                ROptional<CTypeArguments>
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CAdditiveExpr
                                                    CAdditiveExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'to'}
                                                            ROptional<CTypeArguments>
                                                        CAdditiveOperator{'-'}
                                                        CMemberReference
                                                            CLowerIdentifier{'from'}
                                                            ROptional<CTypeArguments>
                                                    CAdditiveOperator{'+'}
                                                    CLiteralNatural{'1'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CMemberReference
                                                CLowerIdentifier{'lastIndex'}
                                                ROptional<CTypeArguments>
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CAdditiveExpr
                                                    CMemberReference
                                                        CLowerIdentifier{'to'}
                                                        ROptional<CTypeArguments>
                                                    CAdditiveOperator{'-'}
                                                    CMemberReference
                                                        CLowerIdentifier{'from'}
                                                        ROptional<CTypeArguments>
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CMemberReference
                                                CLowerIdentifier{'rest'}
                                                ROptional<CTypeArguments>
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CThenElseExpr
                                                    CThenElseExpr
                                                        CEqualityExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'size'}
                                                                ROptional<CTypeArguments>
                                                            CEqualityOperator{'=='}
                                                            CLiteralNatural{'1'}
                                                        CThenElseOperator{'then'}
                                                        CTupleExpr
                                                            RLiteral{'['}
                                                            ROptional<CSequencedArgumentList>
                                                            RLiteral{']'}
                                                    CThenElseOperator{'else'}
                                                    CCallExpr
                                                        CSelectionExpr
                                                            CSelfReference{'outer'}
                                                            CMemberSelectionOperator{'.'}
                                                            CTypeReference
                                                                CUpperIdentifier{'Sublist'}
                                                                ROptional<CTypeArguments>
                                                        CPositionalArguments
                                                            RLiteral{'('}
                                                            ROptional<CSequencedArgumentList>
                                                                CSequencedArgumentList
                                                                    CAdditiveExpr
                                                                        CMemberReference
                                                                            CLowerIdentifier{'from'}
                                                                            ROptional<CTypeArguments>
                                                                        CAdditiveOperator{'+'}
                                                                        CLiteralNatural{'1'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'to'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{')'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CMemberReference
                                                CLowerIdentifier{'exceptLast'}
                                                ROptional<CTypeArguments>
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CThenElseExpr
                                                    CThenElseExpr
                                                        CEqualityExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'size'}
                                                                ROptional<CTypeArguments>
                                                            CEqualityOperator{'=='}
                                                            CLiteralNatural{'1'}
                                                        CThenElseOperator{'then'}
                                                        CTupleExpr
                                                            RLiteral{'['}
                                                            ROptional<CSequencedArgumentList>
                                                            RLiteral{']'}
                                                    CThenElseOperator{'else'}
                                                    CCallExpr
                                                        CSelectionExpr
                                                            CSelfReference{'outer'}
                                                            CMemberSelectionOperator{'.'}
                                                            CTypeReference
                                                                CUpperIdentifier{'Sublist'}
                                                                ROptional<CTypeArguments>
                                                        CPositionalArguments
                                                            RLiteral{'('}
                                                            ROptional<CSequencedArgumentList>
                                                                CSequencedArgumentList
                                                                    CMemberReference
                                                                        CLowerIdentifier{'from'}
                                                                        ROptional<CTypeArguments>
                                                                    CAdditiveExpr
                                                                        CMemberReference
                                                                            CLowerIdentifier{'to'}
                                                                            ROptional<CTypeArguments>
                                                                        CAdditiveOperator{'-'}
                                                                        CLiteralNatural{'1'}
                                                            RLiteral{')'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CParametrizedMember
                                                CLowerIdentifier{'getFromFirst'}
                                                ROptional<CTypeParameters>
                                                RPlus<CParameters>
                                                    CParameters
                                                        RLiteral{'('}
                                                        ROptional<CParameterList>
                                                            CParameterList
                                                                CParameter
                                                                    CAnnotations
                                                                        ROptional<ICStringLiteral>
                                                                        RStar<CAnnotation>
                                                                    CTypedValueParameter
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Integer'}
                                                                                ROptional<CTypeArguments>
                                                                        CLowerIdentifier{'index'}
                                                                        ROptional<CValueSpecifier>
                                                        RLiteral{')'}
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CIfExpr
                                                    RLiteral{'if'}
                                                    CConditions
                                                        RLiteral{'('}
                                                        ROptional<CConditionList>
                                                            CConditionList
                                                                CSmallerBoundsExpr
                                                                    CLiteralNatural{'0'}
                                                                    CSmallerOperator{'<='}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'index'}
                                                                        ROptional<CTypeArguments>
                                                                    CSmallerOperator{'<='}
                                                                    CAdditiveExpr
                                                                        CMemberReference
                                                                            CLowerIdentifier{'to'}
                                                                            ROptional<CTypeArguments>
                                                                        CAdditiveOperator{'-'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'from'}
                                                                            ROptional<CTypeArguments>
                                                        RLiteral{')'}
                                                    CThenExpression
                                                        RLiteral{'then'}
                                                        CCallExpr
                                                            CSelectionExpr
                                                                CSelfReference{'outer'}
                                                                CMemberSelectionOperator{'.'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'getFromFirst'}
                                                                    ROptional<CTypeArguments>
                                                            CPositionalArguments
                                                                RLiteral{'('}
                                                                ROptional<CSequencedArgumentList>
                                                                    CSequencedArgumentList
                                                                        CAdditiveExpr
                                                                            CMemberReference
                                                                                CLowerIdentifier{'index'}
                                                                                ROptional<CTypeArguments>
                                                                            CAdditiveOperator{'+'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'from'}
                                                                                ROptional<CTypeArguments>
                                                                RLiteral{')'}
                                                    CElseExpression
                                                        RLiteral{'else'}
                                                        CMemberReference
                                                            CLowerIdentifier{'null'}
                                                            ROptional<CTypeArguments>
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CCallExpr
                                                CMemberReference
                                                    CLowerIdentifier{'iterator'}
                                                    ROptional<CTypeArguments>
                                                CPositionalArguments
                                                    RLiteral{'('}
                                                    ROptional<CSequencedArgumentList>
                                                    RLiteral{')'}
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CLetExpr
                                                    RLiteral{'let'}
                                                    RLiteral{'('}
                                                    ROptional<CLetVariableList>
                                                        CLetVariableList
                                                            CLetVariable
                                                                CVariable
                                                                    ROptional<ICVariableType>
                                                                    CLowerIdentifier{'o'}
                                                                    RStar<CParameters>
                                                                CValueSpecifier
                                                                    RLiteral{'='}
                                                                    CSelfReference{'outer'}
                                                    RLiteral{')'}
                                                    CObjectExpr
                                                        RLiteral{'object'}
                                                        ROptional<CExtendedType>
                                                        ROptional<CSatisfiedTypes>
                                                            CSatisfiedTypes
                                                                RLiteral{'satisfies'}
                                                                CUnionTypeList
                                                                    CTypePath
                                                                        CTypeReference
                                                                            CUpperIdentifier{'Iterator'}
                                                                            ROptional<CTypeArguments>
                                                                                CTypeArguments
                                                                                    RLiteral{'<'}
                                                                                    ROptional<CTypeArgumentList>
                                                                                        CTypeArgumentList
                                                                                            CVariancedType
                                                                                                ROptional<ICVariance>
                                                                                                CTypePath
                                                                                                    CTypeReference
                                                                                                        CUpperIdentifier{'Element'}
                                                                                                        ROptional<CTypeArguments>
                                                                                    RLiteral{'>'}
                                                        CBlock
                                                            RLiteral{'{'}
                                                            CImports
                                                            CStatements
                                                                CInferredAttributeDeclaration
                                                                    CAnnotations
                                                                        ROptional<ICStringLiteral>
                                                                        RStar<CAnnotation>
                                                                            CAnnotation
                                                                                CLowerIdentifier{'variable'}
                                                                                ROptional<ICArguments>
                                                                    CKwValue{'value'}
                                                                    CLowerIdentifier{'i'}
                                                                    COptionalAnySpecifier
                                                                        ROptional<ICAnySpecifier>
                                                                            CValueSpecifier
                                                                                RLiteral{'='}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'from'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{';'}
                                                                CUnclosedStatement
                                                                    CSpecificationStatement
                                                                        CCallExpr
                                                                            CMemberReference
                                                                                CLowerIdentifier{'next'}
                                                                                ROptional<CTypeArguments>
                                                                            CPositionalArguments
                                                                                RLiteral{'('}
                                                                                ROptional<CSequencedArgumentList>
                                                                                RLiteral{')'}
                                                                        CFunctionSpecifier
                                                                            RLiteral{'=>'}
                                                                            CIfExpr
                                                                                RLiteral{'if'}
                                                                                CConditions
                                                                                    RLiteral{'('}
                                                                                    ROptional<CConditionList>
                                                                                        CConditionList
                                                                                            CSmallerExpr
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'i'}
                                                                                                    ROptional<CTypeArguments>
                                                                                                CSmallerOperator{'<='}
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'to'}
                                                                                                    ROptional<CTypeArguments>
                                                                                    RLiteral{')'}
                                                                                CThenExpression
                                                                                    RLiteral{'then'}
                                                                                    CCallExpr
                                                                                        CSelectionExpr
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'o'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CMemberSelectionOperator{'.'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'getElement'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CPositionalArguments
                                                                                            RLiteral{'('}
                                                                                            ROptional<CSequencedArgumentList>
                                                                                                CSequencedArgumentList
                                                                                                    CPostfixExpr
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'i'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                        CIncrementOperator{'++'}
                                                                                            RLiteral{')'}
                                                                                CElseExpression
                                                                                    RLiteral{'else'}
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'finished'}
                                                                                        ROptional<CTypeArguments>
                                                                    RLiteral{';'}
                                                                CUnclosedStatement
                                                                    CSpecificationStatement
                                                                        CMemberReference
                                                                            CLowerIdentifier{'string'}
                                                                            ROptional<CTypeArguments>
                                                                        CFunctionSpecifier
                                                                            RLiteral{'=>'}
                                                                            CStringInterpolation
                                                                                CStringStart{'\"``'}
                                                                                CSelectionExpr
                                                                                    CSelfReference{'outer'}
                                                                                    CMemberSelectionOperator{'.'}
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'string'}
                                                                                        ROptional<CTypeArguments>
                                                                                RStar<CInterpolationPart>
                                                                                CStringEnd{'``.iterator()\"'}
                                                                    RLiteral{';'}
                                                            RLiteral{'}'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CCallExpr
                                                CMemberReference
                                                    CLowerIdentifier{'clone'}
                                                    ROptional<CTypeArguments>
                                                CPositionalArguments
                                                    RLiteral{'('}
                                                    ROptional<CSequencedArgumentList>
                                                    RLiteral{')'}
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CIndexedExpr
                                                    CSelfReference{'outer'}
                                                    RLiteral{'['}
                                                    CSpanned
                                                        CMemberReference
                                                            CLowerIdentifier{'from'}
                                                            ROptional<CTypeArguments>
                                                        RLiteral{'..'}
                                                        CMemberReference
                                                            CLowerIdentifier{'to'}
                                                            ROptional<CTypeArguments>
                                                    RLiteral{']'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CParametrizedMember
                                                CLowerIdentifier{'sublist'}
                                                ROptional<CTypeParameters>
                                                RPlus<CParameters>
                                                    CParameters
                                                        RLiteral{'('}
                                                        ROptional<CParameterList>
                                                            CParameterList
                                                                CParameter
                                                                    CAnnotations
                                                                        ROptional<ICStringLiteral>
                                                                        RStar<CAnnotation>
                                                                    CTypedValueParameter
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Integer'}
                                                                                ROptional<CTypeArguments>
                                                                        CLowerIdentifier{'from'}
                                                                        ROptional<CValueSpecifier>
                                                                CParameter
                                                                    CAnnotations
                                                                        ROptional<ICStringLiteral>
                                                                        RStar<CAnnotation>
                                                                    CTypedValueParameter
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Integer'}
                                                                                ROptional<CTypeArguments>
                                                                        CLowerIdentifier{'to'}
                                                                        ROptional<CValueSpecifier>
                                                        RLiteral{')'}
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CCallExpr
                                                    CSelectionExpr
                                                        CSelfReference{'outer'}
                                                        CMemberSelectionOperator{'.'}
                                                        CMemberReference
                                                            CLowerIdentifier{'sublist'}
                                                            ROptional<CTypeArguments>
                                                    CPatternedArguments
                                                        RLiteral{'{'}
                                                        RStar<ICStructuredArgument>
                                                            CAnonymousArgument
                                                                CAssignmentExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'from'}
                                                                        ROptional<CTypeArguments>
                                                                    CAssignmentOperator{'='}
                                                                    CCallExpr
                                                                        CSelectionExpr
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Integer'}
                                                                                ROptional<CTypeArguments>
                                                                            CMemberSelectionOperator{'.'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'largest'}
                                                                                ROptional<CTypeArguments>
                                                                        CPositionalArguments
                                                                            RLiteral{'('}
                                                                            ROptional<CSequencedArgumentList>
                                                                                CSequencedArgumentList
                                                                                    CAdditiveExpr
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'from'}
                                                                                            ROptional<CTypeArguments>
                                                                                        CAdditiveOperator{'+'}
                                                                                        CSelectionExpr
                                                                                            CSelfReference{'this'}
                                                                                            CMemberSelectionOperator{'.'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'from'}
                                                                                                ROptional<CTypeArguments>
                                                                                    CSelectionExpr
                                                                                        CSelfReference{'this'}
                                                                                        CMemberSelectionOperator{'.'}
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'from'}
                                                                                            ROptional<CTypeArguments>
                                                                            RLiteral{')'}
                                                                RLiteral{';'}
                                                            CAnonymousArgument
                                                                CAssignmentExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'to'}
                                                                        ROptional<CTypeArguments>
                                                                    CAssignmentOperator{'='}
                                                                    CCallExpr
                                                                        CSelectionExpr
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Integer'}
                                                                                ROptional<CTypeArguments>
                                                                            CMemberSelectionOperator{'.'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'smallest'}
                                                                                ROptional<CTypeArguments>
                                                                        CPositionalArguments
                                                                            RLiteral{'('}
                                                                            ROptional<CSequencedArgumentList>
                                                                                CSequencedArgumentList
                                                                                    CAdditiveExpr
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'to'}
                                                                                            ROptional<CTypeArguments>
                                                                                        CAdditiveOperator{'+'}
                                                                                        CSelectionExpr
                                                                                            CSelfReference{'this'}
                                                                                            CMemberSelectionOperator{'.'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'from'}
                                                                                                ROptional<CTypeArguments>
                                                                                    CSelectionExpr
                                                                                        CSelfReference{'this'}
                                                                                        CMemberSelectionOperator{'.'}
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'to'}
                                                                                            ROptional<CTypeArguments>
                                                                            RLiteral{')'}
                                                                RLiteral{';'}
                                                        ROptional<CSequencedArgumentList>
                                                        RLiteral{'}'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CParametrizedMember
                                                CLowerIdentifier{'span'}
                                                ROptional<CTypeParameters>
                                                RPlus<CParameters>
                                                    CParameters
                                                        RLiteral{'('}
                                                        ROptional<CParameterList>
                                                            CParameterList
                                                                CParameter
                                                                    CAnnotations
                                                                        ROptional<ICStringLiteral>
                                                                        RStar<CAnnotation>
                                                                    CTypedValueParameter
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Integer'}
                                                                                ROptional<CTypeArguments>
                                                                        CLowerIdentifier{'from'}
                                                                        ROptional<CValueSpecifier>
                                                                CParameter
                                                                    CAnnotations
                                                                        ROptional<ICStringLiteral>
                                                                        RStar<CAnnotation>
                                                                    CTypedValueParameter
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Integer'}
                                                                                ROptional<CTypeArguments>
                                                                        CLowerIdentifier{'to'}
                                                                        ROptional<CValueSpecifier>
                                                        RLiteral{')'}
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CThenElseExpr
                                                    CThenElseExpr
                                                        CSmallerExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'from'}
                                                                ROptional<CTypeArguments>
                                                            CSmallerOperator{'<='}
                                                            CMemberReference
                                                                CLowerIdentifier{'to'}
                                                                ROptional<CTypeArguments>
                                                        CThenElseOperator{'then'}
                                                        CCallExpr
                                                            CSelectionExpr
                                                                CSelfReference{'outer'}
                                                                CMemberSelectionOperator{'.'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'span'}
                                                                    ROptional<CTypeArguments>
                                                            CPatternedArguments
                                                                RLiteral{'{'}
                                                                RStar<ICStructuredArgument>
                                                                    CAnonymousArgument
                                                                        CAssignmentExpr
                                                                            CMemberReference
                                                                                CLowerIdentifier{'from'}
                                                                                ROptional<CTypeArguments>
                                                                            CAssignmentOperator{'='}
                                                                            CCallExpr
                                                                                CSelectionExpr
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Integer'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CMemberSelectionOperator{'.'}
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'largest'}
                                                                                        ROptional<CTypeArguments>
                                                                                CPositionalArguments
                                                                                    RLiteral{'('}
                                                                                    ROptional<CSequencedArgumentList>
                                                                                        CSequencedArgumentList
                                                                                            CAdditiveExpr
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'from'}
                                                                                                    ROptional<CTypeArguments>
                                                                                                CAdditiveOperator{'+'}
                                                                                                CSelectionExpr
                                                                                                    CSelfReference{'this'}
                                                                                                    CMemberSelectionOperator{'.'}
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'from'}
                                                                                                        ROptional<CTypeArguments>
                                                                                            CSelectionExpr
                                                                                                CSelfReference{'this'}
                                                                                                CMemberSelectionOperator{'.'}
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'from'}
                                                                                                    ROptional<CTypeArguments>
                                                                                    RLiteral{')'}
                                                                        RLiteral{';'}
                                                                    CAnonymousArgument
                                                                        CAssignmentExpr
                                                                            CMemberReference
                                                                                CLowerIdentifier{'to'}
                                                                                ROptional<CTypeArguments>
                                                                            CAssignmentOperator{'='}
                                                                            CCallExpr
                                                                                CSelectionExpr
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Integer'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CMemberSelectionOperator{'.'}
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'smallest'}
                                                                                        ROptional<CTypeArguments>
                                                                                CPositionalArguments
                                                                                    RLiteral{'('}
                                                                                    ROptional<CSequencedArgumentList>
                                                                                        CSequencedArgumentList
                                                                                            CAdditiveExpr
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'to'}
                                                                                                    ROptional<CTypeArguments>
                                                                                                CAdditiveOperator{'+'}
                                                                                                CSelectionExpr
                                                                                                    CSelfReference{'this'}
                                                                                                    CMemberSelectionOperator{'.'}
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'from'}
                                                                                                        ROptional<CTypeArguments>
                                                                                            CSelectionExpr
                                                                                                CSelfReference{'this'}
                                                                                                CMemberSelectionOperator{'.'}
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'to'}
                                                                                                    ROptional<CTypeArguments>
                                                                                    RLiteral{')'}
                                                                        RLiteral{';'}
                                                                ROptional<CSequencedArgumentList>
                                                                RLiteral{'}'}
                                                    CThenElseOperator{'else'}
                                                    CCallExpr
                                                        CSelectionExpr
                                                            CSelfReference{'outer'}
                                                            CMemberSelectionOperator{'.'}
                                                            CMemberReference
                                                                CLowerIdentifier{'span'}
                                                                ROptional<CTypeArguments>
                                                        CPatternedArguments
                                                            RLiteral{'{'}
                                                            RStar<ICStructuredArgument>
                                                                CAnonymousArgument
                                                                    CAssignmentExpr
                                                                        CMemberReference
                                                                            CLowerIdentifier{'from'}
                                                                            ROptional<CTypeArguments>
                                                                        CAssignmentOperator{'='}
                                                                        CCallExpr
                                                                            CSelectionExpr
                                                                                CTypeReference
                                                                                    CUpperIdentifier{'Integer'}
                                                                                    ROptional<CTypeArguments>
                                                                                CMemberSelectionOperator{'.'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'smallest'}
                                                                                    ROptional<CTypeArguments>
                                                                            CPositionalArguments
                                                                                RLiteral{'('}
                                                                                ROptional<CSequencedArgumentList>
                                                                                    CSequencedArgumentList
                                                                                        CAdditiveExpr
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'from'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CAdditiveOperator{'+'}
                                                                                            CSelectionExpr
                                                                                                CSelfReference{'this'}
                                                                                                CMemberSelectionOperator{'.'}
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'from'}
                                                                                                    ROptional<CTypeArguments>
                                                                                        CSelectionExpr
                                                                                            CSelfReference{'this'}
                                                                                            CMemberSelectionOperator{'.'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'to'}
                                                                                                ROptional<CTypeArguments>
                                                                                RLiteral{')'}
                                                                    RLiteral{';'}
                                                                CAnonymousArgument
                                                                    CAssignmentExpr
                                                                        CMemberReference
                                                                            CLowerIdentifier{'to'}
                                                                            ROptional<CTypeArguments>
                                                                        CAssignmentOperator{'='}
                                                                        CCallExpr
                                                                            CSelectionExpr
                                                                                CTypeReference
                                                                                    CUpperIdentifier{'Integer'}
                                                                                    ROptional<CTypeArguments>
                                                                                CMemberSelectionOperator{'.'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'largest'}
                                                                                    ROptional<CTypeArguments>
                                                                            CPositionalArguments
                                                                                RLiteral{'('}
                                                                                ROptional<CSequencedArgumentList>
                                                                                    CSequencedArgumentList
                                                                                        CAdditiveExpr
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'to'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CAdditiveOperator{'+'}
                                                                                            CSelectionExpr
                                                                                                CSelfReference{'this'}
                                                                                                CMemberSelectionOperator{'.'}
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'from'}
                                                                                                    ROptional<CTypeArguments>
                                                                                        CSelectionExpr
                                                                                            CSelfReference{'this'}
                                                                                            CMemberSelectionOperator{'.'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'from'}
                                                                                                ROptional<CTypeArguments>
                                                                                RLiteral{')'}
                                                                    RLiteral{';'}
                                                            ROptional<CSequencedArgumentList>
                                                            RLiteral{'}'}
                                        RLiteral{';'}
                                RLiteral{'}'}
                        CClassDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                            RLiteral{'class'}
                            CUpperIdentifier{'Repeat'}
                            ROptional<CTypeParameters>
                            ROptional<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'times'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CCaseTypes>
                            ROptional<CExtendedType>
                                CExtendedType
                                    RLiteral{'extends'}
                                    CClassInstantiation
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Object'}
                                                ROptional<CTypeArguments>
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                RLiteral{')'}
                            ROptional<CSatisfiedTypes>
                                CSatisfiedTypes
                                    RLiteral{'satisfies'}
                                    CUnionTypeList
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'List'}
                                                ROptional<CTypeArguments>
                                                    CTypeArguments
                                                        RLiteral{'<'}
                                                        ROptional<CTypeArgumentList>
                                                            CTypeArgumentList
                                                                CVariancedType
                                                                    ROptional<ICVariance>
                                                                    CTypePath
                                                                        CTypeReference
                                                                            CUpperIdentifier{'Element'}
                                                                            ROptional<CTypeArguments>
                                                        RLiteral{'>'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CUnclosedStatement
                                        CAssertionStatement
                                            ROptional<ICAssertionMessage>
                                            RLiteral{'assert'}
                                            CConditions
                                                RLiteral{'('}
                                                ROptional<CConditionList>
                                                    CConditionList
                                                        CLargerExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'times'}
                                                                ROptional<CTypeArguments>
                                                            CLargerOperator{'>'}
                                                            CLiteralNatural{'1'}
                                                RLiteral{')'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CMemberReference
                                                CLowerIdentifier{'size'}
                                                ROptional<CTypeArguments>
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CMultiplicativeExpr
                                                    CSelectionExpr
                                                        CSelfReference{'outer'}
                                                        CMemberSelectionOperator{'.'}
                                                        CMemberReference
                                                            CLowerIdentifier{'size'}
                                                            ROptional<CTypeArguments>
                                                    CMultiplicativeOperator{'*'}
                                                    CMemberReference
                                                        CLowerIdentifier{'times'}
                                                        ROptional<CTypeArguments>
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CMemberReference
                                                CLowerIdentifier{'lastIndex'}
                                                ROptional<CTypeArguments>
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CLetExpr
                                                    RLiteral{'let'}
                                                    RLiteral{'('}
                                                    ROptional<CLetVariableList>
                                                        CLetVariableList
                                                            CLetVariable
                                                                CVariable
                                                                    ROptional<ICVariableType>
                                                                    CLowerIdentifier{'size'}
                                                                    RStar<CParameters>
                                                                CValueSpecifier
                                                                    RLiteral{'='}
                                                                    CSelectionExpr
                                                                        CSelfReference{'this'}
                                                                        CMemberSelectionOperator{'.'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'size'}
                                                                            ROptional<CTypeArguments>
                                                    RLiteral{')'}
                                                    CGroupedExpr
                                                        RLiteral{'('}
                                                        CThenElseExpr
                                                            CLargerExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'size'}
                                                                    ROptional<CTypeArguments>
                                                                CLargerOperator{'>'}
                                                                CLiteralNatural{'0'}
                                                            CThenElseOperator{'then'}
                                                            CAdditiveExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'size'}
                                                                    ROptional<CTypeArguments>
                                                                CAdditiveOperator{'-'}
                                                                CLiteralNatural{'1'}
                                                        RLiteral{')'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CParametrizedMember
                                                CLowerIdentifier{'getFromFirst'}
                                                ROptional<CTypeParameters>
                                                RPlus<CParameters>
                                                    CParameters
                                                        RLiteral{'('}
                                                        ROptional<CParameterList>
                                                            CParameterList
                                                                CParameter
                                                                    CAnnotations
                                                                        ROptional<ICStringLiteral>
                                                                        RStar<CAnnotation>
                                                                    CTypedValueParameter
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Integer'}
                                                                                ROptional<CTypeArguments>
                                                                        CLowerIdentifier{'index'}
                                                                        ROptional<CValueSpecifier>
                                                        RLiteral{')'}
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CLetExpr
                                                    RLiteral{'let'}
                                                    RLiteral{'('}
                                                    ROptional<CLetVariableList>
                                                        CLetVariableList
                                                            CLetVariable
                                                                CVariable
                                                                    ROptional<ICVariableType>
                                                                    CLowerIdentifier{'size'}
                                                                    RStar<CParameters>
                                                                CValueSpecifier
                                                                    RLiteral{'='}
                                                                    CSelectionExpr
                                                                        CSelfReference{'outer'}
                                                                        CMemberSelectionOperator{'.'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'size'}
                                                                            ROptional<CTypeArguments>
                                                    RLiteral{')'}
                                                    CIfExpr
                                                        RLiteral{'if'}
                                                        CConditions
                                                            RLiteral{'('}
                                                            ROptional<CConditionList>
                                                                CConditionList
                                                                    CSmallerExpr
                                                                        CMemberReference
                                                                            CLowerIdentifier{'index'}
                                                                            ROptional<CTypeArguments>
                                                                        CSmallerOperator{'<'}
                                                                        CMultiplicativeExpr
                                                                            CMemberReference
                                                                                CLowerIdentifier{'size'}
                                                                                ROptional<CTypeArguments>
                                                                            CMultiplicativeOperator{'*'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'times'}
                                                                                ROptional<CTypeArguments>
                                                            RLiteral{')'}
                                                        CThenExpression
                                                            RLiteral{'then'}
                                                            CCallExpr
                                                                CSelectionExpr
                                                                    CSelfReference{'outer'}
                                                                    CMemberSelectionOperator{'.'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'getFromFirst'}
                                                                        ROptional<CTypeArguments>
                                                                CPositionalArguments
                                                                    RLiteral{'('}
                                                                    ROptional<CSequencedArgumentList>
                                                                        CSequencedArgumentList
                                                                            CMultiplicativeExpr
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'index'}
                                                                                    ROptional<CTypeArguments>
                                                                                CMultiplicativeOperator{'%'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'size'}
                                                                                    ROptional<CTypeArguments>
                                                                    RLiteral{')'}
                                                        CElseExpression
                                                            RLiteral{'else'}
                                                            CMemberReference
                                                                CLowerIdentifier{'null'}
                                                                ROptional<CTypeArguments>
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CCallExpr
                                                CMemberReference
                                                    CLowerIdentifier{'clone'}
                                                    ROptional<CTypeArguments>
                                                CPositionalArguments
                                                    RLiteral{'('}
                                                    ROptional<CSequencedArgumentList>
                                                    RLiteral{')'}
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CCallExpr
                                                    CSelectionExpr
                                                        CCallExpr
                                                            CSelectionExpr
                                                                CSelfReference{'outer'}
                                                                CMemberSelectionOperator{'.'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'clone'}
                                                                    ROptional<CTypeArguments>
                                                            CPositionalArguments
                                                                RLiteral{'('}
                                                                ROptional<CSequencedArgumentList>
                                                                RLiteral{')'}
                                                        CMemberSelectionOperator{'.'}
                                                        CTypeReference
                                                            CUpperIdentifier{'Repeat'}
                                                            ROptional<CTypeArguments>
                                                    CPositionalArguments
                                                        RLiteral{'('}
                                                        ROptional<CSequencedArgumentList>
                                                            CSequencedArgumentList
                                                                CMemberReference
                                                                    CLowerIdentifier{'times'}
                                                                    ROptional<CTypeArguments>
                                                        RLiteral{')'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CCallExpr
                                                CMemberReference
                                                    CLowerIdentifier{'iterator'}
                                                    ROptional<CTypeArguments>
                                                CPositionalArguments
                                                    RLiteral{'('}
                                                    ROptional<CSequencedArgumentList>
                                                    RLiteral{')'}
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CCallExpr
                                                    CTypeReference
                                                        CUpperIdentifier{'CycledIterator'}
                                                        ROptional<CTypeArguments>
                                                    CPositionalArguments
                                                        RLiteral{'('}
                                                        ROptional<CSequencedArgumentList>
                                                            CSequencedArgumentList
                                                                CSelfReference{'outer'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'times'}
                                                                    ROptional<CTypeArguments>
                                                        RLiteral{')'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CMemberReference
                                                CLowerIdentifier{'string'}
                                                ROptional<CTypeArguments>
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CStringInterpolation
                                                    CStringStart{'\"(``'}
                                                    CSelectionExpr
                                                        CSelfReference{'outer'}
                                                        CMemberSelectionOperator{'.'}
                                                        CMemberReference
                                                            CLowerIdentifier{'string'}
                                                            ROptional<CTypeArguments>
                                                    RStar<CInterpolationPart>
                                                        CInterpolationPart
                                                            CStringMid{'``).repeat(``'}
                                                            CMemberReference
                                                                CLowerIdentifier{'times'}
                                                                ROptional<CTypeArguments>
                                                    CStringEnd{'``)\"'}
                                        RLiteral{';'}
                                RLiteral{'}'}
                        CClassDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                            RLiteral{'class'}
                            CUpperIdentifier{'Patch'}
                            ROptional<CTypeParameters>
                                CTypeParameters
                                    RLiteral{'<'}
                                    CTypeParameterList
                                        CTypeParameter
                                            ROptional<ICVariance>
                                            CUpperIdentifier{'Other'}
                                            ROptional<CTypeDefault>
                                    RLiteral{'>'}
                            ROptional<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'List'}
                                                            ROptional<CTypeArguments>
                                                                CTypeArguments
                                                                    RLiteral{'<'}
                                                                    ROptional<CTypeArgumentList>
                                                                        CTypeArgumentList
                                                                            CVariancedType
                                                                                ROptional<ICVariance>
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Other'}
                                                                                        ROptional<CTypeArguments>
                                                                    RLiteral{'>'}
                                                    CLowerIdentifier{'list'}
                                                    ROptional<CValueSpecifier>
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'from'}
                                                    ROptional<CValueSpecifier>
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'length'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CCaseTypes>
                            ROptional<CExtendedType>
                                CExtendedType
                                    RLiteral{'extends'}
                                    CClassInstantiation
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Object'}
                                                ROptional<CTypeArguments>
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                RLiteral{')'}
                            ROptional<CSatisfiedTypes>
                                CSatisfiedTypes
                                    RLiteral{'satisfies'}
                                    CUnionTypeList
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'List'}
                                                ROptional<CTypeArguments>
                                                    CTypeArguments
                                                        RLiteral{'<'}
                                                        ROptional<CTypeArgumentList>
                                                            CTypeArgumentList
                                                                CVariancedType
                                                                    ROptional<ICVariance>
                                                                    CUnionTypeCore
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Element'}
                                                                                ROptional<CTypeArguments>
                                                                        RLiteral{'|'}
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Other'}
                                                                                ROptional<CTypeArguments>
                                                        RLiteral{'>'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CUnclosedStatement
                                        CAssertionStatement
                                            ROptional<ICAssertionMessage>
                                            RLiteral{'assert'}
                                            CConditions
                                                RLiteral{'('}
                                                ROptional<CConditionList>
                                                    CConditionList
                                                        CLargerExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'length'}
                                                                ROptional<CTypeArguments>
                                                            CLargerOperator{'>='}
                                                            CLiteralNatural{'0'}
                                                RLiteral{')'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CAssertionStatement
                                            ROptional<ICAssertionMessage>
                                            RLiteral{'assert'}
                                            CConditions
                                                RLiteral{'('}
                                                ROptional<CConditionList>
                                                    CConditionList
                                                        CSmallerBoundsExpr
                                                            CLiteralNatural{'0'}
                                                            CSmallerOperator{'<='}
                                                            CMemberReference
                                                                CLowerIdentifier{'from'}
                                                                ROptional<CTypeArguments>
                                                            CSmallerOperator{'<='}
                                                            CSelectionExpr
                                                                CSelfReference{'outer'}
                                                                CMemberSelectionOperator{'.'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'size'}
                                                                    ROptional<CTypeArguments>
                                                RLiteral{')'}
                                        RLiteral{';'}
                                    CInferredAttributeDeclaration
                                        CAnnotations
                                            ROptional<ICStringLiteral>
                                            RStar<CAnnotation>
                                        CKwValue{'value'}
                                        CLowerIdentifier{'exactLength'}
                                        COptionalAnySpecifier
                                            ROptional<ICAnySpecifier>
                                                CFunctionSpecifier
                                                    RLiteral{'=>'}
                                                    CCallExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'smallest'}
                                                            ROptional<CTypeArguments>
                                                        CPositionalArguments
                                                            RLiteral{'('}
                                                            ROptional<CSequencedArgumentList>
                                                                CSequencedArgumentList
                                                                    CMemberReference
                                                                        CLowerIdentifier{'length'}
                                                                        ROptional<CTypeArguments>
                                                                    CAdditiveExpr
                                                                        CSelectionExpr
                                                                            CSelfReference{'outer'}
                                                                            CMemberSelectionOperator{'.'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'size'}
                                                                                ROptional<CTypeArguments>
                                                                        CAdditiveOperator{'-'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'from'}
                                                                            ROptional<CTypeArguments>
                                                            RLiteral{')'}
                                            RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CMemberReference
                                                CLowerIdentifier{'size'}
                                                ROptional<CTypeArguments>
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CAdditiveExpr
                                                    CAdditiveExpr
                                                        CSelectionExpr
                                                            CSelfReference{'outer'}
                                                            CMemberSelectionOperator{'.'}
                                                            CMemberReference
                                                                CLowerIdentifier{'size'}
                                                                ROptional<CTypeArguments>
                                                        CAdditiveOperator{'+'}
                                                        CSelectionExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'list'}
                                                                ROptional<CTypeArguments>
                                                            CMemberSelectionOperator{'.'}
                                                            CMemberReference
                                                                CLowerIdentifier{'size'}
                                                                ROptional<CTypeArguments>
                                                    CAdditiveOperator{'-'}
                                                    CMemberReference
                                                        CLowerIdentifier{'exactLength'}
                                                        ROptional<CTypeArguments>
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CMemberReference
                                                CLowerIdentifier{'lastIndex'}
                                                ROptional<CTypeArguments>
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CLetExpr
                                                    RLiteral{'let'}
                                                    RLiteral{'('}
                                                    ROptional<CLetVariableList>
                                                        CLetVariableList
                                                            CLetVariable
                                                                CVariable
                                                                    ROptional<ICVariableType>
                                                                    CLowerIdentifier{'size'}
                                                                    RStar<CParameters>
                                                                CValueSpecifier
                                                                    RLiteral{'='}
                                                                    CSelectionExpr
                                                                        CSelfReference{'this'}
                                                                        CMemberSelectionOperator{'.'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'size'}
                                                                            ROptional<CTypeArguments>
                                                    RLiteral{')'}
                                                    CGroupedExpr
                                                        RLiteral{'('}
                                                        CThenElseExpr
                                                            CLargerExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'size'}
                                                                    ROptional<CTypeArguments>
                                                                CLargerOperator{'>'}
                                                                CLiteralNatural{'0'}
                                                            CThenElseOperator{'then'}
                                                            CAdditiveExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'size'}
                                                                    ROptional<CTypeArguments>
                                                                CAdditiveOperator{'-'}
                                                                CLiteralNatural{'1'}
                                                        RLiteral{')'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CParametrizedMember
                                                CLowerIdentifier{'getFromFirst'}
                                                ROptional<CTypeParameters>
                                                RPlus<CParameters>
                                                    CParameters
                                                        RLiteral{'('}
                                                        ROptional<CParameterList>
                                                            CParameterList
                                                                CParameter
                                                                    CAnnotations
                                                                        ROptional<ICStringLiteral>
                                                                        RStar<CAnnotation>
                                                                    CTypedValueParameter
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Integer'}
                                                                                ROptional<CTypeArguments>
                                                                        CLowerIdentifier{'index'}
                                                                        ROptional<CValueSpecifier>
                                                        RLiteral{')'}
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CIfExpr
                                                    RLiteral{'if'}
                                                    CConditions
                                                        RLiteral{'('}
                                                        ROptional<CConditionList>
                                                            CConditionList
                                                                CSmallerExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'index'}
                                                                        ROptional<CTypeArguments>
                                                                    CSmallerOperator{'<'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'from'}
                                                                        ROptional<CTypeArguments>
                                                        RLiteral{')'}
                                                    CThenExpression
                                                        RLiteral{'then'}
                                                        CCallExpr
                                                            CSelectionExpr
                                                                CSelfReference{'outer'}
                                                                CMemberSelectionOperator{'.'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'getFromFirst'}
                                                                    ROptional<CTypeArguments>
                                                            CPositionalArguments
                                                                RLiteral{'('}
                                                                ROptional<CSequencedArgumentList>
                                                                    CSequencedArgumentList
                                                                        CMemberReference
                                                                            CLowerIdentifier{'index'}
                                                                            ROptional<CTypeArguments>
                                                                RLiteral{')'}
                                                    CElseExpression
                                                        RLiteral{'else'}
                                                        CIfExpr
                                                            RLiteral{'if'}
                                                            CConditions
                                                                RLiteral{'('}
                                                                ROptional<CConditionList>
                                                                    CConditionList
                                                                        CSmallerExpr
                                                                            CAdditiveExpr
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'index'}
                                                                                    ROptional<CTypeArguments>
                                                                                CAdditiveOperator{'-'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'from'}
                                                                                    ROptional<CTypeArguments>
                                                                            CSmallerOperator{'<'}
                                                                            CSelectionExpr
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'list'}
                                                                                    ROptional<CTypeArguments>
                                                                                CMemberSelectionOperator{'.'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'size'}
                                                                                    ROptional<CTypeArguments>
                                                                RLiteral{')'}
                                                            CThenExpression
                                                                RLiteral{'then'}
                                                                CCallExpr
                                                                    CSelectionExpr
                                                                        CMemberReference
                                                                            CLowerIdentifier{'list'}
                                                                            ROptional<CTypeArguments>
                                                                        CMemberSelectionOperator{'.'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'getFromFirst'}
                                                                            ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CAdditiveExpr
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'index'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CAdditiveOperator{'-'}
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'from'}
                                                                                        ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                                            CElseExpression
                                                                RLiteral{'else'}
                                                                CCallExpr
                                                                    CSelectionExpr
                                                                        CSelfReference{'outer'}
                                                                        CMemberSelectionOperator{'.'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'getFromFirst'}
                                                                            ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CAdditiveExpr
                                                                                    CAdditiveExpr
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'index'}
                                                                                            ROptional<CTypeArguments>
                                                                                        CAdditiveOperator{'-'}
                                                                                        CSelectionExpr
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'list'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CMemberSelectionOperator{'.'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'size'}
                                                                                                ROptional<CTypeArguments>
                                                                                    CAdditiveOperator{'+'}
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'exactLength'}
                                                                                        ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CCallExpr
                                                CMemberReference
                                                    CLowerIdentifier{'clone'}
                                                    ROptional<CTypeArguments>
                                                CPositionalArguments
                                                    RLiteral{'('}
                                                    ROptional<CSequencedArgumentList>
                                                    RLiteral{')'}
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CCallExpr
                                                    CSelectionExpr
                                                        CCallExpr
                                                            CSelectionExpr
                                                                CSelfReference{'outer'}
                                                                CMemberSelectionOperator{'.'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'clone'}
                                                                    ROptional<CTypeArguments>
                                                            CPositionalArguments
                                                                RLiteral{'('}
                                                                ROptional<CSequencedArgumentList>
                                                                RLiteral{')'}
                                                        CMemberSelectionOperator{'.'}
                                                        CTypeReference
                                                            CUpperIdentifier{'Patch'}
                                                            ROptional<CTypeArguments>
                                                    CPositionalArguments
                                                        RLiteral{'('}
                                                        ROptional<CSequencedArgumentList>
                                                            CSequencedArgumentList
                                                                CCallExpr
                                                                    CSelectionExpr
                                                                        CMemberReference
                                                                            CLowerIdentifier{'list'}
                                                                            ROptional<CTypeArguments>
                                                                        CMemberSelectionOperator{'.'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'clone'}
                                                                            ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                        RLiteral{')'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'from'}
                                                                    ROptional<CTypeArguments>
                                                                CMemberReference
                                                                    CLowerIdentifier{'exactLength'}
                                                                    ROptional<CTypeArguments>
                                                        RLiteral{')'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CCallExpr
                                                CMemberReference
                                                    CLowerIdentifier{'iterator'}
                                                    ROptional<CTypeArguments>
                                                CPositionalArguments
                                                    RLiteral{'('}
                                                    ROptional<CSequencedArgumentList>
                                                    RLiteral{')'}
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CLetExpr
                                                    RLiteral{'let'}
                                                    RLiteral{'('}
                                                    ROptional<CLetVariableList>
                                                        CLetVariableList
                                                            CLetVariable
                                                                CVariable
                                                                    ROptional<ICVariableType>
                                                                    CLowerIdentifier{'iter'}
                                                                    RStar<CParameters>
                                                                CValueSpecifier
                                                                    RLiteral{'='}
                                                                    CCallExpr
                                                                        CSelectionExpr
                                                                            CSelfReference{'outer'}
                                                                            CMemberSelectionOperator{'.'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'iterator'}
                                                                                ROptional<CTypeArguments>
                                                                        CPositionalArguments
                                                                            RLiteral{'('}
                                                                            ROptional<CSequencedArgumentList>
                                                                            RLiteral{')'}
                                                            CLetVariable
                                                                CVariable
                                                                    ROptional<ICVariableType>
                                                                    CLowerIdentifier{'patchIter'}
                                                                    RStar<CParameters>
                                                                CValueSpecifier
                                                                    RLiteral{'='}
                                                                    CCallExpr
                                                                        CSelectionExpr
                                                                            CMemberReference
                                                                                CLowerIdentifier{'list'}
                                                                                ROptional<CTypeArguments>
                                                                            CMemberSelectionOperator{'.'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'iterator'}
                                                                                ROptional<CTypeArguments>
                                                                        CPositionalArguments
                                                                            RLiteral{'('}
                                                                            ROptional<CSequencedArgumentList>
                                                                            RLiteral{')'}
                                                    RLiteral{')'}
                                                    CObjectExpr
                                                        RLiteral{'object'}
                                                        ROptional<CExtendedType>
                                                        ROptional<CSatisfiedTypes>
                                                            CSatisfiedTypes
                                                                RLiteral{'satisfies'}
                                                                CUnionTypeList
                                                                    CTypePath
                                                                        CTypeReference
                                                                            CUpperIdentifier{'Iterator'}
                                                                            ROptional<CTypeArguments>
                                                                                CTypeArguments
                                                                                    RLiteral{'<'}
                                                                                    ROptional<CTypeArgumentList>
                                                                                        CTypeArgumentList
                                                                                            CVariancedType
                                                                                                ROptional<ICVariance>
                                                                                                CUnionTypeCore
                                                                                                    CTypePath
                                                                                                        CTypeReference
                                                                                                            CUpperIdentifier{'Element'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                    RLiteral{'|'}
                                                                                                    CTypePath
                                                                                                        CTypeReference
                                                                                                            CUpperIdentifier{'Other'}
                                                                                                            ROptional<CTypeArguments>
                                                                                    RLiteral{'>'}
                                                        CBlock
                                                            RLiteral{'{'}
                                                            CImports
                                                            CStatements
                                                                CInferredAttributeDeclaration
                                                                    CAnnotations
                                                                        ROptional<ICStringLiteral>
                                                                        RStar<CAnnotation>
                                                                            CAnnotation
                                                                                CLowerIdentifier{'variable'}
                                                                                ROptional<ICArguments>
                                                                    CKwValue{'value'}
                                                                    CLowerIdentifier{'index'}
                                                                    COptionalAnySpecifier
                                                                        ROptional<ICAnySpecifier>
                                                                            CValueSpecifier
                                                                                RLiteral{'='}
                                                                                CNegationOrComplementExpr
                                                                                    CNegateOperator
                                                                                        RLiteral{'-'}
                                                                                        RNot<RLiteral>
                                                                                    CLiteralNatural{'1'}
                                                                        RLiteral{';'}
                                                                CTypedMethodDeclaration
                                                                    CAnnotations
                                                                        ROptional<ICStringLiteral>
                                                                        RStar<CAnnotation>
                                                                            CAnnotation
                                                                                CLowerIdentifier{'shared'}
                                                                                ROptional<ICArguments>
                                                                            CAnnotation
                                                                                CLowerIdentifier{'actual'}
                                                                                ROptional<ICArguments>
                                                                    CUnionTypeCore
                                                                        CUnionTypeCore
                                                                            CTypePath
                                                                                CTypeReference
                                                                                    CUpperIdentifier{'Element'}
                                                                                    ROptional<CTypeArguments>
                                                                            RLiteral{'|'}
                                                                            CTypePath
                                                                                CTypeReference
                                                                                    CUpperIdentifier{'Other'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{'|'}
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Finished'}
                                                                                ROptional<CTypeArguments>
                                                                    CLowerIdentifier{'next'}
                                                                    ROptional<CTypeParameters>
                                                                    RPlus<CParameters>
                                                                        CParameters
                                                                            RLiteral{'('}
                                                                            ROptional<CParameterList>
                                                                            RLiteral{')'}
                                                                    ROptional<CTypeConstraints>
                                                                    CBlock
                                                                        RLiteral{'{'}
                                                                        CImports
                                                                        CStatements
                                                                            CIfElseStatement
                                                                                RLiteral{'if'}
                                                                                CConditions
                                                                                    RLiteral{'('}
                                                                                    ROptional<CConditionList>
                                                                                        CConditionList
                                                                                            CEqualityExpr
                                                                                                CPrefixExpr
                                                                                                    CIncrementOperator{'++'}
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'index'}
                                                                                                        ROptional<CTypeArguments>
                                                                                                CEqualityOperator{'=='}
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'from'}
                                                                                                    ROptional<CTypeArguments>
                                                                                    RLiteral{')'}
                                                                                CBlock
                                                                                    RLiteral{'{'}
                                                                                    CImports
                                                                                    CStatements
                                                                                        CForElseStatement
                                                                                            RLiteral{'for'}
                                                                                            RLiteral{'('}
                                                                                            ROptional<CForIterator>
                                                                                                CForIterator
                                                                                                    CVariable
                                                                                                        ROptional<ICVariableType>
                                                                                                        CLowerIdentifier{'skip'}
                                                                                                        RStar<CParameters>
                                                                                                    CContainment
                                                                                                        CContainmentOperator{'in'}
                                                                                                        CRangeExpr
                                                                                                            CLiteralNatural{'0'}
                                                                                                            CRangeOperator{':'}
                                                                                                            CMemberReference
                                                                                                                CLowerIdentifier{'exactLength'}
                                                                                                                ROptional<CTypeArguments>
                                                                                            RLiteral{')'}
                                                                                            CBlock
                                                                                                RLiteral{'{'}
                                                                                                CImports
                                                                                                CStatements
                                                                                                    CUnclosedStatement
                                                                                                        CCallExpr
                                                                                                            CSelectionExpr
                                                                                                                CMemberReference
                                                                                                                    CLowerIdentifier{'iter'}
                                                                                                                    ROptional<CTypeArguments>
                                                                                                                CMemberSelectionOperator{'.'}
                                                                                                                CMemberReference
                                                                                                                    CLowerIdentifier{'next'}
                                                                                                                    ROptional<CTypeArguments>
                                                                                                            CPositionalArguments
                                                                                                                RLiteral{'('}
                                                                                                                ROptional<CSequencedArgumentList>
                                                                                                                RLiteral{')'}
                                                                                                        RLiteral{';'}
                                                                                                RLiteral{'}'}
                                                                                            ROptional<CElseBlock>
                                                                                    RLiteral{'}'}
                                                                                RStar<CElseIf>
                                                                                ROptional<CElseBlock>
                                                                            CUnclosedStatement
                                                                                CReturnStatement
                                                                                    RLiteral{'return'}
                                                                                    ROptional<ICExpression>
                                                                                        CIfExpr
                                                                                            RLiteral{'if'}
                                                                                            CConditions
                                                                                                RLiteral{'('}
                                                                                                ROptional<CConditionList>
                                                                                                    CConditionList
                                                                                                        CSmallerBoundsExpr
                                                                                                            CLiteralNatural{'0'}
                                                                                                            CSmallerOperator{'<='}
                                                                                                            CAdditiveExpr
                                                                                                                CMemberReference
                                                                                                                    CLowerIdentifier{'index'}
                                                                                                                    ROptional<CTypeArguments>
                                                                                                                CAdditiveOperator{'-'}
                                                                                                                CMemberReference
                                                                                                                    CLowerIdentifier{'from'}
                                                                                                                    ROptional<CTypeArguments>
                                                                                                            CSmallerOperator{'<'}
                                                                                                            CSelectionExpr
                                                                                                                CMemberReference
                                                                                                                    CLowerIdentifier{'list'}
                                                                                                                    ROptional<CTypeArguments>
                                                                                                                CMemberSelectionOperator{'.'}
                                                                                                                CMemberReference
                                                                                                                    CLowerIdentifier{'size'}
                                                                                                                    ROptional<CTypeArguments>
                                                                                                RLiteral{')'}
                                                                                            CThenExpression
                                                                                                RLiteral{'then'}
                                                                                                CCallExpr
                                                                                                    CSelectionExpr
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'patchIter'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                        CMemberSelectionOperator{'.'}
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'next'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                    CPositionalArguments
                                                                                                        RLiteral{'('}
                                                                                                        ROptional<CSequencedArgumentList>
                                                                                                        RLiteral{')'}
                                                                                            CElseExpression
                                                                                                RLiteral{'else'}
                                                                                                CCallExpr
                                                                                                    CSelectionExpr
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'iter'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                        CMemberSelectionOperator{'.'}
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'next'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                    CPositionalArguments
                                                                                                        RLiteral{'('}
                                                                                                        ROptional<CSequencedArgumentList>
                                                                                                        RLiteral{')'}
                                                                                RLiteral{';'}
                                                                        RLiteral{'}'}
                                                                CUnclosedStatement
                                                                    CSpecificationStatement
                                                                        CMemberReference
                                                                            CLowerIdentifier{'string'}
                                                                            ROptional<CTypeArguments>
                                                                        CFunctionSpecifier
                                                                            RLiteral{'=>'}
                                                                            CStringInterpolation
                                                                                CStringStart{'\"``'}
                                                                                CSelectionExpr
                                                                                    CSelfReference{'outer'}
                                                                                    CMemberSelectionOperator{'.'}
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'string'}
                                                                                        ROptional<CTypeArguments>
                                                                                RStar<CInterpolationPart>
                                                                                CStringEnd{'``.iterator()\"'}
                                                                    RLiteral{';'}
                                                            RLiteral{'}'}
                                        RLiteral{';'}
                                RLiteral{'}'}
                        CClassDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                            RLiteral{'class'}
                            CUpperIdentifier{'Reversed'}
                            ROptional<CTypeParameters>
                            ROptional<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                    RLiteral{')'}
                            ROptional<CCaseTypes>
                            ROptional<CExtendedType>
                                CExtendedType
                                    RLiteral{'extends'}
                                    CClassInstantiation
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Object'}
                                                ROptional<CTypeArguments>
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                RLiteral{')'}
                            ROptional<CSatisfiedTypes>
                                CSatisfiedTypes
                                    RLiteral{'satisfies'}
                                    CUnionTypeList
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'List'}
                                                ROptional<CTypeArguments>
                                                    CTypeArguments
                                                        RLiteral{'<'}
                                                        ROptional<CTypeArgumentList>
                                                            CTypeArgumentList
                                                                CVariancedType
                                                                    ROptional<ICVariance>
                                                                    CTypePath
                                                                        CTypeReference
                                                                            CUpperIdentifier{'Element'}
                                                                            ROptional<CTypeArguments>
                                                        RLiteral{'>'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CMemberReference
                                                CLowerIdentifier{'lastIndex'}
                                                ROptional<CTypeArguments>
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CSelectionExpr
                                                    CSelfReference{'outer'}
                                                    CMemberSelectionOperator{'.'}
                                                    CMemberReference
                                                        CLowerIdentifier{'lastIndex'}
                                                        ROptional<CTypeArguments>
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CMemberReference
                                                CLowerIdentifier{'size'}
                                                ROptional<CTypeArguments>
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CSelectionExpr
                                                    CSelfReference{'outer'}
                                                    CMemberSelectionOperator{'.'}
                                                    CMemberReference
                                                        CLowerIdentifier{'size'}
                                                        ROptional<CTypeArguments>
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CMemberReference
                                                CLowerIdentifier{'first'}
                                                ROptional<CTypeArguments>
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CSelectionExpr
                                                    CSelfReference{'outer'}
                                                    CMemberSelectionOperator{'.'}
                                                    CMemberReference
                                                        CLowerIdentifier{'last'}
                                                        ROptional<CTypeArguments>
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CMemberReference
                                                CLowerIdentifier{'last'}
                                                ROptional<CTypeArguments>
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CSelectionExpr
                                                    CSelfReference{'outer'}
                                                    CMemberSelectionOperator{'.'}
                                                    CMemberReference
                                                        CLowerIdentifier{'first'}
                                                        ROptional<CTypeArguments>
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CMemberReference
                                                CLowerIdentifier{'reversed'}
                                                ROptional<CTypeArguments>
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CSelfReference{'outer'}
                                        RLiteral{';'}
                                    CInferredMethodDeclaration
                                        CAnnotations
                                            ROptional<ICStringLiteral>
                                            RStar<CAnnotation>
                                        CKwFunction{'function'}
                                        CLowerIdentifier{'outerIndex'}
                                        ROptional<CTypeParameters>
                                        RPlus<CParameters>
                                            CParameters
                                                RLiteral{'('}
                                                ROptional<CParameterList>
                                                    CParameterList
                                                        CParameter
                                                            CAnnotations
                                                                ROptional<ICStringLiteral>
                                                                RStar<CAnnotation>
                                                            CTypedValueParameter
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'Integer'}
                                                                        ROptional<CTypeArguments>
                                                                CLowerIdentifier{'index'}
                                                                ROptional<CValueSpecifier>
                                                RLiteral{')'}
                                        ROptional<CTypeConstraints>
                                        COptionalFunctionSpecifier
                                            ROptional<CFunctionSpecifier>
                                                CFunctionSpecifier
                                                    RLiteral{'=>'}
                                                    CAdditiveExpr
                                                        CAdditiveExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'size'}
                                                                ROptional<CTypeArguments>
                                                            CAdditiveOperator{'-'}
                                                            CLiteralNatural{'1'}
                                                        CAdditiveOperator{'-'}
                                                        CMemberReference
                                                            CLowerIdentifier{'index'}
                                                            ROptional<CTypeArguments>
                                            RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CParametrizedMember
                                                CLowerIdentifier{'getFromFirst'}
                                                ROptional<CTypeParameters>
                                                RPlus<CParameters>
                                                    CParameters
                                                        RLiteral{'('}
                                                        ROptional<CParameterList>
                                                            CParameterList
                                                                CParameter
                                                                    CAnnotations
                                                                        ROptional<ICStringLiteral>
                                                                        RStar<CAnnotation>
                                                                    CTypedValueParameter
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Integer'}
                                                                                ROptional<CTypeArguments>
                                                                        CLowerIdentifier{'index'}
                                                                        ROptional<CValueSpecifier>
                                                        RLiteral{')'}
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CIfExpr
                                                    RLiteral{'if'}
                                                    CConditions
                                                        RLiteral{'('}
                                                        ROptional<CConditionList>
                                                            CConditionList
                                                                CLargerExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'size'}
                                                                        ROptional<CTypeArguments>
                                                                    CLargerOperator{'>'}
                                                                    CLiteralNatural{'0'}
                                                        RLiteral{')'}
                                                    CThenExpression
                                                        RLiteral{'then'}
                                                        CCallExpr
                                                            CSelectionExpr
                                                                CSelfReference{'outer'}
                                                                CMemberSelectionOperator{'.'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'getFromFirst'}
                                                                    ROptional<CTypeArguments>
                                                            CPositionalArguments
                                                                RLiteral{'('}
                                                                ROptional<CSequencedArgumentList>
                                                                    CSequencedArgumentList
                                                                        CCallExpr
                                                                            CMemberReference
                                                                                CLowerIdentifier{'outerIndex'}
                                                                                ROptional<CTypeArguments>
                                                                            CPositionalArguments
                                                                                RLiteral{'('}
                                                                                ROptional<CSequencedArgumentList>
                                                                                    CSequencedArgumentList
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'index'}
                                                                                            ROptional<CTypeArguments>
                                                                                RLiteral{')'}
                                                                RLiteral{')'}
                                                    CElseExpression
                                                        RLiteral{'else'}
                                                        CMemberReference
                                                            CLowerIdentifier{'null'}
                                                            ROptional<CTypeArguments>
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CParametrizedMember
                                                CLowerIdentifier{'span'}
                                                ROptional<CTypeParameters>
                                                RPlus<CParameters>
                                                    CParameters
                                                        RLiteral{'('}
                                                        ROptional<CParameterList>
                                                            CParameterList
                                                                CParameter
                                                                    CAnnotations
                                                                        ROptional<ICStringLiteral>
                                                                        RStar<CAnnotation>
                                                                    CTypedValueParameter
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Integer'}
                                                                                ROptional<CTypeArguments>
                                                                        CLowerIdentifier{'from'}
                                                                        ROptional<CValueSpecifier>
                                                                CParameter
                                                                    CAnnotations
                                                                        ROptional<ICStringLiteral>
                                                                        RStar<CAnnotation>
                                                                    CTypedValueParameter
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'Integer'}
                                                                                ROptional<CTypeArguments>
                                                                        CLowerIdentifier{'to'}
                                                                        ROptional<CValueSpecifier>
                                                        RLiteral{')'}
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CIndexedExpr
                                                    CSelfReference{'outer'}
                                                    RLiteral{'['}
                                                    CSpanned
                                                        CCallExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'outerIndex'}
                                                                ROptional<CTypeArguments>
                                                            CPositionalArguments
                                                                RLiteral{'('}
                                                                ROptional<CSequencedArgumentList>
                                                                    CSequencedArgumentList
                                                                        CMemberReference
                                                                            CLowerIdentifier{'from'}
                                                                            ROptional<CTypeArguments>
                                                                RLiteral{')'}
                                                        RLiteral{'..'}
                                                        CCallExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'outerIndex'}
                                                                ROptional<CTypeArguments>
                                                            CPositionalArguments
                                                                RLiteral{'('}
                                                                ROptional<CSequencedArgumentList>
                                                                    CSequencedArgumentList
                                                                        CMemberReference
                                                                            CLowerIdentifier{'to'}
                                                                            ROptional<CTypeArguments>
                                                                RLiteral{')'}
                                                    RLiteral{']'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CCallExpr
                                                CMemberReference
                                                    CLowerIdentifier{'clone'}
                                                    ROptional<CTypeArguments>
                                                CPositionalArguments
                                                    RLiteral{'('}
                                                    ROptional<CSequencedArgumentList>
                                                    RLiteral{')'}
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CSelectionExpr
                                                    CCallExpr
                                                        CSelectionExpr
                                                            CSelfReference{'outer'}
                                                            CMemberSelectionOperator{'.'}
                                                            CMemberReference
                                                                CLowerIdentifier{'clone'}
                                                                ROptional<CTypeArguments>
                                                        CPositionalArguments
                                                            RLiteral{'('}
                                                            ROptional<CSequencedArgumentList>
                                                            RLiteral{')'}
                                                    CMemberSelectionOperator{'.'}
                                                    CMemberReference
                                                        CLowerIdentifier{'reversed'}
                                                        ROptional<CTypeArguments>
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CSpecificationStatement
                                            CCallExpr
                                                CMemberReference
                                                    CLowerIdentifier{'iterator'}
                                                    ROptional<CTypeArguments>
                                                CPositionalArguments
                                                    RLiteral{'('}
                                                    ROptional<CSequencedArgumentList>
                                                    RLiteral{')'}
                                            CFunctionSpecifier
                                                RLiteral{'=>'}
                                                CLetExpr
                                                    RLiteral{'let'}
                                                    RLiteral{'('}
                                                    ROptional<CLetVariableList>
                                                        CLetVariableList
                                                            CLetVariable
                                                                CVariable
                                                                    ROptional<ICVariableType>
                                                                    CLowerIdentifier{'outerList'}
                                                                    RStar<CParameters>
                                                                CValueSpecifier
                                                                    RLiteral{'='}
                                                                    CSelfReference{'outer'}
                                                    RLiteral{')'}
                                                    CObjectExpr
                                                        RLiteral{'object'}
                                                        ROptional<CExtendedType>
                                                        ROptional<CSatisfiedTypes>
                                                            CSatisfiedTypes
                                                                RLiteral{'satisfies'}
                                                                CUnionTypeList
                                                                    CTypePath
                                                                        CTypeReference
                                                                            CUpperIdentifier{'Iterator'}
                                                                            ROptional<CTypeArguments>
                                                                                CTypeArguments
                                                                                    RLiteral{'<'}
                                                                                    ROptional<CTypeArgumentList>
                                                                                        CTypeArgumentList
                                                                                            CVariancedType
                                                                                                ROptional<ICVariance>
                                                                                                CTypePath
                                                                                                    CTypeReference
                                                                                                        CUpperIdentifier{'Element'}
                                                                                                        ROptional<CTypeArguments>
                                                                                    RLiteral{'>'}
                                                        CBlock
                                                            RLiteral{'{'}
                                                            CImports
                                                            CStatements
                                                                CInferredAttributeDeclaration
                                                                    CAnnotations
                                                                        ROptional<ICStringLiteral>
                                                                        RStar<CAnnotation>
                                                                            CAnnotation
                                                                                CLowerIdentifier{'variable'}
                                                                                ROptional<ICArguments>
                                                                    CKwValue{'value'}
                                                                    CLowerIdentifier{'index'}
                                                                    COptionalAnySpecifier
                                                                        ROptional<ICAnySpecifier>
                                                                            CValueSpecifier
                                                                                RLiteral{'='}
                                                                                CCallExpr
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'outerIndex'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CPositionalArguments
                                                                                        RLiteral{'('}
                                                                                        ROptional<CSequencedArgumentList>
                                                                                            CSequencedArgumentList
                                                                                                CLiteralNatural{'0'}
                                                                                        RLiteral{')'}
                                                                        RLiteral{';'}
                                                                CUnclosedStatement
                                                                    CSpecificationStatement
                                                                        CCallExpr
                                                                            CMemberReference
                                                                                CLowerIdentifier{'next'}
                                                                                ROptional<CTypeArguments>
                                                                            CPositionalArguments
                                                                                RLiteral{'('}
                                                                                ROptional<CSequencedArgumentList>
                                                                                RLiteral{')'}
                                                                        CFunctionSpecifier
                                                                            RLiteral{'=>'}
                                                                            CThenElseExpr
                                                                                CThenElseExpr
                                                                                    CSmallerExpr
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'index'}
                                                                                            ROptional<CTypeArguments>
                                                                                        CSmallerOperator{'<'}
                                                                                        CLiteralNatural{'0'}
                                                                                    CThenElseOperator{'then'}
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'finished'}
                                                                                        ROptional<CTypeArguments>
                                                                                CThenElseOperator{'else'}
                                                                                CCallExpr
                                                                                    CSelectionExpr
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'outerList'}
                                                                                            ROptional<CTypeArguments>
                                                                                        CMemberSelectionOperator{'.'}
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'getElement'}
                                                                                            ROptional<CTypeArguments>
                                                                                    CPositionalArguments
                                                                                        RLiteral{'('}
                                                                                        ROptional<CSequencedArgumentList>
                                                                                            CSequencedArgumentList
                                                                                                CPostfixExpr
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'index'}
                                                                                                        ROptional<CTypeArguments>
                                                                                                    CIncrementOperator{'--'}
                                                                                        RLiteral{')'}
                                                                    RLiteral{';'}
                                                                CUnclosedStatement
                                                                    CSpecificationStatement
                                                                        CMemberReference
                                                                            CLowerIdentifier{'string'}
                                                                            ROptional<CTypeArguments>
                                                                        CFunctionSpecifier
                                                                            RLiteral{'=>'}
                                                                            CStringInterpolation
                                                                                CStringStart{'\"``'}
                                                                                CSelectionExpr
                                                                                    CSelfReference{'outer'}
                                                                                    CMemberSelectionOperator{'.'}
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'string'}
                                                                                        ROptional<CTypeArguments>
                                                                                RStar<CInterpolationPart>
                                                                                CStringEnd{'``.iterator()\"'}
                                                                    RLiteral{';'}
                                                            RLiteral{'}'}
                                        RLiteral{';'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"Produces a list with the same indexes as this list. For \r\n     every index, the element is the result of applying the \r\n     given [[transformation|List.mapElements.mapping]] \r\n     function to its associated element in this list. This \r\n     is a lazy operation, returning a view of this list.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'since'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CLiteralString{'\"1.3.0\"'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'default'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'List'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Result'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'mapElements'}
                            ROptional<CTypeParameters>
                                CTypeParameters
                                    RLiteral{'<'}
                                    CTypeParameterList
                                        CTypeParameter
                                            ROptional<ICVariance>
                                            CUpperIdentifier{'Result'}
                                            ROptional<CTypeDefault>
                                    RLiteral{'>'}
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                        CLiteralString{'\"The function that transforms an index/item pair of\r\n         this list, producing the element of the resulting \r\n         list.\"'}
                                                    RStar<CAnnotation>
                                                CTypedFunctionParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Result'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'mapping'}
                                                    ROptional<CTypeParameters>
                                                    RPlus<CParameters>
                                                        CParameters
                                                            RLiteral{'('}
                                                            ROptional<CParameterList>
                                                                CParameterList
                                                                    CParameter
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CTypedValueParameter
                                                                            CTypePath
                                                                                CTypeReference
                                                                                    CUpperIdentifier{'Integer'}
                                                                                    ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'index'}
                                                                            ROptional<CValueSpecifier>
                                                                    CParameter
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CTypedValueParameter
                                                                            CTypePath
                                                                                CTypeReference
                                                                                    CUpperIdentifier{'Element'}
                                                                                    ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'item'}
                                                                            ROptional<CValueSpecifier>
                                                            RLiteral{')'}
                                                    ROptional<CFunctionSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            COptionalFunctionSpecifier
                                ROptional<CFunctionSpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CObjectExpr
                                            RLiteral{'object'}
                                            ROptional<CExtendedType>
                                                CExtendedType
                                                    RLiteral{'extends'}
                                                    CClassInstantiation
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Object'}
                                                                ROptional<CTypeArguments>
                                                        ROptional<ICArguments>
                                                            CPositionalArguments
                                                                RLiteral{'('}
                                                                ROptional<CSequencedArgumentList>
                                                                RLiteral{')'}
                                            ROptional<CSatisfiedTypes>
                                                CSatisfiedTypes
                                                    RLiteral{'satisfies'}
                                                    CUnionTypeList
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'List'}
                                                                ROptional<CTypeArguments>
                                                                    CTypeArguments
                                                                        RLiteral{'<'}
                                                                        ROptional<CTypeArgumentList>
                                                                            CTypeArgumentList
                                                                                CVariancedType
                                                                                    ROptional<ICVariance>
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Result'}
                                                                                            ROptional<CTypeArguments>
                                                                        RLiteral{'>'}
                                            CBlock
                                                RLiteral{'{'}
                                                CImports
                                                CStatements
                                                    CTypedMethodDeclaration
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                                CAnnotation
                                                                    CLowerIdentifier{'shared'}
                                                                    ROptional<ICArguments>
                                                                CAnnotation
                                                                    CLowerIdentifier{'actual'}
                                                                    ROptional<ICArguments>
                                                        CNullableType
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Result'}
                                                                    ROptional<CTypeArguments>
                                                            RLiteral{'?'}
                                                        CLowerIdentifier{'getFromFirst'}
                                                        ROptional<CTypeParameters>
                                                        RPlus<CParameters>
                                                            CParameters
                                                                RLiteral{'('}
                                                                ROptional<CParameterList>
                                                                    CParameterList
                                                                        CParameter
                                                                            CAnnotations
                                                                                ROptional<ICStringLiteral>
                                                                                RStar<CAnnotation>
                                                                            CTypedValueParameter
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Integer'}
                                                                                        ROptional<CTypeArguments>
                                                                                CLowerIdentifier{'index'}
                                                                                ROptional<CValueSpecifier>
                                                                RLiteral{')'}
                                                        ROptional<CTypeConstraints>
                                                        CBlock
                                                            RLiteral{'{'}
                                                            CImports
                                                            CStatements
                                                                CIfElseStatement
                                                                    RLiteral{'if'}
                                                                    CConditions
                                                                        RLiteral{'('}
                                                                        ROptional<CConditionList>
                                                                            CConditionList
                                                                                CSmallerBoundsExpr
                                                                                    CLiteralNatural{'0'}
                                                                                    CSmallerOperator{'<='}
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'index'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CSmallerOperator{'<'}
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'size'}
                                                                                        ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                                                    CBlock
                                                                        RLiteral{'{'}
                                                                        CImports
                                                                        CStatements
                                                                            CIfElseStatement
                                                                                RLiteral{'if'}
                                                                                CConditions
                                                                                    RLiteral{'('}
                                                                                    ROptional<CConditionList>
                                                                                        CConditionList
                                                                                            CExistsCondition
                                                                                                ROptional<RLiteral>
                                                                                                RLiteral{'exists'}
                                                                                                CLetVariable
                                                                                                    CVariable
                                                                                                        ROptional<ICVariableType>
                                                                                                        CLowerIdentifier{'element'}
                                                                                                        RStar<CParameters>
                                                                                                    CValueSpecifier
                                                                                                        RLiteral{'='}
                                                                                                        CCallExpr
                                                                                                            CSelectionExpr
                                                                                                                CSelfReference{'outer'}
                                                                                                                CMemberSelectionOperator{'.'}
                                                                                                                CMemberReference
                                                                                                                    CLowerIdentifier{'getFromFirst'}
                                                                                                                    ROptional<CTypeArguments>
                                                                                                            CPositionalArguments
                                                                                                                RLiteral{'('}
                                                                                                                ROptional<CSequencedArgumentList>
                                                                                                                    CSequencedArgumentList
                                                                                                                        CMemberReference
                                                                                                                            CLowerIdentifier{'index'}
                                                                                                                            ROptional<CTypeArguments>
                                                                                                                RLiteral{')'}
                                                                                    RLiteral{')'}
                                                                                CBlock
                                                                                    RLiteral{'{'}
                                                                                    CImports
                                                                                    CStatements
                                                                                        CUnclosedStatement
                                                                                            CReturnStatement
                                                                                                RLiteral{'return'}
                                                                                                ROptional<ICExpression>
                                                                                                    CCallExpr
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'mapping'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                        CPositionalArguments
                                                                                                            RLiteral{'('}
                                                                                                            ROptional<CSequencedArgumentList>
                                                                                                                CSequencedArgumentList
                                                                                                                    CMemberReference
                                                                                                                        CLowerIdentifier{'index'}
                                                                                                                        ROptional<CTypeArguments>
                                                                                                                    CMemberReference
                                                                                                                        CLowerIdentifier{'element'}
                                                                                                                        ROptional<CTypeArguments>
                                                                                                            RLiteral{')'}
                                                                                            RLiteral{';'}
                                                                                    RLiteral{'}'}
                                                                                RStar<CElseIf>
                                                                                ROptional<CElseBlock>
                                                                                    CElseBlock
                                                                                        RLiteral{'else'}
                                                                                        CBlock
                                                                                            RLiteral{'{'}
                                                                                            CImports
                                                                                            CStatements
                                                                                                CUnclosedStatement
                                                                                                    CAssertionStatement
                                                                                                        ROptional<ICAssertionMessage>
                                                                                                        RLiteral{'assert'}
                                                                                                        CConditions
                                                                                                            RLiteral{'('}
                                                                                                            ROptional<CConditionList>
                                                                                                                CConditionList
                                                                                                                    CIsCondition
                                                                                                                        ROptional<RLiteral>
                                                                                                                        RLiteral{'is'}
                                                                                                                        CTypePath
                                                                                                                            CTypeReference
                                                                                                                                CUpperIdentifier{'Element'}
                                                                                                                                ROptional<CTypeArguments>
                                                                                                                        CIsConditionVariable
                                                                                                                            CLowerIdentifier{'null'}
                                                                                                                            ROptional<CValueSpecifier>
                                                                                                            RLiteral{')'}
                                                                                                    RLiteral{';'}
                                                                                                CUnclosedStatement
                                                                                                    CReturnStatement
                                                                                                        RLiteral{'return'}
                                                                                                        ROptional<ICExpression>
                                                                                                            CCallExpr
                                                                                                                CMemberReference
                                                                                                                    CLowerIdentifier{'mapping'}
                                                                                                                    ROptional<CTypeArguments>
                                                                                                                CPositionalArguments
                                                                                                                    RLiteral{'('}
                                                                                                                    ROptional<CSequencedArgumentList>
                                                                                                                        CSequencedArgumentList
                                                                                                                            CMemberReference
                                                                                                                                CLowerIdentifier{'index'}
                                                                                                                                ROptional<CTypeArguments>
                                                                                                                            CMemberReference
                                                                                                                                CLowerIdentifier{'null'}
                                                                                                                                ROptional<CTypeArguments>
                                                                                                                    RLiteral{')'}
                                                                                                    RLiteral{';'}
                                                                                            RLiteral{'}'}
                                                                        RLiteral{'}'}
                                                                    RStar<CElseIf>
                                                                    ROptional<CElseBlock>
                                                                        CElseBlock
                                                                            RLiteral{'else'}
                                                                            CBlock
                                                                                RLiteral{'{'}
                                                                                CImports
                                                                                CStatements
                                                                                    CUnclosedStatement
                                                                                        CReturnStatement
                                                                                            RLiteral{'return'}
                                                                                            ROptional<ICExpression>
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'null'}
                                                                                                    ROptional<CTypeArguments>
                                                                                        RLiteral{';'}
                                                                                RLiteral{'}'}
                                                            RLiteral{'}'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CCallExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'iterator'}
                                                                    ROptional<CTypeArguments>
                                                                CPositionalArguments
                                                                    RLiteral{'('}
                                                                    ROptional<CSequencedArgumentList>
                                                                    RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CLetExpr
                                                                    RLiteral{'let'}
                                                                    RLiteral{'('}
                                                                    ROptional<CLetVariableList>
                                                                        CLetVariableList
                                                                            CLetVariable
                                                                                CVariable
                                                                                    ROptional<ICVariableType>
                                                                                    CLowerIdentifier{'it'}
                                                                                    RStar<CParameters>
                                                                                CValueSpecifier
                                                                                    RLiteral{'='}
                                                                                    CCallExpr
                                                                                        CSelectionExpr
                                                                                            CSelfReference{'outer'}
                                                                                            CMemberSelectionOperator{'.'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'iterator'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CPositionalArguments
                                                                                            RLiteral{'('}
                                                                                            ROptional<CSequencedArgumentList>
                                                                                            RLiteral{')'}
                                                                    RLiteral{')'}
                                                                    CObjectExpr
                                                                        RLiteral{'object'}
                                                                        ROptional<CExtendedType>
                                                                        ROptional<CSatisfiedTypes>
                                                                            CSatisfiedTypes
                                                                                RLiteral{'satisfies'}
                                                                                CUnionTypeList
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Iterator'}
                                                                                            ROptional<CTypeArguments>
                                                                                                CTypeArguments
                                                                                                    RLiteral{'<'}
                                                                                                    ROptional<CTypeArgumentList>
                                                                                                        CTypeArgumentList
                                                                                                            CVariancedType
                                                                                                                ROptional<ICVariance>
                                                                                                                CTypePath
                                                                                                                    CTypeReference
                                                                                                                        CUpperIdentifier{'Result'}
                                                                                                                        ROptional<CTypeArguments>
                                                                                                    RLiteral{'>'}
                                                                        CBlock
                                                                            RLiteral{'{'}
                                                                            CImports
                                                                            CStatements
                                                                                CInferredAttributeDeclaration
                                                                                    CAnnotations
                                                                                        ROptional<ICStringLiteral>
                                                                                        RStar<CAnnotation>
                                                                                            CAnnotation
                                                                                                CLowerIdentifier{'variable'}
                                                                                                ROptional<ICArguments>
                                                                                    CKwValue{'value'}
                                                                                    CLowerIdentifier{'index'}
                                                                                    COptionalAnySpecifier
                                                                                        ROptional<ICAnySpecifier>
                                                                                            CValueSpecifier
                                                                                                RLiteral{'='}
                                                                                                CLiteralNatural{'0'}
                                                                                        RLiteral{';'}
                                                                                CUnclosedStatement
                                                                                    CSpecificationStatement
                                                                                        CCallExpr
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'next'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CPositionalArguments
                                                                                                RLiteral{'('}
                                                                                                ROptional<CSequencedArgumentList>
                                                                                                RLiteral{')'}
                                                                                        CFunctionSpecifier
                                                                                            RLiteral{'=>'}
                                                                                            CIfExpr
                                                                                                RLiteral{'if'}
                                                                                                CConditions
                                                                                                    RLiteral{'('}
                                                                                                    ROptional<CConditionList>
                                                                                                        CConditionList
                                                                                                            CIsCondition
                                                                                                                ROptional<RLiteral>
                                                                                                                    CNotOperator{'!'}
                                                                                                                RLiteral{'is'}
                                                                                                                CTypePath
                                                                                                                    CTypeReference
                                                                                                                        CUpperIdentifier{'Finished'}
                                                                                                                        ROptional<CTypeArguments>
                                                                                                                CIsConditionVariable
                                                                                                                    CLowerIdentifier{'element'}
                                                                                                                    ROptional<CValueSpecifier>
                                                                                                                        CValueSpecifier
                                                                                                                            RLiteral{'='}
                                                                                                                            CCallExpr
                                                                                                                                CSelectionExpr
                                                                                                                                    CMemberReference
                                                                                                                                        CLowerIdentifier{'it'}
                                                                                                                                        ROptional<CTypeArguments>
                                                                                                                                    CMemberSelectionOperator{'.'}
                                                                                                                                    CMemberReference
                                                                                                                                        CLowerIdentifier{'next'}
                                                                                                                                        ROptional<CTypeArguments>
                                                                                                                                CPositionalArguments
                                                                                                                                    RLiteral{'('}
                                                                                                                                    ROptional<CSequencedArgumentList>
                                                                                                                                    RLiteral{')'}
                                                                                                    RLiteral{')'}
                                                                                                CThenExpression
                                                                                                    RLiteral{'then'}
                                                                                                    CCallExpr
                                                                                                        CMemberReference
                                                                                                            CLowerIdentifier{'mapping'}
                                                                                                            ROptional<CTypeArguments>
                                                                                                        CPositionalArguments
                                                                                                            RLiteral{'('}
                                                                                                            ROptional<CSequencedArgumentList>
                                                                                                                CSequencedArgumentList
                                                                                                                    CPostfixExpr
                                                                                                                        CMemberReference
                                                                                                                            CLowerIdentifier{'index'}
                                                                                                                            ROptional<CTypeArguments>
                                                                                                                        CIncrementOperator{'++'}
                                                                                                                    CMemberReference
                                                                                                                        CLowerIdentifier{'element'}
                                                                                                                        ROptional<CTypeArguments>
                                                                                                            RLiteral{')'}
                                                                                                CElseExpression
                                                                                                    RLiteral{'else'}
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'finished'}
                                                                                                        ROptional<CTypeArguments>
                                                                                    RLiteral{';'}
                                                                            RLiteral{'}'}
                                                        RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CMemberReference
                                                                CLowerIdentifier{'lastIndex'}
                                                                ROptional<CTypeArguments>
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CSelectionExpr
                                                                    CSelfReference{'outer'}
                                                                    CMemberSelectionOperator{'.'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'lastIndex'}
                                                                        ROptional<CTypeArguments>
                                                        RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CMemberReference
                                                                CLowerIdentifier{'size'}
                                                                ROptional<CTypeArguments>
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CSelectionExpr
                                                                    CSelfReference{'outer'}
                                                                    CMemberSelectionOperator{'.'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'size'}
                                                                        ROptional<CTypeArguments>
                                                        RLiteral{';'}
                                                    CUnclosedStatement
                                                        CSpecificationStatement
                                                            CCallExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'clone'}
                                                                    ROptional<CTypeArguments>
                                                                CPositionalArguments
                                                                    RLiteral{'('}
                                                                    ROptional<CSequencedArgumentList>
                                                                    RLiteral{')'}
                                                            CFunctionSpecifier
                                                                RLiteral{'=>'}
                                                                CCallExpr
                                                                    CSelectionExpr
                                                                        CCallExpr
                                                                            CSelectionExpr
                                                                                CSelfReference{'outer'}
                                                                                CMemberSelectionOperator{'.'}
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'clone'}
                                                                                    ROptional<CTypeArguments>
                                                                            CPositionalArguments
                                                                                RLiteral{'('}
                                                                                ROptional<CSequencedArgumentList>
                                                                                RLiteral{')'}
                                                                        CMemberSelectionOperator{'.'}
                                                                        CMemberReference
                                                                            CLowerIdentifier{'mapElements'}
                                                                            ROptional<CTypeArguments>
                                                                    CPositionalArguments
                                                                        RLiteral{'('}
                                                                        ROptional<CSequencedArgumentList>
                                                                            CSequencedArgumentList
                                                                                CMemberReference
                                                                                    CLowerIdentifier{'mapping'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{')'}
                                                        RLiteral{';'}
                                                RLiteral{'}'}
                                RLiteral{';'}
                    RLiteral{'}'}
    REof{'\r\n'}
