CXStart
    CCodeUnit
        CNamespace
            CAnnotations
                ROptional<ICStringLiteral>
                RStar<CAnnotation>
            RLiteral{'namespace'}
            CNamespacePath
                CIdentifier{'six'}
                CIdentifier{'core'}
            RLiteral{';'}
        CImports
        CTopDeclarations
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CVerbatimString{'\"\"\"\r\nCreate an array of the specified [[size]], populating every index with the given [[element]]. The specified `size` must\r\nbe no larger than [[runtime.maxArraySize]]. If `size <= 0`, the new array will have no elements.\r\n\"\"\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'see'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CValueLiteral
                                                CKwValue{'value'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'runtime'}
                                                        CIdentifier{'maxArraySize'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'tagged'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"Collections\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'throws'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CClassLiteral
                                                RLiteral{'class'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'AssertionError'}
                                            CLiteralString{'\"if `size > runtime.maxArraySize`\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'deprecated'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"Use [[Array.ofSize]]\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'Array'}
                        ROptional<CTypeArguments>
                            CTypeArguments
                                RLiteral{'<'}
                                ROptional<CTypeArgumentList>
                                    CTypeArgumentList
                                        CVariancedType
                                            ROptional<ICVariance>
                                            CTypePath
                                                CTypeReference
                                                    CUpperIdentifier{'Element'}
                                                    ROptional<CTypeArguments>
                                RLiteral{'>'}
                CLowerIdentifier{'arrayOfSize'}
                ROptional<CTypeParameters>
                    CTypeParameters
                        RLiteral{'<'}
                        CTypeParameterList
                            CTypeParameter
                                ROptional<ICVariance>
                                CUpperIdentifier{'Element'}
                                ROptional<CTypeDefault>
                        RLiteral{'>'}
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"The size of the resulting array. If the size is non-positive, an empty array will be created.\"'}
                                        RStar<CAnnotation>
                                    CTypedValueParameter
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Integer'}
                                                ROptional<CTypeArguments>
                                        CLowerIdentifier{'size'}
                                        ROptional<CValueSpecifier>
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"The element value with which to populate the array. All elements of the resulting array will have the same value.\"'}
                                        RStar<CAnnotation>
                                    CTypedValueParameter
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Element'}
                                                ROptional<CTypeArguments>
                                        CLowerIdentifier{'element'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CSelectionExpr
                                    CTypeReference
                                        CUpperIdentifier{'Array'}
                                        ROptional<CTypeArguments>
                                    CMemberSelectionOperator{'.'}
                                    CMemberReference
                                        CLowerIdentifier{'ofSize'}
                                        ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CMemberReference
                                                CLowerIdentifier{'size'}
                                                ROptional<CTypeArguments>
                                            CMemberReference
                                                CLowerIdentifier{'element'}
                                                ROptional<CTypeArguments>
                                    RLiteral{')'}
                    RLiteral{';'}
    REof{'\r\n'}
