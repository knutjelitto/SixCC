CXStart
    CCodeUnit
        CNamespace
            CAnnotations
                ROptional<ICStringLiteral>
                RStar<CAnnotation>
            RLiteral{'namespace'}
            CNamespacePath
                CIdentifier{'six'}
                CIdentifier{'core'}
            RLiteral{';'}
        CImports
        CTopDeclarations
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CVerbatimString{'\"\"\"\r\nA [[Sequence]] backed by an [[Array]]. \r\n\r\nSince [[Array]]s are mutable, this class is private to the language module, where we can be sure the `Array` is not\r\nmodified after the `ArraySequence` has been initialized.\r\n\"\"\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'by'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"Tom\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'serializable'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'tagged'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"Collections\"'}
                                            CLiteralString{'\"Sequences\"'}
                                    RLiteral{')'}
                RLiteral{'class'}
                CUpperIdentifier{'ArraySequence'}
                ROptional<CTypeParameters>
                    CTypeParameters
                        RLiteral{'<'}
                        CTypeParameterList
                            CTypeParameter
                                ROptional<ICVariance>
                                    CVariance{'out'}
                                CUpperIdentifier{'Element'}
                                ROptional<CTypeDefault>
                        RLiteral{'>'}
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameterReference
                                    CLowerIdentifier{'array'}
                                    ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                    CExtendedType
                        RLiteral{'extends'}
                        CClassInstantiation
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Object'}
                                    ROptional<CTypeArguments>
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                    RLiteral{')'}
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTupleType
                                RLiteral{'['}
                                ROptional<ICTypeTypeArguments>
                                    CDefaultedTypeList
                                        CVariadicTypeCore
                                            CTypePath
                                                CTypeReference
                                                    CUpperIdentifier{'Element'}
                                                    ROptional<CTypeArguments>
                                            CVariadicOperator{'+'}
                                RLiteral{']'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Array'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Element'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                            CLowerIdentifier{'array'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                RLiteral{';'}
                        CUnclosedStatement
                            CAssertionStatement
                                ROptional<ICAssertionMessage>
                                RLiteral{'assert'}
                                CConditions
                                    RLiteral{'('}
                                    ROptional<CConditionList>
                                        CConditionList
                                            CLogicalNegationExpr
                                                CNotOperator{'!'}
                                                CSelectionExpr
                                                    CMemberReference
                                                        CLowerIdentifier{'array'}
                                                        ROptional<CTypeArguments>
                                                    CMemberSelectionOperator{'.'}
                                                    CMemberReference
                                                        CLowerIdentifier{'empty'}
                                                        ROptional<CTypeArguments>
                                    RLiteral{')'}
                            RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CParametrizedMember
                                    CLowerIdentifier{'getFromFirst'}
                                    ROptional<CTypeParameters>
                                    RPlus<CParameters>
                                        CParameters
                                            RLiteral{'('}
                                            ROptional<CParameterList>
                                                CParameterList
                                                    CParameter
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                        CTypedValueParameter
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Integer'}
                                                                    ROptional<CTypeArguments>
                                                            CLowerIdentifier{'index'}
                                                            ROptional<CValueSpecifier>
                                            RLiteral{')'}
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CCallExpr
                                        CSelectionExpr
                                            CMemberReference
                                                CLowerIdentifier{'array'}
                                                ROptional<CTypeArguments>
                                            CMemberSelectionOperator{'.'}
                                            CMemberReference
                                                CLowerIdentifier{'getFromFirst'}
                                                ROptional<CTypeArguments>
                                        CPositionalArguments
                                            RLiteral{'('}
                                            ROptional<CSequencedArgumentList>
                                                CSequencedArgumentList
                                                    CMemberReference
                                                        CLowerIdentifier{'index'}
                                                        ROptional<CTypeArguments>
                                            RLiteral{')'}
                            RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CParametrizedMember
                                    CLowerIdentifier{'contains'}
                                    ROptional<CTypeParameters>
                                    RPlus<CParameters>
                                        CParameters
                                            RLiteral{'('}
                                            ROptional<CParameterList>
                                                CParameterList
                                                    CParameter
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                        CTypedValueParameter
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Object'}
                                                                    ROptional<CTypeArguments>
                                                            CLowerIdentifier{'element'}
                                                            ROptional<CValueSpecifier>
                                            RLiteral{')'}
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CCallExpr
                                        CSelectionExpr
                                            CMemberReference
                                                CLowerIdentifier{'array'}
                                                ROptional<CTypeArguments>
                                            CMemberSelectionOperator{'.'}
                                            CMemberReference
                                                CLowerIdentifier{'contains'}
                                                ROptional<CTypeArguments>
                                        CPositionalArguments
                                            RLiteral{'('}
                                            ROptional<CSequencedArgumentList>
                                                CSequencedArgumentList
                                                    CMemberReference
                                                        CLowerIdentifier{'element'}
                                                        ROptional<CTypeArguments>
                                            RLiteral{')'}
                            RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CMemberReference
                                    CLowerIdentifier{'size'}
                                    ROptional<CTypeArguments>
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CSelectionExpr
                                        CMemberReference
                                            CLowerIdentifier{'array'}
                                            ROptional<CTypeArguments>
                                        CMemberSelectionOperator{'.'}
                                        CMemberReference
                                            CLowerIdentifier{'size'}
                                            ROptional<CTypeArguments>
                            RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CCallExpr
                                    CMemberReference
                                        CLowerIdentifier{'iterator'}
                                        ROptional<CTypeArguments>
                                    CPositionalArguments
                                        RLiteral{'('}
                                        ROptional<CSequencedArgumentList>
                                        RLiteral{')'}
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CCallExpr
                                        CSelectionExpr
                                            CMemberReference
                                                CLowerIdentifier{'array'}
                                                ROptional<CTypeArguments>
                                            CMemberSelectionOperator{'.'}
                                            CMemberReference
                                                CLowerIdentifier{'iterator'}
                                                ROptional<CTypeArguments>
                                        CPositionalArguments
                                            RLiteral{'('}
                                            ROptional<CSequencedArgumentList>
                                            RLiteral{')'}
                            RLiteral{';'}
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Element'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'first'}
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CIfElseStatement
                                        RLiteral{'if'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CExistsCondition
                                                        ROptional<RLiteral>
                                                        RLiteral{'exists'}
                                                        CLetVariable
                                                            CVariable
                                                                ROptional<ICVariableType>
                                                                CLowerIdentifier{'first'}
                                                                RStar<CParameters>
                                                            CValueSpecifier
                                                                RLiteral{'='}
                                                                CSelectionExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'array'}
                                                                        ROptional<CTypeArguments>
                                                                    CMemberSelectionOperator{'.'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'first'}
                                                                        ROptional<CTypeArguments>
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CUnclosedStatement
                                                    CReturnStatement
                                                        RLiteral{'return'}
                                                        ROptional<ICExpression>
                                                            CMemberReference
                                                                CLowerIdentifier{'first'}
                                                                ROptional<CTypeArguments>
                                                    RLiteral{';'}
                                            RLiteral{'}'}
                                        RStar<CElseIf>
                                        ROptional<CElseBlock>
                                            CElseBlock
                                                RLiteral{'else'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CAssertionStatement
                                                                ROptional<ICAssertionMessage>
                                                                RLiteral{'assert'}
                                                                CConditions
                                                                    RLiteral{'('}
                                                                    ROptional<CConditionList>
                                                                        CConditionList
                                                                            CIsCondition
                                                                                ROptional<RLiteral>
                                                                                RLiteral{'is'}
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Element'}
                                                                                        ROptional<CTypeArguments>
                                                                                CIsConditionVariable
                                                                                    CLowerIdentifier{'null'}
                                                                                    ROptional<CValueSpecifier>
                                                                    RLiteral{')'}
                                                            RLiteral{';'}
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CMemberReference
                                                                        CLowerIdentifier{'null'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                RLiteral{'}'}
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Element'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'last'}
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CIfElseStatement
                                        RLiteral{'if'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CExistsCondition
                                                        ROptional<RLiteral>
                                                        RLiteral{'exists'}
                                                        CLetVariable
                                                            CVariable
                                                                ROptional<ICVariableType>
                                                                CLowerIdentifier{'last'}
                                                                RStar<CParameters>
                                                            CValueSpecifier
                                                                RLiteral{'='}
                                                                CSelectionExpr
                                                                    CMemberReference
                                                                        CLowerIdentifier{'array'}
                                                                        ROptional<CTypeArguments>
                                                                    CMemberSelectionOperator{'.'}
                                                                    CMemberReference
                                                                        CLowerIdentifier{'last'}
                                                                        ROptional<CTypeArguments>
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CUnclosedStatement
                                                    CReturnStatement
                                                        RLiteral{'return'}
                                                        ROptional<ICExpression>
                                                            CMemberReference
                                                                CLowerIdentifier{'last'}
                                                                ROptional<CTypeArguments>
                                                    RLiteral{';'}
                                            RLiteral{'}'}
                                        RStar<CElseIf>
                                        ROptional<CElseBlock>
                                            CElseBlock
                                                RLiteral{'else'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CAssertionStatement
                                                                ROptional<ICAssertionMessage>
                                                                RLiteral{'assert'}
                                                                CConditions
                                                                    RLiteral{'('}
                                                                    ROptional<CConditionList>
                                                                        CConditionList
                                                                            CIsCondition
                                                                                ROptional<RLiteral>
                                                                                RLiteral{'is'}
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Element'}
                                                                                        ROptional<CTypeArguments>
                                                                                CIsConditionVariable
                                                                                    CLowerIdentifier{'null'}
                                                                                    ROptional<CValueSpecifier>
                                                                    RLiteral{')'}
                                                            RLiteral{';'}
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CMemberReference
                                                                        CLowerIdentifier{'null'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                RLiteral{'}'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CCallExpr
                                    CMemberReference
                                        CLowerIdentifier{'tuple'}
                                        ROptional<CTypeArguments>
                                    CPositionalArguments
                                        RLiteral{'('}
                                        ROptional<CSequencedArgumentList>
                                        RLiteral{')'}
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CCallExpr
                                        CMemberReference
                                            CLowerIdentifier{'arrayToTuple'}
                                            ROptional<CTypeArguments>
                                        CPositionalArguments
                                            RLiteral{'('}
                                            ROptional<CSequencedArgumentList>
                                                CSequencedArgumentList
                                                    CMemberReference
                                                        CLowerIdentifier{'array'}
                                                        ROptional<CTypeArguments>
                                            RLiteral{')'}
                            RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CParametrizedMember
                                    CLowerIdentifier{'each'}
                                    ROptional<CTypeParameters>
                                    RPlus<CParameters>
                                        CParameters
                                            RLiteral{'('}
                                            ROptional<CParameterList>
                                                CParameterList
                                                    CParameter
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                        CVoidFunctionParameter
                                                            CKwVoid{'void'}
                                                            CLowerIdentifier{'step'}
                                                            ROptional<CTypeParameters>
                                                            RPlus<CParameters>
                                                                CParameters
                                                                    RLiteral{'('}
                                                                    ROptional<CParameterList>
                                                                        CParameterList
                                                                            CParameter
                                                                                CAnnotations
                                                                                    ROptional<ICStringLiteral>
                                                                                    RStar<CAnnotation>
                                                                                CTypedValueParameter
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Element'}
                                                                                            ROptional<CTypeArguments>
                                                                                    CLowerIdentifier{'element'}
                                                                                    ROptional<CValueSpecifier>
                                                                    RLiteral{')'}
                                                            ROptional<CFunctionSpecifier>
                                            RLiteral{')'}
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CCallExpr
                                        CSelectionExpr
                                            CMemberReference
                                                CLowerIdentifier{'array'}
                                                ROptional<CTypeArguments>
                                            CMemberSelectionOperator{'.'}
                                            CMemberReference
                                                CLowerIdentifier{'each'}
                                                ROptional<CTypeArguments>
                                        CPositionalArguments
                                            RLiteral{'('}
                                            ROptional<CSequencedArgumentList>
                                                CSequencedArgumentList
                                                    CMemberReference
                                                        CLowerIdentifier{'step'}
                                                        ROptional<CTypeArguments>
                                            RLiteral{')'}
                            RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CParametrizedMember
                                    CLowerIdentifier{'count'}
                                    ROptional<CTypeParameters>
                                    RPlus<CParameters>
                                        CParameters
                                            RLiteral{'('}
                                            ROptional<CParameterList>
                                                CParameterList
                                                    CParameter
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                        CTypedFunctionParameter
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Boolean'}
                                                                    ROptional<CTypeArguments>
                                                            CLowerIdentifier{'selecting'}
                                                            ROptional<CTypeParameters>
                                                            RPlus<CParameters>
                                                                CParameters
                                                                    RLiteral{'('}
                                                                    ROptional<CParameterList>
                                                                        CParameterList
                                                                            CParameter
                                                                                CAnnotations
                                                                                    ROptional<ICStringLiteral>
                                                                                    RStar<CAnnotation>
                                                                                CTypedValueParameter
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Element'}
                                                                                            ROptional<CTypeArguments>
                                                                                    CLowerIdentifier{'element'}
                                                                                    ROptional<CValueSpecifier>
                                                                    RLiteral{')'}
                                                            ROptional<CFunctionSpecifier>
                                            RLiteral{')'}
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CCallExpr
                                        CSelectionExpr
                                            CMemberReference
                                                CLowerIdentifier{'array'}
                                                ROptional<CTypeArguments>
                                            CMemberSelectionOperator{'.'}
                                            CMemberReference
                                                CLowerIdentifier{'count'}
                                                ROptional<CTypeArguments>
                                        CPositionalArguments
                                            RLiteral{'('}
                                            ROptional<CSequencedArgumentList>
                                                CSequencedArgumentList
                                                    CMemberReference
                                                        CLowerIdentifier{'selecting'}
                                                        ROptional<CTypeArguments>
                                            RLiteral{')'}
                            RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CParametrizedMember
                                    CLowerIdentifier{'every'}
                                    ROptional<CTypeParameters>
                                    RPlus<CParameters>
                                        CParameters
                                            RLiteral{'('}
                                            ROptional<CParameterList>
                                                CParameterList
                                                    CParameter
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                        CTypedFunctionParameter
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Boolean'}
                                                                    ROptional<CTypeArguments>
                                                            CLowerIdentifier{'selecting'}
                                                            ROptional<CTypeParameters>
                                                            RPlus<CParameters>
                                                                CParameters
                                                                    RLiteral{'('}
                                                                    ROptional<CParameterList>
                                                                        CParameterList
                                                                            CParameter
                                                                                CAnnotations
                                                                                    ROptional<ICStringLiteral>
                                                                                    RStar<CAnnotation>
                                                                                CTypedValueParameter
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Element'}
                                                                                            ROptional<CTypeArguments>
                                                                                    CLowerIdentifier{'element'}
                                                                                    ROptional<CValueSpecifier>
                                                                    RLiteral{')'}
                                                            ROptional<CFunctionSpecifier>
                                            RLiteral{')'}
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CCallExpr
                                        CSelectionExpr
                                            CMemberReference
                                                CLowerIdentifier{'array'}
                                                ROptional<CTypeArguments>
                                            CMemberSelectionOperator{'.'}
                                            CMemberReference
                                                CLowerIdentifier{'every'}
                                                ROptional<CTypeArguments>
                                        CPositionalArguments
                                            RLiteral{'('}
                                            ROptional<CSequencedArgumentList>
                                                CSequencedArgumentList
                                                    CMemberReference
                                                        CLowerIdentifier{'selecting'}
                                                        ROptional<CTypeArguments>
                                            RLiteral{')'}
                            RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CParametrizedMember
                                    CLowerIdentifier{'any'}
                                    ROptional<CTypeParameters>
                                    RPlus<CParameters>
                                        CParameters
                                            RLiteral{'('}
                                            ROptional<CParameterList>
                                                CParameterList
                                                    CParameter
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                        CTypedFunctionParameter
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Boolean'}
                                                                    ROptional<CTypeArguments>
                                                            CLowerIdentifier{'selecting'}
                                                            ROptional<CTypeParameters>
                                                            RPlus<CParameters>
                                                                CParameters
                                                                    RLiteral{'('}
                                                                    ROptional<CParameterList>
                                                                        CParameterList
                                                                            CParameter
                                                                                CAnnotations
                                                                                    ROptional<ICStringLiteral>
                                                                                    RStar<CAnnotation>
                                                                                CTypedValueParameter
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Element'}
                                                                                            ROptional<CTypeArguments>
                                                                                    CLowerIdentifier{'element'}
                                                                                    ROptional<CValueSpecifier>
                                                                    RLiteral{')'}
                                                            ROptional<CFunctionSpecifier>
                                            RLiteral{')'}
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CCallExpr
                                        CSelectionExpr
                                            CMemberReference
                                                CLowerIdentifier{'array'}
                                                ROptional<CTypeArguments>
                                            CMemberSelectionOperator{'.'}
                                            CMemberReference
                                                CLowerIdentifier{'any'}
                                                ROptional<CTypeArguments>
                                        CPositionalArguments
                                            RLiteral{'('}
                                            ROptional<CSequencedArgumentList>
                                                CSequencedArgumentList
                                                    CMemberReference
                                                        CLowerIdentifier{'selecting'}
                                                        ROptional<CTypeArguments>
                                            RLiteral{')'}
                            RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CParametrizedMember
                                    CLowerIdentifier{'find'}
                                    ROptional<CTypeParameters>
                                    RPlus<CParameters>
                                        CParameters
                                            RLiteral{'('}
                                            ROptional<CParameterList>
                                                CParameterList
                                                    CParameter
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                        CTypedFunctionParameter
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Boolean'}
                                                                    ROptional<CTypeArguments>
                                                            CLowerIdentifier{'selecting'}
                                                            ROptional<CTypeParameters>
                                                            RPlus<CParameters>
                                                                CParameters
                                                                    RLiteral{'('}
                                                                    ROptional<CParameterList>
                                                                        CParameterList
                                                                            CParameter
                                                                                CAnnotations
                                                                                    ROptional<ICStringLiteral>
                                                                                    RStar<CAnnotation>
                                                                                CTypedValueParameter
                                                                                    CIntersectionTypeCore
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Element'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CIntersectionOperator{'&'}
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Object'}
                                                                                                ROptional<CTypeArguments>
                                                                                    CLowerIdentifier{'element'}
                                                                                    ROptional<CValueSpecifier>
                                                                    RLiteral{')'}
                                                            ROptional<CFunctionSpecifier>
                                            RLiteral{')'}
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CCallExpr
                                        CSelectionExpr
                                            CMemberReference
                                                CLowerIdentifier{'array'}
                                                ROptional<CTypeArguments>
                                            CMemberSelectionOperator{'.'}
                                            CMemberReference
                                                CLowerIdentifier{'find'}
                                                ROptional<CTypeArguments>
                                        CPositionalArguments
                                            RLiteral{'('}
                                            ROptional<CSequencedArgumentList>
                                                CSequencedArgumentList
                                                    CMemberReference
                                                        CLowerIdentifier{'selecting'}
                                                        ROptional<CTypeArguments>
                                            RLiteral{')'}
                            RLiteral{';'}
                        CUnclosedStatement
                            CSpecificationStatement
                                CParametrizedMember
                                    CLowerIdentifier{'findLast'}
                                    ROptional<CTypeParameters>
                                    RPlus<CParameters>
                                        CParameters
                                            RLiteral{'('}
                                            ROptional<CParameterList>
                                                CParameterList
                                                    CParameter
                                                        CAnnotations
                                                            ROptional<ICStringLiteral>
                                                            RStar<CAnnotation>
                                                        CTypedFunctionParameter
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Boolean'}
                                                                    ROptional<CTypeArguments>
                                                            CLowerIdentifier{'selecting'}
                                                            ROptional<CTypeParameters>
                                                            RPlus<CParameters>
                                                                CParameters
                                                                    RLiteral{'('}
                                                                    ROptional<CParameterList>
                                                                        CParameterList
                                                                            CParameter
                                                                                CAnnotations
                                                                                    ROptional<ICStringLiteral>
                                                                                    RStar<CAnnotation>
                                                                                CTypedValueParameter
                                                                                    CIntersectionTypeCore
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Element'}
                                                                                                ROptional<CTypeArguments>
                                                                                        CIntersectionOperator{'&'}
                                                                                        CTypePath
                                                                                            CTypeReference
                                                                                                CUpperIdentifier{'Object'}
                                                                                                ROptional<CTypeArguments>
                                                                                    CLowerIdentifier{'element'}
                                                                                    ROptional<CValueSpecifier>
                                                                    RLiteral{')'}
                                                            ROptional<CFunctionSpecifier>
                                            RLiteral{')'}
                                CFunctionSpecifier
                                    RLiteral{'=>'}
                                    CCallExpr
                                        CSelectionExpr
                                            CMemberReference
                                                CLowerIdentifier{'array'}
                                                ROptional<CTypeArguments>
                                            CMemberSelectionOperator{'.'}
                                            CMemberReference
                                                CLowerIdentifier{'findLast'}
                                                ROptional<CTypeArguments>
                                        CPositionalArguments
                                            RLiteral{'('}
                                            ROptional<CSequencedArgumentList>
                                                CSequencedArgumentList
                                                    CMemberReference
                                                        CLowerIdentifier{'selecting'}
                                                        ROptional<CTypeArguments>
                                            RLiteral{')'}
                            RLiteral{';'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                            CUnionTypeCore
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Result'}
                                        ROptional<CTypeArguments>
                                RLiteral{'|'}
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Element'}
                                        ROptional<CTypeArguments>
                            CLowerIdentifier{'reduce'}
                            ROptional<CTypeParameters>
                                CTypeParameters
                                    RLiteral{'<'}
                                    CTypeParameterList
                                        CTypeParameter
                                            ROptional<ICVariance>
                                            CUpperIdentifier{'Result'}
                                            ROptional<CTypeDefault>
                                    RLiteral{'>'}
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedFunctionParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Result'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'accumulating'}
                                                    ROptional<CTypeParameters>
                                                    RPlus<CParameters>
                                                        CParameters
                                                            RLiteral{'('}
                                                            ROptional<CParameterList>
                                                                CParameterList
                                                                    CParameter
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CTypedValueParameter
                                                                            CUnionTypeCore
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Result'}
                                                                                        ROptional<CTypeArguments>
                                                                                RLiteral{'|'}
                                                                                CTypePath
                                                                                    CTypeReference
                                                                                        CUpperIdentifier{'Element'}
                                                                                        ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'partial'}
                                                                            ROptional<CValueSpecifier>
                                                                    CParameter
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CTypedValueParameter
                                                                            CTypePath
                                                                                CTypeReference
                                                                                    CUpperIdentifier{'Element'}
                                                                                    ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'element'}
                                                                            ROptional<CValueSpecifier>
                                                            RLiteral{')'}
                                                    ROptional<CFunctionSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CInferredAttributeDeclaration
                                        CAnnotations
                                            ROptional<ICStringLiteral>
                                            RStar<CAnnotation>
                                        CKwValue{'value'}
                                        CLowerIdentifier{'result'}
                                        COptionalAnySpecifier
                                            ROptional<ICAnySpecifier>
                                                CValueSpecifier
                                                    RLiteral{'='}
                                                    CCallExpr
                                                        CSelectionExpr
                                                            CMemberReference
                                                                CLowerIdentifier{'array'}
                                                                ROptional<CTypeArguments>
                                                            CMemberSelectionOperator{'.'}
                                                            CMemberReference
                                                                CLowerIdentifier{'reduce'}
                                                                ROptional<CTypeArguments>
                                                        CPositionalArguments
                                                            RLiteral{'('}
                                                            ROptional<CSequencedArgumentList>
                                                                CSequencedArgumentList
                                                                    CMemberReference
                                                                        CLowerIdentifier{'accumulating'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{')'}
                                            RLiteral{';'}
                                    CIfElseStatement
                                        RLiteral{'if'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CExistsCondition
                                                        ROptional<RLiteral>
                                                        RLiteral{'exists'}
                                                        CMemberReference
                                                            CLowerIdentifier{'result'}
                                                            ROptional<CTypeArguments>
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CUnclosedStatement
                                                    CReturnStatement
                                                        RLiteral{'return'}
                                                        ROptional<ICExpression>
                                                            CMemberReference
                                                                CLowerIdentifier{'result'}
                                                                ROptional<CTypeArguments>
                                                    RLiteral{';'}
                                            RLiteral{'}'}
                                        RStar<CElseIf>
                                        ROptional<CElseBlock>
                                            CElseBlock
                                                RLiteral{'else'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CAssertionStatement
                                                                ROptional<ICAssertionMessage>
                                                                RLiteral{'assert'}
                                                                CConditions
                                                                    RLiteral{'('}
                                                                    ROptional<CConditionList>
                                                                        CConditionList
                                                                            CIsCondition
                                                                                ROptional<RLiteral>
                                                                                RLiteral{'is'}
                                                                                CUnionTypeCore
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Result'}
                                                                                            ROptional<CTypeArguments>
                                                                                    RLiteral{'|'}
                                                                                    CTypePath
                                                                                        CTypeReference
                                                                                            CUpperIdentifier{'Element'}
                                                                                            ROptional<CTypeArguments>
                                                                                CIsConditionVariable
                                                                                    CLowerIdentifier{'result'}
                                                                                    ROptional<CValueSpecifier>
                                                                    RLiteral{')'}
                                                            RLiteral{';'}
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CMemberReference
                                                                        CLowerIdentifier{'result'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                            CTupleType
                                RLiteral{'['}
                                ROptional<ICTypeTypeArguments>
                                    CDefaultedTypeList
                                        CVariadicTypeCore
                                            CTypePath
                                                CTypeReference
                                                    CUpperIdentifier{'Result'}
                                                    ROptional<CTypeArguments>
                                            CVariadicOperator{'+'}
                                RLiteral{']'}
                            CLowerIdentifier{'collect'}
                            ROptional<CTypeParameters>
                                CTypeParameters
                                    RLiteral{'<'}
                                    CTypeParameterList
                                        CTypeParameter
                                            ROptional<ICVariance>
                                            CUpperIdentifier{'Result'}
                                            ROptional<CTypeDefault>
                                    RLiteral{'>'}
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedFunctionParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Result'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'collecting'}
                                                    ROptional<CTypeParameters>
                                                    RPlus<CParameters>
                                                        CParameters
                                                            RLiteral{'('}
                                                            ROptional<CParameterList>
                                                                CParameterList
                                                                    CParameter
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CTypedValueParameter
                                                                            CTypePath
                                                                                CTypeReference
                                                                                    CUpperIdentifier{'Element'}
                                                                                    ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'element'}
                                                                            ROptional<CValueSpecifier>
                                                            RLiteral{')'}
                                                    ROptional<CFunctionSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CUnclosedStatement
                                        CAssertionStatement
                                            ROptional<ICAssertionMessage>
                                            RLiteral{'assert'}
                                            CConditions
                                                RLiteral{'('}
                                                ROptional<CConditionList>
                                                    CConditionList
                                                        CNonemptyCondition
                                                            ROptional<RLiteral>
                                                            RLiteral{'nonempty'}
                                                            CLetVariable
                                                                CVariable
                                                                    ROptional<ICVariableType>
                                                                    CLowerIdentifier{'sequence'}
                                                                    RStar<CParameters>
                                                                CValueSpecifier
                                                                    RLiteral{'='}
                                                                    CCallExpr
                                                                        CSelectionExpr
                                                                            CMemberReference
                                                                                CLowerIdentifier{'array'}
                                                                                ROptional<CTypeArguments>
                                                                            CMemberSelectionOperator{'.'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'collect'}
                                                                                ROptional<CTypeArguments>
                                                                        CPositionalArguments
                                                                            RLiteral{'('}
                                                                            ROptional<CSequencedArgumentList>
                                                                                CSequencedArgumentList
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'collecting'}
                                                                                        ROptional<CTypeArguments>
                                                                            RLiteral{')'}
                                                RLiteral{')'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CReturnStatement
                                            RLiteral{'return'}
                                            ROptional<ICExpression>
                                                CMemberReference
                                                    CLowerIdentifier{'sequence'}
                                                    ROptional<CTypeArguments>
                                        RLiteral{';'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                            CTupleType
                                RLiteral{'['}
                                ROptional<ICTypeTypeArguments>
                                    CDefaultedTypeList
                                        CVariadicTypeCore
                                            CTypePath
                                                CTypeReference
                                                    CUpperIdentifier{'Element'}
                                                    ROptional<CTypeArguments>
                                            CVariadicOperator{'+'}
                                RLiteral{']'}
                            CLowerIdentifier{'sort'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedFunctionParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Comparison'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'comparing'}
                                                    ROptional<CTypeParameters>
                                                    RPlus<CParameters>
                                                        CParameters
                                                            RLiteral{'('}
                                                            ROptional<CParameterList>
                                                                CParameterList
                                                                    CParameter
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CTypedValueParameter
                                                                            CTypePath
                                                                                CTypeReference
                                                                                    CUpperIdentifier{'Element'}
                                                                                    ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'x'}
                                                                            ROptional<CValueSpecifier>
                                                                    CParameter
                                                                        CAnnotations
                                                                            ROptional<ICStringLiteral>
                                                                            RStar<CAnnotation>
                                                                        CTypedValueParameter
                                                                            CTypePath
                                                                                CTypeReference
                                                                                    CUpperIdentifier{'Element'}
                                                                                    ROptional<CTypeArguments>
                                                                            CLowerIdentifier{'y'}
                                                                            ROptional<CValueSpecifier>
                                                            RLiteral{')'}
                                                    ROptional<CFunctionSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CUnclosedStatement
                                        CAssertionStatement
                                            ROptional<ICAssertionMessage>
                                            RLiteral{'assert'}
                                            CConditions
                                                RLiteral{'('}
                                                ROptional<CConditionList>
                                                    CConditionList
                                                        CNonemptyCondition
                                                            ROptional<RLiteral>
                                                            RLiteral{'nonempty'}
                                                            CLetVariable
                                                                CVariable
                                                                    ROptional<ICVariableType>
                                                                    CLowerIdentifier{'sequence'}
                                                                    RStar<CParameters>
                                                                CValueSpecifier
                                                                    RLiteral{'='}
                                                                    CCallExpr
                                                                        CSelectionExpr
                                                                            CMemberReference
                                                                                CLowerIdentifier{'array'}
                                                                                ROptional<CTypeArguments>
                                                                            CMemberSelectionOperator{'.'}
                                                                            CMemberReference
                                                                                CLowerIdentifier{'sort'}
                                                                                ROptional<CTypeArguments>
                                                                        CPositionalArguments
                                                                            RLiteral{'('}
                                                                            ROptional<CSequencedArgumentList>
                                                                                CSequencedArgumentList
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'comparing'}
                                                                                        ROptional<CTypeArguments>
                                                                            RLiteral{')'}
                                                RLiteral{')'}
                                        RLiteral{';'}
                                    CUnclosedStatement
                                        CReturnStatement
                                            RLiteral{'return'}
                                            ROptional<ICExpression>
                                                CMemberReference
                                                    CLowerIdentifier{'sequence'}
                                                    ROptional<CTypeArguments>
                                        RLiteral{';'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                            CArrayType
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Element'}
                                        ROptional<CTypeArguments>
                                RLiteral{'['}
                                ROptional<CLiteralNatural>
                                RLiteral{']'}
                            CLowerIdentifier{'measure'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'from'}
                                                    ROptional<CValueSpecifier>
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'length'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CIfElseStatement
                                        RLiteral{'if'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CDisjunctionExpr
                                                        CDisjunctionExpr
                                                            CLargerExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'from'}
                                                                    ROptional<CTypeArguments>
                                                                CLargerOperator{'>'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'lastIndex'}
                                                                    ROptional<CTypeArguments>
                                                            CDisjunctionOperator{'||'}
                                                            CSmallerExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'length'}
                                                                    ROptional<CTypeArguments>
                                                                CSmallerOperator{'<='}
                                                                CLiteralNatural{'0'}
                                                        CDisjunctionOperator{'||'}
                                                        CSmallerExpr
                                                            CAdditiveExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'from'}
                                                                    ROptional<CTypeArguments>
                                                                CAdditiveOperator{'+'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'length'}
                                                                    ROptional<CTypeArguments>
                                                            CSmallerOperator{'<='}
                                                            CLiteralNatural{'0'}
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CUnclosedStatement
                                                    CReturnStatement
                                                        RLiteral{'return'}
                                                        ROptional<ICExpression>
                                                            CTupleExpr
                                                                RLiteral{'['}
                                                                ROptional<CSequencedArgumentList>
                                                                RLiteral{']'}
                                                    RLiteral{';'}
                                            RLiteral{'}'}
                                        RStar<CElseIf>
                                        ROptional<CElseBlock>
                                            CElseBlock
                                                RLiteral{'else'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CCallExpr
                                                                        CTypeReference
                                                                            CUpperIdentifier{'ArraySequence'}
                                                                            ROptional<CTypeArguments>
                                                                        CPositionalArguments
                                                                            RLiteral{'('}
                                                                            ROptional<CSequencedArgumentList>
                                                                                CSequencedArgumentList
                                                                                    CIndexedExpr
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'array'}
                                                                                            ROptional<CTypeArguments>
                                                                                        RLiteral{'['}
                                                                                        CMeasured
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'from'}
                                                                                                ROptional<CTypeArguments>
                                                                                            RLiteral{':'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'length'}
                                                                                                ROptional<CTypeArguments>
                                                                                        RLiteral{']'}
                                                                            RLiteral{')'}
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                            CArrayType
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'Element'}
                                        ROptional<CTypeArguments>
                                RLiteral{'['}
                                ROptional<CLiteralNatural>
                                RLiteral{']'}
                            CLowerIdentifier{'span'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'from'}
                                                    ROptional<CValueSpecifier>
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'to'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CIfElseStatement
                                        RLiteral{'if'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CSmallerExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'from'}
                                                            ROptional<CTypeArguments>
                                                        CSmallerOperator{'<='}
                                                        CMemberReference
                                                            CLowerIdentifier{'to'}
                                                            ROptional<CTypeArguments>
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CUnclosedStatement
                                                    CReturnStatement
                                                        RLiteral{'return'}
                                                        ROptional<ICExpression>
                                                            CIfExpr
                                                                RLiteral{'if'}
                                                                CConditions
                                                                    RLiteral{'('}
                                                                    ROptional<CConditionList>
                                                                        CConditionList
                                                                            CDisjunctionExpr
                                                                                CSmallerExpr
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'to'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CSmallerOperator{'<'}
                                                                                    CLiteralNatural{'0'}
                                                                                CDisjunctionOperator{'||'}
                                                                                CLargerExpr
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'from'}
                                                                                        ROptional<CTypeArguments>
                                                                                    CLargerOperator{'>'}
                                                                                    CMemberReference
                                                                                        CLowerIdentifier{'lastIndex'}
                                                                                        ROptional<CTypeArguments>
                                                                    RLiteral{')'}
                                                                CThenExpression
                                                                    RLiteral{'then'}
                                                                    CTupleExpr
                                                                        RLiteral{'['}
                                                                        ROptional<CSequencedArgumentList>
                                                                        RLiteral{']'}
                                                                CElseExpression
                                                                    RLiteral{'else'}
                                                                    CCallExpr
                                                                        CTypeReference
                                                                            CUpperIdentifier{'ArraySequence'}
                                                                            ROptional<CTypeArguments>
                                                                        CPositionalArguments
                                                                            RLiteral{'('}
                                                                            ROptional<CSequencedArgumentList>
                                                                                CSequencedArgumentList
                                                                                    CIndexedExpr
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'array'}
                                                                                            ROptional<CTypeArguments>
                                                                                        RLiteral{'['}
                                                                                        CSpanned
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'from'}
                                                                                                ROptional<CTypeArguments>
                                                                                            RLiteral{'..'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'to'}
                                                                                                ROptional<CTypeArguments>
                                                                                        RLiteral{']'}
                                                                            RLiteral{')'}
                                                    RLiteral{';'}
                                            RLiteral{'}'}
                                        RStar<CElseIf>
                                        ROptional<CElseBlock>
                                            CElseBlock
                                                RLiteral{'else'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CIfExpr
                                                                        RLiteral{'if'}
                                                                        CConditions
                                                                            RLiteral{'('}
                                                                            ROptional<CConditionList>
                                                                                CConditionList
                                                                                    CDisjunctionExpr
                                                                                        CSmallerExpr
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'from'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CSmallerOperator{'<'}
                                                                                            CLiteralNatural{'0'}
                                                                                        CDisjunctionOperator{'||'}
                                                                                        CLargerExpr
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'to'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CLargerOperator{'>'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'lastIndex'}
                                                                                                ROptional<CTypeArguments>
                                                                            RLiteral{')'}
                                                                        CThenExpression
                                                                            RLiteral{'then'}
                                                                            CTupleExpr
                                                                                RLiteral{'['}
                                                                                ROptional<CSequencedArgumentList>
                                                                                RLiteral{']'}
                                                                        CElseExpression
                                                                            RLiteral{'else'}
                                                                            CCallExpr
                                                                                CTypeReference
                                                                                    CUpperIdentifier{'ArraySequence'}
                                                                                    ROptional<CTypeArguments>
                                                                                CPositionalArguments
                                                                                    RLiteral{'('}
                                                                                    ROptional<CSequencedArgumentList>
                                                                                        CSequencedArgumentList
                                                                                            CIndexedExpr
                                                                                                CMemberReference
                                                                                                    CLowerIdentifier{'array'}
                                                                                                    ROptional<CTypeArguments>
                                                                                                RLiteral{'['}
                                                                                                CSpanned
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'from'}
                                                                                                        ROptional<CTypeArguments>
                                                                                                    RLiteral{'..'}
                                                                                                    CMemberReference
                                                                                                        CLowerIdentifier{'to'}
                                                                                                        ROptional<CTypeArguments>
                                                                                                RLiteral{']'}
                                                                                    RLiteral{')'}
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                            CUnionTypeCore
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'ArraySequence'}
                                        ROptional<CTypeArguments>
                                            CTypeArguments
                                                RLiteral{'<'}
                                                ROptional<CTypeArgumentList>
                                                    CTypeArgumentList
                                                        CVariancedType
                                                            ROptional<ICVariance>
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Element'}
                                                                    ROptional<CTypeArguments>
                                                RLiteral{'>'}
                                RLiteral{'|'}
                                CTupleType
                                    RLiteral{'['}
                                    ROptional<ICTypeTypeArguments>
                                    RLiteral{']'}
                            CLowerIdentifier{'spanFrom'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'from'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CIfElseStatement
                                        RLiteral{'if'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CSmallerExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'from'}
                                                            ROptional<CTypeArguments>
                                                        CSmallerOperator{'<='}
                                                        CLiteralNatural{'0'}
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CUnclosedStatement
                                                    CReturnStatement
                                                        RLiteral{'return'}
                                                        ROptional<ICExpression>
                                                            CSelfReference{'this'}
                                                    RLiteral{';'}
                                            RLiteral{'}'}
                                        RStar<CElseIf>
                                            CElseIf
                                                RLiteral{'else'}
                                                RLiteral{'if'}
                                                CConditions
                                                    RLiteral{'('}
                                                    ROptional<CConditionList>
                                                        CConditionList
                                                            CSmallerExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'from'}
                                                                    ROptional<CTypeArguments>
                                                                CSmallerOperator{'<'}
                                                                CMemberReference
                                                                    CLowerIdentifier{'size'}
                                                                    ROptional<CTypeArguments>
                                                    RLiteral{')'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CCallExpr
                                                                        CTypeReference
                                                                            CUpperIdentifier{'ArraySequence'}
                                                                            ROptional<CTypeArguments>
                                                                        CPositionalArguments
                                                                            RLiteral{'('}
                                                                            ROptional<CSequencedArgumentList>
                                                                                CSequencedArgumentList
                                                                                    CIndexedExpr
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'array'}
                                                                                            ROptional<CTypeArguments>
                                                                                        RLiteral{'['}
                                                                                        CUpperSpanned
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'from'}
                                                                                                ROptional<CTypeArguments>
                                                                                            CImportWildcard{'...'}
                                                                                        RLiteral{']'}
                                                                            RLiteral{')'}
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                        ROptional<CElseBlock>
                                            CElseBlock
                                                RLiteral{'else'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CTupleExpr
                                                                        RLiteral{'['}
                                                                        ROptional<CSequencedArgumentList>
                                                                        RLiteral{']'}
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                RLiteral{'}'}
                        CTypedMethodDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                                    CAnnotation
                                        CLowerIdentifier{'actual'}
                                        ROptional<ICArguments>
                            CUnionTypeCore
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'ArraySequence'}
                                        ROptional<CTypeArguments>
                                            CTypeArguments
                                                RLiteral{'<'}
                                                ROptional<CTypeArgumentList>
                                                    CTypeArgumentList
                                                        CVariancedType
                                                            ROptional<ICVariance>
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Element'}
                                                                    ROptional<CTypeArguments>
                                                RLiteral{'>'}
                                RLiteral{'|'}
                                CTupleType
                                    RLiteral{'['}
                                    ROptional<ICTypeTypeArguments>
                                    RLiteral{']'}
                            CLowerIdentifier{'spanTo'}
                            ROptional<CTypeParameters>
                            RPlus<CParameters>
                                CParameters
                                    RLiteral{'('}
                                    ROptional<CParameterList>
                                        CParameterList
                                            CParameter
                                                CAnnotations
                                                    ROptional<ICStringLiteral>
                                                    RStar<CAnnotation>
                                                CTypedValueParameter
                                                    CTypePath
                                                        CTypeReference
                                                            CUpperIdentifier{'Integer'}
                                                            ROptional<CTypeArguments>
                                                    CLowerIdentifier{'to'}
                                                    ROptional<CValueSpecifier>
                                    RLiteral{')'}
                            ROptional<CTypeConstraints>
                            CBlock
                                RLiteral{'{'}
                                CImports
                                CStatements
                                    CIfElseStatement
                                        RLiteral{'if'}
                                        CConditions
                                            RLiteral{'('}
                                            ROptional<CConditionList>
                                                CConditionList
                                                    CLargerExpr
                                                        CMemberReference
                                                            CLowerIdentifier{'to'}
                                                            ROptional<CTypeArguments>
                                                        CLargerOperator{'>='}
                                                        CMemberReference
                                                            CLowerIdentifier{'lastIndex'}
                                                            ROptional<CTypeArguments>
                                            RLiteral{')'}
                                        CBlock
                                            RLiteral{'{'}
                                            CImports
                                            CStatements
                                                CUnclosedStatement
                                                    CReturnStatement
                                                        RLiteral{'return'}
                                                        ROptional<ICExpression>
                                                            CSelfReference{'this'}
                                                    RLiteral{';'}
                                            RLiteral{'}'}
                                        RStar<CElseIf>
                                            CElseIf
                                                RLiteral{'else'}
                                                RLiteral{'if'}
                                                CConditions
                                                    RLiteral{'('}
                                                    ROptional<CConditionList>
                                                        CConditionList
                                                            CLargerExpr
                                                                CMemberReference
                                                                    CLowerIdentifier{'to'}
                                                                    ROptional<CTypeArguments>
                                                                CLargerOperator{'>='}
                                                                CLiteralNatural{'0'}
                                                    RLiteral{')'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CCallExpr
                                                                        CTypeReference
                                                                            CUpperIdentifier{'ArraySequence'}
                                                                            ROptional<CTypeArguments>
                                                                        CPositionalArguments
                                                                            RLiteral{'('}
                                                                            ROptional<CSequencedArgumentList>
                                                                                CSequencedArgumentList
                                                                                    CIndexedExpr
                                                                                        CMemberReference
                                                                                            CLowerIdentifier{'array'}
                                                                                            ROptional<CTypeArguments>
                                                                                        RLiteral{'['}
                                                                                        CLowerSpanned
                                                                                            CImportWildcard{'...'}
                                                                                            CMemberReference
                                                                                                CLowerIdentifier{'to'}
                                                                                                ROptional<CTypeArguments>
                                                                                        RLiteral{']'}
                                                                            RLiteral{')'}
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                        ROptional<CElseBlock>
                                            CElseBlock
                                                RLiteral{'else'}
                                                CBlock
                                                    RLiteral{'{'}
                                                    CImports
                                                    CStatements
                                                        CUnclosedStatement
                                                            CReturnStatement
                                                                RLiteral{'return'}
                                                                ROptional<ICExpression>
                                                                    CTupleExpr
                                                                        RLiteral{'['}
                                                                        ROptional<CSequencedArgumentList>
                                                                        RLiteral{']'}
                                                            RLiteral{';'}
                                                    RLiteral{'}'}
                                RLiteral{'}'}
                    RLiteral{'}'}
    REof{'\r\n'}
