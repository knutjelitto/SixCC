CXStart
    CCodeUnit
        CNamespace
            CAnnotations
                ROptional<ICStringLiteral>
                RStar<CAnnotation>
            RLiteral{'namespace'}
            CNamespacePath
                CIdentifier{'six'}
                CIdentifier{'core'}
            RLiteral{';'}
        CImports
        CTopDeclarations
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CVerbatimString{'\"\"\"\r\nThe type of the [[null]] value. Any union type of form `Null|T` is considered an _optional_ type, whose values include\r\n`null`. Any type of this form may be written as `T?` for convenience.\r\n\r\nThe `if (exists ... )` construct, or, alternatively, `assert (exists ...)`, may be used to narrow an optional type to a\r\n_definite_ type, that is, a subtype of [[Object]]:\r\n\r\n    String? firstArg = process.arguments.first;\r\n    if (exists firstArg)\r\n    {\r\n        print(\"hello \" + firstArg);\r\n    }\r\n\r\nThe `else` operator evaluates its second operand if and only if its first operand is `null`:\r\n\r\n    String name = process.arguments.first else \"world\";\r\n\r\nThe `then` operator evaluates its second operand when its first operand evaluates to `true`, and produces `null`\r\notherwise:\r\n\r\n    Float? diff = x >= y then x - y;\r\n\r\nThe `?.` operator may be used to evaluate an attribute or invoke a method of an optional type, evaluating to `null`\r\nwhen the receiver is missing:\r\n\r\n    value [firstName, lastName] =\r\n        let (fullName = process.arguments.first?.trimmed,\r\n            bits = fullName?.split()?.sequence() else []) \r\n                [bits[0], bits[1]];\r\n    assert (exists firstName, exists lastName);\r\n\r\nNo equivalence relation is defined for `Null`. In particular, neither `null == null` nor `null === null` are considered\r\nmeaningful. Therefore, `Null` is neither [[Identifiable]], nor does it define [[value equality|Object.equals]].\r\n\"\"\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'see'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CValueLiteral
                                                CKwValue{'value'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'null'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'by'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"Gavin\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'tagged'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"Basic types\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'abstract'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'Null'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                    CCaseTypes
                        RLiteral{'of'}
                        CCaseTypeList
                            CQualifiedCaseType
                                ROptional<CPackageQualifier>
                                CLowerIdentifier{'null'}
                ROptional<CExtendedType>
                    CExtendedType
                        RLiteral{'extends'}
                        CClassInstantiation
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Anything'}
                                    ROptional<CTypeArguments>
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                    RLiteral{')'}
                ROptional<CSatisfiedTypes>
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CObjectDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The null value.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'see'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CClassLiteral
                                                RLiteral{'class'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'Null'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'by'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"Gavin\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'tagged'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"Basic types\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                RLiteral{'object'}
                CLowerIdentifier{'null'}
                ROptional<CExtendedType>
                    CExtendedType
                        RLiteral{'extends'}
                        CClassInstantiation
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Null'}
                                    ROptional<CTypeArguments>
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                    RLiteral{')'}
                ROptional<CSatisfiedTypes>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
    REof{'\r\n'}
