CXStart
    CCodeUnit
        CNamespace
            CAnnotations
                ROptional<ICStringLiteral>
                RStar<CAnnotation>
            RLiteral{'namespace'}
            CNamespacePath
                CIdentifier{'six'}
                CIdentifier{'core'}
            RLiteral{';'}
        CImports
        CTopDeclarations
            CInterfaceDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CVerbatimString{'\"\"\"\r\nAn annotation that may occur multiple times at a given program element, and only on certain program elemenets.\r\n\r\nA sequenced annotation is declared simply by having the  annotation class satisfy `SequencedAnnotation` instead of\r\n[[Annotation]]. For example the following would only be allowed on `class` declarations, functions or methods:\r\n\r\n    alias ExecutableDeclaration => ClassOrInterfaceDeclaration|FunctionDeclaration;\r\n    \"Documents a pattern in which the annotated element particpates.\"\r\n    shared final annotation class Pattern(String name) \r\n        satisfies SequencedAnnotation<Pattern, ExecutableDeclaration> {}\r\n\r\nAt runtime a [[ceylon.language.meta.declaration::Declaration]] instance can be queried for its `SequencedAnnotation`s\r\nof a certain type using [[ceylon.language.meta::annotations]] or [[ceylon.language.meta::sequencedAnnotations]].\r\n\"\"\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'see'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CInterfaceLiteral
                                                RLiteral{'interface'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'Annotation'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                RLiteral{'interface'}
                CUpperIdentifier{'SequencedAnnotation'}
                ROptional<CTypeParameters>
                    CTypeParameters
                        RLiteral{'<'}
                        CTypeParameterList
                            CTypeParameter
                                ROptional<ICVariance>
                                    CVariance{'out'}
                                CUpperIdentifier{'Value'}
                                ROptional<CTypeDefault>
                            CTypeParameter
                                ROptional<ICVariance>
                                    CVariance{'in'}
                                CUpperIdentifier{'ProgramElement'}
                                ROptional<CTypeDefault>
                                    CTypeDefault
                                        RLiteral{'='}
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Annotated'}
                                                ROptional<CTypeArguments>
                            CTypeParameter
                                ROptional<ICVariance>
                                    CVariance{'out'}
                                CUpperIdentifier{'Type'}
                                ROptional<CTypeDefault>
                                    CTypeDefault
                                        RLiteral{'='}
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Anything'}
                                                ROptional<CTypeArguments>
                        RLiteral{'>'}
                ROptional<CCaseTypes>
                    CCaseTypes
                        RLiteral{'of'}
                        CCaseTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Value'}
                                    ROptional<CTypeArguments>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'ConstrainedAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Value'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CArrayType
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Value'}
                                                                    ROptional<CTypeArguments>
                                                            RLiteral{'['}
                                                            ROptional<CLiteralNatural>
                                                            RLiteral{']'}
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'ProgramElement'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Type'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                    CTypeConstraints
                        CTypeConstraint
                            RLiteral{'given'}
                            ROptional<ICTypeName>
                                CUpperIdentifier{'Value'}
                            ROptional<CTypeParameters>
                            ROptional<CCaseTypes>
                            ROptional<CSatisfiedTypes>
                                CSatisfiedTypes
                                    RLiteral{'satisfies'}
                                    CUnionTypeList
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'SequencedAnnotation'}
                                                ROptional<CTypeArguments>
                                                    CTypeArguments
                                                        RLiteral{'<'}
                                                        ROptional<CTypeArgumentList>
                                                            CTypeArgumentList
                                                                CVariancedType
                                                                    ROptional<ICVariance>
                                                                    CTypePath
                                                                        CTypeReference
                                                                            CUpperIdentifier{'Value'}
                                                                            ROptional<CTypeArguments>
                                                                CVariancedType
                                                                    ROptional<ICVariance>
                                                                    CTypePath
                                                                        CTypeReference
                                                                            CUpperIdentifier{'ProgramElement'}
                                                                            ROptional<CTypeArguments>
                                                                CVariancedType
                                                                    ROptional<ICVariance>
                                                                    CTypePath
                                                                        CTypeReference
                                                                            CUpperIdentifier{'Type'}
                                                                            ROptional<CTypeArguments>
                                                        RLiteral{'>'}
                        CTypeConstraint
                            RLiteral{'given'}
                            ROptional<ICTypeName>
                                CUpperIdentifier{'ProgramElement'}
                            ROptional<CTypeParameters>
                            ROptional<CCaseTypes>
                            ROptional<CSatisfiedTypes>
                                CSatisfiedTypes
                                    RLiteral{'satisfies'}
                                    CUnionTypeList
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Annotated'}
                                                ROptional<CTypeArguments>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
    REof{'\r\n'}
