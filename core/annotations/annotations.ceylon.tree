CXStart
    CCodeUnit
        CNamespace
            CAnnotations
                ROptional<ICStringLiteral>
                RStar<CAnnotation>
            RLiteral{'namespace'}
            CNamespacePath
                CIdentifier{'six'}
                CIdentifier{'core'}
            RLiteral{';'}
        CImports
            CImportDeclaration
                RLiteral{'import'}
                CPackagePath
                    CIdentifier{'six'}
                    CIdentifier{'core'}
                    CIdentifier{'meta'}
                    CIdentifier{'declaration'}
                CImportElements
                    RLiteral{'{'}
                    ROptional<CImportElementList>
                        CImportElementList
                            CImportNamed
                                CIdentifier{'Module'}
                                ROptional<CImportNameSpecifier>
                                ROptional<CImportElements>
                            CImportNamed
                                CIdentifier{'Package'}
                                ROptional<CImportNameSpecifier>
                                ROptional<CImportElements>
                            CImportNamed
                                CIdentifier{'Import'}
                                ROptional<CImportNameSpecifier>
                                ROptional<CImportElements>
                            CImportNamed
                                CIdentifier{'ClassDeclaration'}
                                ROptional<CImportNameSpecifier>
                                ROptional<CImportElements>
                            CImportNamed
                                CIdentifier{'ClassOrInterfaceDeclaration'}
                                ROptional<CImportNameSpecifier>
                                ROptional<CImportElements>
                            CImportNamed
                                CIdentifier{'ConstructorDeclaration'}
                                ROptional<CImportNameSpecifier>
                                ROptional<CImportElements>
                            CImportNamed
                                CIdentifier{'FunctionDeclaration'}
                                ROptional<CImportNameSpecifier>
                                ROptional<CImportElements>
                            CImportNamed
                                CIdentifier{'Declaration'}
                                ROptional<CImportNameSpecifier>
                                ROptional<CImportElements>
                            CImportNamed
                                CIdentifier{'ValueDeclaration'}
                                ROptional<CImportNameSpecifier>
                                ROptional<CImportElements>
                            CImportNamed
                                CIdentifier{'FunctionOrValueDeclaration'}
                                ROptional<CImportNameSpecifier>
                                ROptional<CImportElements>
                            CImportNamed
                                CIdentifier{'AliasDeclaration'}
                                ROptional<CImportNameSpecifier>
                                ROptional<CImportElements>
                    RLiteral{'}'}
        CTopDeclarations
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[annotation]] meta-annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'AnnotationAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'AnnotationAnnotation'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CUnionTypeCore
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'ClassDeclaration'}
                                                                    ROptional<CTypeArguments>
                                                            RLiteral{'|'}
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'FunctionDeclaration'}
                                                                    ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to mark a class as an *annotation class*, or a top-level function as an *annotation constructor*.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'see'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CInterfaceLiteral
                                                RLiteral{'interface'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'Annotation'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'AnnotationAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'annotation'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'AnnotationAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[shared]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'SharedAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'SharedAnnotation'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CUnionTypeCore
                                                            CUnionTypeCore
                                                                CUnionTypeCore
                                                                    CUnionTypeCore
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'FunctionOrValueDeclaration'}
                                                                                ROptional<CTypeArguments>
                                                                        RLiteral{'|'}
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'ClassOrInterfaceDeclaration'}
                                                                                ROptional<CTypeArguments>
                                                                    RLiteral{'|'}
                                                                    CTypePath
                                                                        CTypeReference
                                                                            CUpperIdentifier{'ConstructorDeclaration'}
                                                                            ROptional<CTypeArguments>
                                                                RLiteral{'|'}
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'Package'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{'|'}
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Import'}
                                                                    ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to mark a declaration as shared. A `shared`  declaration is visible outside the block of\r\n code in which it is declared.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'SharedAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'shared'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'SharedAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[restricted]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'since'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"1.3.3\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'RestrictedAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"The modules to which this declaration is visible.\"'}
                                        RStar<CAnnotation>
                                    CTypedValueParameter
                                        CVariadicTypeCore
                                            CTypePath
                                                CTypeReference
                                                    CUpperIdentifier{'Module'}
                                                    ROptional<CTypeArguments>
                                            CVariadicOperator{'*'}
                                        CLowerIdentifier{'modules'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'RestrictedAnnotation'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CUnionTypeCore
                                                            CUnionTypeCore
                                                                CUnionTypeCore
                                                                    CTypePath
                                                                        CTypeReference
                                                                            CUpperIdentifier{'FunctionOrValueDeclaration'}
                                                                            ROptional<CTypeArguments>
                                                                    RLiteral{'|'}
                                                                    CTypePath
                                                                        CTypeReference
                                                                            CUpperIdentifier{'ClassOrInterfaceDeclaration'}
                                                                            ROptional<CTypeArguments>
                                                                RLiteral{'|'}
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'ConstructorDeclaration'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{'|'}
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Package'}
                                                                    ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to restrict the visibility of a declaration or package to a given list\r\n of [[modules]]. If no modules are specified, a `restricted` declaration is only\r\n visible within the package in which it is defined.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'since'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"1.3.3\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'RestrictedAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'restricted'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"The modules to which this declaration is visible.\"'}
                                        RStar<CAnnotation>
                                    CTypedValueParameter
                                        CVariadicTypeCore
                                            CTypePath
                                                CTypeReference
                                                    CUpperIdentifier{'Module'}
                                                    ROptional<CTypeArguments>
                                            CVariadicOperator{'*'}
                                        CLowerIdentifier{'modules'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'RestrictedAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CSpreadArgument
                                                RLiteral{'*'}
                                                CMemberReference
                                                    CLowerIdentifier{'modules'}
                                                    ROptional<CTypeArguments>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[variable]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'VariableAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'VariableAnnotation'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'ValueDeclaration'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to mark a value as variable. A `variable` value may be assigned\r\n multiple times.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'VariableAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'variable'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'VariableAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[abstract]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'AbstractAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'AbstractAnnotation'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CUnionTypeCore
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'ClassDeclaration'}
                                                                    ROptional<CTypeArguments>
                                                            RLiteral{'|'}
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'ConstructorDeclaration'}
                                                                    ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to mark a class as abstract. An `abstract` class may have `formal`\r\n members, but may not be directly instantiated. An enumerated class must be\r\n `abstract`.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'AbstractAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'abstract'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'AbstractAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[final]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'FinalAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'FinalAnnotation'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'ClassDeclaration'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to mark a class as final. A `final` class may not be extended. Marking\r\n a class as `final` affects disjoint type analysis.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'FinalAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'final'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'FinalAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[sealed]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'since'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"1.1.0\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'SealedAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'SealedAnnotation'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CUnionTypeCore
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'ClassOrInterfaceDeclaration'}
                                                                    ROptional<CTypeArguments>
                                                            RLiteral{'|'}
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'ConstructorDeclaration'}
                                                                    ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to mark an interface, class, or constructor as sealed. A `sealed`\r\n interface may not be satisfied outside of the module in which it is defined. A\r\n `sealed` class may not be extended or instantiated outside of the module in which\r\n it is defined. A `sealed` constructor may not be invoked outside of the module in\r\n which it is defined.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'since'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"1.1.0\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'SealedAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'sealed'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'SealedAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[actual]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'ActualAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'ActualAnnotation'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CUnionTypeCore
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'FunctionOrValueDeclaration'}
                                                                    ROptional<CTypeArguments>
                                                            RLiteral{'|'}
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'ClassDeclaration'}
                                                                    ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to mark a member of a type as refining a member of a supertype.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'ActualAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'actual'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'ActualAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[formal]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'FormalAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'FormalAnnotation'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CUnionTypeCore
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'FunctionOrValueDeclaration'}
                                                                    ROptional<CTypeArguments>
                                                            RLiteral{'|'}
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'ClassDeclaration'}
                                                                    ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to mark a member whose implementation must be provided by subtypes.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'FormalAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'formal'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'FormalAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[default]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'DefaultAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'DefaultAnnotation'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CUnionTypeCore
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'FunctionOrValueDeclaration'}
                                                                    ROptional<CTypeArguments>
                                                            RLiteral{'|'}
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'ClassDeclaration'}
                                                                    ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to mark a member whose implementation may be refined by subtypes.\r\n Non-`default` declarations may not be refined.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'DefaultAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'default'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'DefaultAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[static]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'StaticAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'StaticAnnotation'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CUnionTypeCore
                                                            CUnionTypeCore
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'FunctionOrValueDeclaration'}
                                                                        ROptional<CTypeArguments>
                                                                RLiteral{'|'}
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'ClassOrInterfaceDeclaration'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{'|'}
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'AliasDeclaration'}
                                                                    ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to mark a member of a toplevel class as static. A `static` member does\r\n not have access to any current instance of the class, and must occur before all \r\n constructor declarations and non-`static` member declarations in the body of the\r\n class.\r\n \r\n For example:\r\n \r\n     class Hello\r\n     {\r\n         shared static void hello() => print(\\\"hello\\\");\r\n         shared new() {}\r\n     }\r\n \r\n A `static` member may be invoked or evaluated without any receiving instance of\r\n the class, by qualifying the member by a reference to the class itself.\r\n \r\n     shared void run() => Hello.hello();\r\n \r\n The type parameters of a generic class are in scope at the declaration of a\r\n `static` member.\r\n \r\n     class Box<Element>\r\n     {\r\n         shared static Box<Element>[2] pair(Element x, Element y)\r\n                => [create(x), create(y)];\r\n         shared new create(Element element) {}\r\n     }\r\n     \r\n     Box<Float>[2] boxes = Box.pair(1.0, 2.0);\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'StaticAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'static'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'StaticAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[late]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'LateAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'LateAnnotation'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'ValueDeclaration'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to disable definite initialization analysis for an attribute of a\r\n class, or for a toplevel value, or to specify that an attribute of a class should\r\n be initialized lazily.\r\n \r\n - In the case of a class attribute, the attribute may have no initializer and may\r\n   be left unassigned by the class initializer.\r\n - In the case of a toplevel value, the value may have no initializer.\r\n \r\n If a `late` value does have an initializer, the initializer will be executed\r\n lazily the first time the value is evaluated, if the value has not already been\r\n assigned.\r\n \r\n A `late` value may be assigned by any code to which it is visible, but repeated\r\n assignment produces an [[InitializationError]].\r\n \r\n Evaluation of a `late` value with no initializer cannot be guaranteed sound by\r\n the compiler, and so evaluation of a `late` value with no initializer before it\r\n has been assigned produces an [[InitializationError]].\r\n \r\n     class Lately()\r\n     {\r\n         shared interface Calculator\r\n         {\r\n             shared formal Float calculatePi();\r\n         }\r\n \r\n         //an uninitialized attribute\r\n         late Calculator calculator;\r\n         \r\n         //a lazy attribute\r\n         shared late Float pi = calculator.calculatePi();\r\n         \r\n         shared void init(Calculator calculator)\r\n         {\r\n             //initialize the attribute\r\n             this.calculator = calculator;\r\n         }\r\n         \r\n     }\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'LateAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'late'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'LateAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[native]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'NativeAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameterReference
                                    CLowerIdentifier{'backends'}
                                    ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'NativeAnnotation'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"The compiler backend(s) that this native annotation applies to, or the empty\r\n     sequence to declare the annotated element is a native header.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'since'}
                                        ROptional<ICArguments>
                                            CPositionalArguments
                                                RLiteral{'('}
                                                ROptional<CSequencedArgumentList>
                                                    CSequencedArgumentList
                                                        CLiteralString{'\"1.2.0\"'}
                                                RLiteral{')'}
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                            CVariadicTypeCore
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'String'}
                                        ROptional<CTypeArguments>
                                CVariadicOperator{'*'}
                            CLowerIdentifier{'backends'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                RLiteral{';'}
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to mark a module, import, or declaration as platform-native.\r\n \r\n For example, this code defines a native function in a cross-platform module:\r\n \r\n     import java.lang { System }\r\n     \r\n     native void hello();\r\n     \r\n     native (\\\"jvm\\\") void hello()\r\n     {\r\n         System.out.println(\\\"hello\\\");\r\n     }\r\n     \r\n     native (\\\"js\\\") void hello()\r\n     {\r\n         dynamic {\r\n             console.log(\\\"hello\\\");\r\n         }\r\n     }\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'NativeAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'native'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                        RStar<CAnnotation>
                                            CAnnotation
                                                CLowerIdentifier{'since'}
                                                ROptional<ICArguments>
                                                    CPositionalArguments
                                                        RLiteral{'('}
                                                        ROptional<CSequencedArgumentList>
                                                            CSequencedArgumentList
                                                                CLiteralString{'\"1.2.0\"'}
                                                        RLiteral{')'}
                                    CTypedValueParameter
                                        CVariadicTypeCore
                                            CTypePath
                                                CTypeReference
                                                    CUpperIdentifier{'String'}
                                                    ROptional<CTypeArguments>
                                            CVariadicOperator{'*'}
                                        CLowerIdentifier{'backends'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'NativeAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CSpreadArgument
                                                RLiteral{'*'}
                                                CMemberReference
                                                    CLowerIdentifier{'backends'}
                                                    ROptional<CTypeArguments>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[doc]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'DocAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"Documentation, in Markdown syntax, describing the \r\n     annotated program element\"'}
                                        RStar<CAnnotation>
                                            CAnnotation
                                                CLowerIdentifier{'shared'}
                                                ROptional<ICArguments>
                                    CTypedValueParameter
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'String'}
                                                ROptional<CTypeArguments>
                                        CLowerIdentifier{'description'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'DocAnnotation'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to specify API documentation of a program \r\n element. The `doc` annotation need not be explicitly \r\n specified, since a string literal at the beginning of a\r\n declaration is implicitly considered an argument to\r\n `doc()`.\r\n \r\n     \\\"Something awesome\\\"\r\n     void hello() => print(\\\"hello\\\");\r\n \r\n Is an abbreviation for:\r\n \r\n     doc (\\\"Something awesome\\\")\r\n     void hello() => print(\\\"hello\\\");\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'DocAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'doc'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"Documentation, in Markdown syntax, describing the \r\n     annotated program element\"'}
                                        RStar<CAnnotation>
                                    CTypedValueParameter
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'String'}
                                                ROptional<CTypeArguments>
                                        CLowerIdentifier{'description'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'DocAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CMemberReference
                                                CLowerIdentifier{'description'}
                                                ROptional<CTypeArguments>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[see]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'SeeAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"The program elements being referred to.\"'}
                                        RStar<CAnnotation>
                                            CAnnotation
                                                CLowerIdentifier{'shared'}
                                                ROptional<ICArguments>
                                    CTypedValueParameter
                                        CVariadicTypeCore
                                            CTypePath
                                                CTypeReference
                                                    CUpperIdentifier{'Declaration'}
                                                    ROptional<CTypeArguments>
                                            CVariadicOperator{'*'}
                                        CLowerIdentifier{'programElements'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'SequencedAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'SeeAnnotation'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to specify references to other program elements\r\n related to the annotated API.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'SeeAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'see'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"The program elements being referred to.\"'}
                                        RStar<CAnnotation>
                                    CTypedValueParameter
                                        CVariadicTypeCore
                                            CTypePath
                                                CTypeReference
                                                    CUpperIdentifier{'Declaration'}
                                                    ROptional<CTypeArguments>
                                            CVariadicOperator{'*'}
                                        CLowerIdentifier{'programElements'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'SeeAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CSpreadArgument
                                                RLiteral{'*'}
                                                CMemberReference
                                                    CLowerIdentifier{'programElements'}
                                                    ROptional<CTypeArguments>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[by]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'AuthorsAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"The authors, in Markdown syntax, of the annotated \r\n     program element\"'}
                                        RStar<CAnnotation>
                                            CAnnotation
                                                CLowerIdentifier{'shared'}
                                                ROptional<ICArguments>
                                    CTypedValueParameter
                                        CVariadicTypeCore
                                            CTypePath
                                                CTypeReference
                                                    CUpperIdentifier{'String'}
                                                    ROptional<CTypeArguments>
                                            CVariadicOperator{'*'}
                                        CLowerIdentifier{'authors'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'AuthorsAnnotation'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to document the authors of an API.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'AuthorsAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'by'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"The authors, in Markdown syntax, of the annotated \r\n     program element\"'}
                                        RStar<CAnnotation>
                                    CTypedValueParameter
                                        CVariadicTypeCore
                                            CTypePath
                                                CTypeReference
                                                    CUpperIdentifier{'String'}
                                                    ROptional<CTypeArguments>
                                            CVariadicOperator{'*'}
                                        CLowerIdentifier{'authors'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'AuthorsAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CSpreadArgument
                                                RLiteral{'*'}
                                                CMemberReference
                                                    CLowerIdentifier{'authors'}
                                                    ROptional<CTypeArguments>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[throws]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'ThrownExceptionAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"The [[Exception]] type that is thrown.\"'}
                                        RStar<CAnnotation>
                                            CAnnotation
                                                CLowerIdentifier{'shared'}
                                                ROptional<ICArguments>
                                    CTypedValueParameter
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Declaration'}
                                                ROptional<CTypeArguments>
                                        CLowerIdentifier{'type'}
                                        ROptional<CValueSpecifier>
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"A description, in Markdown syntax, of the circumstances \r\n     that cause this exception to be thrown.\"'}
                                        RStar<CAnnotation>
                                            CAnnotation
                                                CLowerIdentifier{'shared'}
                                                ROptional<ICArguments>
                                    CTypedValueParameter
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'String'}
                                                ROptional<CTypeArguments>
                                        CLowerIdentifier{'when'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'SequencedAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'ThrownExceptionAnnotation'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CUnionTypeCore
                                                            CUnionTypeCore
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'FunctionOrValueDeclaration'}
                                                                        ROptional<CTypeArguments>
                                                                RLiteral{'|'}
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'ClassDeclaration'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{'|'}
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'ConstructorDeclaration'}
                                                                    ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to document the exception types thrown by a \r\n function, value, class, or constructor.\r\n \r\n     throws(class Exception)\r\n     void die() { throw; }\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'ThrownExceptionAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'throws'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"The [[Exception]] type that is thrown.\"'}
                                        RStar<CAnnotation>
                                    CTypedValueParameter
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Declaration'}
                                                ROptional<CTypeArguments>
                                        CLowerIdentifier{'type'}
                                        ROptional<CValueSpecifier>
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"A description, in Markdown syntax, of the circumstances \r\n     that cause this exception to be thrown.\"'}
                                        RStar<CAnnotation>
                                    CTypedValueParameter
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'String'}
                                                ROptional<CTypeArguments>
                                        CLowerIdentifier{'when'}
                                        ROptional<CValueSpecifier>
                                            CValueSpecifier
                                                RLiteral{'='}
                                                CLiteralString{'\"\"'}
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'ThrownExceptionAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CMemberReference
                                                CLowerIdentifier{'type'}
                                                ROptional<CTypeArguments>
                                            CMemberReference
                                                CLowerIdentifier{'when'}
                                                ROptional<CTypeArguments>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[deprecated]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'DeprecationAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"A description, in Markdown syntax, of why the program \r\n     element is deprecated, and of what alternatives are \r\n     available.\"'}
                                        RStar<CAnnotation>
                                            CAnnotation
                                                CLowerIdentifier{'shared'}
                                                ROptional<ICArguments>
                                    CTypedValueParameter
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'String'}
                                                ROptional<CTypeArguments>
                                        CLowerIdentifier{'description'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'DeprecationAnnotation'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"A description, in Markdown syntax, of why the program \r\n     element is deprecated, and what alternatives are \r\n     available, or `null`.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                            CNullableType
                                CTypePath
                                    CTypeReference
                                        CUpperIdentifier{'String'}
                                        ROptional<CTypeArguments>
                                RLiteral{'?'}
                            CLowerIdentifier{'reason'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                    CFunctionSpecifier
                                        RLiteral{'=>'}
                                        CThenElseExpr
                                            CLogicalNegationExpr
                                                CNotOperator{'!'}
                                                CSelectionExpr
                                                    CMemberReference
                                                        CLowerIdentifier{'description'}
                                                        ROptional<CTypeArguments>
                                                    CMemberSelectionOperator{'.'}
                                                    CMemberReference
                                                        CLowerIdentifier{'empty'}
                                                        ROptional<CTypeArguments>
                                            CThenElseOperator{'then'}
                                            CMemberReference
                                                CLowerIdentifier{'description'}
                                                ROptional<CTypeArguments>
                                RLiteral{';'}
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to mark program elements which should not be \r\n used anymore.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'DeprecationAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'deprecated'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"A description, in Markdown syntax, of why the program \r\n     element is deprecated, and what alternatives are \r\n     available.\"'}
                                        RStar<CAnnotation>
                                    CTypedValueParameter
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'String'}
                                                ROptional<CTypeArguments>
                                        CLowerIdentifier{'reason'}
                                        ROptional<CValueSpecifier>
                                            CValueSpecifier
                                                RLiteral{'='}
                                                CLiteralString{'\"\"'}
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'DeprecationAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CMemberReference
                                                CLowerIdentifier{'reason'}
                                                ROptional<CTypeArguments>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[tagged]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'TagsAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"The tags, in plain text.\"'}
                                        RStar<CAnnotation>
                                            CAnnotation
                                                CLowerIdentifier{'shared'}
                                                ROptional<ICArguments>
                                    CTypedValueParameter
                                        CVariadicTypeCore
                                            CTypePath
                                                CTypeReference
                                                    CUpperIdentifier{'String'}
                                                    ROptional<CTypeArguments>
                                            CVariadicOperator{'*'}
                                        CLowerIdentifier{'tags'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'TagsAnnotation'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to categorize an API by tag.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'TagsAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'tagged'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"The tags, in plain text.\"'}
                                        RStar<CAnnotation>
                                    CTypedValueParameter
                                        CVariadicTypeCore
                                            CTypePath
                                                CTypeReference
                                                    CUpperIdentifier{'String'}
                                                    ROptional<CTypeArguments>
                                            CVariadicOperator{'*'}
                                        CLowerIdentifier{'tags'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'TagsAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CSpreadArgument
                                                RLiteral{'*'}
                                                CMemberReference
                                                    CLowerIdentifier{'tags'}
                                                    ROptional<CTypeArguments>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[aliased]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'since'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"1.2.0\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'AliasesAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"The aliases, in plain text.\"'}
                                        RStar<CAnnotation>
                                            CAnnotation
                                                CLowerIdentifier{'shared'}
                                                ROptional<ICArguments>
                                    CTypedValueParameter
                                        CVariadicTypeCore
                                            CTypePath
                                                CTypeReference
                                                    CUpperIdentifier{'String'}
                                                    ROptional<CTypeArguments>
                                            CVariadicOperator{'*'}
                                        CLowerIdentifier{'aliases'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'AliasesAnnotation'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to specify a list of aliases that tools such as \r\n auto-completion and quick-fixes should consider, to help \r\n users find a declaration using its aliases.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'since'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"1.2.0\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'AliasesAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'aliased'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"The aliases, in plain text.\"'}
                                        RStar<CAnnotation>
                                    CTypedValueParameter
                                        CVariadicTypeCore
                                            CTypePath
                                                CTypeReference
                                                    CUpperIdentifier{'String'}
                                                    ROptional<CTypeArguments>
                                            CVariadicOperator{'*'}
                                        CLowerIdentifier{'aliases'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'AliasesAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CSpreadArgument
                                                RLiteral{'*'}
                                                CMemberReference
                                                    CLowerIdentifier{'aliases'}
                                                    ROptional<CTypeArguments>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[license]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'LicenseAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"The name, text, or URL of the license.\"'}
                                        RStar<CAnnotation>
                                            CAnnotation
                                                CLowerIdentifier{'shared'}
                                                ROptional<ICArguments>
                                    CTypedValueParameter
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'String'}
                                                ROptional<CTypeArguments>
                                        CLowerIdentifier{'description'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'LicenseAnnotation'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Module'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to specify the URL of the license of a module or \r\n package.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'LicenseAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'license'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"The name, text, or URL of the license.\"'}
                                        RStar<CAnnotation>
                                    CTypedValueParameter
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'String'}
                                                ROptional<CTypeArguments>
                                        CLowerIdentifier{'description'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'LicenseAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CMemberReference
                                                CLowerIdentifier{'description'}
                                                ROptional<CTypeArguments>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[label]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'since'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"1.4.0\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'LabelAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"The readable name of the module.\"'}
                                        RStar<CAnnotation>
                                            CAnnotation
                                                CLowerIdentifier{'shared'}
                                                ROptional<ICArguments>
                                    CTypedValueParameter
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'String'}
                                                ROptional<CTypeArguments>
                                        CLowerIdentifier{'name'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'LabelAnnotation'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Module'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to specify the readable name of a module.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'since'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"1.4.0\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'LabelAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'label'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"The readable name of the module.\"'}
                                        RStar<CAnnotation>
                                    CTypedValueParameter
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'String'}
                                                ROptional<CTypeArguments>
                                        CLowerIdentifier{'name'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'LabelAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CMemberReference
                                                CLowerIdentifier{'name'}
                                                ROptional<CTypeArguments>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[since]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'since'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"1.3.0\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'SinceAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"The version of the module when this declaration was added.\"'}
                                        RStar<CAnnotation>
                                            CAnnotation
                                                CLowerIdentifier{'shared'}
                                                ROptional<ICArguments>
                                    CTypedValueParameter
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'String'}
                                                ROptional<CTypeArguments>
                                        CLowerIdentifier{'version'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'SinceAnnotation'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to indicate at which moment the annotated declaration\r\n was added to the module.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'since'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"1.3.0\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'SinceAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'since'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"The version of the module when this declaration was added.\"'}
                                        RStar<CAnnotation>
                                    CTypedValueParameter
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'String'}
                                                ROptional<CTypeArguments>
                                        CLowerIdentifier{'version'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'SinceAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CMemberReference
                                                CLowerIdentifier{'version'}
                                                ROptional<CTypeArguments>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[optional]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'OptionalImportAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'OptionalImportAnnotation'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'Import'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to specify that a module can be executed even if \r\n the annotated dependency is not available.\r\n \r\n     optional import org.some.service.provider \\\"1.2.3\\\";\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'OptionalImportAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'optional'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'OptionalImportAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[suppressWarnings]] \r\n annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'since'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"1.2.0\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'sealed'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'SuppressWarningsAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"The warning types to suppress.\"'}
                                        RStar<CAnnotation>
                                            CAnnotation
                                                CLowerIdentifier{'shared'}
                                                ROptional<ICArguments>
                                    CTypedValueParameter
                                        CVariadicTypeCore
                                            CTypePath
                                                CTypeReference
                                                    CUpperIdentifier{'String'}
                                                    ROptional<CTypeArguments>
                                            CVariadicOperator{'*'}
                                        CLowerIdentifier{'warnings'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'SuppressWarningsAnnotation'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CUnionTypeCore
                                                            CUnionTypeCore
                                                                CUnionTypeCore
                                                                    CUnionTypeCore
                                                                        CUnionTypeCore
                                                                            CTypePath
                                                                                CTypeReference
                                                                                    CUpperIdentifier{'FunctionOrValueDeclaration'}
                                                                                    ROptional<CTypeArguments>
                                                                            RLiteral{'|'}
                                                                            CTypePath
                                                                                CTypeReference
                                                                                    CUpperIdentifier{'ClassOrInterfaceDeclaration'}
                                                                                    ROptional<CTypeArguments>
                                                                        RLiteral{'|'}
                                                                        CTypePath
                                                                            CTypeReference
                                                                                CUpperIdentifier{'ConstructorDeclaration'}
                                                                                ROptional<CTypeArguments>
                                                                    RLiteral{'|'}
                                                                    CTypePath
                                                                        CTypeReference
                                                                            CUpperIdentifier{'Module'}
                                                                            ROptional<CTypeArguments>
                                                                RLiteral{'|'}
                                                                CTypePath
                                                                    CTypeReference
                                                                        CUpperIdentifier{'Package'}
                                                                        ROptional<CTypeArguments>
                                                            RLiteral{'|'}
                                                            CTypePath
                                                                CTypeReference
                                                                    CUpperIdentifier{'Import'}
                                                                    ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to suppress compilation warnings of the \r\n [[specified types|warnings]] when typechecking the \r\n annotated program element.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'since'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"1.2.0\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'SuppressWarningsAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'suppressWarnings'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"The warning types to suppress.\r\n     \r\n     Allowed warning types are:\r\n     `filenameNonAscii`,\r\n     `filenameCaselessCollision`,\r\n     `deprecation`, \r\n     `disjointEquals`,\r\n     `disjointContainment`,\r\n     `compilerAnnotation`,\r\n     `doclink`,\r\n     `expressionTypeNothing`,\r\n     `expressionTypeCallable`,\r\n     `expressionTypeIterable`,\r\n     `unusedDeclaration`,\r\n     `unusedImport`,\r\n     `redundantImportAlias`,\r\n     `ceylonNamespace`,\r\n     `javaNamespace`, \r\n     `packageName`,\r\n     `hidesLanguageModifier`,\r\n     `suppressedAlready`, \r\n     `suppressesNothing`, \r\n     `unknownWarning`, \r\n     `ambiguousAnnotation`,\r\n     `javaAnnotationElement`,\r\n     `syntaxDeprecation`,\r\n     `smallIgnored`,\r\n     `literalNotSmall`,\r\n     `disjointEquals`,\r\n     `disjointContainment`,\r\n     `redundantNarrowing`,\r\n     `redundantIteration`,\r\n     `missingImportPrefix`,\r\n     `uncheckedTypeArguments`,\r\n     `inferredNotNull`,\r\n     `implicitNarrowing`,\r\n     `narrowingDisabled`\r\n     `catchType`,\r\n     `directiveInFinally`.\"'}
                                        RStar<CAnnotation>
                                    CTypedValueParameter
                                        CVariadicTypeCore
                                            CTypePath
                                                CTypeReference
                                                    CUpperIdentifier{'String'}
                                                    ROptional<CTypeArguments>
                                            CVariadicOperator{'*'}
                                        CLowerIdentifier{'warnings'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'SuppressWarningsAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CSpreadArgument
                                                RLiteral{'*'}
                                                CMemberReference
                                                    CLowerIdentifier{'warnings'}
                                                    ROptional<CTypeArguments>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[serializable]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'since'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"1.2.0\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'SerializableAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'SerializableAnnotation'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'ClassDeclaration'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to specify that a class is serializable.\r\n  \r\n A serializable class may have instances that cannot be \r\n serialized if those instances have reachable references to \r\n instances of non-serializable classes.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'since'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"1.2.0\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'SerializableAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'serializable'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'SerializableAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[small]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'since'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"1.3.0\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'SmallAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'OptionalAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'SmallAnnotation'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'FunctionOrValueDeclaration'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation to hint to the compiler that, if possible:\r\n \r\n  - an [[Integer]] type should be represented using a 32-bit \r\n    signed integer,\r\n  - a [[Float]] type should be represented using 32-bit IEEE \r\n    float, or\r\n  - a [[Character]] type should be represented as a single \r\n    16-bit code point in the Basic Multilingual Plane.\r\n \r\n The compiler is permitted to ignore this hint.\r\n \r\n     small Integer zero = 0;\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'since'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"1.3.0\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'SmallAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'small'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'SmallAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                    RLiteral{')'}
                    RLiteral{';'}
            CClassDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"The annotation class for the [[service]] annotation.\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'since'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"1.3.0\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'final'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                RLiteral{'class'}
                CUpperIdentifier{'ServiceAnnotation'}
                ROptional<CTypeParameters>
                ROptional<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameterReference
                                    CLowerIdentifier{'contract'}
                                    ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CCaseTypes>
                ROptional<CExtendedType>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'SequencedAnnotation'}
                                    ROptional<CTypeArguments>
                                        CTypeArguments
                                            RLiteral{'<'}
                                            ROptional<CTypeArgumentList>
                                                CTypeArgumentList
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'ServiceAnnotation'}
                                                                ROptional<CTypeArguments>
                                                    CVariancedType
                                                        ROptional<ICVariance>
                                                        CTypePath
                                                            CTypeReference
                                                                CUpperIdentifier{'ClassDeclaration'}
                                                                ROptional<CTypeArguments>
                                            RLiteral{'>'}
                ROptional<CTypeConstraints>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                        CTypedAttributeDeclaration
                            CAnnotations
                                ROptional<ICStringLiteral>
                                    CLiteralString{'\"The service interface or class that the annotated class \r\n     provides.\"'}
                                RStar<CAnnotation>
                                    CAnnotation
                                        CLowerIdentifier{'shared'}
                                        ROptional<ICArguments>
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'ClassOrInterfaceDeclaration'}
                                    ROptional<CTypeArguments>
                            CLowerIdentifier{'contract'}
                            COptionalAnySpecifier
                                ROptional<ICAnySpecifier>
                                RLiteral{';'}
                    RLiteral{'}'}
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CLiteralString{'\"Annotation marking a class as implementing a service. The\r\n class must be a non-abstract, shared, toplevel class.\r\n \r\n For example, if `Manager` is an interface, this code\r\n declares an implementation of `Manager`:\r\n \r\n     service (`Manager`)\r\n     shared class DefautManager() satisfies Manager {}\r\n \r\n Service implementations can be found at runtime using \r\n [[ceylon.language.meta.declaration::Module.findServiceProviders]].\r\n \r\n     {Manager*} managers = `module`.findServiceProviders(`Manager`);\r\n     assert (exists manager = managers.first);\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'since'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"1.3.0\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'annotation'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'ServiceAnnotation'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'service'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                            CLiteralString{'\"The service interface or class that the annotated class \r\n     provides.\"'}
                                        RStar<CAnnotation>
                                    CTypedValueParameter
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'ClassOrInterfaceDeclaration'}
                                                ROptional<CTypeArguments>
                                        CLowerIdentifier{'contract'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                        CFunctionSpecifier
                            RLiteral{'=>'}
                            CCallExpr
                                CTypeReference
                                    CUpperIdentifier{'ServiceAnnotation'}
                                    ROptional<CTypeArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CMemberReference
                                                CLowerIdentifier{'contract'}
                                                ROptional<CTypeArguments>
                                    RLiteral{')'}
                    RLiteral{';'}
    REof{'\r\n'}
