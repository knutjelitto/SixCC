CXStart
    CCodeUnit
        CNamespace
            CAnnotations
                ROptional<ICStringLiteral>
                RStar<CAnnotation>
            RLiteral{'namespace'}
            CNamespacePath
                CIdentifier{'six'}
                CIdentifier{'core'}
            RLiteral{';'}
        CImports
        CTopDeclarations
            CInterfaceDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CVerbatimString{'\"\"\"\r\nAn annotation constrained to appear only on certain program elements, and only with certain values. \r\n\r\nThis interface should never be satisfied directly by any annotation type. Instead, either [[OptionalAnnotation]] or \r\n[[SequencedAnnotation]] should be satisfied by the annotation type.\r\n\r\nThe type parameters encode information about the annotation type and its constraints:\r\n\r\n- [[Value]] represents the type of the annotation itself, \r\n- [[ProgramElement]] represents a constraint on the  _reference expression type_ of the annotated program element, for\r\n  example, [[ceylon.language.meta.declaration::ClassDeclaration]] or [[ceylon.language.meta.declaration::Module]], where\r\n  [[Annotated]] means there is no constraint, and\r\n- [[Type]] is a constraint on the _metamodel type_ of the annotated program element, for example,\r\n  [[`Function<Float,[Float,Float]>`|ceylon.language.meta.model::Function]], where `Anything` means there is no\r\n  constraint, and that the program element need not have a metamodel type.\r\n\"\"\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'see'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CInterfaceLiteral
                                                RLiteral{'interface'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'Annotation'}
                                            CInterfaceLiteral
                                                RLiteral{'interface'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'OptionalAnnotation'}
                                            CInterfaceLiteral
                                                RLiteral{'interface'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'SequencedAnnotation'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                RLiteral{'interface'}
                CUpperIdentifier{'ConstrainedAnnotation'}
                ROptional<CTypeParameters>
                    CTypeParameters
                        RLiteral{'<'}
                        CTypeParameterList
                            CTypeParameter
                                ROptional<ICVariance>
                                    CVariance{'out'}
                                CUpperIdentifier{'Value'}
                                ROptional<CTypeDefault>
                                    CTypeDefault
                                        RLiteral{'='}
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Annotation'}
                                                ROptional<CTypeArguments>
                            CTypeParameter
                                ROptional<ICVariance>
                                    CVariance{'out'}
                                CUpperIdentifier{'Values'}
                                ROptional<CTypeDefault>
                                    CTypeDefault
                                        RLiteral{'='}
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Anything'}
                                                ROptional<CTypeArguments>
                            CTypeParameter
                                ROptional<ICVariance>
                                    CVariance{'in'}
                                CUpperIdentifier{'ProgramElement'}
                                ROptional<CTypeDefault>
                                    CTypeDefault
                                        RLiteral{'='}
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Nothing'}
                                                ROptional<CTypeArguments>
                            CTypeParameter
                                ROptional<ICVariance>
                                    CVariance{'out'}
                                CUpperIdentifier{'Type'}
                                ROptional<CTypeDefault>
                                    CTypeDefault
                                        RLiteral{'='}
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Anything'}
                                                ROptional<CTypeArguments>
                        RLiteral{'>'}
                ROptional<CCaseTypes>
                ROptional<CSatisfiedTypes>
                    CSatisfiedTypes
                        RLiteral{'satisfies'}
                        CUnionTypeList
                            CTypePath
                                CTypeReference
                                    CUpperIdentifier{'Annotation'}
                                    ROptional<CTypeArguments>
                ROptional<CTypeConstraints>
                    CTypeConstraints
                        CTypeConstraint
                            RLiteral{'given'}
                            ROptional<ICTypeName>
                                CUpperIdentifier{'Value'}
                            ROptional<CTypeParameters>
                            ROptional<CCaseTypes>
                            ROptional<CSatisfiedTypes>
                                CSatisfiedTypes
                                    RLiteral{'satisfies'}
                                    CUnionTypeList
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Annotation'}
                                                ROptional<CTypeArguments>
                        CTypeConstraint
                            RLiteral{'given'}
                            ROptional<ICTypeName>
                                CUpperIdentifier{'ProgramElement'}
                            ROptional<CTypeParameters>
                            ROptional<CCaseTypes>
                            ROptional<CSatisfiedTypes>
                                CSatisfiedTypes
                                    RLiteral{'satisfies'}
                                    CUnionTypeList
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Annotated'}
                                                ROptional<CTypeArguments>
                CBlock
                    RLiteral{'{'}
                    CImports
                    CStatements
                    RLiteral{'}'}
    REof{'\r\n'}
