CXStart
    CCodeUnit
        CNamespace
            CAnnotations
                ROptional<ICStringLiteral>
                RStar<CAnnotation>
            RLiteral{'namespace'}
            CNamespacePath
                CIdentifier{'six'}
                CIdentifier{'core'}
            RLiteral{';'}
        CImports
            CImportDeclaration
                RLiteral{'import'}
                CPackagePath
                    CIdentifier{'ceylon'}
                    CIdentifier{'language'}
                    CIdentifier{'meta'}
                CImportElements
                    RLiteral{'{'}
                    ROptional<CImportElementList>
                        CImportElementList
                            CImportNamed
                                CIdentifier{'type'}
                                ROptional<CImportNameSpecifier>
                                ROptional<CImportElements>
                    RLiteral{'}'}
        CTopDeclarations
            CTypedMethodDeclaration
                CAnnotations
                    ROptional<ICStringLiteral>
                        CVerbatimString{'\"\"\"Return the name of the concrete class of the given object, \r\n   in a format native to the virtual machine. For example,\r\n   `className(0)` evaluates to:\r\n   \r\n   - `\"ceylon.language.Integer\"` on the Java Virtual Machine, \r\n     and to\r\n   - `\"ceylon.language::Integer\"` on a JavaScript VM.\r\n   \r\n   To obtain a platform-independent class name, use the \r\n   [[ceylon.language.meta::type]] function to obtain a\r\n   metamodel object, for example:\r\n   \r\n       type(1).declaration.qualifiedName\r\n   \r\n   evaluates to `\"ceylon.language::Integer\"` on every \r\n   platform.\"\"\"'}
                    RStar<CAnnotation>
                        CAnnotation
                            CLowerIdentifier{'tagged'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CLiteralString{'\"Metamodel\"'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'see'}
                            ROptional<ICArguments>
                                CPositionalArguments
                                    RLiteral{'('}
                                    ROptional<CSequencedArgumentList>
                                        CSequencedArgumentList
                                            CFunctionLiteral
                                                CKwFunction{'function'}
                                                CReferencePath
                                                    ROptional<CPackageQualifier>
                                                    CReferencePathElementList
                                                        CIdentifier{'type'}
                                    RLiteral{')'}
                        CAnnotation
                            CLowerIdentifier{'shared'}
                            ROptional<ICArguments>
                        CAnnotation
                            CLowerIdentifier{'native'}
                            ROptional<ICArguments>
                CTypePath
                    CTypeReference
                        CUpperIdentifier{'String'}
                        ROptional<CTypeArguments>
                CLowerIdentifier{'className'}
                ROptional<CTypeParameters>
                RPlus<CParameters>
                    CParameters
                        RLiteral{'('}
                        ROptional<CParameterList>
                            CParameterList
                                CParameter
                                    CAnnotations
                                        ROptional<ICStringLiteral>
                                        RStar<CAnnotation>
                                    CTypedValueParameter
                                        CTypePath
                                            CTypeReference
                                                CUpperIdentifier{'Anything'}
                                                ROptional<CTypeArguments>
                                        CLowerIdentifier{'obj'}
                                        ROptional<CValueSpecifier>
                        RLiteral{')'}
                ROptional<CTypeConstraints>
                COptionalFunctionSpecifier
                    ROptional<CFunctionSpecifier>
                    RLiteral{';'}
    REof{''}
