translation-unit = *( external-declaration )

external-declaration = function-definition / declaration

function-definition = declaration-specifiers declarator [ declaration-list ] compound-statement

declaration = declaration-specifiers [ init-declarator-list ] ";" / static-assert-declaration / ";"

declaration-specifiers = declaration-specifier *( declaration-specifier )

declaration-specifier = storage-class-specifier / type-specifier / type-qualifier / function-specifier / alignment-specifier

declarator = [ pointer ] direct-declarator

declaration-list = declaration *( declaration )

compound-statement = "{" *( declaration-or-statement ) "}"

declaration-or-statement = declaration / statement

init-declarator-list = init-declarator *( "," init-declarator )

init-declarator = declarator [ "=" initializer ]

static-assert-declaration = %s"_Static_assert" "(" constant-expression "," string-literal ")" ";"

storage-class-specifier = %s"typedef" / %s"extern" / %s"static" / %s"_Thread_local" / %s"auto" / %s"register"

type-specifier = %s"void" / %s"char" / %s"short" / %s"int" / %s"long" / %s"float" / %s"double" / %s"signed" / %s"unsigned" / %s"_Bool" / %s"_Complex" / %s"_Imaginary" / atomic-type-specifier / struct-or-union-specifier / enum-specifier / typedef-name

typedef-name = identifier

type-qualifier = %s"const" / %s"restrict" / %s"volatile" / %s"_Atomic"

function-specifier = %s"inline" / %s"_Noreturn"

alignment-specifier = %s"_Alignas" "(" type-name ")" / %s"_Alignas" "(" constant-expression ")"

pointer = "*" [ type-qualifier-list ] [ pointer ]

direct-declarator = identifier / "(" declarator ")" / direct-declarator "[" [ "*" ] "]" / direct-declarator "[" %s"static" [ type-qualifier-list ] assignment-expression "]" / direct-declarator "[" type-qualifier-list [ "*" ] "]" / direct-declarator "[" type-qualifier-list [ %s"static" ] assignment-expression "]" / direct-declarator "[" assignment-expression "]" / direct-declarator "(" parameter-type-list ")" / direct-declarator "(" identifier-list ")" / direct-declarator "(" ")"

identifier-list = identifier *( "," identifier )

initializer-list = designative-initializer *( "," designative-initializer )

designative-initializer = [ designation ] initializer

initializer = "{" initializer-list [ "," ] "}" / assignment-expression

constant-expression = conditional-expression

atomic-type-specifier = %s"_Atomic" "(" type-name ")"

struct-or-union-specifier = struct-or-union "{" struct-declaration-list "}" / struct-or-union identifier [ "{" struct-declaration-list "}" ]

struct-or-union = %s"struct" / %s"union"

struct-declaration-list = struct-declaration *( struct-declaration )

struct-declaration = specifier-qualifier-list ";" / specifier-qualifier-list struct-declarator-list ";" / static-assert-declaration

enum-specifier = %s"enum" "{" enumerator-list [ "," ] "}" / %s"enum" identifier [ "{" enumerator-list [ "," ] "}" ]

enumerator-list = enumerator *( "," enumerator )

enumerator = enumeration-constant [ "=" constant-expression ]

enumeration-constant = identifier

type-name = specifier-qualifier-list [ abstract-declarator ]

specifier-qualifier-list = specifier-qualifier *( specifier-qualifier )

specifier-qualifier = type-specifier / type-qualifier

abstract-declarator = pointer [ direct-abstract-declarator ] / direct-abstract-declarator

direct-abstract-declarator = "(" abstract-declarator ")" / "(" parameter-type-list ")" / "(" ")" / "[" [ "*" ] "]" / "[" %s"static" [ type-qualifier-list ] assignment-expression "]" / "[" type-qualifier-list [ [ %s"static" ] assignment-expression ] "]" / "[" assignment-expression "]" / direct-abstract-declarator "[" [ "*" ] "]" / direct-abstract-declarator "[" %s"static" [ type-qualifier-list ] assignment-expression "]" / direct-abstract-declarator "[" type-qualifier-list [ [ %s"static" ] assignment-expression ] "]" / direct-abstract-declarator "[" assignment-expression "]" / direct-abstract-declarator "(" parameter-type-list ")" / direct-abstract-declarator "(" ")"

struct-declarator-list = struct-declarator *( "," struct-declarator )

type-qualifier-list = type-qualifier *( type-qualifier )

parameter-type-list = parameter-list [ "," "..." ]

struct-declarator = ":" constant-expression / declarator [ ":" constant-expression ]

assignment-operator = "=" / "*=" / "/=" / "%=" / "+=" / "-=" / "<<=" / ">>=" / "&=" / "^=" / "|="

parameter-list = parameter-declaration *( "," parameter-declaration )

parameter-declaration = declaration-specifiers [ (declarator / abstract-declarator) ]

expression = assignment-expression *( "," assignment-expression )

assignment-expression = conditional-expression / unary-expression assignment-operator assignment-expression

conditional-expression = logical-or-expression [ "?" expression ":" conditional-expression ]

logical-or-expression = logical-and-expression *( "||" logical-and-expression )

logical-and-expression = inclusive-or-expression *( "&&" inclusive-or-expression )

inclusive-or-expression = exclusive-or-expression *( "|" exclusive-or-expression )

exclusive-or-expression = and-expression *( "^" and-expression )

and-expression = equality-expression *( "&" equality-expression )

equality-expression = relational-expression *( ("==" / "!=") relational-expression )

relational-expression = shift-expression *( ("<" / ">" / "<=" / ">=") shift-expression )

shift-expression = additive-expression *( ("<<" / ">>") additive-expression )

additive-expression = multiplicative-expression *( ("+" / "-") multiplicative-expression )

multiplicative-expression = cast-expression *( ("%" / "*" / "/") cast-expression )

cast-expression = unary-expression / "(" type-name ")" cast-expression

unary-expression = postfix-expression / ("++" / "--") unary-expression / unary-operator cast-expression / %s"sizeof" unary-expression / %s"sizeof" "(" type-name ")" / %s"_Alignof" "(" type-name ")"

postfix-expression = primary-expression / postfix-expression "[" expression "]" / postfix-expression "(" [ argument-expression-list ] ")" / postfix-expression ("." / "->") identifier / postfix-expression ("++" / "--") / "(" type-name ")" "{" initializer-list [ "," ] "}"

unary-operator = "!" / "&" / "*" / "+" / "-" / "~"

primary-expression = identifier / constant / string / "(" expression ")" / generic-selection

argument-expression-list = assignment-expression *( "," assignment-expression )

constant = integer-constant / character-constant / floating-constant / enumeration-constant

string = string-literal / %s"__func__"

generic-selection = %s"_Generic" "(" assignment-expression "," generic-assoc-list ")"

generic-assoc-list = generic-association *( "," generic-association )

generic-association = type-name ":" assignment-expression / %s"default" ":" assignment-expression

designation = designator-list "="

designator-list = designator *( designator )

designator = "[" constant-expression "]" / "." identifier

statement = labeled-statement / compound-statement / expression-statement / selection-statement / iteration-statement / jump-statement

labeled-statement = identifier ":" statement / %s"case" constant-expression ":" statement / %s"default" ":" statement

expression-statement = [ expression ] ";"

selection-statement = %s"if" "(" expression ")" statement %s"else" statement / %s"if" "(" expression ")" statement / %s"switch" "(" expression ")" statement

iteration-statement = %s"while" "(" expression ")" statement / %s"do" statement %s"while" "(" expression ")" ";" / %s"for" "(" [ expression ] ";" [ expression ] ";" [ expression ] ")" statement / %s"for" "(" declaration [ expression ] ";" [ expression ] ")" statement

jump-statement = %s"goto" identifier ";" / %s"continue" ";" / %s"break" ";" / %s"return" [ expression ] ";"

translation-unit = ( external-declaration )*

external-declaration = function-definition
	| declaration

function-definition = declaration-specifiers  declarator  ( declaration-list )?  compound-statement

declaration = declaration-specifiers  ( init-declarator-list )?  ";"
	| static-assert-declaration
	| ";"

declaration-specifiers = declaration-specifier  ( declaration-specifier )*

declaration-specifier = storage-class-specifier
	| type-specifier
	| type-qualifier
	| function-specifier
	| alignment-specifier

declarator = ( pointer )?  direct-declarator

declaration-list = declaration  ( declaration )*

compound-statement = "{"  ( declaration-or-statement )*  "}"

declaration-or-statement = declaration
	| statement

init-declarator-list = init-declarator  ( "," init-declarator )*

init-declarator = declarator  ( "=" initializer )?

static-assert-declaration = "_Static_assert"  "("  constant-expression  ","  string-literal  ")"  ";"

storage-class-specifier = "typedef"
	| "extern"
	| "static"
	| "_Thread_local"
	| "auto"
	| "register"

type-specifier = "void"
	| "char"
	| "short"
	| "int"
	| "long"
	| "float"
	| "double"
	| "signed"
	| "unsigned"
	| "_Bool"
	| "_Complex"
	| "_Imaginary"
	| atomic-type-specifier
	| struct-or-union-specifier
	| enum-specifier
	| typedef-name

typedef-name = identifier

type-qualifier = "const"
	| "restrict"
	| "volatile"
	| "_Atomic"

function-specifier = "inline"
	| "_Noreturn"

alignment-specifier = "_Alignas"  "("  type-name  ")"
	| "_Alignas"  "("  constant-expression  ")"

pointer = "*"  ( type-qualifier-list )?  ( pointer )?

direct-declarator = identifier
	| "("  declarator  ")"
	| direct-declarator  "["  ( "*" )?  "]"
	| direct-declarator  "["  "static"  ( type-qualifier-list )?  assignment-expression  "]"
	| direct-declarator  "["  type-qualifier-list  ( "*" )?  "]"
	| direct-declarator  "["  type-qualifier-list  ( "static" )?  assignment-expression  "]"
	| direct-declarator  "["  assignment-expression  "]"
	| direct-declarator  "("  parameter-type-list  ")"
	| direct-declarator  "("  identifier-list  ")"
	| direct-declarator  "("  ")"

identifier-list = identifier  ( "," identifier )*

initializer-list = designative-initializer  ( "," designative-initializer )*

designative-initializer = ( designation )?  initializer

initializer = "{"  initializer-list  ( "," )?  "}"
	| assignment-expression

constant-expression = conditional-expression

atomic-type-specifier = "_Atomic"  "("  type-name  ")"

struct-or-union-specifier = struct-or-union  "{"  struct-declaration-list  "}"
	| struct-or-union  identifier  ( "{" struct-declaration-list "}" )?

struct-or-union = "struct"
	| "union"

struct-declaration-list = struct-declaration  ( struct-declaration )*

struct-declaration = specifier-qualifier-list  ";"
	| specifier-qualifier-list  struct-declarator-list  ";"
	| static-assert-declaration

enum-specifier = "enum"  "{"  enumerator-list  ( "," )?  "}"
	| "enum"  identifier  ( "{" enumerator-list ( "," )? "}" )?

enumerator-list = enumerator  ( "," enumerator )*

enumerator = enumeration-constant  ( "=" constant-expression )?

enumeration-constant = identifier

type-name = specifier-qualifier-list  ( abstract-declarator )?

specifier-qualifier-list = specifier-qualifier  ( specifier-qualifier )*

specifier-qualifier = type-specifier
	| type-qualifier

abstract-declarator = pointer  ( direct-abstract-declarator )?
	| direct-abstract-declarator

direct-abstract-declarator = "("  abstract-declarator  ")"
	| "("  parameter-type-list  ")"
	| "("  ")"
	| "["  ( "*" )?  "]"
	| "["  "static"  ( type-qualifier-list )?  assignment-expression  "]"
	| "["  type-qualifier-list  ( ( "static" )? assignment-expression )?  "]"
	| "["  assignment-expression  "]"
	| direct-abstract-declarator  "["  ( "*" )?  "]"
	| direct-abstract-declarator  "["  "static"  ( type-qualifier-list )?  assignment-expression  "]"
	| direct-abstract-declarator  "["  type-qualifier-list  ( ( "static" )? assignment-expression )?  "]"
	| direct-abstract-declarator  "["  assignment-expression  "]"
	| direct-abstract-declarator  "("  parameter-type-list  ")"
	| direct-abstract-declarator  "("  ")"

struct-declarator-list = struct-declarator  ( "," struct-declarator )*

type-qualifier-list = type-qualifier  ( type-qualifier )*

parameter-type-list = parameter-list  ( "," "..." )?

struct-declarator = ":"  constant-expression
	| declarator  ( ":" constant-expression )?

assignment-operator = "="
	| "*="
	| "/="
	| "%="
	| "+="
	| "-="
	| "<<="
	| ">>="
	| "&="
	| "^="
	| "|="

parameter-list = parameter-declaration  ( "," parameter-declaration )*

parameter-declaration = declaration-specifiers  ( declarator | abstract-declarator )?

expression = assignment-expression  ( "," assignment-expression )*

assignment-expression = conditional-expression
	| unary-expression  assignment-operator  assignment-expression

conditional-expression = logical-or-expression  ( "?" expression ":" conditional-expression )?

logical-or-expression = logical-and-expression  ( "||" logical-and-expression )*

logical-and-expression = inclusive-or-expression  ( "&&" inclusive-or-expression )*

inclusive-or-expression = exclusive-or-expression  ( "|" exclusive-or-expression )*

exclusive-or-expression = and-expression  ( "^" and-expression )*

and-expression = equality-expression  ( "&" equality-expression )*

equality-expression = relational-expression  ( "==" | "!=" relational-expression )*

relational-expression = shift-expression  ( "<" | ">" | "<=" | ">=" shift-expression )*

shift-expression = additive-expression  ( "<<" | ">>" additive-expression )*

additive-expression = multiplicative-expression  ( "+" | "-" multiplicative-expression )*

multiplicative-expression = cast-expression  ( "*" | "/" | "%" cast-expression )*

cast-expression = unary-expression
	| "("  type-name  ")"  cast-expression

unary-expression = postfix-expression
	| "++" | "--"  unary-expression
	| unary-operator  cast-expression
	| "sizeof"  unary-expression
	| "sizeof"  "("  type-name  ")"
	| "_Alignof"  "("  type-name  ")"

postfix-expression = primary-expression
	| postfix-expression  "["  expression  "]"
	| postfix-expression  "("  ( argument-expression-list )?  ")"
	| postfix-expression  "." | "->"  identifier
	| postfix-expression  "++" | "--"
	| "("  type-name  ")"  "{"  initializer-list  ( "," )?  "}"

unary-operator = "&"
	| "*"
	| "+"
	| "-"
	| "~"
	| "!"

primary-expression = identifier
	| constant
	| string
	| "("  expression  ")"
	| generic-selection

argument-expression-list = assignment-expression  ( "," assignment-expression )*

constant = integer-constant
	| character-constant
	| floating-constant
	| enumeration-constant

string = string-literal
	| "__func__"

generic-selection = "_Generic"  "("  assignment-expression  ","  generic-assoc-list  ")"

generic-assoc-list = generic-association  ( "," generic-association )*

generic-association = type-name  ":"  assignment-expression
	| "default"  ":"  assignment-expression

designation = designator-list  "="

designator-list = designator  ( designator )*

designator = "["  constant-expression  "]"
	| "."  identifier

statement = labeled-statement
	| compound-statement
	| expression-statement
	| selection-statement
	| iteration-statement
	| jump-statement

labeled-statement = identifier  ":"  statement
	| "case"  constant-expression  ":"  statement
	| "default"  ":"  statement

expression-statement = ( expression )?  ";"

selection-statement = "if"  "("  expression  ")"  statement  "else"  statement
	| "if"  "("  expression  ")"  statement
	| "switch"  "("  expression  ")"  statement

iteration-statement = "while"  "("  expression  ")"  statement
	| "do"  statement  "while"  "("  expression  ")"  ";"
	| "for"  "("  ( expression )?  ";"  ( expression )?  ";"  ( expression )?  ")"  statement
	| "for"  "("  declaration  ( expression )?  ";"  ( expression )?  ")"  statement

jump-statement = "goto"  identifier  ";"
	| "continue"  ";"
	| "break"  ";"
	| "return"  ( expression )?  ";"

digraph G {
	node [ shape = box, style = rounded ];
	edge [ dir = none ];
	"p0000000000000000" [ shape = record, label = "=|translation-unit" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "external-declaration" ];
	"p0000000000000000" [ shape = record, label = "=|external-declaration" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "function-definition" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declaration" ];
	"p0000000000000000" [ shape = record, label = "=|function-definition" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declaration-specifiers" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declaration-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "compound-statement" ];
	"p0000000000000000" [ shape = record, label = "=|declaration" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declaration-specifiers" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "init-declarator-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "static-assert-declaration" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|declaration-specifiers" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declaration-specifier" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declaration-specifier" ];
	"p0000000000000000" [ shape = record, label = "=|declaration-specifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "storage-class-specifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-specifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-qualifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "function-specifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "alignment-specifier" ];
	"p0000000000000000" [ shape = record, label = "=|declarator" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "pointer" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-declarator" ];
	"p0000000000000000" [ shape = record, label = "=|declaration-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declaration" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declaration" ];
	"p0000000000000000" [ shape = record, label = "=|compound-statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;{&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declaration-or-statement" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;}&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|declaration-or-statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declaration" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "statement" ];
	"p0000000000000000" [ shape = record, label = "=|init-declarator-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "init-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "init-declarator" ];
	"p0000000000000000" [ shape = record, label = "=|init-declarator" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;=&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "initializer" ];
	"p0000000000000000" [ shape = record, label = "=|static-assert-declaration" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;_Static_assert&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "constant-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "string-literal" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|storage-class-specifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;typedef&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;extern&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;static&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;_Thread_local&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;auto&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;register&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|type-specifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;void&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;char&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;short&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;int&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;long&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;float&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;double&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;signed&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;unsigned&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;_Bool&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;_Complex&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;_Imaginary&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "atomic-type-specifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "struct-or-union-specifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "enum-specifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "typedef-name" ];
	"p0000000000000000" [ shape = record, label = "=|typedef-name" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|type-qualifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;const&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;restrict&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;volatile&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;_Atomic&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|function-specifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;inline&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;_Noreturn&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|alignment-specifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;_Alignas&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-name" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;_Alignas&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "constant-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|pointer" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;*&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-qualifier-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "pointer" ];
	"p0000000000000000" [ shape = record, label = "=|direct-declarator" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;*&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;static&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-qualifier-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-qualifier-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;*&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-qualifier-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;static&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "parameter-type-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|identifier-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier" ];
	"p0000000000000000" [ shape = record, label = "=|initializer-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "designative-initializer" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "designative-initializer" ];
	"p0000000000000000" [ shape = record, label = "=|designative-initializer" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "designation" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "initializer" ];
	"p0000000000000000" [ shape = record, label = "=|initializer" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;{&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "initializer-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;}&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"p0000000000000000" [ shape = record, label = "=|constant-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "conditional-expression" ];
	"p0000000000000000" [ shape = record, label = "=|atomic-type-specifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;_Atomic&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-name" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|struct-or-union-specifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "struct-or-union" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;{&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "struct-declaration-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;}&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "struct-or-union" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;{&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "struct-declaration-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;}&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|struct-or-union" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;struct&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;union&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|struct-declaration-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "struct-declaration" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "struct-declaration" ];
	"p0000000000000000" [ shape = record, label = "=|struct-declaration" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "specifier-qualifier-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "specifier-qualifier-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "struct-declarator-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "static-assert-declaration" ];
	"p0000000000000000" [ shape = record, label = "=|enum-specifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;enum&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;{&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "enumerator-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;}&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;enum&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;{&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "enumerator-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;}&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|enumerator-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "enumerator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "enumerator" ];
	"p0000000000000000" [ shape = record, label = "=|enumerator" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "enumeration-constant" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;=&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "constant-expression" ];
	"p0000000000000000" [ shape = record, label = "=|enumeration-constant" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|type-name" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "specifier-qualifier-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "abstract-declarator" ];
	"p0000000000000000" [ shape = record, label = "=|specifier-qualifier-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "specifier-qualifier" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "specifier-qualifier" ];
	"p0000000000000000" [ shape = record, label = "=|specifier-qualifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-specifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-qualifier" ];
	"p0000000000000000" [ shape = record, label = "=|abstract-declarator" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "pointer" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-abstract-declarator" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-abstract-declarator" ];
	"p0000000000000000" [ shape = record, label = "=|direct-abstract-declarator" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "abstract-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "parameter-type-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;*&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;static&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-qualifier-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-qualifier-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;static&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-abstract-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;*&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-abstract-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;static&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-qualifier-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-abstract-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-qualifier-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;static&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-abstract-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-abstract-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "parameter-type-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-abstract-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|struct-declarator-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "struct-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "struct-declarator" ];
	"p0000000000000000" [ shape = record, label = "=|type-qualifier-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-qualifier" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-qualifier" ];
	"p0000000000000000" [ shape = record, label = "=|parameter-type-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "parameter-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;...&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|struct-declarator" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;:&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "constant-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;:&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "constant-expression" ];
	"p0000000000000000" [ shape = record, label = "=|assignment-operator" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;=&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;*=&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;/=&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;%=&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;+=&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;-=&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;&#x3C;&#x3C;=&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;&#x3E;&#x3E;=&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;&amp;=&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;^=&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;|=&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|parameter-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "parameter-declaration" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "parameter-declaration" ];
	"p0000000000000000" [ shape = record, label = "=|parameter-declaration" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declaration-specifiers" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declarator" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "abstract-declarator" ];
	"p0000000000000000" [ shape = record, label = "=|expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"p0000000000000000" [ shape = record, label = "=|assignment-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "conditional-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "unary-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-operator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"p0000000000000000" [ shape = record, label = "=|conditional-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "logical-or-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;?&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;:&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "conditional-expression" ];
	"p0000000000000000" [ shape = record, label = "=|logical-or-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "logical-and-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;||&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "logical-and-expression" ];
	"p0000000000000000" [ shape = record, label = "=|logical-and-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "inclusive-or-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;&amp;&amp;&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "inclusive-or-expression" ];
	"p0000000000000000" [ shape = record, label = "=|inclusive-or-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "exclusive-or-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;|&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "exclusive-or-expression" ];
	"p0000000000000000" [ shape = record, label = "=|exclusive-or-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "and-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;^&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "and-expression" ];
	"p0000000000000000" [ shape = record, label = "=|and-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "equality-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;&amp;&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "equality-expression" ];
	"p0000000000000000" [ shape = record, label = "=|equality-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "relational-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;==&quot;" ];
	"t0000000000000000" [ style = filled];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;!=&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "relational-expression" ];
	"p0000000000000000" [ shape = record, label = "=|relational-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "shift-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;&#x3C;&quot;" ];
	"t0000000000000000" [ style = filled];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;&#x3E;&quot;" ];
	"t0000000000000000" [ style = filled];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;&#x3C;=&quot;" ];
	"t0000000000000000" [ style = filled];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;&#x3E;=&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "shift-expression" ];
	"p0000000000000000" [ shape = record, label = "=|shift-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "additive-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;&#x3C;&#x3C;&quot;" ];
	"t0000000000000000" [ style = filled];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;&#x3E;&#x3E;&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "additive-expression" ];
	"p0000000000000000" [ shape = record, label = "=|additive-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "multiplicative-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;+&quot;" ];
	"t0000000000000000" [ style = filled];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;-&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "multiplicative-expression" ];
	"p0000000000000000" [ shape = record, label = "=|multiplicative-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "cast-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;*&quot;" ];
	"t0000000000000000" [ style = filled];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;/&quot;" ];
	"t0000000000000000" [ style = filled];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;%&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "cast-expression" ];
	"p0000000000000000" [ shape = record, label = "=|cast-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "unary-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-name" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "cast-expression" ];
	"p0000000000000000" [ shape = record, label = "=|unary-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "postfix-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;++&quot;" ];
	"t0000000000000000" [ style = filled];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;--&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "unary-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "unary-operator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "cast-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;sizeof&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "unary-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;sizeof&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-name" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;_Alignof&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-name" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|postfix-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "primary-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "postfix-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "postfix-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "argument-expression-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "postfix-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;.&quot;" ];
	"t0000000000000000" [ style = filled];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;-&#x3E;&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "postfix-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;++&quot;" ];
	"t0000000000000000" [ style = filled];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;--&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-name" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;{&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "initializer-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;}&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|unary-operator" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;&amp;&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;*&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;+&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;-&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;~&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;!&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|primary-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "constant" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "string" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "generic-selection" ];
	"p0000000000000000" [ shape = record, label = "=|argument-expression-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"p0000000000000000" [ shape = record, label = "=|constant" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "integer-constant" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "character-constant" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "floating-constant" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "enumeration-constant" ];
	"p0000000000000000" [ shape = record, label = "=|string" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "string-literal" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;__func__&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|generic-selection" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;_Generic&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "generic-assoc-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|generic-assoc-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "generic-association" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "generic-association" ];
	"p0000000000000000" [ shape = record, label = "=|generic-association" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-name" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;:&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;default&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;:&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"p0000000000000000" [ shape = record, label = "=|designation" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "designator-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;=&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|designator-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "designator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "designator" ];
	"p0000000000000000" [ shape = record, label = "=|designator" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "constant-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;.&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "labeled-statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "compound-statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression-statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "selection-statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "iteration-statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "jump-statement" ];
	"p0000000000000000" [ shape = record, label = "=|labeled-statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;:&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;case&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "constant-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;:&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;default&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;:&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "statement" ];
	"p0000000000000000" [ shape = record, label = "=|expression-statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|selection-statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;if&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "statement" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;else&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;if&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;switch&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "statement" ];
	"p0000000000000000" [ shape = record, label = "=|iteration-statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;while&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;do&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "statement" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;while&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;for&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;for&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declaration" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "statement" ];
	"p0000000000000000" [ shape = record, label = "=|jump-statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;goto&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;continue&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;break&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;return&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
}
<!DOCTYPE html>
<html>

 <head>
  <style>
    dl.bnf span.token {
    	text-transform: uppercase;
    }
    
    dl.bnf span.cat {
    	margin-right: 0.5ex;
    }
    
    dl.bnf dd > span.pipe {
    	float: left;
    	width: 1ex;
    	margin-left: -1.8ex;
    	text-align: right;
    	padding-right: .8ex; /* about the width of a space */
    }
    
    dl.bnf dt {
    	display: block;
    	min-width: 8em;
    	padding-right: 1em;
    }
    
    dl.bnf a.rule {
    	text-decoration: none;
    }
    
    dl.bnf a.rule:hover {
    	text-decoration: underline;
    }
    
    /* page stuff */
    dl.bnf { margin: 2em 4em; }
    dl.bnf dt { margin: 0.25em 0; }
    dl.bnf dd { margin-left: 2em; }
  </style>
 </head>
 <body>
  <dl class='bnf'>
    <dt><a name='translation-unit'>translation-unit</a>:</dt>
    <dd>
      <span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#external-declaration' class='rule' data-min='1' data-max='1'>external-declaration</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='external-declaration'>external-declaration</a>:</dt>
    <dd>
      <span class='alt'><a href='#function-definition' class='rule' data-min='1' data-max='1'>function-definition</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#declaration' class='rule' data-min='1' data-max='1'>declaration</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='function-definition'>function-definition</a>:</dt>
    <dd>
      <span class='alt'><a href='#declaration-specifiers' class='rule' data-min='1' data-max='1'>declaration-specifiers</a></span>
<span class='cat'> </span><span class='alt'><a href='#declarator' class='rule' data-min='1' data-max='1'>declarator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#declaration-list' class='rule' data-min='1' data-max='1'>declaration-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#compound-statement' class='rule' data-min='1' data-max='1'>compound-statement</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='declaration'>declaration</a>:</dt>
    <dd>
      <span class='alt'><a href='#declaration-specifiers' class='rule' data-min='1' data-max='1'>declaration-specifiers</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#init-declarator-list' class='rule' data-min='1' data-max='1'>init-declarator-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#static-assert-declaration' class='rule' data-min='1' data-max='1'>static-assert-declaration</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='declaration-specifiers'>declaration-specifiers</a>:</dt>
    <dd>
      <span class='alt'><a href='#declaration-specifier' class='rule' data-min='1' data-max='1'>declaration-specifier</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#declaration-specifier' class='rule' data-min='1' data-max='1'>declaration-specifier</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='declaration-specifier'>declaration-specifier</a>:</dt>
    <dd>
      <span class='alt'><a href='#storage-class-specifier' class='rule' data-min='1' data-max='1'>storage-class-specifier</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#type-specifier' class='rule' data-min='1' data-max='1'>type-specifier</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#type-qualifier' class='rule' data-min='1' data-max='1'>type-qualifier</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#function-specifier' class='rule' data-min='1' data-max='1'>function-specifier</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#alignment-specifier' class='rule' data-min='1' data-max='1'>alignment-specifier</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='declarator'>declarator</a>:</dt>
    <dd>
      <span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#pointer' class='rule' data-min='1' data-max='1'>pointer</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='declaration-list'>declaration-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#declaration' class='rule' data-min='1' data-max='1'>declaration</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#declaration' class='rule' data-min='1' data-max='1'>declaration</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='compound-statement'>compound-statement</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#declaration-or-statement' class='rule' data-min='1' data-max='1'>declaration-or-statement</a></span>
 <span class='rep'>}</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='declaration-or-statement'>declaration-or-statement</a>:</dt>
    <dd>
      <span class='alt'><a href='#declaration' class='rule' data-min='1' data-max='1'>declaration</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='init-declarator-list'>init-declarator-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#init-declarator' class='rule' data-min='1' data-max='1'>init-declarator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#init-declarator' class='rule' data-min='1' data-max='1'>init-declarator</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='init-declarator'>init-declarator</a>:</dt>
    <dd>
      <span class='alt'><a href='#declarator' class='rule' data-min='1' data-max='1'>declarator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;=&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#initializer' class='rule' data-min='1' data-max='1'>initializer</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='static-assert-declaration'>static-assert-declaration</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;_Static_assert&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>string-literal</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='storage-class-specifier'>storage-class-specifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;typedef&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;extern&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Thread_local&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;auto&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;register&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='type-specifier'>type-specifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;void&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;char&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;short&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;int&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;long&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;float&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;double&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;signed&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;unsigned&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Bool&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Complex&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Imaginary&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#atomic-type-specifier' class='rule' data-min='1' data-max='1'>atomic-type-specifier</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#struct-or-union-specifier' class='rule' data-min='1' data-max='1'>struct-or-union-specifier</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#enum-specifier' class='rule' data-min='1' data-max='1'>enum-specifier</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#typedef-name' class='rule' data-min='1' data-max='1'>typedef-name</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='typedef-name'>typedef-name</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>identifier</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='type-qualifier'>type-qualifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;const&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;restrict&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;volatile&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Atomic&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='function-specifier'>function-specifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;inline&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Noreturn&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='alignment-specifier'>alignment-specifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;_Alignas&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Alignas&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='pointer'>pointer</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#pointer' class='rule' data-min='1' data-max='1'>pointer</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='direct-declarator'>direct-declarator</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>identifier</span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#declarator' class='rule' data-min='1' data-max='1'>declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#parameter-type-list' class='rule' data-min='1' data-max='1'>parameter-type-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#identifier-list' class='rule' data-min='1' data-max='1'>identifier-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='identifier-list'>identifier-list</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>identifier</span></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#identifier' class='rule' data-min='1' data-max='1'>identifier</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='initializer-list'>initializer-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#designative-initializer' class='rule' data-min='1' data-max='1'>designative-initializer</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#designative-initializer' class='rule' data-min='1' data-max='1'>designative-initializer</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='designative-initializer'>designative-initializer</a>:</dt>
    <dd>
      <span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#designation' class='rule' data-min='1' data-max='1'>designation</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#initializer' class='rule' data-min='1' data-max='1'>initializer</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='initializer'>initializer</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#initializer-list' class='rule' data-min='1' data-max='1'>initializer-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='constant-expression'>constant-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#conditional-expression' class='rule' data-min='1' data-max='1'>conditional-expression</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='atomic-type-specifier'>atomic-type-specifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;_Atomic&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='struct-or-union-specifier'>struct-or-union-specifier</a>:</dt>
    <dd>
      <span class='alt'><a href='#struct-or-union' class='rule' data-min='1' data-max='1'>struct-or-union</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#struct-declaration-list' class='rule' data-min='1' data-max='1'>struct-declaration-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#struct-or-union' class='rule' data-min='1' data-max='1'>struct-or-union</a></span>
<span class='cat'> </span><span class='alt'><span class='token'>identifier</span></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#struct-declaration-list' class='rule' data-min='1' data-max='1'>struct-declaration-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='struct-or-union'>struct-or-union</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;struct&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;union&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='struct-declaration-list'>struct-declaration-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#struct-declaration' class='rule' data-min='1' data-max='1'>struct-declaration</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#struct-declaration' class='rule' data-min='1' data-max='1'>struct-declaration</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='struct-declaration'>struct-declaration</a>:</dt>
    <dd>
      <span class='alt'><a href='#specifier-qualifier-list' class='rule' data-min='1' data-max='1'>specifier-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#specifier-qualifier-list' class='rule' data-min='1' data-max='1'>specifier-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><a href='#struct-declarator-list' class='rule' data-min='1' data-max='1'>struct-declarator-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#static-assert-declaration' class='rule' data-min='1' data-max='1'>static-assert-declaration</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='enum-specifier'>enum-specifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;enum&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#enumerator-list' class='rule' data-min='1' data-max='1'>enumerator-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;enum&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>identifier</span></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#enumerator-list' class='rule' data-min='1' data-max='1'>enumerator-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='enumerator-list'>enumerator-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#enumerator' class='rule' data-min='1' data-max='1'>enumerator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#enumerator' class='rule' data-min='1' data-max='1'>enumerator</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='enumerator'>enumerator</a>:</dt>
    <dd>
      <span class='alt'><a href='#enumeration-constant' class='rule' data-min='1' data-max='1'>enumeration-constant</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;=&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='enumeration-constant'>enumeration-constant</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>identifier</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='type-name'>type-name</a>:</dt>
    <dd>
      <span class='alt'><a href='#specifier-qualifier-list' class='rule' data-min='1' data-max='1'>specifier-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#abstract-declarator' class='rule' data-min='1' data-max='1'>abstract-declarator</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='specifier-qualifier-list'>specifier-qualifier-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#specifier-qualifier' class='rule' data-min='1' data-max='1'>specifier-qualifier</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#specifier-qualifier' class='rule' data-min='1' data-max='1'>specifier-qualifier</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='specifier-qualifier'>specifier-qualifier</a>:</dt>
    <dd>
      <span class='alt'><a href='#type-specifier' class='rule' data-min='1' data-max='1'>type-specifier</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#type-qualifier' class='rule' data-min='1' data-max='1'>type-qualifier</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='abstract-declarator'>abstract-declarator</a>:</dt>
    <dd>
      <span class='alt'><a href='#pointer' class='rule' data-min='1' data-max='1'>pointer</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
 <span class='rep'>]</span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='direct-abstract-declarator'>direct-abstract-declarator</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#abstract-declarator' class='rule' data-min='1' data-max='1'>abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#parameter-type-list' class='rule' data-min='1' data-max='1'>parameter-type-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#parameter-type-list' class='rule' data-min='1' data-max='1'>parameter-type-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='struct-declarator-list'>struct-declarator-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#struct-declarator' class='rule' data-min='1' data-max='1'>struct-declarator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#struct-declarator' class='rule' data-min='1' data-max='1'>struct-declarator</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='type-qualifier-list'>type-qualifier-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#type-qualifier' class='rule' data-min='1' data-max='1'>type-qualifier</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#type-qualifier' class='rule' data-min='1' data-max='1'>type-qualifier</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='parameter-type-list'>parameter-type-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#parameter-list' class='rule' data-min='1' data-max='1'>parameter-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;...&quot;</tt></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='struct-declarator'>struct-declarator</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#declarator' class='rule' data-min='1' data-max='1'>declarator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='assignment-operator'>assignment-operator</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;*=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;/=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;%=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;+=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;-=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;&lt;&lt;=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;&gt;&gt;=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;&amp;=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;^=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;|=&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='parameter-list'>parameter-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#parameter-declaration' class='rule' data-min='1' data-max='1'>parameter-declaration</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#parameter-declaration' class='rule' data-min='1' data-max='1'>parameter-declaration</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='parameter-declaration'>parameter-declaration</a>:</dt>
    <dd>
      <span class='alt'><a href='#declaration-specifiers' class='rule' data-min='1' data-max='1'>declaration-specifiers</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#declarator' class='rule' data-min='1' data-max='1'>declarator</a></span>
<span class='pipe'> | </span><span class='alt'><a href='#abstract-declarator' class='rule' data-min='1' data-max='1'>abstract-declarator</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='expression'>expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='assignment-expression'>assignment-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#conditional-expression' class='rule' data-min='1' data-max='1'>conditional-expression</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#unary-expression' class='rule' data-min='1' data-max='1'>unary-expression</a></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-operator' class='rule' data-min='1' data-max='1'>assignment-operator</a></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='conditional-expression'>conditional-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#logical-or-expression' class='rule' data-min='1' data-max='1'>logical-or-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;?&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#conditional-expression' class='rule' data-min='1' data-max='1'>conditional-expression</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='logical-or-expression'>logical-or-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#logical-and-expression' class='rule' data-min='1' data-max='1'>logical-and-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;||&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#logical-and-expression' class='rule' data-min='1' data-max='1'>logical-and-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='logical-and-expression'>logical-and-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#inclusive-or-expression' class='rule' data-min='1' data-max='1'>inclusive-or-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;&amp;&amp;&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#inclusive-or-expression' class='rule' data-min='1' data-max='1'>inclusive-or-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='inclusive-or-expression'>inclusive-or-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#exclusive-or-expression' class='rule' data-min='1' data-max='1'>exclusive-or-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;|&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#exclusive-or-expression' class='rule' data-min='1' data-max='1'>exclusive-or-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='exclusive-or-expression'>exclusive-or-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#and-expression' class='rule' data-min='1' data-max='1'>and-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;^&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#and-expression' class='rule' data-min='1' data-max='1'>and-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='and-expression'>and-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#equality-expression' class='rule' data-min='1' data-max='1'>equality-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;&amp;&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#equality-expression' class='rule' data-min='1' data-max='1'>equality-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='equality-expression'>equality-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#relational-expression' class='rule' data-min='1' data-max='1'>relational-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;==&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;!=&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><a href='#relational-expression' class='rule' data-min='1' data-max='1'>relational-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='relational-expression'>relational-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#shift-expression' class='rule' data-min='1' data-max='1'>shift-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;&lt;&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;&gt;&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;&lt;=&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;&gt;=&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><a href='#shift-expression' class='rule' data-min='1' data-max='1'>shift-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='shift-expression'>shift-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#additive-expression' class='rule' data-min='1' data-max='1'>additive-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;&lt;&lt;&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;&gt;&gt;&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><a href='#additive-expression' class='rule' data-min='1' data-max='1'>additive-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='additive-expression'>additive-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#multiplicative-expression' class='rule' data-min='1' data-max='1'>multiplicative-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;+&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;-&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><a href='#multiplicative-expression' class='rule' data-min='1' data-max='1'>multiplicative-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='multiplicative-expression'>multiplicative-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#cast-expression' class='rule' data-min='1' data-max='1'>cast-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;/&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;%&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><a href='#cast-expression' class='rule' data-min='1' data-max='1'>cast-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='cast-expression'>cast-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#unary-expression' class='rule' data-min='1' data-max='1'>unary-expression</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#cast-expression' class='rule' data-min='1' data-max='1'>cast-expression</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='unary-expression'>unary-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#postfix-expression' class='rule' data-min='1' data-max='1'>postfix-expression</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;++&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;--&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><a href='#unary-expression' class='rule' data-min='1' data-max='1'>unary-expression</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#unary-operator' class='rule' data-min='1' data-max='1'>unary-operator</a></span>
<span class='cat'> </span><span class='alt'><a href='#cast-expression' class='rule' data-min='1' data-max='1'>cast-expression</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;sizeof&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#unary-expression' class='rule' data-min='1' data-max='1'>unary-expression</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;sizeof&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Alignof&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='postfix-expression'>postfix-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#primary-expression' class='rule' data-min='1' data-max='1'>primary-expression</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#postfix-expression' class='rule' data-min='1' data-max='1'>postfix-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#postfix-expression' class='rule' data-min='1' data-max='1'>postfix-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#argument-expression-list' class='rule' data-min='1' data-max='1'>argument-expression-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#postfix-expression' class='rule' data-min='1' data-max='1'>postfix-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;.&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;-&gt;&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><span class='token'>identifier</span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#postfix-expression' class='rule' data-min='1' data-max='1'>postfix-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;++&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;--&quot;</tt></span>
 <span class='rep'>)</span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#initializer-list' class='rule' data-min='1' data-max='1'>initializer-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='unary-operator'>unary-operator</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;&amp;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;+&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;-&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;~&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;!&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='primary-expression'>primary-expression</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>identifier</span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#constant' class='rule' data-min='1' data-max='1'>constant</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#string' class='rule' data-min='1' data-max='1'>string</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#generic-selection' class='rule' data-min='1' data-max='1'>generic-selection</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='argument-expression-list'>argument-expression-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='constant'>constant</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>integer-constant</span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>character-constant</span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>floating-constant</span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#enumeration-constant' class='rule' data-min='1' data-max='1'>enumeration-constant</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='string'>string</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>string-literal</span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;__func__&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='generic-selection'>generic-selection</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;_Generic&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#generic-assoc-list' class='rule' data-min='1' data-max='1'>generic-assoc-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='generic-assoc-list'>generic-assoc-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#generic-association' class='rule' data-min='1' data-max='1'>generic-association</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#generic-association' class='rule' data-min='1' data-max='1'>generic-association</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='generic-association'>generic-association</a>:</dt>
    <dd>
      <span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;default&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='designation'>designation</a>:</dt>
    <dd>
      <span class='alt'><a href='#designator-list' class='rule' data-min='1' data-max='1'>designator-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;=&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='designator-list'>designator-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#designator' class='rule' data-min='1' data-max='1'>designator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#designator' class='rule' data-min='1' data-max='1'>designator</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='designator'>designator</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;.&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>identifier</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='statement'>statement</a>:</dt>
    <dd>
      <span class='alt'><a href='#labeled-statement' class='rule' data-min='1' data-max='1'>labeled-statement</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#compound-statement' class='rule' data-min='1' data-max='1'>compound-statement</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#expression-statement' class='rule' data-min='1' data-max='1'>expression-statement</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#selection-statement' class='rule' data-min='1' data-max='1'>selection-statement</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#iteration-statement' class='rule' data-min='1' data-max='1'>iteration-statement</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#jump-statement' class='rule' data-min='1' data-max='1'>jump-statement</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='labeled-statement'>labeled-statement</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>identifier</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;case&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;default&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='expression-statement'>expression-statement</a>:</dt>
    <dd>
      <span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='selection-statement'>selection-statement</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;if&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;else&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;if&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;switch&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='iteration-statement'>iteration-statement</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;while&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;do&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;while&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;for&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;for&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#declaration' class='rule' data-min='1' data-max='1'>declaration</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='jump-statement'>jump-statement</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;goto&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>identifier</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;continue&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;break&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;return&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
    </dd>
  </dl>

 </body>
</html>
<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE html>
<html xml:lang='en' lang='en'
  xmlns='http://www.w3.org/1999/xhtml'
  xmlns:xlink='http://www.w3.org/1999/xlink'>

 <head>
  <meta charset='UTF-8'/>
  <style>
    dl.bnf span.token {
    	text-transform: uppercase;
    }
    
    dl.bnf span.cat {
    	margin-right: 0.5ex;
    }
    
    dl.bnf dd > span.pipe {
    	float: left;
    	width: 1ex;
    	margin-left: -1.8ex;
    	text-align: right;
    	padding-right: .8ex; /* about the width of a space */
    }
    
    dl.bnf dt {
    	display: block;
    	min-width: 8em;
    	padding-right: 1em;
    }
    
    dl.bnf a.rule {
    	text-decoration: none;
    }
    
    dl.bnf a.rule:hover {
    	text-decoration: underline;
    }
    
    /* page stuff */
    dl.bnf { margin: 2em 4em; }
    dl.bnf dt { margin: 0.25em 0; }
    dl.bnf dd { margin-left: 2em; }
  </style>
 </head>
 <body>
  <dl class='bnf'>
    <dt><a name='translation-unit'>translation-unit</a>:</dt>
    <dd>
      <span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#external-declaration' class='rule' data-min='1' data-max='1'>external-declaration</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='external-declaration'>external-declaration</a>:</dt>
    <dd>
      <span class='alt'><a href='#function-definition' class='rule' data-min='1' data-max='1'>function-definition</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#declaration' class='rule' data-min='1' data-max='1'>declaration</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='function-definition'>function-definition</a>:</dt>
    <dd>
      <span class='alt'><a href='#declaration-specifiers' class='rule' data-min='1' data-max='1'>declaration-specifiers</a></span>
<span class='cat'> </span><span class='alt'><a href='#declarator' class='rule' data-min='1' data-max='1'>declarator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#declaration-list' class='rule' data-min='1' data-max='1'>declaration-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#compound-statement' class='rule' data-min='1' data-max='1'>compound-statement</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='declaration'>declaration</a>:</dt>
    <dd>
      <span class='alt'><a href='#declaration-specifiers' class='rule' data-min='1' data-max='1'>declaration-specifiers</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#init-declarator-list' class='rule' data-min='1' data-max='1'>init-declarator-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#static-assert-declaration' class='rule' data-min='1' data-max='1'>static-assert-declaration</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='declaration-specifiers'>declaration-specifiers</a>:</dt>
    <dd>
      <span class='alt'><a href='#declaration-specifier' class='rule' data-min='1' data-max='1'>declaration-specifier</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#declaration-specifier' class='rule' data-min='1' data-max='1'>declaration-specifier</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='declaration-specifier'>declaration-specifier</a>:</dt>
    <dd>
      <span class='alt'><a href='#storage-class-specifier' class='rule' data-min='1' data-max='1'>storage-class-specifier</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#type-specifier' class='rule' data-min='1' data-max='1'>type-specifier</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#type-qualifier' class='rule' data-min='1' data-max='1'>type-qualifier</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#function-specifier' class='rule' data-min='1' data-max='1'>function-specifier</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#alignment-specifier' class='rule' data-min='1' data-max='1'>alignment-specifier</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='declarator'>declarator</a>:</dt>
    <dd>
      <span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#pointer' class='rule' data-min='1' data-max='1'>pointer</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='declaration-list'>declaration-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#declaration' class='rule' data-min='1' data-max='1'>declaration</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#declaration' class='rule' data-min='1' data-max='1'>declaration</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='compound-statement'>compound-statement</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#declaration-or-statement' class='rule' data-min='1' data-max='1'>declaration-or-statement</a></span>
 <span class='rep'>}</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='declaration-or-statement'>declaration-or-statement</a>:</dt>
    <dd>
      <span class='alt'><a href='#declaration' class='rule' data-min='1' data-max='1'>declaration</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='init-declarator-list'>init-declarator-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#init-declarator' class='rule' data-min='1' data-max='1'>init-declarator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#init-declarator' class='rule' data-min='1' data-max='1'>init-declarator</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='init-declarator'>init-declarator</a>:</dt>
    <dd>
      <span class='alt'><a href='#declarator' class='rule' data-min='1' data-max='1'>declarator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;=&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#initializer' class='rule' data-min='1' data-max='1'>initializer</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='static-assert-declaration'>static-assert-declaration</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;_Static_assert&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>string-literal</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='storage-class-specifier'>storage-class-specifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;typedef&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;extern&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Thread_local&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;auto&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;register&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='type-specifier'>type-specifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;void&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;char&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;short&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;int&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;long&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;float&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;double&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;signed&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;unsigned&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Bool&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Complex&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Imaginary&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#atomic-type-specifier' class='rule' data-min='1' data-max='1'>atomic-type-specifier</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#struct-or-union-specifier' class='rule' data-min='1' data-max='1'>struct-or-union-specifier</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#enum-specifier' class='rule' data-min='1' data-max='1'>enum-specifier</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#typedef-name' class='rule' data-min='1' data-max='1'>typedef-name</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='typedef-name'>typedef-name</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>identifier</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='type-qualifier'>type-qualifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;const&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;restrict&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;volatile&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Atomic&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='function-specifier'>function-specifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;inline&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Noreturn&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='alignment-specifier'>alignment-specifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;_Alignas&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Alignas&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='pointer'>pointer</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#pointer' class='rule' data-min='1' data-max='1'>pointer</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='direct-declarator'>direct-declarator</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>identifier</span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#declarator' class='rule' data-min='1' data-max='1'>declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#parameter-type-list' class='rule' data-min='1' data-max='1'>parameter-type-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#identifier-list' class='rule' data-min='1' data-max='1'>identifier-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='identifier-list'>identifier-list</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>identifier</span></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#identifier' class='rule' data-min='1' data-max='1'>identifier</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='initializer-list'>initializer-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#designative-initializer' class='rule' data-min='1' data-max='1'>designative-initializer</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#designative-initializer' class='rule' data-min='1' data-max='1'>designative-initializer</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='designative-initializer'>designative-initializer</a>:</dt>
    <dd>
      <span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#designation' class='rule' data-min='1' data-max='1'>designation</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#initializer' class='rule' data-min='1' data-max='1'>initializer</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='initializer'>initializer</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#initializer-list' class='rule' data-min='1' data-max='1'>initializer-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='constant-expression'>constant-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#conditional-expression' class='rule' data-min='1' data-max='1'>conditional-expression</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='atomic-type-specifier'>atomic-type-specifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;_Atomic&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='struct-or-union-specifier'>struct-or-union-specifier</a>:</dt>
    <dd>
      <span class='alt'><a href='#struct-or-union' class='rule' data-min='1' data-max='1'>struct-or-union</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#struct-declaration-list' class='rule' data-min='1' data-max='1'>struct-declaration-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#struct-or-union' class='rule' data-min='1' data-max='1'>struct-or-union</a></span>
<span class='cat'> </span><span class='alt'><span class='token'>identifier</span></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#struct-declaration-list' class='rule' data-min='1' data-max='1'>struct-declaration-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='struct-or-union'>struct-or-union</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;struct&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;union&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='struct-declaration-list'>struct-declaration-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#struct-declaration' class='rule' data-min='1' data-max='1'>struct-declaration</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#struct-declaration' class='rule' data-min='1' data-max='1'>struct-declaration</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='struct-declaration'>struct-declaration</a>:</dt>
    <dd>
      <span class='alt'><a href='#specifier-qualifier-list' class='rule' data-min='1' data-max='1'>specifier-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#specifier-qualifier-list' class='rule' data-min='1' data-max='1'>specifier-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><a href='#struct-declarator-list' class='rule' data-min='1' data-max='1'>struct-declarator-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#static-assert-declaration' class='rule' data-min='1' data-max='1'>static-assert-declaration</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='enum-specifier'>enum-specifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;enum&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#enumerator-list' class='rule' data-min='1' data-max='1'>enumerator-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;enum&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>identifier</span></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#enumerator-list' class='rule' data-min='1' data-max='1'>enumerator-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='enumerator-list'>enumerator-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#enumerator' class='rule' data-min='1' data-max='1'>enumerator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#enumerator' class='rule' data-min='1' data-max='1'>enumerator</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='enumerator'>enumerator</a>:</dt>
    <dd>
      <span class='alt'><a href='#enumeration-constant' class='rule' data-min='1' data-max='1'>enumeration-constant</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;=&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='enumeration-constant'>enumeration-constant</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>identifier</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='type-name'>type-name</a>:</dt>
    <dd>
      <span class='alt'><a href='#specifier-qualifier-list' class='rule' data-min='1' data-max='1'>specifier-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#abstract-declarator' class='rule' data-min='1' data-max='1'>abstract-declarator</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='specifier-qualifier-list'>specifier-qualifier-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#specifier-qualifier' class='rule' data-min='1' data-max='1'>specifier-qualifier</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#specifier-qualifier' class='rule' data-min='1' data-max='1'>specifier-qualifier</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='specifier-qualifier'>specifier-qualifier</a>:</dt>
    <dd>
      <span class='alt'><a href='#type-specifier' class='rule' data-min='1' data-max='1'>type-specifier</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#type-qualifier' class='rule' data-min='1' data-max='1'>type-qualifier</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='abstract-declarator'>abstract-declarator</a>:</dt>
    <dd>
      <span class='alt'><a href='#pointer' class='rule' data-min='1' data-max='1'>pointer</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
 <span class='rep'>]</span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='direct-abstract-declarator'>direct-abstract-declarator</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#abstract-declarator' class='rule' data-min='1' data-max='1'>abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#parameter-type-list' class='rule' data-min='1' data-max='1'>parameter-type-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#parameter-type-list' class='rule' data-min='1' data-max='1'>parameter-type-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='struct-declarator-list'>struct-declarator-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#struct-declarator' class='rule' data-min='1' data-max='1'>struct-declarator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#struct-declarator' class='rule' data-min='1' data-max='1'>struct-declarator</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='type-qualifier-list'>type-qualifier-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#type-qualifier' class='rule' data-min='1' data-max='1'>type-qualifier</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#type-qualifier' class='rule' data-min='1' data-max='1'>type-qualifier</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='parameter-type-list'>parameter-type-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#parameter-list' class='rule' data-min='1' data-max='1'>parameter-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;...&quot;</tt></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='struct-declarator'>struct-declarator</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#declarator' class='rule' data-min='1' data-max='1'>declarator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='assignment-operator'>assignment-operator</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;*=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;/=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;%=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;+=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;-=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;&lt;&lt;=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;&gt;&gt;=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;&amp;=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;^=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;|=&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='parameter-list'>parameter-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#parameter-declaration' class='rule' data-min='1' data-max='1'>parameter-declaration</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#parameter-declaration' class='rule' data-min='1' data-max='1'>parameter-declaration</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='parameter-declaration'>parameter-declaration</a>:</dt>
    <dd>
      <span class='alt'><a href='#declaration-specifiers' class='rule' data-min='1' data-max='1'>declaration-specifiers</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#declarator' class='rule' data-min='1' data-max='1'>declarator</a></span>
<span class='pipe'> | </span><span class='alt'><a href='#abstract-declarator' class='rule' data-min='1' data-max='1'>abstract-declarator</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='expression'>expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='assignment-expression'>assignment-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#conditional-expression' class='rule' data-min='1' data-max='1'>conditional-expression</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#unary-expression' class='rule' data-min='1' data-max='1'>unary-expression</a></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-operator' class='rule' data-min='1' data-max='1'>assignment-operator</a></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='conditional-expression'>conditional-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#logical-or-expression' class='rule' data-min='1' data-max='1'>logical-or-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;?&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#conditional-expression' class='rule' data-min='1' data-max='1'>conditional-expression</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='logical-or-expression'>logical-or-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#logical-and-expression' class='rule' data-min='1' data-max='1'>logical-and-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;||&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#logical-and-expression' class='rule' data-min='1' data-max='1'>logical-and-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='logical-and-expression'>logical-and-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#inclusive-or-expression' class='rule' data-min='1' data-max='1'>inclusive-or-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;&amp;&amp;&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#inclusive-or-expression' class='rule' data-min='1' data-max='1'>inclusive-or-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='inclusive-or-expression'>inclusive-or-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#exclusive-or-expression' class='rule' data-min='1' data-max='1'>exclusive-or-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;|&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#exclusive-or-expression' class='rule' data-min='1' data-max='1'>exclusive-or-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='exclusive-or-expression'>exclusive-or-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#and-expression' class='rule' data-min='1' data-max='1'>and-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;^&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#and-expression' class='rule' data-min='1' data-max='1'>and-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='and-expression'>and-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#equality-expression' class='rule' data-min='1' data-max='1'>equality-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;&amp;&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#equality-expression' class='rule' data-min='1' data-max='1'>equality-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='equality-expression'>equality-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#relational-expression' class='rule' data-min='1' data-max='1'>relational-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;==&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;!=&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><a href='#relational-expression' class='rule' data-min='1' data-max='1'>relational-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='relational-expression'>relational-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#shift-expression' class='rule' data-min='1' data-max='1'>shift-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;&lt;&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;&gt;&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;&lt;=&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;&gt;=&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><a href='#shift-expression' class='rule' data-min='1' data-max='1'>shift-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='shift-expression'>shift-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#additive-expression' class='rule' data-min='1' data-max='1'>additive-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;&lt;&lt;&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;&gt;&gt;&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><a href='#additive-expression' class='rule' data-min='1' data-max='1'>additive-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='additive-expression'>additive-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#multiplicative-expression' class='rule' data-min='1' data-max='1'>multiplicative-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;+&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;-&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><a href='#multiplicative-expression' class='rule' data-min='1' data-max='1'>multiplicative-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='multiplicative-expression'>multiplicative-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#cast-expression' class='rule' data-min='1' data-max='1'>cast-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;/&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;%&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><a href='#cast-expression' class='rule' data-min='1' data-max='1'>cast-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='cast-expression'>cast-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#unary-expression' class='rule' data-min='1' data-max='1'>unary-expression</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#cast-expression' class='rule' data-min='1' data-max='1'>cast-expression</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='unary-expression'>unary-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#postfix-expression' class='rule' data-min='1' data-max='1'>postfix-expression</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;++&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;--&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><a href='#unary-expression' class='rule' data-min='1' data-max='1'>unary-expression</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#unary-operator' class='rule' data-min='1' data-max='1'>unary-operator</a></span>
<span class='cat'> </span><span class='alt'><a href='#cast-expression' class='rule' data-min='1' data-max='1'>cast-expression</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;sizeof&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#unary-expression' class='rule' data-min='1' data-max='1'>unary-expression</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;sizeof&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Alignof&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='postfix-expression'>postfix-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#primary-expression' class='rule' data-min='1' data-max='1'>primary-expression</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#postfix-expression' class='rule' data-min='1' data-max='1'>postfix-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#postfix-expression' class='rule' data-min='1' data-max='1'>postfix-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#argument-expression-list' class='rule' data-min='1' data-max='1'>argument-expression-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#postfix-expression' class='rule' data-min='1' data-max='1'>postfix-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;.&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;-&gt;&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><span class='token'>identifier</span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#postfix-expression' class='rule' data-min='1' data-max='1'>postfix-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;++&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;--&quot;</tt></span>
 <span class='rep'>)</span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#initializer-list' class='rule' data-min='1' data-max='1'>initializer-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='unary-operator'>unary-operator</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;&amp;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;+&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;-&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;~&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;!&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='primary-expression'>primary-expression</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>identifier</span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#constant' class='rule' data-min='1' data-max='1'>constant</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#string' class='rule' data-min='1' data-max='1'>string</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#generic-selection' class='rule' data-min='1' data-max='1'>generic-selection</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='argument-expression-list'>argument-expression-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='constant'>constant</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>integer-constant</span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>character-constant</span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>floating-constant</span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#enumeration-constant' class='rule' data-min='1' data-max='1'>enumeration-constant</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='string'>string</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>string-literal</span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;__func__&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='generic-selection'>generic-selection</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;_Generic&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#generic-assoc-list' class='rule' data-min='1' data-max='1'>generic-assoc-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='generic-assoc-list'>generic-assoc-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#generic-association' class='rule' data-min='1' data-max='1'>generic-association</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#generic-association' class='rule' data-min='1' data-max='1'>generic-association</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='generic-association'>generic-association</a>:</dt>
    <dd>
      <span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;default&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='designation'>designation</a>:</dt>
    <dd>
      <span class='alt'><a href='#designator-list' class='rule' data-min='1' data-max='1'>designator-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;=&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='designator-list'>designator-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#designator' class='rule' data-min='1' data-max='1'>designator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#designator' class='rule' data-min='1' data-max='1'>designator</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='designator'>designator</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;.&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>identifier</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='statement'>statement</a>:</dt>
    <dd>
      <span class='alt'><a href='#labeled-statement' class='rule' data-min='1' data-max='1'>labeled-statement</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#compound-statement' class='rule' data-min='1' data-max='1'>compound-statement</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#expression-statement' class='rule' data-min='1' data-max='1'>expression-statement</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#selection-statement' class='rule' data-min='1' data-max='1'>selection-statement</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#iteration-statement' class='rule' data-min='1' data-max='1'>iteration-statement</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#jump-statement' class='rule' data-min='1' data-max='1'>jump-statement</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='labeled-statement'>labeled-statement</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>identifier</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;case&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;default&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='expression-statement'>expression-statement</a>:</dt>
    <dd>
      <span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='selection-statement'>selection-statement</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;if&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;else&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;if&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;switch&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='iteration-statement'>iteration-statement</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;while&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;do&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;while&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;for&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;for&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#declaration' class='rule' data-min='1' data-max='1'>declaration</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='jump-statement'>jump-statement</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;goto&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>identifier</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;continue&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;break&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;return&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
    </dd>
  </dl>

 </body>
</html>
<!DOCTYPE html>
<html>

 <head>
  <style>
      rect, line, path { stroke-width: 1.5px; stroke: black; fill: transparent; }
      rect, line, path { stroke-linecap: square; stroke-linejoin: rounded; }
      path { fill: transparent; }
      text.literal { font-family: monospace; }
      a { fill: blue; }
      a:hover rect { fill: aliceblue; }
      h2 { font-size: inherit; font-weight: inherit; }
      line.ellipsis { stroke-dasharray: 1 3.5; }
      tspan.hex { font-family: monospace; font-size: 90%; }
      path.arrow { fill: black; }
      svg { margin-left: 30px; }
  </style>
 </head>

 <body>
 <section>
  <h2><a name='translation-unit'>translation-unit:</a></h2>
  <svg height='55' width='290'>
    <path d='M5.5 4 v12 m 4 0 v-12' class='station'/>
    <path d='M280.5 4 v12 m 4 0 v-12' class='station'/>
    <a href='#external-declaration'>
    <rect x='60' y='30' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='45' text-anchor='middle' class='rule'>external-declaration</text>
    </a>
    <path d='M40 20 v10 q0 10 10 10 h10'/>
    <path d='M230 40 h10 q10 0 10 -10'/>
    <path d='M240 10 q10 0 10 10 v10'/>
    <path d='M40 20 q0 -10 10 -10'/>
    <path d='M10 10 h270'/>
  </svg>
 </section>

 <section>
  <h2><a name='external-declaration'>external-declaration:</a></h2>
  <svg height='65' width='270'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M260.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#function-definition'>
    <rect x='60' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='25' text-anchor='middle' class='rule'>function-definition</text>
    </a>
    <a href='#declaration'>
    <rect x='90' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='135' y='55' text-anchor='middle' class='rule'>declaration</text>
    </a>
    <path d='M230 30 v10'/>
    <path d='M180 50 h40 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h40'/>
    <path d='M230 30 q0 -10 10 -10'/>
    <path d='M210 20 h50'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='function-definition'>function-definition:</a></h2>
  <svg height='55' width='740'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M730.5 34 v12 m 4 0 v-12' class='station'/>
    <a href='#declaration-specifiers'>
    <rect x='30' y='30' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='115' y='45' text-anchor='middle' class='rule'>declaration-specifiers</text>
    </a>
    <a href='#declarator'>
    <rect x='220' y='30' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='265' y='45' text-anchor='middle' class='rule'>declarator</text>
    </a>
    <path d='M427 10 l-4 3 v-6 z' class='arrow'/>
    <a href='#declaration-list'>
    <rect x='360' y='30' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='425' y='45' text-anchor='middle' class='rule'>declaration-list</text>
    </a>
    <a href='#compound-statement'>
    <rect x='540' y='30' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='625' y='45' text-anchor='middle' class='rule'>compound-statement</text>
    </a>
    <path d='M340 20 v10'/>
    <path d='M510 30 q0 10 10 10'/>
    <path d='M490 40 h50'/>
    <path d='M330 40 q10 0 10 -10'/>
    <path d='M340 20 q0 -10 10 -10 h150 q10 0 10 10 v10'/>
    <path d='M310 40 h50'/>
    <path d='M200 40 h20'/>
    <path d='M710 40 h20'/>
    <path d='M10 40 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='declaration'>declaration:</a></h2>
  <svg height='115' width='560'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M550.5 34 v12 m 4 0 v-12' class='station'/>
    <a href='#declaration-specifiers'>
    <rect x='60' y='30' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='45' text-anchor='middle' class='rule'>declaration-specifiers</text>
    </a>
    <path d='M357 10 l-4 3 v-6 z' class='arrow'/>
    <a href='#init-declarator-list'>
    <rect x='280' y='30' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='355' y='45' text-anchor='middle' class='rule'>init-declarator-list</text>
    </a>
    <rect x='480' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='490' y='45' text-anchor='middle' class='literal'>;</text>
    <a href='#static-assert-declaration'>
    <rect x='185' y='60' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='280' y='75' text-anchor='middle' class='rule'>static-assert-declaration</text>
    </a>
    <rect x='270' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='280' y='105' text-anchor='middle' class='literal'>;</text>
    <path d='M520 50 v40'/>
    <path d='M290 100 h220 q10 0 10 -10'/>
    <path d='M40 90 q0 10 10 10 h220'/>
    <path d='M375 70 h135 q10 0 10 -10'/>
    <path d='M40 60 q0 10 10 10 h135'/>
    <path d='M520 50 q0 -10 10 -10'/>
    <path d='M500 40 h50'/>
    <path d='M260 20 v10'/>
    <path d='M450 30 q0 10 10 10'/>
    <path d='M430 40 h50'/>
    <path d='M250 40 q10 0 10 -10'/>
    <path d='M260 20 q0 -10 10 -10 h170 q10 0 10 10 v10'/>
    <path d='M230 40 h50'/>
    <path d='M30 40 q10 0 10 10 v40'/>
    <path d='M10 40 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='declaration-specifiers'>declaration-specifiers:</a></h2>
  <svg height='55' width='290'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M280.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#declaration-specifier'>
    <rect x='60' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='25' text-anchor='middle' class='rule'>declaration-specifier</text>
    </a>
    <path d='M143 40 l4 3 v-6 z' class='arrow'/>
    <path d='M40 30 v0 q0 10 10 10 h190 q10 0 10 -10 v0'/>
    <path d='M240 20 q10 0 10 10'/>
    <path d='M230 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='declaration-specifier'>declaration-specifier:</a></h2>
  <svg height='155' width='310'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M300.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#storage-class-specifier'>
    <rect x='60' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='155' y='25' text-anchor='middle' class='rule'>storage-class-specifier</text>
    </a>
    <a href='#type-specifier'>
    <rect x='100' y='40' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='155' y='55' text-anchor='middle' class='rule'>type-specifier</text>
    </a>
    <a href='#type-qualifier'>
    <rect x='100' y='70' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='155' y='85' text-anchor='middle' class='rule'>type-qualifier</text>
    </a>
    <a href='#function-specifier'>
    <rect x='80' y='100' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='155' y='115' text-anchor='middle' class='rule'>function-specifier</text>
    </a>
    <a href='#alignment-specifier'>
    <rect x='80' y='130' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='155' y='145' text-anchor='middle' class='rule'>alignment-specifier</text>
    </a>
    <path d='M270 30 v100'/>
    <path d='M230 140 h30 q10 0 10 -10'/>
    <path d='M40 130 q0 10 10 10 h30'/>
    <path d='M230 110 h30 q10 0 10 -10'/>
    <path d='M40 100 q0 10 10 10 h30'/>
    <path d='M210 80 h50 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h50'/>
    <path d='M210 50 h50 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h50'/>
    <path d='M270 30 q0 -10 10 -10'/>
    <path d='M250 20 h50'/>
    <path d='M30 20 q10 0 10 10 v100'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='declarator'>declarator:</a></h2>
  <svg height='55' width='360'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M350.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M97 10 l-4 3 v-6 z' class='arrow'/>
    <a href='#pointer'>
    <rect x='60' y='30' height='20' width='70' rx='0' ry='0' class='rule'/>
    <text x='95' y='45' text-anchor='middle' class='rule'>pointer</text>
    </a>
    <a href='#direct-declarator'>
    <rect x='180' y='30' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='255' y='45' text-anchor='middle' class='rule'>direct-declarator</text>
    </a>
    <path d='M40 20 v10'/>
    <path d='M150 30 q0 10 10 10'/>
    <path d='M130 40 h50'/>
    <path d='M30 40 q10 0 10 -10'/>
    <path d='M40 20 q0 -10 10 -10 h90 q10 0 10 10 v10'/>
    <path d='M330 40 h20'/>
    <path d='M10 40 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='declaration-list'>declaration-list:</a></h2>
  <svg height='55' width='210'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M200.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#declaration'>
    <rect x='60' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='25' text-anchor='middle' class='rule'>declaration</text>
    </a>
    <path d='M103 40 l4 3 v-6 z' class='arrow'/>
    <path d='M40 30 v0 q0 10 10 10 h110 q10 0 10 -10 v0'/>
    <path d='M160 20 q10 0 10 10'/>
    <path d='M150 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='compound-statement'>compound-statement:</a></h2>
  <svg height='65' width='390'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M380.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='40' y='25' text-anchor='middle' class='literal'>{</text>
    <a href='#declaration-or-statement'>
    <rect x='100' y='40' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='195' y='55' text-anchor='middle' class='rule'>declaration-or-statement</text>
    </a>
    <rect x='340' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='350' y='25' text-anchor='middle' class='literal'>}</text>
    <path d='M80 30 v10 q0 10 10 10 h10'/>
    <path d='M290 50 h10 q10 0 10 -10'/>
    <path d='M300 20 q10 0 10 10 v10'/>
    <path d='M80 30 q0 -10 10 -10'/>
    <path d='M50 20 h290'/>
    <path d='M360 20 h20'/>
    <path d='M10 20 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='declaration-or-statement'>declaration-or-statement:</a></h2>
  <svg height='65' width='210'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M200.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#declaration'>
    <rect x='60' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='25' text-anchor='middle' class='rule'>declaration</text>
    </a>
    <a href='#statement'>
    <rect x='60' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='55' text-anchor='middle' class='rule'>statement</text>
    </a>
    <path d='M170 30 v10'/>
    <path d='M150 50 h10 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M170 30 q0 -10 10 -10'/>
    <path d='M150 20 h50'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='init-declarator-list'>init-declarator-list:</a></h2>
  <svg height='65' width='250'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M240.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#init-declarator'>
    <rect x='60' y='10' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='125' y='25' text-anchor='middle' class='rule'>init-declarator</text>
    </a>
    <rect x='115' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='125' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h65'/>
    <path d='M135 50 h65 q10 0 10 -10'/>
    <path d='M200 20 q10 0 10 10 v10'/>
    <path d='M190 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='init-declarator'>init-declarator:</a></h2>
  <svg height='55' width='360'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M350.5 34 v12 m 4 0 v-12' class='station'/>
    <a href='#declarator'>
    <rect x='30' y='30' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='75' y='45' text-anchor='middle' class='rule'>declarator</text>
    </a>
    <path d='M237 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='170' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='180' y='45' text-anchor='middle' class='literal'>=</text>
    <a href='#initializer'>
    <rect x='210' y='30' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='255' y='45' text-anchor='middle' class='rule'>initializer</text>
    </a>
    <path d='M150 20 v10'/>
    <path d='M320 30 q0 10 10 10'/>
    <path d='M300 40 h50'/>
    <path d='M190 40 h20'/>
    <path d='M140 40 q10 0 10 -10'/>
    <path d='M150 20 q0 -10 10 -10 h150 q10 0 10 10 v10'/>
    <path d='M120 40 h50'/>
    <path d='M10 40 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='static-assert-declaration'>static-assert-declaration:</a></h2>
  <svg height='35' width='690'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M680.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='10' height='20' width='150' rx='8' ry='8' class='literal'/>
    <text x='105' y='25' text-anchor='middle' class='literal'>_Static_assert</text>
    <rect x='200' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='210' y='25' text-anchor='middle' class='literal'>(</text>
    <a href='#constant-expression'>
    <rect x='240' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='325' y='25' text-anchor='middle' class='rule'>constant-expression</text>
    </a>
    <rect x='430' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='440' y='25' text-anchor='middle' class='literal'>,</text>
    <rect x='470' y='10' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='525' y='25' text-anchor='middle' class='rule'>string-literal</text>
    <rect x='600' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='610' y='25' text-anchor='middle' class='literal'>)</text>
    <rect x='640' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='650' y='25' text-anchor='middle' class='literal'>;</text>
    <path d='M620 20 h20'/>
    <path d='M580 20 h20'/>
    <path d='M450 20 h20'/>
    <path d='M410 20 h20'/>
    <path d='M220 20 h20'/>
    <path d='M180 20 h20'/>
    <path d='M660 20 h20'/>
    <path d='M10 20 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='storage-class-specifier'>storage-class-specifier:</a></h2>
  <svg height='185' width='260'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M250.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='90' y='10' height='20' width='80' rx='8' ry='8' class='literal'/>
    <text x='130' y='25' text-anchor='middle' class='literal'>typedef</text>
    <rect x='95' y='40' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='130' y='55' text-anchor='middle' class='literal'>extern</text>
    <rect x='95' y='70' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='130' y='85' text-anchor='middle' class='literal'>static</text>
    <rect x='60' y='100' height='20' width='140' rx='8' ry='8' class='literal'/>
    <text x='130' y='115' text-anchor='middle' class='literal'>_Thread_local</text>
    <rect x='105' y='130' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='130' y='145' text-anchor='middle' class='literal'>auto</text>
    <rect x='85' y='160' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='130' y='175' text-anchor='middle' class='literal'>register</text>
    <path d='M220 30 v130'/>
    <path d='M175 170 h35 q10 0 10 -10'/>
    <path d='M40 160 q0 10 10 10 h35'/>
    <path d='M155 140 h55 q10 0 10 -10'/>
    <path d='M40 130 q0 10 10 10 h55'/>
    <path d='M200 110 h10 q10 0 10 -10'/>
    <path d='M40 100 q0 10 10 10 h10'/>
    <path d='M165 80 h45 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h45'/>
    <path d='M165 50 h45 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h45'/>
    <path d='M220 30 q0 -10 10 -10'/>
    <path d='M170 20 h80'/>
    <path d='M30 20 q10 0 10 10 v130'/>
    <path d='M10 20 h80'/>
  </svg>
 </section>

 <section>
  <h2><a name='type-specifier'>type-specifier:</a></h2>
  <svg height='485' width='330'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M320.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='140' y='10' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='165' y='25' text-anchor='middle' class='literal'>void</text>
    <rect x='140' y='40' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='165' y='55' text-anchor='middle' class='literal'>char</text>
    <rect x='135' y='70' height='20' width='60' rx='8' ry='8' class='literal'/>
    <text x='165' y='85' text-anchor='middle' class='literal'>short</text>
    <rect x='145' y='100' height='20' width='40' rx='8' ry='8' class='literal'/>
    <text x='165' y='115' text-anchor='middle' class='literal'>int</text>
    <rect x='140' y='130' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='165' y='145' text-anchor='middle' class='literal'>long</text>
    <rect x='135' y='160' height='20' width='60' rx='8' ry='8' class='literal'/>
    <text x='165' y='175' text-anchor='middle' class='literal'>float</text>
    <rect x='130' y='190' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='165' y='205' text-anchor='middle' class='literal'>double</text>
    <rect x='130' y='220' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='165' y='235' text-anchor='middle' class='literal'>signed</text>
    <rect x='120' y='250' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='165' y='265' text-anchor='middle' class='literal'>unsigned</text>
    <rect x='135' y='280' height='20' width='60' rx='8' ry='8' class='literal'/>
    <text x='165' y='295' text-anchor='middle' class='literal'>_Bool</text>
    <rect x='120' y='310' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='165' y='325' text-anchor='middle' class='literal'>_Complex</text>
    <rect x='110' y='340' height='20' width='110' rx='8' ry='8' class='literal'/>
    <text x='165' y='355' text-anchor='middle' class='literal'>_Imaginary</text>
    <a href='#atomic-type-specifier'>
    <rect x='80' y='370' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='165' y='385' text-anchor='middle' class='rule'>atomic-type-specifier</text>
    </a>
    <a href='#struct-or-union-specifier'>
    <rect x='60' y='400' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='165' y='415' text-anchor='middle' class='rule'>struct-or-union-specifier</text>
    </a>
    <a href='#enum-specifier'>
    <rect x='100' y='430' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='165' y='445' text-anchor='middle' class='rule'>enum-specifier</text>
    </a>
    <a href='#typedef-name'>
    <rect x='110' y='460' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='165' y='475' text-anchor='middle' class='rule'>typedef-name</text>
    </a>
    <path d='M290 30 v430'/>
    <path d='M220 470 h60 q10 0 10 -10'/>
    <path d='M40 460 q0 10 10 10 h60'/>
    <path d='M230 440 h50 q10 0 10 -10'/>
    <path d='M40 430 q0 10 10 10 h50'/>
    <path d='M270 410 h10 q10 0 10 -10'/>
    <path d='M40 400 q0 10 10 10 h10'/>
    <path d='M250 380 h30 q10 0 10 -10'/>
    <path d='M40 370 q0 10 10 10 h30'/>
    <path d='M220 350 h60 q10 0 10 -10'/>
    <path d='M40 340 q0 10 10 10 h60'/>
    <path d='M210 320 h70 q10 0 10 -10'/>
    <path d='M40 310 q0 10 10 10 h70'/>
    <path d='M195 290 h85 q10 0 10 -10'/>
    <path d='M40 280 q0 10 10 10 h85'/>
    <path d='M210 260 h70 q10 0 10 -10'/>
    <path d='M40 250 q0 10 10 10 h70'/>
    <path d='M200 230 h80 q10 0 10 -10'/>
    <path d='M40 220 q0 10 10 10 h80'/>
    <path d='M200 200 h80 q10 0 10 -10'/>
    <path d='M40 190 q0 10 10 10 h80'/>
    <path d='M195 170 h85 q10 0 10 -10'/>
    <path d='M40 160 q0 10 10 10 h85'/>
    <path d='M190 140 h90 q10 0 10 -10'/>
    <path d='M40 130 q0 10 10 10 h90'/>
    <path d='M185 110 h95 q10 0 10 -10'/>
    <path d='M40 100 q0 10 10 10 h95'/>
    <path d='M195 80 h85 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h85'/>
    <path d='M190 50 h90 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h90'/>
    <path d='M290 30 q0 -10 10 -10'/>
    <path d='M190 20 h130'/>
    <path d='M30 20 q10 0 10 10 v430'/>
    <path d='M10 20 h130'/>
  </svg>
 </section>

 <section>
  <h2><a name='typedef-name'>typedef-name:</a></h2>
  <svg height='35' width='150'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M140.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='75' y='25' text-anchor='middle' class='rule'>identifier</text>
    <path d='M120 20 h20'/>
    <path d='M10 20 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='type-qualifier'>type-qualifier:</a></h2>
  <svg height='125' width='210'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M200.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='75' y='10' height='20' width='60' rx='8' ry='8' class='literal'/>
    <text x='105' y='25' text-anchor='middle' class='literal'>const</text>
    <rect x='60' y='40' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='105' y='55' text-anchor='middle' class='literal'>restrict</text>
    <rect x='60' y='70' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='105' y='85' text-anchor='middle' class='literal'>volatile</text>
    <rect x='65' y='100' height='20' width='80' rx='8' ry='8' class='literal'/>
    <text x='105' y='115' text-anchor='middle' class='literal'>_Atomic</text>
    <path d='M170 30 v70'/>
    <path d='M145 110 h15 q10 0 10 -10'/>
    <path d='M40 100 q0 10 10 10 h15'/>
    <path d='M150 80 h10 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h10'/>
    <path d='M150 50 h10 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M170 30 q0 -10 10 -10'/>
    <path d='M135 20 h65'/>
    <path d='M30 20 q10 0 10 10 v70'/>
    <path d='M10 20 h65'/>
  </svg>
 </section>

 <section>
  <h2><a name='function-specifier'>function-specifier:</a></h2>
  <svg height='65' width='220'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M210.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='75' y='10' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='110' y='25' text-anchor='middle' class='literal'>inline</text>
    <rect x='60' y='40' height='20' width='100' rx='8' ry='8' class='literal'/>
    <text x='110' y='55' text-anchor='middle' class='literal'>_Noreturn</text>
    <path d='M180 30 v10'/>
    <path d='M160 50 h10 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M180 30 q0 -10 10 -10'/>
    <path d='M145 20 h65'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h65'/>
  </svg>
 </section>

 <section>
  <h2><a name='alignment-specifier'>alignment-specifier:</a></h2>
  <svg height='65' width='480'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M470.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='100' y='10' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='145' y='25' text-anchor='middle' class='literal'>_Alignas</text>
    <rect x='210' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='220' y='25' text-anchor='middle' class='literal'>(</text>
    <a href='#type-name'>
    <rect x='250' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='295' y='25' text-anchor='middle' class='rule'>type-name</text>
    </a>
    <rect x='360' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='370' y='25' text-anchor='middle' class='literal'>)</text>
    <rect x='60' y='40' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='105' y='55' text-anchor='middle' class='literal'>_Alignas</text>
    <rect x='170' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='180' y='55' text-anchor='middle' class='literal'>(</text>
    <a href='#constant-expression'>
    <rect x='210' y='40' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='295' y='55' text-anchor='middle' class='rule'>constant-expression</text>
    </a>
    <rect x='400' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='410' y='55' text-anchor='middle' class='literal'>)</text>
    <path d='M440 30 v10'/>
    <path d='M420 50 h10 q10 0 10 -10'/>
    <path d='M380 50 h20'/>
    <path d='M190 50 h20'/>
    <path d='M150 50 h20'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M440 30 q0 -10 10 -10'/>
    <path d='M380 20 h90'/>
    <path d='M340 20 h20'/>
    <path d='M230 20 h20'/>
    <path d='M190 20 h20'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h90'/>
  </svg>
 </section>

 <section>
  <h2><a name='pointer'>pointer:</a></h2>
  <svg height='55' width='460'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M450.5 34 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='40' y='45' text-anchor='middle' class='literal'>*</text>
    <path d='M177 10 l-4 3 v-6 z' class='arrow'/>
    <a href='#type-qualifier-list'>
    <rect x='100' y='30' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='175' y='45' text-anchor='middle' class='rule'>type-qualifier-list</text>
    </a>
    <path d='M367 10 l-4 3 v-6 z' class='arrow'/>
    <a href='#pointer'>
    <rect x='330' y='30' height='20' width='70' rx='0' ry='0' class='rule'/>
    <text x='365' y='45' text-anchor='middle' class='rule'>pointer</text>
    </a>
    <path d='M310 20 v10'/>
    <path d='M420 30 q0 10 10 10'/>
    <path d='M400 40 h50'/>
    <path d='M300 40 q10 0 10 -10'/>
    <path d='M310 20 q0 -10 10 -10 h90 q10 0 10 10 v10'/>
    <path d='M80 20 v10'/>
    <path d='M270 30 q0 10 10 10'/>
    <path d='M250 40 h80'/>
    <path d='M70 40 q10 0 10 -10'/>
    <path d='M80 20 q0 -10 10 -10 h170 q10 0 10 10 v10'/>
    <path d='M50 40 h50'/>
    <path d='M10 40 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='direct-declarator'>direct-declarator:</a></h2>
  <svg height='385' width='880'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M870.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='395' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='440' y='25' text-anchor='middle' class='rule'>identifier</text>
    <rect x='355' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='365' y='55' text-anchor='middle' class='literal'>(</text>
    <a href='#declarator'>
    <rect x='395' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='440' y='55' text-anchor='middle' class='rule'>declarator</text>
    </a>
    <rect x='505' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='515' y='55' text-anchor='middle' class='literal'>)</text>
    <a href='#direct-declarator'>
    <rect x='275' y='90' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='350' y='105' text-anchor='middle' class='rule'>direct-declarator</text>
    </a>
    <rect x='445' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='455' y='105' text-anchor='middle' class='literal'>[</text>
    <path d='M527 70 l-4 3 v-6 z' class='arrow'/>
    <rect x='515' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='525' y='105' text-anchor='middle' class='literal'>*</text>
    <rect x='585' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='595' y='105' text-anchor='middle' class='literal'>]</text>
    <a href='#direct-declarator'>
    <rect x='60' y='140' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='155' text-anchor='middle' class='rule'>direct-declarator</text>
    </a>
    <rect x='230' y='140' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='240' y='155' text-anchor='middle' class='literal'>[</text>
    <rect x='270' y='140' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='305' y='155' text-anchor='middle' class='literal'>static</text>
    <path d='M467 120 l-4 3 v-6 z' class='arrow'/>
    <a href='#type-qualifier-list'>
    <rect x='390' y='140' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='465' y='155' text-anchor='middle' class='rule'>type-qualifier-list</text>
    </a>
    <a href='#assignment-expression'>
    <rect x='590' y='140' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='685' y='155' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='800' y='140' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='810' y='155' text-anchor='middle' class='literal'>]</text>
    <a href='#direct-declarator'>
    <rect x='190' y='190' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='265' y='205' text-anchor='middle' class='rule'>direct-declarator</text>
    </a>
    <rect x='360' y='190' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='370' y='205' text-anchor='middle' class='literal'>[</text>
    <a href='#type-qualifier-list'>
    <rect x='400' y='190' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='475' y='205' text-anchor='middle' class='rule'>type-qualifier-list</text>
    </a>
    <path d='M612 170 l-4 3 v-6 z' class='arrow'/>
    <rect x='600' y='190' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='610' y='205' text-anchor='middle' class='literal'>*</text>
    <rect x='670' y='190' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='680' y='205' text-anchor='middle' class='literal'>]</text>
    <a href='#direct-declarator'>
    <rect x='60' y='240' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='255' text-anchor='middle' class='rule'>direct-declarator</text>
    </a>
    <rect x='230' y='240' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='240' y='255' text-anchor='middle' class='literal'>[</text>
    <a href='#type-qualifier-list'>
    <rect x='270' y='240' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='345' y='255' text-anchor='middle' class='rule'>type-qualifier-list</text>
    </a>
    <path d='M507 220 l-4 3 v-6 z' class='arrow'/>
    <rect x='470' y='240' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='505' y='255' text-anchor='middle' class='literal'>static</text>
    <a href='#assignment-expression'>
    <rect x='590' y='240' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='685' y='255' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='800' y='240' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='810' y='255' text-anchor='middle' class='literal'>]</text>
    <a href='#direct-declarator'>
    <rect x='220' y='270' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='295' y='285' text-anchor='middle' class='rule'>direct-declarator</text>
    </a>
    <rect x='390' y='270' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='400' y='285' text-anchor='middle' class='literal'>[</text>
    <a href='#assignment-expression'>
    <rect x='430' y='270' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='525' y='285' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='640' y='270' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='650' y='285' text-anchor='middle' class='literal'>]</text>
    <a href='#direct-declarator'>
    <rect x='230' y='300' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='305' y='315' text-anchor='middle' class='rule'>direct-declarator</text>
    </a>
    <rect x='400' y='300' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='410' y='315' text-anchor='middle' class='literal'>(</text>
    <a href='#parameter-type-list'>
    <rect x='440' y='300' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='525' y='315' text-anchor='middle' class='rule'>parameter-type-list</text>
    </a>
    <rect x='630' y='300' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='640' y='315' text-anchor='middle' class='literal'>)</text>
    <a href='#direct-declarator'>
    <rect x='260' y='330' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='335' y='345' text-anchor='middle' class='rule'>direct-declarator</text>
    </a>
    <rect x='430' y='330' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='440' y='345' text-anchor='middle' class='literal'>(</text>
    <a href='#identifier-list'>
    <rect x='470' y='330' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='525' y='345' text-anchor='middle' class='rule'>identifier-list</text>
    </a>
    <rect x='600' y='330' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='610' y='345' text-anchor='middle' class='literal'>)</text>
    <a href='#direct-declarator'>
    <rect x='325' y='360' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='400' y='375' text-anchor='middle' class='rule'>direct-declarator</text>
    </a>
    <rect x='495' y='360' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='505' y='375' text-anchor='middle' class='literal'>(</text>
    <rect x='535' y='360' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='545' y='375' text-anchor='middle' class='literal'>)</text>
    <path d='M840 30 v330'/>
    <path d='M555 370 h275 q10 0 10 -10'/>
    <path d='M515 370 h20'/>
    <path d='M475 370 h20'/>
    <path d='M40 360 q0 10 10 10 h275'/>
    <path d='M620 340 h210 q10 0 10 -10'/>
    <path d='M580 340 h20'/>
    <path d='M450 340 h20'/>
    <path d='M410 340 h20'/>
    <path d='M40 330 q0 10 10 10 h210'/>
    <path d='M650 310 h180 q10 0 10 -10'/>
    <path d='M610 310 h20'/>
    <path d='M420 310 h20'/>
    <path d='M380 310 h20'/>
    <path d='M40 300 q0 10 10 10 h180'/>
    <path d='M660 280 h170 q10 0 10 -10'/>
    <path d='M620 280 h20'/>
    <path d='M410 280 h20'/>
    <path d='M370 280 h20'/>
    <path d='M40 270 q0 10 10 10 h170'/>
    <path d='M820 250 h10 q10 0 10 -10'/>
    <path d='M780 250 h20'/>
    <path d='M450 230 v10'/>
    <path d='M560 240 q0 10 10 10'/>
    <path d='M540 250 h50'/>
    <path d='M440 250 q10 0 10 -10'/>
    <path d='M450 230 q0 -10 10 -10 h90 q10 0 10 10 v10'/>
    <path d='M420 250 h50'/>
    <path d='M250 250 h20'/>
    <path d='M210 250 h20'/>
    <path d='M40 240 q0 10 10 10 h10'/>
    <path d='M690 200 h140 q10 0 10 -10'/>
    <path d='M580 180 v10'/>
    <path d='M640 190 q0 10 10 10'/>
    <path d='M620 200 h50'/>
    <path d='M570 200 q10 0 10 -10'/>
    <path d='M580 180 q0 -10 10 -10 h40 q10 0 10 10 v10'/>
    <path d='M550 200 h50'/>
    <path d='M380 200 h20'/>
    <path d='M340 200 h20'/>
    <path d='M40 190 q0 10 10 10 h140'/>
    <path d='M820 150 h10 q10 0 10 -10'/>
    <path d='M780 150 h20'/>
    <path d='M370 130 v10'/>
    <path d='M560 140 q0 10 10 10'/>
    <path d='M540 150 h50'/>
    <path d='M360 150 q10 0 10 -10'/>
    <path d='M370 130 q0 -10 10 -10 h170 q10 0 10 10 v10'/>
    <path d='M340 150 h50'/>
    <path d='M250 150 h20'/>
    <path d='M210 150 h20'/>
    <path d='M40 140 q0 10 10 10 h10'/>
    <path d='M605 100 h225 q10 0 10 -10'/>
    <path d='M495 80 v10'/>
    <path d='M555 90 q0 10 10 10'/>
    <path d='M535 100 h50'/>
    <path d='M485 100 q10 0 10 -10'/>
    <path d='M495 80 q0 -10 10 -10 h40 q10 0 10 10 v10'/>
    <path d='M465 100 h50'/>
    <path d='M425 100 h20'/>
    <path d='M40 90 q0 10 10 10 h225'/>
    <path d='M525 50 h305 q10 0 10 -10'/>
    <path d='M485 50 h20'/>
    <path d='M375 50 h20'/>
    <path d='M40 40 q0 10 10 10 h305'/>
    <path d='M840 30 q0 -10 10 -10'/>
    <path d='M485 20 h385'/>
    <path d='M30 20 q10 0 10 10 v330'/>
    <path d='M10 20 h385'/>
  </svg>
 </section>

 <section>
  <h2><a name='identifier-list'>identifier-list:</a></h2>
  <svg height='65' width='210'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M200.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='25' text-anchor='middle' class='rule'>identifier</text>
    <rect x='95' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='105' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h45'/>
    <path d='M115 50 h45 q10 0 10 -10'/>
    <path d='M160 20 q10 0 10 10 v10'/>
    <path d='M150 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='initializer-list'>initializer-list:</a></h2>
  <svg height='65' width='290'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M280.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#designative-initializer'>
    <rect x='60' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='25' text-anchor='middle' class='rule'>designative-initializer</text>
    </a>
    <rect x='135' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='145' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h85'/>
    <path d='M155 50 h85 q10 0 10 -10'/>
    <path d='M240 20 q10 0 10 10 v10'/>
    <path d='M230 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='designative-initializer'>designative-initializer:</a></h2>
  <svg height='55' width='320'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M310.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M107 10 l-4 3 v-6 z' class='arrow'/>
    <a href='#designation'>
    <rect x='60' y='30' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='45' text-anchor='middle' class='rule'>designation</text>
    </a>
    <a href='#initializer'>
    <rect x='200' y='30' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='245' y='45' text-anchor='middle' class='rule'>initializer</text>
    </a>
    <path d='M40 20 v10'/>
    <path d='M170 30 q0 10 10 10'/>
    <path d='M150 40 h50'/>
    <path d='M30 40 q10 0 10 -10'/>
    <path d='M40 20 q0 -10 10 -10 h110 q10 0 10 10 v10'/>
    <path d='M290 40 h20'/>
    <path d='M10 40 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='initializer'>initializer:</a></h2>
  <svg height='85' width='410'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M400.5 34 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='45' text-anchor='middle' class='literal'>{</text>
    <a href='#initializer-list'>
    <rect x='100' y='30' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='155' y='45' text-anchor='middle' class='rule'>initializer-list</text>
    </a>
    <path d='M272 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='260' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='270' y='45' text-anchor='middle' class='literal'>,</text>
    <rect x='330' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='340' y='45' text-anchor='middle' class='literal'>}</text>
    <a href='#assignment-expression'>
    <rect x='110' y='60' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='205' y='75' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <path d='M370 50 v10'/>
    <path d='M300 70 h60 q10 0 10 -10'/>
    <path d='M40 60 q0 10 10 10 h60'/>
    <path d='M370 50 q0 -10 10 -10'/>
    <path d='M350 40 h50'/>
    <path d='M240 20 v10'/>
    <path d='M300 30 q0 10 10 10'/>
    <path d='M280 40 h50'/>
    <path d='M230 40 q10 0 10 -10'/>
    <path d='M240 20 q0 -10 10 -10 h40 q10 0 10 10 v10'/>
    <path d='M210 40 h50'/>
    <path d='M80 40 h20'/>
    <path d='M30 40 q10 0 10 10 v10'/>
    <path d='M10 40 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='constant-expression'>constant-expression:</a></h2>
  <svg height='35' width='250'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M240.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#conditional-expression'>
    <rect x='30' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='125' y='25' text-anchor='middle' class='rule'>conditional-expression</text>
    </a>
    <path d='M220 20 h20'/>
    <path d='M10 20 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='atomic-type-specifier'>atomic-type-specifier:</a></h2>
  <svg height='35' width='330'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M320.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='10' height='20' width='80' rx='8' ry='8' class='literal'/>
    <text x='70' y='25' text-anchor='middle' class='literal'>_Atomic</text>
    <rect x='130' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='140' y='25' text-anchor='middle' class='literal'>(</text>
    <a href='#type-name'>
    <rect x='170' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='215' y='25' text-anchor='middle' class='rule'>type-name</text>
    </a>
    <rect x='280' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='290' y='25' text-anchor='middle' class='literal'>)</text>
    <path d='M260 20 h20'/>
    <path d='M150 20 h20'/>
    <path d='M110 20 h20'/>
    <path d='M300 20 h20'/>
    <path d='M10 20 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='struct-or-union-specifier'>struct-or-union-specifier:</a></h2>
  <svg height='85' width='690'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M680.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#struct-or-union'>
    <rect x='145' y='10' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='210' y='25' text-anchor='middle' class='rule'>struct-or-union</text>
    </a>
    <rect x='295' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='305' y='25' text-anchor='middle' class='literal'>{</text>
    <a href='#struct-declaration-list'>
    <rect x='335' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='420' y='25' text-anchor='middle' class='rule'>struct-declaration-list</text>
    </a>
    <rect x='525' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='535' y='25' text-anchor='middle' class='literal'>}</text>
    <a href='#struct-or-union'>
    <rect x='60' y='60' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='125' y='75' text-anchor='middle' class='rule'>struct-or-union</text>
    </a>
    <rect x='210' y='60' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='255' y='75' text-anchor='middle' class='rule'>identifier</text>
    <path d='M477 40 l-4 3 v-6 z' class='arrow'/>
    <rect x='350' y='60' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='360' y='75' text-anchor='middle' class='literal'>{</text>
    <a href='#struct-declaration-list'>
    <rect x='390' y='60' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='475' y='75' text-anchor='middle' class='rule'>struct-declaration-list</text>
    </a>
    <rect x='580' y='60' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='590' y='75' text-anchor='middle' class='literal'>}</text>
    <path d='M650 30 v30'/>
    <path d='M330 50 v10'/>
    <path d='M620 60 q0 10 10 10'/>
    <path d='M600 70 h40 q10 0 10 -10'/>
    <path d='M560 70 h20'/>
    <path d='M370 70 h20'/>
    <path d='M320 70 q10 0 10 -10'/>
    <path d='M330 50 q0 -10 10 -10 h270 q10 0 10 10 v10'/>
    <path d='M300 70 h50'/>
    <path d='M190 70 h20'/>
    <path d='M40 60 q0 10 10 10 h10'/>
    <path d='M650 30 q0 -10 10 -10'/>
    <path d='M545 20 h135'/>
    <path d='M505 20 h20'/>
    <path d='M315 20 h20'/>
    <path d='M275 20 h20'/>
    <path d='M30 20 q10 0 10 10 v30'/>
    <path d='M10 20 h135'/>
  </svg>
 </section>

 <section>
  <h2><a name='struct-or-union'>struct-or-union:</a></h2>
  <svg height='65' width='190'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M180.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='95' y='25' text-anchor='middle' class='literal'>struct</text>
    <rect x='65' y='40' height='20' width='60' rx='8' ry='8' class='literal'/>
    <text x='95' y='55' text-anchor='middle' class='literal'>union</text>
    <path d='M150 30 v10'/>
    <path d='M125 50 h15 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h15'/>
    <path d='M150 30 q0 -10 10 -10'/>
    <path d='M130 20 h50'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='struct-declaration-list'>struct-declaration-list:</a></h2>
  <svg height='55' width='270'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M260.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#struct-declaration'>
    <rect x='60' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='25' text-anchor='middle' class='rule'>struct-declaration</text>
    </a>
    <path d='M133 40 l4 3 v-6 z' class='arrow'/>
    <path d='M40 30 v0 q0 10 10 10 h170 q10 0 10 -10 v0'/>
    <path d='M220 20 q10 0 10 10'/>
    <path d='M210 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='struct-declaration'>struct-declaration:</a></h2>
  <svg height='95' width='540'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M530.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#specifier-qualifier-list'>
    <rect x='155' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='250' y='25' text-anchor='middle' class='rule'>specifier-qualifier-list</text>
    </a>
    <rect x='365' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='375' y='25' text-anchor='middle' class='literal'>;</text>
    <a href='#specifier-qualifier-list'>
    <rect x='60' y='40' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='155' y='55' text-anchor='middle' class='rule'>specifier-qualifier-list</text>
    </a>
    <a href='#struct-declarator-list'>
    <rect x='270' y='40' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='355' y='55' text-anchor='middle' class='rule'>struct-declarator-list</text>
    </a>
    <rect x='460' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='470' y='55' text-anchor='middle' class='literal'>;</text>
    <a href='#static-assert-declaration'>
    <rect x='175' y='70' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='270' y='85' text-anchor='middle' class='rule'>static-assert-declaration</text>
    </a>
    <path d='M500 30 v40'/>
    <path d='M365 80 h125 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h125'/>
    <path d='M480 50 h10 q10 0 10 -10'/>
    <path d='M440 50 h20'/>
    <path d='M250 50 h20'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M500 30 q0 -10 10 -10'/>
    <path d='M385 20 h145'/>
    <path d='M345 20 h20'/>
    <path d='M30 20 q10 0 10 10 v40'/>
    <path d='M10 20 h145'/>
  </svg>
 </section>

 <section>
  <h2><a name='enum-specifier'>enum-specifier:</a></h2>
  <svg height='125' width='670'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M660.5 34 v12 m 4 0 v-12' class='station'/>
    <rect x='145' y='30' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='170' y='45' text-anchor='middle' class='literal'>enum</text>
    <rect x='215' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='225' y='45' text-anchor='middle' class='literal'>{</text>
    <a href='#enumerator-list'>
    <rect x='255' y='30' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='320' y='45' text-anchor='middle' class='rule'>enumerator-list</text>
    </a>
    <path d='M447 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='435' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='445' y='45' text-anchor='middle' class='literal'>,</text>
    <rect x='505' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='515' y='45' text-anchor='middle' class='literal'>}</text>
    <rect x='60' y='100' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='85' y='115' text-anchor='middle' class='literal'>enum</text>
    <rect x='130' y='100' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='175' y='115' text-anchor='middle' class='rule'>identifier</text>
    <path d='M427 60 l-4 3 v-6 z' class='arrow'/>
    <rect x='270' y='100' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='280' y='115' text-anchor='middle' class='literal'>{</text>
    <a href='#enumerator-list'>
    <rect x='310' y='100' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='375' y='115' text-anchor='middle' class='rule'>enumerator-list</text>
    </a>
    <path d='M502 80 l-4 3 v-6 z' class='arrow'/>
    <rect x='490' y='100' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='500' y='115' text-anchor='middle' class='literal'>,</text>
    <rect x='560' y='100' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='570' y='115' text-anchor='middle' class='literal'>}</text>
    <path d='M630 50 v50'/>
    <path d='M250 70 v30'/>
    <path d='M600 100 q0 10 10 10'/>
    <path d='M580 110 h40 q10 0 10 -10'/>
    <path d='M470 90 v10'/>
    <path d='M530 100 q0 10 10 10'/>
    <path d='M510 110 h50'/>
    <path d='M460 110 q10 0 10 -10'/>
    <path d='M470 90 q0 -10 10 -10 h40 q10 0 10 10 v10'/>
    <path d='M440 110 h50'/>
    <path d='M290 110 h20'/>
    <path d='M240 110 q10 0 10 -10'/>
    <path d='M250 70 q0 -10 10 -10 h330 q10 0 10 10 v30'/>
    <path d='M220 110 h50'/>
    <path d='M110 110 h20'/>
    <path d='M40 100 q0 10 10 10 h10'/>
    <path d='M630 50 q0 -10 10 -10'/>
    <path d='M525 40 h135'/>
    <path d='M415 20 v10'/>
    <path d='M475 30 q0 10 10 10'/>
    <path d='M455 40 h50'/>
    <path d='M405 40 q10 0 10 -10'/>
    <path d='M415 20 q0 -10 10 -10 h40 q10 0 10 10 v10'/>
    <path d='M385 40 h50'/>
    <path d='M235 40 h20'/>
    <path d='M195 40 h20'/>
    <path d='M30 40 q10 0 10 10 v50'/>
    <path d='M10 40 h135'/>
  </svg>
 </section>

 <section>
  <h2><a name='enumerator-list'>enumerator-list:</a></h2>
  <svg height='65' width='230'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M220.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#enumerator'>
    <rect x='60' y='10' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='115' y='25' text-anchor='middle' class='rule'>enumerator</text>
    </a>
    <rect x='105' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='115' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h55'/>
    <path d='M125 50 h55 q10 0 10 -10'/>
    <path d='M180 20 q10 0 10 10 v10'/>
    <path d='M170 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='enumerator'>enumerator:</a></h2>
  <svg height='55' width='520'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M510.5 34 v12 m 4 0 v-12' class='station'/>
    <a href='#enumeration-constant'>
    <rect x='30' y='30' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='115' y='45' text-anchor='middle' class='rule'>enumeration-constant</text>
    </a>
    <path d='M357 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='250' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='260' y='45' text-anchor='middle' class='literal'>=</text>
    <a href='#constant-expression'>
    <rect x='290' y='30' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='375' y='45' text-anchor='middle' class='rule'>constant-expression</text>
    </a>
    <path d='M230 20 v10'/>
    <path d='M480 30 q0 10 10 10'/>
    <path d='M460 40 h50'/>
    <path d='M270 40 h20'/>
    <path d='M220 40 q10 0 10 -10'/>
    <path d='M230 20 q0 -10 10 -10 h230 q10 0 10 10 v10'/>
    <path d='M200 40 h50'/>
    <path d='M10 40 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='enumeration-constant'>enumeration-constant:</a></h2>
  <svg height='35' width='150'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M140.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='75' y='25' text-anchor='middle' class='rule'>identifier</text>
    <path d='M120 20 h20'/>
    <path d='M10 20 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='type-name'>type-name:</a></h2>
  <svg height='55' width='480'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M470.5 34 v12 m 4 0 v-12' class='station'/>
    <a href='#specifier-qualifier-list'>
    <rect x='30' y='30' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='125' y='45' text-anchor='middle' class='rule'>specifier-qualifier-list</text>
    </a>
    <path d='M347 10 l-4 3 v-6 z' class='arrow'/>
    <a href='#abstract-declarator'>
    <rect x='270' y='30' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='345' y='45' text-anchor='middle' class='rule'>abstract-declarator</text>
    </a>
    <path d='M250 20 v10'/>
    <path d='M440 30 q0 10 10 10'/>
    <path d='M420 40 h50'/>
    <path d='M240 40 q10 0 10 -10'/>
    <path d='M250 20 q0 -10 10 -10 h170 q10 0 10 10 v10'/>
    <path d='M220 40 h50'/>
    <path d='M10 40 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='specifier-qualifier-list'>specifier-qualifier-list:</a></h2>
  <svg height='55' width='270'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M260.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#specifier-qualifier'>
    <rect x='60' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='25' text-anchor='middle' class='rule'>specifier-qualifier</text>
    </a>
    <path d='M133 40 l4 3 v-6 z' class='arrow'/>
    <path d='M40 30 v0 q0 10 10 10 h170 q10 0 10 -10 v0'/>
    <path d='M220 20 q10 0 10 10'/>
    <path d='M210 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='specifier-qualifier'>specifier-qualifier:</a></h2>
  <svg height='65' width='230'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M220.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#type-specifier'>
    <rect x='60' y='10' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='115' y='25' text-anchor='middle' class='rule'>type-specifier</text>
    </a>
    <a href='#type-qualifier'>
    <rect x='60' y='40' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='115' y='55' text-anchor='middle' class='rule'>type-qualifier</text>
    </a>
    <path d='M190 30 v10'/>
    <path d='M170 50 h10 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M190 30 q0 -10 10 -10'/>
    <path d='M170 20 h50'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='abstract-declarator'>abstract-declarator:</a></h2>
  <svg height='85' width='480'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M470.5 34 v12 m 4 0 v-12' class='station'/>
    <a href='#pointer'>
    <rect x='60' y='30' height='20' width='70' rx='0' ry='0' class='rule'/>
    <text x='95' y='45' text-anchor='middle' class='rule'>pointer</text>
    </a>
    <path d='M287 10 l-4 3 v-6 z' class='arrow'/>
    <a href='#direct-abstract-declarator'>
    <rect x='180' y='30' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='285' y='45' text-anchor='middle' class='rule'>direct-abstract-declarator</text>
    </a>
    <a href='#direct-abstract-declarator'>
    <rect x='135' y='60' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='240' y='75' text-anchor='middle' class='rule'>direct-abstract-declarator</text>
    </a>
    <path d='M440 50 v10'/>
    <path d='M345 70 h85 q10 0 10 -10'/>
    <path d='M40 60 q0 10 10 10 h85'/>
    <path d='M440 50 q0 -10 10 -10'/>
    <path d='M160 20 v10'/>
    <path d='M410 30 q0 10 10 10'/>
    <path d='M390 40 h80'/>
    <path d='M150 40 q10 0 10 -10'/>
    <path d='M160 20 q0 -10 10 -10 h230 q10 0 10 10 v10'/>
    <path d='M130 40 h50'/>
    <path d='M30 40 q10 0 10 10 v10'/>
    <path d='M10 40 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='direct-abstract-declarator'>direct-abstract-declarator:</a></h2>
  <svg height='555' width='1000'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M990.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='385' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='395' y='25' text-anchor='middle' class='literal'>(</text>
    <a href='#abstract-declarator'>
    <rect x='425' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='500' y='25' text-anchor='middle' class='rule'>abstract-declarator</text>
    </a>
    <rect x='595' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='605' y='25' text-anchor='middle' class='literal'>)</text>
    <rect x='375' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='385' y='55' text-anchor='middle' class='literal'>(</text>
    <a href='#parameter-type-list'>
    <rect x='415' y='40' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='500' y='55' text-anchor='middle' class='rule'>parameter-type-list</text>
    </a>
    <rect x='605' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='615' y='55' text-anchor='middle' class='literal'>)</text>
    <rect x='470' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='480' y='85' text-anchor='middle' class='literal'>(</text>
    <rect x='510' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='520' y='85' text-anchor='middle' class='literal'>)</text>
    <rect x='420' y='120' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='430' y='135' text-anchor='middle' class='literal'>[</text>
    <path d='M502 100 l-4 3 v-6 z' class='arrow'/>
    <rect x='490' y='120' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='500' y='135' text-anchor='middle' class='literal'>*</text>
    <rect x='560' y='120' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='570' y='135' text-anchor='middle' class='literal'>]</text>
    <rect x='205' y='170' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='215' y='185' text-anchor='middle' class='literal'>[</text>
    <rect x='245' y='170' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='280' y='185' text-anchor='middle' class='literal'>static</text>
    <path d='M442 150 l-4 3 v-6 z' class='arrow'/>
    <a href='#type-qualifier-list'>
    <rect x='365' y='170' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='440' y='185' text-anchor='middle' class='rule'>type-qualifier-list</text>
    </a>
    <a href='#assignment-expression'>
    <rect x='565' y='170' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='660' y='185' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='775' y='170' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='785' y='185' text-anchor='middle' class='literal'>]</text>
    <rect x='175' y='240' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='185' y='255' text-anchor='middle' class='literal'>[</text>
    <a href='#type-qualifier-list'>
    <rect x='215' y='240' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='290' y='255' text-anchor='middle' class='rule'>type-qualifier-list</text>
    </a>
    <path d='M587 200 l-4 3 v-6 z' class='arrow'/>
    <path d='M482 220 l-4 3 v-6 z' class='arrow'/>
    <rect x='445' y='240' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='480' y='255' text-anchor='middle' class='literal'>static</text>
    <a href='#assignment-expression'>
    <rect x='565' y='240' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='660' y='255' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='805' y='240' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='815' y='255' text-anchor='middle' class='literal'>]</text>
    <rect x='365' y='270' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='375' y='285' text-anchor='middle' class='literal'>[</text>
    <a href='#assignment-expression'>
    <rect x='405' y='270' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='500' y='285' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='615' y='270' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='625' y='285' text-anchor='middle' class='literal'>]</text>
    <a href='#direct-abstract-declarator'>
    <rect x='305' y='320' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='410' y='335' text-anchor='middle' class='rule'>direct-abstract-declarator</text>
    </a>
    <rect x='535' y='320' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='545' y='335' text-anchor='middle' class='literal'>[</text>
    <path d='M617 300 l-4 3 v-6 z' class='arrow'/>
    <rect x='605' y='320' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='615' y='335' text-anchor='middle' class='literal'>*</text>
    <rect x='675' y='320' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='685' y='335' text-anchor='middle' class='literal'>]</text>
    <a href='#direct-abstract-declarator'>
    <rect x='90' y='370' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='195' y='385' text-anchor='middle' class='rule'>direct-abstract-declarator</text>
    </a>
    <rect x='320' y='370' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='330' y='385' text-anchor='middle' class='literal'>[</text>
    <rect x='360' y='370' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='395' y='385' text-anchor='middle' class='literal'>static</text>
    <path d='M557 350 l-4 3 v-6 z' class='arrow'/>
    <a href='#type-qualifier-list'>
    <rect x='480' y='370' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='555' y='385' text-anchor='middle' class='rule'>type-qualifier-list</text>
    </a>
    <a href='#assignment-expression'>
    <rect x='680' y='370' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='775' y='385' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='890' y='370' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='900' y='385' text-anchor='middle' class='literal'>]</text>
    <a href='#direct-abstract-declarator'>
    <rect x='60' y='440' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='165' y='455' text-anchor='middle' class='rule'>direct-abstract-declarator</text>
    </a>
    <rect x='290' y='440' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='300' y='455' text-anchor='middle' class='literal'>[</text>
    <a href='#type-qualifier-list'>
    <rect x='330' y='440' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='405' y='455' text-anchor='middle' class='rule'>type-qualifier-list</text>
    </a>
    <path d='M702 400 l-4 3 v-6 z' class='arrow'/>
    <path d='M597 420 l-4 3 v-6 z' class='arrow'/>
    <rect x='560' y='440' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='595' y='455' text-anchor='middle' class='literal'>static</text>
    <a href='#assignment-expression'>
    <rect x='680' y='440' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='775' y='455' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='920' y='440' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='930' y='455' text-anchor='middle' class='literal'>]</text>
    <a href='#direct-abstract-declarator'>
    <rect x='250' y='470' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='355' y='485' text-anchor='middle' class='rule'>direct-abstract-declarator</text>
    </a>
    <rect x='480' y='470' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='490' y='485' text-anchor='middle' class='literal'>[</text>
    <a href='#assignment-expression'>
    <rect x='520' y='470' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='615' y='485' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='730' y='470' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='740' y='485' text-anchor='middle' class='literal'>]</text>
    <a href='#direct-abstract-declarator'>
    <rect x='260' y='500' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='365' y='515' text-anchor='middle' class='rule'>direct-abstract-declarator</text>
    </a>
    <rect x='490' y='500' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='500' y='515' text-anchor='middle' class='literal'>(</text>
    <a href='#parameter-type-list'>
    <rect x='530' y='500' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='615' y='515' text-anchor='middle' class='rule'>parameter-type-list</text>
    </a>
    <rect x='720' y='500' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='730' y='515' text-anchor='middle' class='literal'>)</text>
    <a href='#direct-abstract-declarator'>
    <rect x='355' y='530' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='460' y='545' text-anchor='middle' class='rule'>direct-abstract-declarator</text>
    </a>
    <rect x='585' y='530' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='595' y='545' text-anchor='middle' class='literal'>(</text>
    <rect x='625' y='530' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='635' y='545' text-anchor='middle' class='literal'>)</text>
    <path d='M960 30 v500'/>
    <path d='M645 540 h305 q10 0 10 -10'/>
    <path d='M605 540 h20'/>
    <path d='M565 540 h20'/>
    <path d='M40 530 q0 10 10 10 h305'/>
    <path d='M740 510 h210 q10 0 10 -10'/>
    <path d='M700 510 h20'/>
    <path d='M510 510 h20'/>
    <path d='M470 510 h20'/>
    <path d='M40 500 q0 10 10 10 h210'/>
    <path d='M750 480 h200 q10 0 10 -10'/>
    <path d='M710 480 h20'/>
    <path d='M500 480 h20'/>
    <path d='M460 480 h20'/>
    <path d='M40 470 q0 10 10 10 h200'/>
    <path d='M940 450 h10 q10 0 10 -10'/>
    <path d='M510 410 v30'/>
    <path d='M890 440 q0 10 10 10'/>
    <path d='M870 450 h50'/>
    <path d='M540 430 v10'/>
    <path d='M650 440 q0 10 10 10'/>
    <path d='M630 450 h50'/>
    <path d='M530 450 q10 0 10 -10'/>
    <path d='M540 430 q0 -10 10 -10 h90 q10 0 10 10 v10'/>
    <path d='M500 450 q10 0 10 -10'/>
    <path d='M510 410 q0 -10 10 -10 h360 q10 0 10 10 v30'/>
    <path d='M480 450 h80'/>
    <path d='M310 450 h20'/>
    <path d='M270 450 h20'/>
    <path d='M40 440 q0 10 10 10 h10'/>
    <path d='M910 380 h40 q10 0 10 -10'/>
    <path d='M870 380 h20'/>
    <path d='M460 360 v10'/>
    <path d='M650 370 q0 10 10 10'/>
    <path d='M630 380 h50'/>
    <path d='M450 380 q10 0 10 -10'/>
    <path d='M460 360 q0 -10 10 -10 h170 q10 0 10 10 v10'/>
    <path d='M430 380 h50'/>
    <path d='M340 380 h20'/>
    <path d='M300 380 h20'/>
    <path d='M40 370 q0 10 10 10 h40'/>
    <path d='M695 330 h255 q10 0 10 -10'/>
    <path d='M585 310 v10'/>
    <path d='M645 320 q0 10 10 10'/>
    <path d='M625 330 h50'/>
    <path d='M575 330 q10 0 10 -10'/>
    <path d='M585 310 q0 -10 10 -10 h40 q10 0 10 10 v10'/>
    <path d='M555 330 h50'/>
    <path d='M515 330 h20'/>
    <path d='M40 320 q0 10 10 10 h255'/>
    <path d='M635 280 h315 q10 0 10 -10'/>
    <path d='M595 280 h20'/>
    <path d='M385 280 h20'/>
    <path d='M40 270 q0 10 10 10 h315'/>
    <path d='M825 250 h125 q10 0 10 -10'/>
    <path d='M395 210 v30'/>
    <path d='M775 240 q0 10 10 10'/>
    <path d='M755 250 h50'/>
    <path d='M425 230 v10'/>
    <path d='M535 240 q0 10 10 10'/>
    <path d='M515 250 h50'/>
    <path d='M415 250 q10 0 10 -10'/>
    <path d='M425 230 q0 -10 10 -10 h90 q10 0 10 10 v10'/>
    <path d='M385 250 q10 0 10 -10'/>
    <path d='M395 210 q0 -10 10 -10 h360 q10 0 10 10 v30'/>
    <path d='M365 250 h80'/>
    <path d='M195 250 h20'/>
    <path d='M40 240 q0 10 10 10 h125'/>
    <path d='M795 180 h155 q10 0 10 -10'/>
    <path d='M755 180 h20'/>
    <path d='M345 160 v10'/>
    <path d='M535 170 q0 10 10 10'/>
    <path d='M515 180 h50'/>
    <path d='M335 180 q10 0 10 -10'/>
    <path d='M345 160 q0 -10 10 -10 h170 q10 0 10 10 v10'/>
    <path d='M315 180 h50'/>
    <path d='M225 180 h20'/>
    <path d='M40 170 q0 10 10 10 h155'/>
    <path d='M580 130 h370 q10 0 10 -10'/>
    <path d='M470 110 v10'/>
    <path d='M530 120 q0 10 10 10'/>
    <path d='M510 130 h50'/>
    <path d='M460 130 q10 0 10 -10'/>
    <path d='M470 110 q0 -10 10 -10 h40 q10 0 10 10 v10'/>
    <path d='M440 130 h50'/>
    <path d='M40 120 q0 10 10 10 h370'/>
    <path d='M530 80 h420 q10 0 10 -10'/>
    <path d='M490 80 h20'/>
    <path d='M40 70 q0 10 10 10 h420'/>
    <path d='M625 50 h325 q10 0 10 -10'/>
    <path d='M585 50 h20'/>
    <path d='M395 50 h20'/>
    <path d='M40 40 q0 10 10 10 h325'/>
    <path d='M960 30 q0 -10 10 -10'/>
    <path d='M615 20 h375'/>
    <path d='M575 20 h20'/>
    <path d='M405 20 h20'/>
    <path d='M30 20 q10 0 10 10 v500'/>
    <path d='M10 20 h375'/>
  </svg>
 </section>

 <section>
  <h2><a name='struct-declarator-list'>struct-declarator-list:</a></h2>
  <svg height='65' width='270'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M260.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#struct-declarator'>
    <rect x='60' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='25' text-anchor='middle' class='rule'>struct-declarator</text>
    </a>
    <rect x='125' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='135' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h75'/>
    <path d='M145 50 h75 q10 0 10 -10'/>
    <path d='M220 20 q10 0 10 10 v10'/>
    <path d='M210 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='type-qualifier-list'>type-qualifier-list:</a></h2>
  <svg height='55' width='230'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M220.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#type-qualifier'>
    <rect x='60' y='10' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='115' y='25' text-anchor='middle' class='rule'>type-qualifier</text>
    </a>
    <path d='M113 40 l4 3 v-6 z' class='arrow'/>
    <path d='M40 30 v0 q0 10 10 10 h130 q10 0 10 -10 v0'/>
    <path d='M180 20 q10 0 10 10'/>
    <path d='M170 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='parameter-type-list'>parameter-type-list:</a></h2>
  <svg height='55' width='350'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M340.5 34 v12 m 4 0 v-12' class='station'/>
    <a href='#parameter-list'>
    <rect x='30' y='30' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='95' y='45' text-anchor='middle' class='rule'>parameter-list</text>
    </a>
    <path d='M252 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='210' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='220' y='45' text-anchor='middle' class='literal'>,</text>
    <rect x='250' y='30' height='20' width='40' rx='8' ry='8' class='literal'/>
    <text x='270' y='45' text-anchor='middle' class='literal'>...</text>
    <path d='M190 20 v10'/>
    <path d='M310 30 q0 10 10 10'/>
    <path d='M290 40 h50'/>
    <path d='M230 40 h20'/>
    <path d='M180 40 q10 0 10 -10'/>
    <path d='M190 20 q0 -10 10 -10 h100 q10 0 10 10 v10'/>
    <path d='M160 40 h50'/>
    <path d='M10 40 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='struct-declarator'>struct-declarator:</a></h2>
  <svg height='85' width='500'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M490.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='145' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='155' y='25' text-anchor='middle' class='literal'>:</text>
    <a href='#constant-expression'>
    <rect x='185' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='270' y='25' text-anchor='middle' class='rule'>constant-expression</text>
    </a>
    <a href='#declarator'>
    <rect x='60' y='60' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='75' text-anchor='middle' class='rule'>declarator</text>
    </a>
    <path d='M307 40 l-4 3 v-6 z' class='arrow'/>
    <rect x='200' y='60' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='210' y='75' text-anchor='middle' class='literal'>:</text>
    <a href='#constant-expression'>
    <rect x='240' y='60' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='325' y='75' text-anchor='middle' class='rule'>constant-expression</text>
    </a>
    <path d='M460 30 v30'/>
    <path d='M180 50 v10'/>
    <path d='M430 60 q0 10 10 10'/>
    <path d='M410 70 h40 q10 0 10 -10'/>
    <path d='M220 70 h20'/>
    <path d='M170 70 q10 0 10 -10'/>
    <path d='M180 50 q0 -10 10 -10 h230 q10 0 10 10 v10'/>
    <path d='M150 70 h50'/>
    <path d='M40 60 q0 10 10 10 h10'/>
    <path d='M460 30 q0 -10 10 -10'/>
    <path d='M355 20 h135'/>
    <path d='M165 20 h20'/>
    <path d='M30 20 q10 0 10 10 v30'/>
    <path d='M10 20 h135'/>
  </svg>
 </section>

 <section>
  <h2><a name='assignment-operator'>assignment-operator:</a></h2>
  <svg height='335' width='160'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M150.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='70' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='80' y='25' text-anchor='middle' class='literal'>=</text>
    <rect x='65' y='40' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='80' y='55' text-anchor='middle' class='literal'>*=</text>
    <rect x='65' y='70' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='80' y='85' text-anchor='middle' class='literal'>/=</text>
    <rect x='65' y='100' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='80' y='115' text-anchor='middle' class='literal'>%=</text>
    <rect x='65' y='130' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='80' y='145' text-anchor='middle' class='literal'>+=</text>
    <rect x='65' y='160' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='80' y='175' text-anchor='middle' class='literal'>-=</text>
    <rect x='60' y='190' height='20' width='40' rx='8' ry='8' class='literal'/>
    <text x='80' y='205' text-anchor='middle' class='literal'>&lt;&lt;=</text>
    <rect x='60' y='220' height='20' width='40' rx='8' ry='8' class='literal'/>
    <text x='80' y='235' text-anchor='middle' class='literal'>&gt;&gt;=</text>
    <rect x='65' y='250' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='80' y='265' text-anchor='middle' class='literal'>&amp;=</text>
    <rect x='65' y='280' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='80' y='295' text-anchor='middle' class='literal'>^=</text>
    <rect x='65' y='310' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='80' y='325' text-anchor='middle' class='literal'>|=</text>
    <path d='M120 30 v280'/>
    <path d='M95 320 h15 q10 0 10 -10'/>
    <path d='M40 310 q0 10 10 10 h15'/>
    <path d='M95 290 h15 q10 0 10 -10'/>
    <path d='M40 280 q0 10 10 10 h15'/>
    <path d='M95 260 h15 q10 0 10 -10'/>
    <path d='M40 250 q0 10 10 10 h15'/>
    <path d='M100 230 h10 q10 0 10 -10'/>
    <path d='M40 220 q0 10 10 10 h10'/>
    <path d='M100 200 h10 q10 0 10 -10'/>
    <path d='M40 190 q0 10 10 10 h10'/>
    <path d='M95 170 h15 q10 0 10 -10'/>
    <path d='M40 160 q0 10 10 10 h15'/>
    <path d='M95 140 h15 q10 0 10 -10'/>
    <path d='M40 130 q0 10 10 10 h15'/>
    <path d='M95 110 h15 q10 0 10 -10'/>
    <path d='M40 100 q0 10 10 10 h15'/>
    <path d='M95 80 h15 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h15'/>
    <path d='M95 50 h15 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h15'/>
    <path d='M120 30 q0 -10 10 -10'/>
    <path d='M90 20 h60'/>
    <path d='M30 20 q10 0 10 10 v280'/>
    <path d='M10 20 h60'/>
  </svg>
 </section>

 <section>
  <h2><a name='parameter-list'>parameter-list:</a></h2>
  <svg height='65' width='290'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M280.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#parameter-declaration'>
    <rect x='60' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='25' text-anchor='middle' class='rule'>parameter-declaration</text>
    </a>
    <rect x='135' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='145' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h85'/>
    <path d='M155 50 h85 q10 0 10 -10'/>
    <path d='M240 20 q10 0 10 10 v10'/>
    <path d='M230 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='parameter-declaration'>parameter-declaration:</a></h2>
  <svg height='85' width='460'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M450.5 34 v12 m 4 0 v-12' class='station'/>
    <a href='#declaration-specifiers'>
    <rect x='30' y='30' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='115' y='45' text-anchor='middle' class='rule'>declaration-specifiers</text>
    </a>
    <path d='M327 10 l-4 3 v-6 z' class='arrow'/>
    <a href='#declarator'>
    <rect x='280' y='30' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='325' y='45' text-anchor='middle' class='rule'>declarator</text>
    </a>
    <a href='#abstract-declarator'>
    <rect x='250' y='60' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='325' y='75' text-anchor='middle' class='rule'>abstract-declarator</text>
    </a>
    <path d='M420 50 v10'/>
    <path d='M230 20 v10'/>
    <path d='M400 70 h10 q10 0 10 -10'/>
    <path d='M230 60 q0 10 10 10 h10'/>
    <path d='M420 30 q0 10 10 10'/>
    <path d='M420 50 q0 -10 10 -10'/>
    <path d='M370 40 h80'/>
    <path d='M220 40 q10 0 10 10 v10'/>
    <path d='M220 40 q10 0 10 -10'/>
    <path d='M230 20 q0 -10 10 -10 h170 q10 0 10 10 v10'/>
    <path d='M200 40 h80'/>
    <path d='M10 40 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='expression'>expression:</a></h2>
  <svg height='65' width='310'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M300.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#assignment-expression'>
    <rect x='60' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='155' y='25' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='145' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='155' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h95'/>
    <path d='M165 50 h95 q10 0 10 -10'/>
    <path d='M260 20 q10 0 10 10 v10'/>
    <path d='M250 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='assignment-expression'>assignment-expression:</a></h2>
  <svg height='65' width='670'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M660.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#conditional-expression'>
    <rect x='240' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='335' y='25' text-anchor='middle' class='rule'>conditional-expression</text>
    </a>
    <a href='#unary-expression'>
    <rect x='60' y='40' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='55' text-anchor='middle' class='rule'>unary-expression</text>
    </a>
    <a href='#assignment-operator'>
    <rect x='230' y='40' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='315' y='55' text-anchor='middle' class='rule'>assignment-operator</text>
    </a>
    <a href='#assignment-expression'>
    <rect x='420' y='40' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='515' y='55' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <path d='M630 30 v10'/>
    <path d='M610 50 h10 q10 0 10 -10'/>
    <path d='M400 50 h20'/>
    <path d='M210 50 h20'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M630 30 q0 -10 10 -10'/>
    <path d='M430 20 h230'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h230'/>
  </svg>
 </section>

 <section>
  <h2><a name='conditional-expression'>conditional-expression:</a></h2>
  <svg height='55' width='690'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M680.5 34 v12 m 4 0 v-12' class='station'/>
    <a href='#logical-or-expression'>
    <rect x='30' y='30' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='115' y='45' text-anchor='middle' class='rule'>logical-or-expression</text>
    </a>
    <path d='M442 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='250' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='260' y='45' text-anchor='middle' class='literal'>?</text>
    <a href='#expression'>
    <rect x='290' y='30' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='335' y='45' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='400' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='410' y='45' text-anchor='middle' class='literal'>:</text>
    <a href='#conditional-expression'>
    <rect x='440' y='30' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='535' y='45' text-anchor='middle' class='rule'>conditional-expression</text>
    </a>
    <path d='M230 20 v10'/>
    <path d='M650 30 q0 10 10 10'/>
    <path d='M630 40 h50'/>
    <path d='M420 40 h20'/>
    <path d='M380 40 h20'/>
    <path d='M270 40 h20'/>
    <path d='M220 40 q10 0 10 -10'/>
    <path d='M230 20 q0 -10 10 -10 h400 q10 0 10 10 v10'/>
    <path d='M200 40 h50'/>
    <path d='M10 40 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='logical-or-expression'>logical-or-expression:</a></h2>
  <svg height='65' width='310'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M300.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#logical-and-expression'>
    <rect x='60' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='155' y='25' text-anchor='middle' class='rule'>logical-and-expression</text>
    </a>
    <rect x='140' y='40' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='155' y='55' text-anchor='middle' class='literal'>||</text>
    <path d='M40 30 v10 q0 10 10 10 h90'/>
    <path d='M170 50 h90 q10 0 10 -10'/>
    <path d='M260 20 q10 0 10 10 v10'/>
    <path d='M250 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='logical-and-expression'>logical-and-expression:</a></h2>
  <svg height='65' width='310'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M300.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#inclusive-or-expression'>
    <rect x='60' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='155' y='25' text-anchor='middle' class='rule'>inclusive-or-expression</text>
    </a>
    <rect x='140' y='40' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='155' y='55' text-anchor='middle' class='literal'>&amp;&amp;</text>
    <path d='M40 30 v10 q0 10 10 10 h90'/>
    <path d='M170 50 h90 q10 0 10 -10'/>
    <path d='M260 20 q10 0 10 10 v10'/>
    <path d='M250 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='inclusive-or-expression'>inclusive-or-expression:</a></h2>
  <svg height='65' width='310'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M300.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#exclusive-or-expression'>
    <rect x='60' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='155' y='25' text-anchor='middle' class='rule'>exclusive-or-expression</text>
    </a>
    <rect x='145' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='155' y='55' text-anchor='middle' class='literal'>|</text>
    <path d='M40 30 v10 q0 10 10 10 h95'/>
    <path d='M165 50 h95 q10 0 10 -10'/>
    <path d='M260 20 q10 0 10 10 v10'/>
    <path d='M250 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='exclusive-or-expression'>exclusive-or-expression:</a></h2>
  <svg height='65' width='250'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M240.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#and-expression'>
    <rect x='60' y='10' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='125' y='25' text-anchor='middle' class='rule'>and-expression</text>
    </a>
    <rect x='115' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='125' y='55' text-anchor='middle' class='literal'>^</text>
    <path d='M40 30 v10 q0 10 10 10 h65'/>
    <path d='M135 50 h65 q10 0 10 -10'/>
    <path d='M200 20 q10 0 10 10 v10'/>
    <path d='M190 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='and-expression'>and-expression:</a></h2>
  <svg height='65' width='270'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M260.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#equality-expression'>
    <rect x='60' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='25' text-anchor='middle' class='rule'>equality-expression</text>
    </a>
    <rect x='125' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='135' y='55' text-anchor='middle' class='literal'>&amp;</text>
    <path d='M40 30 v10 q0 10 10 10 h75'/>
    <path d='M145 50 h75 q10 0 10 -10'/>
    <path d='M220 20 q10 0 10 10 v10'/>
    <path d='M210 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='equality-expression'>equality-expression:</a></h2>
  <svg height='95' width='290'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M280.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#relational-expression'>
    <rect x='60' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='25' text-anchor='middle' class='rule'>relational-expression</text>
    </a>
    <rect x='130' y='40' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='145' y='55' text-anchor='middle' class='literal'>==</text>
    <rect x='130' y='70' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='145' y='85' text-anchor='middle' class='literal'>!=</text>
    <path d='M40 30 v10 q0 10 10 10 h80'/>
    <path d='M180 60 v10'/>
    <path d='M160 80 h10 q10 0 10 -10'/>
    <path d='M110 70 q0 10 10 10 h10'/>
    <path d='M180 60 q0 -10 10 -10'/>
    <path d='M160 50 h80 q10 0 10 -10'/>
    <path d='M100 50 q10 0 10 10 v10'/>
    <path d='M240 20 q10 0 10 10 v10'/>
    <path d='M230 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='relational-expression'>relational-expression:</a></h2>
  <svg height='155' width='250'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M240.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#shift-expression'>
    <rect x='60' y='10' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='125' y='25' text-anchor='middle' class='rule'>shift-expression</text>
    </a>
    <rect x='115' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='125' y='55' text-anchor='middle' class='literal'>&lt;</text>
    <rect x='115' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='125' y='85' text-anchor='middle' class='literal'>&gt;</text>
    <rect x='110' y='100' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='125' y='115' text-anchor='middle' class='literal'>&lt;=</text>
    <rect x='110' y='130' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='125' y='145' text-anchor='middle' class='literal'>&gt;=</text>
    <path d='M40 30 v10 q0 10 10 10 h65'/>
    <path d='M160 60 v70'/>
    <path d='M140 140 h10 q10 0 10 -10'/>
    <path d='M90 130 q0 10 10 10 h10'/>
    <path d='M140 110 h10 q10 0 10 -10'/>
    <path d='M90 100 q0 10 10 10 h10'/>
    <path d='M135 80 h15 q10 0 10 -10'/>
    <path d='M90 70 q0 10 10 10 h15'/>
    <path d='M160 60 q0 -10 10 -10'/>
    <path d='M135 50 h65 q10 0 10 -10'/>
    <path d='M80 50 q10 0 10 10 v70'/>
    <path d='M200 20 q10 0 10 10 v10'/>
    <path d='M190 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='shift-expression'>shift-expression:</a></h2>
  <svg height='95' width='270'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M260.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#additive-expression'>
    <rect x='60' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='25' text-anchor='middle' class='rule'>additive-expression</text>
    </a>
    <rect x='120' y='40' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='135' y='55' text-anchor='middle' class='literal'>&lt;&lt;</text>
    <rect x='120' y='70' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='135' y='85' text-anchor='middle' class='literal'>&gt;&gt;</text>
    <path d='M40 30 v10 q0 10 10 10 h70'/>
    <path d='M170 60 v10'/>
    <path d='M150 80 h10 q10 0 10 -10'/>
    <path d='M100 70 q0 10 10 10 h10'/>
    <path d='M170 60 q0 -10 10 -10'/>
    <path d='M150 50 h70 q10 0 10 -10'/>
    <path d='M90 50 q10 0 10 10 v10'/>
    <path d='M220 20 q10 0 10 10 v10'/>
    <path d='M210 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='additive-expression'>additive-expression:</a></h2>
  <svg height='95' width='310'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M300.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#multiplicative-expression'>
    <rect x='60' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='155' y='25' text-anchor='middle' class='rule'>multiplicative-expression</text>
    </a>
    <rect x='145' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='155' y='55' text-anchor='middle' class='literal'>+</text>
    <rect x='145' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='155' y='85' text-anchor='middle' class='literal'>-</text>
    <path d='M40 30 v10 q0 10 10 10 h95'/>
    <path d='M185 60 v10'/>
    <path d='M165 80 h10 q10 0 10 -10'/>
    <path d='M125 70 q0 10 10 10 h10'/>
    <path d='M185 60 q0 -10 10 -10'/>
    <path d='M165 50 h95 q10 0 10 -10'/>
    <path d='M115 50 q10 0 10 10 v10'/>
    <path d='M260 20 q10 0 10 10 v10'/>
    <path d='M250 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='multiplicative-expression'>multiplicative-expression:</a></h2>
  <svg height='125' width='250'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M240.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#cast-expression'>
    <rect x='60' y='10' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='125' y='25' text-anchor='middle' class='rule'>cast-expression</text>
    </a>
    <rect x='115' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='125' y='55' text-anchor='middle' class='literal'>%</text>
    <rect x='115' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='125' y='85' text-anchor='middle' class='literal'>*</text>
    <rect x='115' y='100' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='125' y='115' text-anchor='middle' class='literal'>/</text>
    <path d='M40 30 v10 q0 10 10 10 h65'/>
    <path d='M155 60 v40'/>
    <path d='M135 110 h10 q10 0 10 -10'/>
    <path d='M95 100 q0 10 10 10 h10'/>
    <path d='M135 80 h10 q10 0 10 -10'/>
    <path d='M95 70 q0 10 10 10 h10'/>
    <path d='M155 60 q0 -10 10 -10'/>
    <path d='M135 50 h65 q10 0 10 -10'/>
    <path d='M85 50 q10 0 10 10 v40'/>
    <path d='M200 20 q10 0 10 10 v10'/>
    <path d='M190 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='cast-expression'>cast-expression:</a></h2>
  <svg height='65' width='440'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M430.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#unary-expression'>
    <rect x='145' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='220' y='25' text-anchor='middle' class='rule'>unary-expression</text>
    </a>
    <rect x='60' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='55' text-anchor='middle' class='literal'>(</text>
    <a href='#type-name'>
    <rect x='100' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='145' y='55' text-anchor='middle' class='rule'>type-name</text>
    </a>
    <rect x='210' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='220' y='55' text-anchor='middle' class='literal'>)</text>
    <a href='#cast-expression'>
    <rect x='250' y='40' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='315' y='55' text-anchor='middle' class='rule'>cast-expression</text>
    </a>
    <path d='M400 30 v10'/>
    <path d='M380 50 h10 q10 0 10 -10'/>
    <path d='M230 50 h20'/>
    <path d='M190 50 h20'/>
    <path d='M80 50 h20'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M400 30 q0 -10 10 -10'/>
    <path d='M295 20 h135'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h135'/>
  </svg>
 </section>

 <section>
  <h2><a name='unary-expression'>unary-expression:</a></h2>
  <svg height='215' width='400'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M390.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#postfix-expression'>
    <rect x='125' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='200' y='25' text-anchor='middle' class='rule'>postfix-expression</text>
    </a>
    <rect x='100' y='40' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='115' y='55' text-anchor='middle' class='literal'>++</text>
    <rect x='100' y='70' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='115' y='85' text-anchor='middle' class='literal'>--</text>
    <a href='#unary-expression'>
    <rect x='180' y='40' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='255' y='55' text-anchor='middle' class='rule'>unary-expression</text>
    </a>
    <a href='#unary-operator'>
    <rect x='60' y='100' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='125' y='115' text-anchor='middle' class='rule'>unary-operator</text>
    </a>
    <a href='#cast-expression'>
    <rect x='210' y='100' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='275' y='115' text-anchor='middle' class='rule'>cast-expression</text>
    </a>
    <rect x='80' y='130' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='115' y='145' text-anchor='middle' class='literal'>sizeof</text>
    <a href='#unary-expression'>
    <rect x='170' y='130' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='245' y='145' text-anchor='middle' class='rule'>unary-expression</text>
    </a>
    <rect x='70' y='160' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='105' y='175' text-anchor='middle' class='literal'>sizeof</text>
    <rect x='160' y='160' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='170' y='175' text-anchor='middle' class='literal'>(</text>
    <a href='#type-name'>
    <rect x='200' y='160' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='245' y='175' text-anchor='middle' class='rule'>type-name</text>
    </a>
    <rect x='310' y='160' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='320' y='175' text-anchor='middle' class='literal'>)</text>
    <rect x='60' y='190' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='105' y='205' text-anchor='middle' class='literal'>_Alignof</text>
    <rect x='170' y='190' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='180' y='205' text-anchor='middle' class='literal'>(</text>
    <a href='#type-name'>
    <rect x='210' y='190' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='255' y='205' text-anchor='middle' class='rule'>type-name</text>
    </a>
    <rect x='320' y='190' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='330' y='205' text-anchor='middle' class='literal'>)</text>
    <path d='M360 30 v160'/>
    <path d='M340 200 h10 q10 0 10 -10'/>
    <path d='M300 200 h20'/>
    <path d='M190 200 h20'/>
    <path d='M150 200 h20'/>
    <path d='M40 190 q0 10 10 10 h10'/>
    <path d='M330 170 h20 q10 0 10 -10'/>
    <path d='M290 170 h20'/>
    <path d='M180 170 h20'/>
    <path d='M140 170 h20'/>
    <path d='M40 160 q0 10 10 10 h20'/>
    <path d='M320 140 h30 q10 0 10 -10'/>
    <path d='M150 140 h20'/>
    <path d='M40 130 q0 10 10 10 h30'/>
    <path d='M340 110 h10 q10 0 10 -10'/>
    <path d='M190 110 h20'/>
    <path d='M40 100 q0 10 10 10 h10'/>
    <path d='M330 50 h20 q10 0 10 -10'/>
    <path d='M150 60 v10'/>
    <path d='M130 80 h10 q10 0 10 -10'/>
    <path d='M80 70 q0 10 10 10 h10'/>
    <path d='M150 60 q0 -10 10 -10'/>
    <path d='M130 50 h50'/>
    <path d='M70 50 q10 0 10 10 v10'/>
    <path d='M40 40 q0 10 10 10 h50'/>
    <path d='M360 30 q0 -10 10 -10'/>
    <path d='M275 20 h115'/>
    <path d='M30 20 q10 0 10 10 v160'/>
    <path d='M10 20 h115'/>
  </svg>
 </section>

 <section>
  <h2><a name='postfix-expression'>postfix-expression:</a></h2>
  <svg height='285' width='640'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M630.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#primary-expression'>
    <rect x='235' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='320' y='25' text-anchor='middle' class='rule'>primary-expression</text>
    </a>
    <a href='#postfix-expression'>
    <rect x='150' y='40' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='225' y='55' text-anchor='middle' class='rule'>postfix-expression</text>
    </a>
    <rect x='320' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='330' y='55' text-anchor='middle' class='literal'>[</text>
    <a href='#expression'>
    <rect x='360' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='405' y='55' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='470' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='480' y='55' text-anchor='middle' class='literal'>]</text>
    <a href='#postfix-expression'>
    <rect x='60' y='90' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='105' text-anchor='middle' class='rule'>postfix-expression</text>
    </a>
    <rect x='230' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='240' y='105' text-anchor='middle' class='literal'>(</text>
    <path d='M407 70 l-4 3 v-6 z' class='arrow'/>
    <a href='#argument-expression-list'>
    <rect x='300' y='90' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='405' y='105' text-anchor='middle' class='rule'>argument-expression-list</text>
    </a>
    <rect x='560' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='570' y='105' text-anchor='middle' class='literal'>)</text>
    <a href='#postfix-expression'>
    <rect x='135' y='120' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='210' y='135' text-anchor='middle' class='rule'>postfix-expression</text>
    </a>
    <rect x='340' y='120' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='350' y='135' text-anchor='middle' class='literal'>.</text>
    <rect x='335' y='150' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='350' y='165' text-anchor='middle' class='literal'>-&gt;</text>
    <rect x='415' y='120' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='460' y='135' text-anchor='middle' class='rule'>identifier</text>
    <a href='#postfix-expression'>
    <rect x='190' y='180' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='265' y='195' text-anchor='middle' class='rule'>postfix-expression</text>
    </a>
    <rect x='390' y='180' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='405' y='195' text-anchor='middle' class='literal'>++</text>
    <rect x='390' y='210' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='405' y='225' text-anchor='middle' class='literal'>--</text>
    <rect x='80' y='260' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='90' y='275' text-anchor='middle' class='literal'>(</text>
    <a href='#type-name'>
    <rect x='120' y='260' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='165' y='275' text-anchor='middle' class='rule'>type-name</text>
    </a>
    <rect x='230' y='260' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='240' y='275' text-anchor='middle' class='literal'>)</text>
    <rect x='270' y='260' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='280' y='275' text-anchor='middle' class='literal'>{</text>
    <a href='#initializer-list'>
    <rect x='310' y='260' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='365' y='275' text-anchor='middle' class='rule'>initializer-list</text>
    </a>
    <path d='M482 240 l-4 3 v-6 z' class='arrow'/>
    <rect x='470' y='260' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='480' y='275' text-anchor='middle' class='literal'>,</text>
    <rect x='540' y='260' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='550' y='275' text-anchor='middle' class='literal'>}</text>
    <path d='M600 30 v230'/>
    <path d='M560 270 h30 q10 0 10 -10'/>
    <path d='M450 250 v10'/>
    <path d='M510 260 q0 10 10 10'/>
    <path d='M490 270 h50'/>
    <path d='M440 270 q10 0 10 -10'/>
    <path d='M450 250 q0 -10 10 -10 h40 q10 0 10 10 v10'/>
    <path d='M420 270 h50'/>
    <path d='M290 270 h20'/>
    <path d='M250 270 h20'/>
    <path d='M210 270 h20'/>
    <path d='M100 270 h20'/>
    <path d='M40 260 q0 10 10 10 h30'/>
    <path d='M440 200 v10'/>
    <path d='M420 220 h10 q10 0 10 -10'/>
    <path d='M370 210 q0 10 10 10 h10'/>
    <path d='M440 200 q0 -10 10 -10'/>
    <path d='M420 190 h170 q10 0 10 -10'/>
    <path d='M360 190 q10 0 10 10 v10'/>
    <path d='M340 190 h50'/>
    <path d='M40 180 q0 10 10 10 h140'/>
    <path d='M505 130 h85 q10 0 10 -10'/>
    <path d='M385 140 v10'/>
    <path d='M365 160 h10 q10 0 10 -10'/>
    <path d='M315 150 q0 10 10 10 h10'/>
    <path d='M385 140 q0 -10 10 -10'/>
    <path d='M360 130 h55'/>
    <path d='M305 130 q10 0 10 10 v10'/>
    <path d='M285 130 h55'/>
    <path d='M40 120 q0 10 10 10 h85'/>
    <path d='M580 100 h10 q10 0 10 -10'/>
    <path d='M280 80 v10'/>
    <path d='M530 90 q0 10 10 10'/>
    <path d='M510 100 h50'/>
    <path d='M270 100 q10 0 10 -10'/>
    <path d='M280 80 q0 -10 10 -10 h230 q10 0 10 10 v10'/>
    <path d='M250 100 h50'/>
    <path d='M210 100 h20'/>
    <path d='M40 90 q0 10 10 10 h10'/>
    <path d='M490 50 h100 q10 0 10 -10'/>
    <path d='M450 50 h20'/>
    <path d='M340 50 h20'/>
    <path d='M300 50 h20'/>
    <path d='M40 40 q0 10 10 10 h100'/>
    <path d='M600 30 q0 -10 10 -10'/>
    <path d='M405 20 h225'/>
    <path d='M30 20 q10 0 10 10 v230'/>
    <path d='M10 20 h225'/>
  </svg>
 </section>

 <section>
  <h2><a name='unary-operator'>unary-operator:</a></h2>
  <svg height='185' width='140'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M130.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='25' text-anchor='middle' class='literal'>!</text>
    <rect x='60' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='55' text-anchor='middle' class='literal'>&amp;</text>
    <rect x='60' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='85' text-anchor='middle' class='literal'>*</text>
    <rect x='60' y='100' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='115' text-anchor='middle' class='literal'>+</text>
    <rect x='60' y='130' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='145' text-anchor='middle' class='literal'>-</text>
    <rect x='60' y='160' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='175' text-anchor='middle' class='literal'>~</text>
    <path d='M100 30 v130'/>
    <path d='M80 170 h10 q10 0 10 -10'/>
    <path d='M40 160 q0 10 10 10 h10'/>
    <path d='M80 140 h10 q10 0 10 -10'/>
    <path d='M40 130 q0 10 10 10 h10'/>
    <path d='M80 110 h10 q10 0 10 -10'/>
    <path d='M40 100 q0 10 10 10 h10'/>
    <path d='M80 80 h10 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h10'/>
    <path d='M80 50 h10 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M100 30 q0 -10 10 -10'/>
    <path d='M80 20 h50'/>
    <path d='M30 20 q10 0 10 10 v130'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='primary-expression'>primary-expression:</a></h2>
  <svg height='155' width='290'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M280.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='100' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='145' y='25' text-anchor='middle' class='rule'>identifier</text>
    <a href='#constant'>
    <rect x='110' y='40' height='20' width='70' rx='0' ry='0' class='rule'/>
    <text x='145' y='55' text-anchor='middle' class='rule'>constant</text>
    </a>
    <a href='#string'>
    <rect x='110' y='70' height='20' width='70' rx='0' ry='0' class='rule'/>
    <text x='145' y='85' text-anchor='middle' class='rule'>string</text>
    </a>
    <rect x='60' y='100' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='115' text-anchor='middle' class='literal'>(</text>
    <a href='#expression'>
    <rect x='100' y='100' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='145' y='115' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='210' y='100' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='220' y='115' text-anchor='middle' class='literal'>)</text>
    <a href='#generic-selection'>
    <rect x='70' y='130' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='145' y='145' text-anchor='middle' class='rule'>generic-selection</text>
    </a>
    <path d='M250 30 v100'/>
    <path d='M220 140 h20 q10 0 10 -10'/>
    <path d='M40 130 q0 10 10 10 h20'/>
    <path d='M230 110 h10 q10 0 10 -10'/>
    <path d='M190 110 h20'/>
    <path d='M80 110 h20'/>
    <path d='M40 100 q0 10 10 10 h10'/>
    <path d='M180 80 h60 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h60'/>
    <path d='M180 50 h60 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h60'/>
    <path d='M250 30 q0 -10 10 -10'/>
    <path d='M190 20 h90'/>
    <path d='M30 20 q10 0 10 10 v100'/>
    <path d='M10 20 h90'/>
  </svg>
 </section>

 <section>
  <h2><a name='argument-expression-list'>argument-expression-list:</a></h2>
  <svg height='65' width='310'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M300.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#assignment-expression'>
    <rect x='60' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='155' y='25' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='145' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='155' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h95'/>
    <path d='M165 50 h95 q10 0 10 -10'/>
    <path d='M260 20 q10 0 10 10 v10'/>
    <path d='M250 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='constant'>constant:</a></h2>
  <svg height='125' width='290'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M280.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='80' y='10' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='145' y='25' text-anchor='middle' class='rule'>integer-constant</text>
    <rect x='70' y='40' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='145' y='55' text-anchor='middle' class='rule'>character-constant</text>
    <rect x='80' y='70' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='145' y='85' text-anchor='middle' class='rule'>floating-constant</text>
    <a href='#enumeration-constant'>
    <rect x='60' y='100' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='115' text-anchor='middle' class='rule'>enumeration-constant</text>
    </a>
    <path d='M250 30 v70'/>
    <path d='M230 110 h10 q10 0 10 -10'/>
    <path d='M40 100 q0 10 10 10 h10'/>
    <path d='M210 80 h30 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h30'/>
    <path d='M220 50 h20 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h20'/>
    <path d='M250 30 q0 -10 10 -10'/>
    <path d='M210 20 h70'/>
    <path d='M30 20 q10 0 10 10 v70'/>
    <path d='M10 20 h70'/>
  </svg>
 </section>

 <section>
  <h2><a name='string'>string:</a></h2>
  <svg height='65' width='230'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M220.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='115' y='25' text-anchor='middle' class='rule'>string-literal</text>
    <rect x='70' y='40' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='115' y='55' text-anchor='middle' class='literal'>__func__</text>
    <path d='M190 30 v10'/>
    <path d='M160 50 h20 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h20'/>
    <path d='M190 30 q0 -10 10 -10'/>
    <path d='M170 20 h50'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='generic-selection'>generic-selection:</a></h2>
  <svg height='35' width='650'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M640.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='10' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='75' y='25' text-anchor='middle' class='literal'>_Generic</text>
    <rect x='140' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='150' y='25' text-anchor='middle' class='literal'>(</text>
    <a href='#assignment-expression'>
    <rect x='180' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='275' y='25' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='390' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='400' y='25' text-anchor='middle' class='literal'>,</text>
    <a href='#generic-assoc-list'>
    <rect x='430' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='505' y='25' text-anchor='middle' class='rule'>generic-assoc-list</text>
    </a>
    <rect x='600' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='610' y='25' text-anchor='middle' class='literal'>)</text>
    <path d='M580 20 h20'/>
    <path d='M410 20 h20'/>
    <path d='M370 20 h20'/>
    <path d='M160 20 h20'/>
    <path d='M120 20 h20'/>
    <path d='M620 20 h20'/>
    <path d='M10 20 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='generic-assoc-list'>generic-assoc-list:</a></h2>
  <svg height='65' width='270'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M260.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#generic-association'>
    <rect x='60' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='25' text-anchor='middle' class='rule'>generic-association</text>
    </a>
    <rect x='125' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='135' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h75'/>
    <path d='M145 50 h75 q10 0 10 -10'/>
    <path d='M220 20 q10 0 10 10 v10'/>
    <path d='M210 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='generic-association'>generic-association:</a></h2>
  <svg height='65' width='460'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M450.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#type-name'>
    <rect x='60' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='25' text-anchor='middle' class='rule'>type-name</text>
    </a>
    <rect x='170' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='180' y='25' text-anchor='middle' class='literal'>:</text>
    <a href='#assignment-expression'>
    <rect x='210' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='305' y='25' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='65' y='40' height='20' width='80' rx='8' ry='8' class='literal'/>
    <text x='105' y='55' text-anchor='middle' class='literal'>default</text>
    <rect x='165' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='175' y='55' text-anchor='middle' class='literal'>:</text>
    <a href='#assignment-expression'>
    <rect x='205' y='40' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='300' y='55' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <path d='M420 30 v10'/>
    <path d='M395 50 h15 q10 0 10 -10'/>
    <path d='M185 50 h20'/>
    <path d='M145 50 h20'/>
    <path d='M40 40 q0 10 10 10 h15'/>
    <path d='M420 30 q0 -10 10 -10'/>
    <path d='M400 20 h50'/>
    <path d='M190 20 h20'/>
    <path d='M150 20 h20'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='designation'>designation:</a></h2>
  <svg height='35' width='230'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M220.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#designator-list'>
    <rect x='30' y='10' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='95' y='25' text-anchor='middle' class='rule'>designator-list</text>
    </a>
    <rect x='180' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='190' y='25' text-anchor='middle' class='literal'>=</text>
    <path d='M160 20 h20'/>
    <path d='M200 20 h20'/>
    <path d='M10 20 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='designator-list'>designator-list:</a></h2>
  <svg height='55' width='210'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M200.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#designator'>
    <rect x='60' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='25' text-anchor='middle' class='rule'>designator</text>
    </a>
    <path d='M103 40 l4 3 v-6 z' class='arrow'/>
    <path d='M40 30 v0 q0 10 10 10 h110 q10 0 10 -10 v0'/>
    <path d='M160 20 q10 0 10 10'/>
    <path d='M150 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='designator'>designator:</a></h2>
  <svg height='65' width='370'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M360.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='25' text-anchor='middle' class='literal'>[</text>
    <a href='#constant-expression'>
    <rect x='100' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='185' y='25' text-anchor='middle' class='rule'>constant-expression</text>
    </a>
    <rect x='290' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='300' y='25' text-anchor='middle' class='literal'>]</text>
    <rect x='120' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='130' y='55' text-anchor='middle' class='literal'>.</text>
    <rect x='160' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='205' y='55' text-anchor='middle' class='rule'>identifier</text>
    <path d='M330 30 v10'/>
    <path d='M250 50 h70 q10 0 10 -10'/>
    <path d='M140 50 h20'/>
    <path d='M40 40 q0 10 10 10 h70'/>
    <path d='M330 30 q0 -10 10 -10'/>
    <path d='M310 20 h50'/>
    <path d='M270 20 h20'/>
    <path d='M80 20 h20'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='statement'>statement:</a></h2>
  <svg height='185' width='290'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M280.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#labeled-statement'>
    <rect x='70' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='145' y='25' text-anchor='middle' class='rule'>labeled-statement</text>
    </a>
    <a href='#compound-statement'>
    <rect x='60' y='40' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='55' text-anchor='middle' class='rule'>compound-statement</text>
    </a>
    <a href='#expression-statement'>
    <rect x='60' y='70' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='85' text-anchor='middle' class='rule'>expression-statement</text>
    </a>
    <a href='#selection-statement'>
    <rect x='70' y='100' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='145' y='115' text-anchor='middle' class='rule'>selection-statement</text>
    </a>
    <a href='#iteration-statement'>
    <rect x='70' y='130' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='145' y='145' text-anchor='middle' class='rule'>iteration-statement</text>
    </a>
    <a href='#jump-statement'>
    <rect x='80' y='160' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='145' y='175' text-anchor='middle' class='rule'>jump-statement</text>
    </a>
    <path d='M250 30 v130'/>
    <path d='M210 170 h30 q10 0 10 -10'/>
    <path d='M40 160 q0 10 10 10 h30'/>
    <path d='M220 140 h20 q10 0 10 -10'/>
    <path d='M40 130 q0 10 10 10 h20'/>
    <path d='M220 110 h20 q10 0 10 -10'/>
    <path d='M40 100 q0 10 10 10 h20'/>
    <path d='M230 80 h10 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h10'/>
    <path d='M230 50 h10 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M250 30 q0 -10 10 -10'/>
    <path d='M220 20 h60'/>
    <path d='M30 20 q10 0 10 10 v130'/>
    <path d='M10 20 h60'/>
  </svg>
 </section>

 <section>
  <h2><a name='labeled-statement'>labeled-statement:</a></h2>
  <svg height='95' width='510'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M500.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='135' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='180' y='25' text-anchor='middle' class='rule'>identifier</text>
    <rect x='245' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='255' y='25' text-anchor='middle' class='literal'>:</text>
    <a href='#statement'>
    <rect x='285' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='330' y='25' text-anchor='middle' class='rule'>statement</text>
    </a>
    <rect x='60' y='40' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='85' y='55' text-anchor='middle' class='literal'>case</text>
    <a href='#constant-expression'>
    <rect x='130' y='40' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='215' y='55' text-anchor='middle' class='rule'>constant-expression</text>
    </a>
    <rect x='320' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='330' y='55' text-anchor='middle' class='literal'>:</text>
    <a href='#statement'>
    <rect x='360' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='405' y='55' text-anchor='middle' class='rule'>statement</text>
    </a>
    <rect x='140' y='70' height='20' width='80' rx='8' ry='8' class='literal'/>
    <text x='180' y='85' text-anchor='middle' class='literal'>default</text>
    <rect x='240' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='250' y='85' text-anchor='middle' class='literal'>:</text>
    <a href='#statement'>
    <rect x='280' y='70' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='325' y='85' text-anchor='middle' class='rule'>statement</text>
    </a>
    <path d='M470 30 v40'/>
    <path d='M370 80 h90 q10 0 10 -10'/>
    <path d='M260 80 h20'/>
    <path d='M220 80 h20'/>
    <path d='M40 70 q0 10 10 10 h90'/>
    <path d='M450 50 h10 q10 0 10 -10'/>
    <path d='M340 50 h20'/>
    <path d='M300 50 h20'/>
    <path d='M110 50 h20'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M470 30 q0 -10 10 -10'/>
    <path d='M375 20 h125'/>
    <path d='M265 20 h20'/>
    <path d='M225 20 h20'/>
    <path d='M30 20 q10 0 10 10 v40'/>
    <path d='M10 20 h125'/>
  </svg>
 </section>

 <section>
  <h2><a name='expression-statement'>expression-statement:</a></h2>
  <svg height='55' width='250'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M240.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M107 10 l-4 3 v-6 z' class='arrow'/>
    <a href='#expression'>
    <rect x='60' y='30' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='45' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='200' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='210' y='45' text-anchor='middle' class='literal'>;</text>
    <path d='M40 20 v10'/>
    <path d='M170 30 q0 10 10 10'/>
    <path d='M150 40 h50'/>
    <path d='M30 40 q10 0 10 -10'/>
    <path d='M40 20 q0 -10 10 -10 h110 q10 0 10 10 v10'/>
    <path d='M220 40 h20'/>
    <path d='M10 40 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='selection-statement'>selection-statement:</a></h2>
  <svg height='95' width='630'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M620.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='75' y='25' text-anchor='middle' class='literal'>if</text>
    <rect x='110' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='120' y='25' text-anchor='middle' class='literal'>(</text>
    <a href='#expression'>
    <rect x='150' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='195' y='25' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='260' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='270' y='25' text-anchor='middle' class='literal'>)</text>
    <a href='#statement'>
    <rect x='300' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='345' y='25' text-anchor='middle' class='rule'>statement</text>
    </a>
    <rect x='410' y='10' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='435' y='25' text-anchor='middle' class='literal'>else</text>
    <a href='#statement'>
    <rect x='480' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='525' y='25' text-anchor='middle' class='rule'>statement</text>
    </a>
    <rect x='150' y='40' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='165' y='55' text-anchor='middle' class='literal'>if</text>
    <rect x='200' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='210' y='55' text-anchor='middle' class='literal'>(</text>
    <a href='#expression'>
    <rect x='240' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='285' y='55' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='350' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='360' y='55' text-anchor='middle' class='literal'>)</text>
    <a href='#statement'>
    <rect x='390' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='435' y='55' text-anchor='middle' class='rule'>statement</text>
    </a>
    <rect x='130' y='70' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='165' y='85' text-anchor='middle' class='literal'>switch</text>
    <rect x='220' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='230' y='85' text-anchor='middle' class='literal'>(</text>
    <a href='#expression'>
    <rect x='260' y='70' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='305' y='85' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='370' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='380' y='85' text-anchor='middle' class='literal'>)</text>
    <a href='#statement'>
    <rect x='410' y='70' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='455' y='85' text-anchor='middle' class='rule'>statement</text>
    </a>
    <path d='M590 30 v40'/>
    <path d='M500 80 h80 q10 0 10 -10'/>
    <path d='M390 80 h20'/>
    <path d='M350 80 h20'/>
    <path d='M240 80 h20'/>
    <path d='M200 80 h20'/>
    <path d='M40 70 q0 10 10 10 h80'/>
    <path d='M480 50 h100 q10 0 10 -10'/>
    <path d='M370 50 h20'/>
    <path d='M330 50 h20'/>
    <path d='M220 50 h20'/>
    <path d='M180 50 h20'/>
    <path d='M40 40 q0 10 10 10 h100'/>
    <path d='M590 30 q0 -10 10 -10'/>
    <path d='M570 20 h50'/>
    <path d='M460 20 h20'/>
    <path d='M390 20 h20'/>
    <path d='M280 20 h20'/>
    <path d='M240 20 h20'/>
    <path d='M130 20 h20'/>
    <path d='M90 20 h20'/>
    <path d='M30 20 q10 0 10 10 v40'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='iteration-statement'>iteration-statement:</a></h2>
  <svg height='165' width='940'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M930.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='290' y='10' height='20' width='60' rx='8' ry='8' class='literal'/>
    <text x='320' y='25' text-anchor='middle' class='literal'>while</text>
    <rect x='370' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='380' y='25' text-anchor='middle' class='literal'>(</text>
    <a href='#expression'>
    <rect x='410' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='455' y='25' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='520' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='530' y='25' text-anchor='middle' class='literal'>)</text>
    <a href='#statement'>
    <rect x='560' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='605' y='25' text-anchor='middle' class='rule'>statement</text>
    </a>
    <rect x='245' y='40' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='260' y='55' text-anchor='middle' class='literal'>do</text>
    <a href='#statement'>
    <rect x='295' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='340' y='55' text-anchor='middle' class='rule'>statement</text>
    </a>
    <rect x='405' y='40' height='20' width='60' rx='8' ry='8' class='literal'/>
    <text x='435' y='55' text-anchor='middle' class='literal'>while</text>
    <rect x='485' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='495' y='55' text-anchor='middle' class='literal'>(</text>
    <a href='#expression'>
    <rect x='525' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='570' y='55' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='635' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='645' y='55' text-anchor='middle' class='literal'>)</text>
    <rect x='675' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='685' y='55' text-anchor='middle' class='literal'>;</text>
    <rect x='60' y='90' height='20' width='40' rx='8' ry='8' class='literal'/>
    <text x='80' y='105' text-anchor='middle' class='literal'>for</text>
    <rect x='120' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='130' y='105' text-anchor='middle' class='literal'>(</text>
    <path d='M237 70 l-4 3 v-6 z' class='arrow'/>
    <a href='#expression'>
    <rect x='190' y='90' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='235' y='105' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='330' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='340' y='105' text-anchor='middle' class='literal'>;</text>
    <path d='M447 70 l-4 3 v-6 z' class='arrow'/>
    <a href='#expression'>
    <rect x='400' y='90' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='445' y='105' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='540' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='550' y='105' text-anchor='middle' class='literal'>;</text>
    <path d='M657 70 l-4 3 v-6 z' class='arrow'/>
    <a href='#expression'>
    <rect x='610' y='90' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='655' y='105' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='750' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='760' y='105' text-anchor='middle' class='literal'>)</text>
    <a href='#statement'>
    <rect x='790' y='90' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='835' y='105' text-anchor='middle' class='rule'>statement</text>
    </a>
    <rect x='110' y='140' height='20' width='40' rx='8' ry='8' class='literal'/>
    <text x='130' y='155' text-anchor='middle' class='literal'>for</text>
    <rect x='170' y='140' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='180' y='155' text-anchor='middle' class='literal'>(</text>
    <a href='#declaration'>
    <rect x='210' y='140' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='255' y='155' text-anchor='middle' class='rule'>declaration</text>
    </a>
    <path d='M397 120 l-4 3 v-6 z' class='arrow'/>
    <a href='#expression'>
    <rect x='350' y='140' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='395' y='155' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='490' y='140' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='500' y='155' text-anchor='middle' class='literal'>;</text>
    <path d='M607 120 l-4 3 v-6 z' class='arrow'/>
    <a href='#expression'>
    <rect x='560' y='140' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='605' y='155' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='700' y='140' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='710' y='155' text-anchor='middle' class='literal'>)</text>
    <a href='#statement'>
    <rect x='740' y='140' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='785' y='155' text-anchor='middle' class='rule'>statement</text>
    </a>
    <path d='M900 30 v110'/>
    <path d='M830 150 h60 q10 0 10 -10'/>
    <path d='M720 150 h20'/>
    <path d='M540 130 v10'/>
    <path d='M670 140 q0 10 10 10'/>
    <path d='M650 150 h50'/>
    <path d='M530 150 q10 0 10 -10'/>
    <path d='M540 130 q0 -10 10 -10 h110 q10 0 10 10 v10'/>
    <path d='M510 150 h50'/>
    <path d='M330 130 v10'/>
    <path d='M460 140 q0 10 10 10'/>
    <path d='M440 150 h50'/>
    <path d='M320 150 q10 0 10 -10'/>
    <path d='M330 130 q0 -10 10 -10 h110 q10 0 10 10 v10'/>
    <path d='M300 150 h50'/>
    <path d='M190 150 h20'/>
    <path d='M150 150 h20'/>
    <path d='M40 140 q0 10 10 10 h60'/>
    <path d='M880 100 h10 q10 0 10 -10'/>
    <path d='M770 100 h20'/>
    <path d='M590 80 v10'/>
    <path d='M720 90 q0 10 10 10'/>
    <path d='M700 100 h50'/>
    <path d='M580 100 q10 0 10 -10'/>
    <path d='M590 80 q0 -10 10 -10 h110 q10 0 10 10 v10'/>
    <path d='M560 100 h50'/>
    <path d='M380 80 v10'/>
    <path d='M510 90 q0 10 10 10'/>
    <path d='M490 100 h50'/>
    <path d='M370 100 q10 0 10 -10'/>
    <path d='M380 80 q0 -10 10 -10 h110 q10 0 10 10 v10'/>
    <path d='M350 100 h50'/>
    <path d='M170 80 v10'/>
    <path d='M300 90 q0 10 10 10'/>
    <path d='M280 100 h50'/>
    <path d='M160 100 q10 0 10 -10'/>
    <path d='M170 80 q0 -10 10 -10 h110 q10 0 10 10 v10'/>
    <path d='M140 100 h50'/>
    <path d='M100 100 h20'/>
    <path d='M40 90 q0 10 10 10 h10'/>
    <path d='M695 50 h195 q10 0 10 -10'/>
    <path d='M655 50 h20'/>
    <path d='M615 50 h20'/>
    <path d='M505 50 h20'/>
    <path d='M465 50 h20'/>
    <path d='M385 50 h20'/>
    <path d='M275 50 h20'/>
    <path d='M40 40 q0 10 10 10 h195'/>
    <path d='M900 30 q0 -10 10 -10'/>
    <path d='M650 20 h280'/>
    <path d='M540 20 h20'/>
    <path d='M500 20 h20'/>
    <path d='M390 20 h20'/>
    <path d='M350 20 h20'/>
    <path d='M30 20 q10 0 10 10 v110'/>
    <path d='M10 20 h280'/>
  </svg>
 </section>

 <section>
  <h2><a name='jump-statement'>jump-statement:</a></h2>
  <svg height='145' width='400'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M390.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='100' y='10' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='125' y='25' text-anchor='middle' class='literal'>goto</text>
    <rect x='170' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='215' y='25' text-anchor='middle' class='rule'>identifier</text>
    <rect x='280' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='290' y='25' text-anchor='middle' class='literal'>;</text>
    <rect x='135' y='40' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='180' y='55' text-anchor='middle' class='literal'>continue</text>
    <rect x='245' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='255' y='55' text-anchor='middle' class='literal'>;</text>
    <rect x='150' y='70' height='20' width='60' rx='8' ry='8' class='literal'/>
    <text x='180' y='85' text-anchor='middle' class='literal'>break</text>
    <rect x='230' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='240' y='85' text-anchor='middle' class='literal'>;</text>
    <rect x='60' y='120' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='95' y='135' text-anchor='middle' class='literal'>return</text>
    <path d='M227 100 l-4 3 v-6 z' class='arrow'/>
    <a href='#expression'>
    <rect x='180' y='120' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='225' y='135' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='320' y='120' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='330' y='135' text-anchor='middle' class='literal'>;</text>
    <path d='M360 30 v90'/>
    <path d='M340 130 h10 q10 0 10 -10'/>
    <path d='M160 110 v10'/>
    <path d='M290 120 q0 10 10 10'/>
    <path d='M270 130 h50'/>
    <path d='M150 130 q10 0 10 -10'/>
    <path d='M160 110 q0 -10 10 -10 h110 q10 0 10 10 v10'/>
    <path d='M130 130 h50'/>
    <path d='M40 120 q0 10 10 10 h10'/>
    <path d='M250 80 h100 q10 0 10 -10'/>
    <path d='M210 80 h20'/>
    <path d='M40 70 q0 10 10 10 h100'/>
    <path d='M265 50 h85 q10 0 10 -10'/>
    <path d='M225 50 h20'/>
    <path d='M40 40 q0 10 10 10 h85'/>
    <path d='M360 30 q0 -10 10 -10'/>
    <path d='M300 20 h90'/>
    <path d='M260 20 h20'/>
    <path d='M150 20 h20'/>
    <path d='M30 20 q10 0 10 10 v90'/>
    <path d='M10 20 h90'/>
  </svg>
 </section>

 </body>
</html>
<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE html>
<html xml:lang='en' lang='en'
  xmlns='http://www.w3.org/1999/xhtml'
  xmlns:xlink='http://www.w3.org/1999/xlink'>

 <head>
  <meta charset='UTF-8'/>
  <style>
      rect, line, path { stroke-width: 1.5px; stroke: black; fill: transparent; }
      rect, line, path { stroke-linecap: square; stroke-linejoin: rounded; }
      path { fill: transparent; }
      text.literal { font-family: monospace; }
      a { fill: blue; }
      a:hover rect { fill: aliceblue; }
      h2 { font-size: inherit; font-weight: inherit; }
      line.ellipsis { stroke-dasharray: 1 3.5; }
      tspan.hex { font-family: monospace; font-size: 90%; }
      path.arrow { fill: black; }
      svg { margin-left: 30px; }
  </style>
 </head>

 <body>
 <section>
  <h2><a name='translation-unit'>translation-unit:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='55' width='290'>
    <path d='M5.5 4 v12 m 4 0 v-12' class='station'/>
    <path d='M280.5 4 v12 m 4 0 v-12' class='station'/>
    <a href='#external-declaration'>
    <rect x='60' y='30' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='45' text-anchor='middle' class='rule'>external-declaration</text>
    </a>
    <path d='M40 20 v10 q0 10 10 10 h10'/>
    <path d='M230 40 h10 q10 0 10 -10'/>
    <path d='M240 10 q10 0 10 10 v10'/>
    <path d='M40 20 q0 -10 10 -10'/>
    <path d='M10 10 h270'/>
  </svg>
 </section>

 <section>
  <h2><a name='external-declaration'>external-declaration:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='270'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M260.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#function-definition'>
    <rect x='60' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='25' text-anchor='middle' class='rule'>function-definition</text>
    </a>
    <a href='#declaration'>
    <rect x='90' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='135' y='55' text-anchor='middle' class='rule'>declaration</text>
    </a>
    <path d='M230 30 v10'/>
    <path d='M180 50 h40 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h40'/>
    <path d='M230 30 q0 -10 10 -10'/>
    <path d='M210 20 h50'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='function-definition'>function-definition:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='55' width='740'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M730.5 34 v12 m 4 0 v-12' class='station'/>
    <a href='#declaration-specifiers'>
    <rect x='30' y='30' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='115' y='45' text-anchor='middle' class='rule'>declaration-specifiers</text>
    </a>
    <a href='#declarator'>
    <rect x='220' y='30' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='265' y='45' text-anchor='middle' class='rule'>declarator</text>
    </a>
    <path d='M427 10 l-4 3 v-6 z' class='arrow'/>
    <a href='#declaration-list'>
    <rect x='360' y='30' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='425' y='45' text-anchor='middle' class='rule'>declaration-list</text>
    </a>
    <a href='#compound-statement'>
    <rect x='540' y='30' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='625' y='45' text-anchor='middle' class='rule'>compound-statement</text>
    </a>
    <path d='M340 20 v10'/>
    <path d='M510 30 q0 10 10 10'/>
    <path d='M490 40 h50'/>
    <path d='M330 40 q10 0 10 -10'/>
    <path d='M340 20 q0 -10 10 -10 h150 q10 0 10 10 v10'/>
    <path d='M310 40 h50'/>
    <path d='M200 40 h20'/>
    <path d='M710 40 h20'/>
    <path d='M10 40 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='declaration'>declaration:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='115' width='560'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M550.5 34 v12 m 4 0 v-12' class='station'/>
    <a href='#declaration-specifiers'>
    <rect x='60' y='30' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='45' text-anchor='middle' class='rule'>declaration-specifiers</text>
    </a>
    <path d='M357 10 l-4 3 v-6 z' class='arrow'/>
    <a href='#init-declarator-list'>
    <rect x='280' y='30' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='355' y='45' text-anchor='middle' class='rule'>init-declarator-list</text>
    </a>
    <rect x='480' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='490' y='45' text-anchor='middle' class='literal'>;</text>
    <a href='#static-assert-declaration'>
    <rect x='185' y='60' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='280' y='75' text-anchor='middle' class='rule'>static-assert-declaration</text>
    </a>
    <rect x='270' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='280' y='105' text-anchor='middle' class='literal'>;</text>
    <path d='M520 50 v40'/>
    <path d='M290 100 h220 q10 0 10 -10'/>
    <path d='M40 90 q0 10 10 10 h220'/>
    <path d='M375 70 h135 q10 0 10 -10'/>
    <path d='M40 60 q0 10 10 10 h135'/>
    <path d='M520 50 q0 -10 10 -10'/>
    <path d='M500 40 h50'/>
    <path d='M260 20 v10'/>
    <path d='M450 30 q0 10 10 10'/>
    <path d='M430 40 h50'/>
    <path d='M250 40 q10 0 10 -10'/>
    <path d='M260 20 q0 -10 10 -10 h170 q10 0 10 10 v10'/>
    <path d='M230 40 h50'/>
    <path d='M30 40 q10 0 10 10 v40'/>
    <path d='M10 40 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='declaration-specifiers'>declaration-specifiers:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='55' width='290'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M280.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#declaration-specifier'>
    <rect x='60' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='25' text-anchor='middle' class='rule'>declaration-specifier</text>
    </a>
    <path d='M143 40 l4 3 v-6 z' class='arrow'/>
    <path d='M40 30 v0 q0 10 10 10 h190 q10 0 10 -10 v0'/>
    <path d='M240 20 q10 0 10 10'/>
    <path d='M230 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='declaration-specifier'>declaration-specifier:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='155' width='310'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M300.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#storage-class-specifier'>
    <rect x='60' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='155' y='25' text-anchor='middle' class='rule'>storage-class-specifier</text>
    </a>
    <a href='#type-specifier'>
    <rect x='100' y='40' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='155' y='55' text-anchor='middle' class='rule'>type-specifier</text>
    </a>
    <a href='#type-qualifier'>
    <rect x='100' y='70' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='155' y='85' text-anchor='middle' class='rule'>type-qualifier</text>
    </a>
    <a href='#function-specifier'>
    <rect x='80' y='100' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='155' y='115' text-anchor='middle' class='rule'>function-specifier</text>
    </a>
    <a href='#alignment-specifier'>
    <rect x='80' y='130' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='155' y='145' text-anchor='middle' class='rule'>alignment-specifier</text>
    </a>
    <path d='M270 30 v100'/>
    <path d='M230 140 h30 q10 0 10 -10'/>
    <path d='M40 130 q0 10 10 10 h30'/>
    <path d='M230 110 h30 q10 0 10 -10'/>
    <path d='M40 100 q0 10 10 10 h30'/>
    <path d='M210 80 h50 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h50'/>
    <path d='M210 50 h50 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h50'/>
    <path d='M270 30 q0 -10 10 -10'/>
    <path d='M250 20 h50'/>
    <path d='M30 20 q10 0 10 10 v100'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='declarator'>declarator:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='55' width='360'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M350.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M97 10 l-4 3 v-6 z' class='arrow'/>
    <a href='#pointer'>
    <rect x='60' y='30' height='20' width='70' rx='0' ry='0' class='rule'/>
    <text x='95' y='45' text-anchor='middle' class='rule'>pointer</text>
    </a>
    <a href='#direct-declarator'>
    <rect x='180' y='30' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='255' y='45' text-anchor='middle' class='rule'>direct-declarator</text>
    </a>
    <path d='M40 20 v10'/>
    <path d='M150 30 q0 10 10 10'/>
    <path d='M130 40 h50'/>
    <path d='M30 40 q10 0 10 -10'/>
    <path d='M40 20 q0 -10 10 -10 h90 q10 0 10 10 v10'/>
    <path d='M330 40 h20'/>
    <path d='M10 40 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='declaration-list'>declaration-list:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='55' width='210'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M200.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#declaration'>
    <rect x='60' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='25' text-anchor='middle' class='rule'>declaration</text>
    </a>
    <path d='M103 40 l4 3 v-6 z' class='arrow'/>
    <path d='M40 30 v0 q0 10 10 10 h110 q10 0 10 -10 v0'/>
    <path d='M160 20 q10 0 10 10'/>
    <path d='M150 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='compound-statement'>compound-statement:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='390'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M380.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='40' y='25' text-anchor='middle' class='literal'>{</text>
    <a href='#declaration-or-statement'>
    <rect x='100' y='40' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='195' y='55' text-anchor='middle' class='rule'>declaration-or-statement</text>
    </a>
    <rect x='340' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='350' y='25' text-anchor='middle' class='literal'>}</text>
    <path d='M80 30 v10 q0 10 10 10 h10'/>
    <path d='M290 50 h10 q10 0 10 -10'/>
    <path d='M300 20 q10 0 10 10 v10'/>
    <path d='M80 30 q0 -10 10 -10'/>
    <path d='M50 20 h290'/>
    <path d='M360 20 h20'/>
    <path d='M10 20 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='declaration-or-statement'>declaration-or-statement:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='210'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M200.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#declaration'>
    <rect x='60' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='25' text-anchor='middle' class='rule'>declaration</text>
    </a>
    <a href='#statement'>
    <rect x='60' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='55' text-anchor='middle' class='rule'>statement</text>
    </a>
    <path d='M170 30 v10'/>
    <path d='M150 50 h10 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M170 30 q0 -10 10 -10'/>
    <path d='M150 20 h50'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='init-declarator-list'>init-declarator-list:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='250'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M240.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#init-declarator'>
    <rect x='60' y='10' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='125' y='25' text-anchor='middle' class='rule'>init-declarator</text>
    </a>
    <rect x='115' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='125' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h65'/>
    <path d='M135 50 h65 q10 0 10 -10'/>
    <path d='M200 20 q10 0 10 10 v10'/>
    <path d='M190 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='init-declarator'>init-declarator:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='55' width='360'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M350.5 34 v12 m 4 0 v-12' class='station'/>
    <a href='#declarator'>
    <rect x='30' y='30' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='75' y='45' text-anchor='middle' class='rule'>declarator</text>
    </a>
    <path d='M237 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='170' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='180' y='45' text-anchor='middle' class='literal'>=</text>
    <a href='#initializer'>
    <rect x='210' y='30' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='255' y='45' text-anchor='middle' class='rule'>initializer</text>
    </a>
    <path d='M150 20 v10'/>
    <path d='M320 30 q0 10 10 10'/>
    <path d='M300 40 h50'/>
    <path d='M190 40 h20'/>
    <path d='M140 40 q10 0 10 -10'/>
    <path d='M150 20 q0 -10 10 -10 h150 q10 0 10 10 v10'/>
    <path d='M120 40 h50'/>
    <path d='M10 40 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='static-assert-declaration'>static-assert-declaration:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='35' width='690'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M680.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='10' height='20' width='150' rx='8' ry='8' class='literal'/>
    <text x='105' y='25' text-anchor='middle' class='literal'>_Static_assert</text>
    <rect x='200' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='210' y='25' text-anchor='middle' class='literal'>(</text>
    <a href='#constant-expression'>
    <rect x='240' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='325' y='25' text-anchor='middle' class='rule'>constant-expression</text>
    </a>
    <rect x='430' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='440' y='25' text-anchor='middle' class='literal'>,</text>
    <rect x='470' y='10' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='525' y='25' text-anchor='middle' class='rule'>string-literal</text>
    <rect x='600' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='610' y='25' text-anchor='middle' class='literal'>)</text>
    <rect x='640' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='650' y='25' text-anchor='middle' class='literal'>;</text>
    <path d='M620 20 h20'/>
    <path d='M580 20 h20'/>
    <path d='M450 20 h20'/>
    <path d='M410 20 h20'/>
    <path d='M220 20 h20'/>
    <path d='M180 20 h20'/>
    <path d='M660 20 h20'/>
    <path d='M10 20 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='storage-class-specifier'>storage-class-specifier:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='185' width='260'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M250.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='90' y='10' height='20' width='80' rx='8' ry='8' class='literal'/>
    <text x='130' y='25' text-anchor='middle' class='literal'>typedef</text>
    <rect x='95' y='40' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='130' y='55' text-anchor='middle' class='literal'>extern</text>
    <rect x='95' y='70' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='130' y='85' text-anchor='middle' class='literal'>static</text>
    <rect x='60' y='100' height='20' width='140' rx='8' ry='8' class='literal'/>
    <text x='130' y='115' text-anchor='middle' class='literal'>_Thread_local</text>
    <rect x='105' y='130' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='130' y='145' text-anchor='middle' class='literal'>auto</text>
    <rect x='85' y='160' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='130' y='175' text-anchor='middle' class='literal'>register</text>
    <path d='M220 30 v130'/>
    <path d='M175 170 h35 q10 0 10 -10'/>
    <path d='M40 160 q0 10 10 10 h35'/>
    <path d='M155 140 h55 q10 0 10 -10'/>
    <path d='M40 130 q0 10 10 10 h55'/>
    <path d='M200 110 h10 q10 0 10 -10'/>
    <path d='M40 100 q0 10 10 10 h10'/>
    <path d='M165 80 h45 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h45'/>
    <path d='M165 50 h45 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h45'/>
    <path d='M220 30 q0 -10 10 -10'/>
    <path d='M170 20 h80'/>
    <path d='M30 20 q10 0 10 10 v130'/>
    <path d='M10 20 h80'/>
  </svg>
 </section>

 <section>
  <h2><a name='type-specifier'>type-specifier:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='485' width='330'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M320.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='140' y='10' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='165' y='25' text-anchor='middle' class='literal'>void</text>
    <rect x='140' y='40' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='165' y='55' text-anchor='middle' class='literal'>char</text>
    <rect x='135' y='70' height='20' width='60' rx='8' ry='8' class='literal'/>
    <text x='165' y='85' text-anchor='middle' class='literal'>short</text>
    <rect x='145' y='100' height='20' width='40' rx='8' ry='8' class='literal'/>
    <text x='165' y='115' text-anchor='middle' class='literal'>int</text>
    <rect x='140' y='130' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='165' y='145' text-anchor='middle' class='literal'>long</text>
    <rect x='135' y='160' height='20' width='60' rx='8' ry='8' class='literal'/>
    <text x='165' y='175' text-anchor='middle' class='literal'>float</text>
    <rect x='130' y='190' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='165' y='205' text-anchor='middle' class='literal'>double</text>
    <rect x='130' y='220' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='165' y='235' text-anchor='middle' class='literal'>signed</text>
    <rect x='120' y='250' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='165' y='265' text-anchor='middle' class='literal'>unsigned</text>
    <rect x='135' y='280' height='20' width='60' rx='8' ry='8' class='literal'/>
    <text x='165' y='295' text-anchor='middle' class='literal'>_Bool</text>
    <rect x='120' y='310' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='165' y='325' text-anchor='middle' class='literal'>_Complex</text>
    <rect x='110' y='340' height='20' width='110' rx='8' ry='8' class='literal'/>
    <text x='165' y='355' text-anchor='middle' class='literal'>_Imaginary</text>
    <a href='#atomic-type-specifier'>
    <rect x='80' y='370' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='165' y='385' text-anchor='middle' class='rule'>atomic-type-specifier</text>
    </a>
    <a href='#struct-or-union-specifier'>
    <rect x='60' y='400' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='165' y='415' text-anchor='middle' class='rule'>struct-or-union-specifier</text>
    </a>
    <a href='#enum-specifier'>
    <rect x='100' y='430' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='165' y='445' text-anchor='middle' class='rule'>enum-specifier</text>
    </a>
    <a href='#typedef-name'>
    <rect x='110' y='460' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='165' y='475' text-anchor='middle' class='rule'>typedef-name</text>
    </a>
    <path d='M290 30 v430'/>
    <path d='M220 470 h60 q10 0 10 -10'/>
    <path d='M40 460 q0 10 10 10 h60'/>
    <path d='M230 440 h50 q10 0 10 -10'/>
    <path d='M40 430 q0 10 10 10 h50'/>
    <path d='M270 410 h10 q10 0 10 -10'/>
    <path d='M40 400 q0 10 10 10 h10'/>
    <path d='M250 380 h30 q10 0 10 -10'/>
    <path d='M40 370 q0 10 10 10 h30'/>
    <path d='M220 350 h60 q10 0 10 -10'/>
    <path d='M40 340 q0 10 10 10 h60'/>
    <path d='M210 320 h70 q10 0 10 -10'/>
    <path d='M40 310 q0 10 10 10 h70'/>
    <path d='M195 290 h85 q10 0 10 -10'/>
    <path d='M40 280 q0 10 10 10 h85'/>
    <path d='M210 260 h70 q10 0 10 -10'/>
    <path d='M40 250 q0 10 10 10 h70'/>
    <path d='M200 230 h80 q10 0 10 -10'/>
    <path d='M40 220 q0 10 10 10 h80'/>
    <path d='M200 200 h80 q10 0 10 -10'/>
    <path d='M40 190 q0 10 10 10 h80'/>
    <path d='M195 170 h85 q10 0 10 -10'/>
    <path d='M40 160 q0 10 10 10 h85'/>
    <path d='M190 140 h90 q10 0 10 -10'/>
    <path d='M40 130 q0 10 10 10 h90'/>
    <path d='M185 110 h95 q10 0 10 -10'/>
    <path d='M40 100 q0 10 10 10 h95'/>
    <path d='M195 80 h85 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h85'/>
    <path d='M190 50 h90 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h90'/>
    <path d='M290 30 q0 -10 10 -10'/>
    <path d='M190 20 h130'/>
    <path d='M30 20 q10 0 10 10 v430'/>
    <path d='M10 20 h130'/>
  </svg>
 </section>

 <section>
  <h2><a name='typedef-name'>typedef-name:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='35' width='150'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M140.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='75' y='25' text-anchor='middle' class='rule'>identifier</text>
    <path d='M120 20 h20'/>
    <path d='M10 20 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='type-qualifier'>type-qualifier:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='125' width='210'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M200.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='75' y='10' height='20' width='60' rx='8' ry='8' class='literal'/>
    <text x='105' y='25' text-anchor='middle' class='literal'>const</text>
    <rect x='60' y='40' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='105' y='55' text-anchor='middle' class='literal'>restrict</text>
    <rect x='60' y='70' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='105' y='85' text-anchor='middle' class='literal'>volatile</text>
    <rect x='65' y='100' height='20' width='80' rx='8' ry='8' class='literal'/>
    <text x='105' y='115' text-anchor='middle' class='literal'>_Atomic</text>
    <path d='M170 30 v70'/>
    <path d='M145 110 h15 q10 0 10 -10'/>
    <path d='M40 100 q0 10 10 10 h15'/>
    <path d='M150 80 h10 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h10'/>
    <path d='M150 50 h10 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M170 30 q0 -10 10 -10'/>
    <path d='M135 20 h65'/>
    <path d='M30 20 q10 0 10 10 v70'/>
    <path d='M10 20 h65'/>
  </svg>
 </section>

 <section>
  <h2><a name='function-specifier'>function-specifier:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='220'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M210.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='75' y='10' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='110' y='25' text-anchor='middle' class='literal'>inline</text>
    <rect x='60' y='40' height='20' width='100' rx='8' ry='8' class='literal'/>
    <text x='110' y='55' text-anchor='middle' class='literal'>_Noreturn</text>
    <path d='M180 30 v10'/>
    <path d='M160 50 h10 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M180 30 q0 -10 10 -10'/>
    <path d='M145 20 h65'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h65'/>
  </svg>
 </section>

 <section>
  <h2><a name='alignment-specifier'>alignment-specifier:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='480'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M470.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='100' y='10' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='145' y='25' text-anchor='middle' class='literal'>_Alignas</text>
    <rect x='210' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='220' y='25' text-anchor='middle' class='literal'>(</text>
    <a href='#type-name'>
    <rect x='250' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='295' y='25' text-anchor='middle' class='rule'>type-name</text>
    </a>
    <rect x='360' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='370' y='25' text-anchor='middle' class='literal'>)</text>
    <rect x='60' y='40' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='105' y='55' text-anchor='middle' class='literal'>_Alignas</text>
    <rect x='170' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='180' y='55' text-anchor='middle' class='literal'>(</text>
    <a href='#constant-expression'>
    <rect x='210' y='40' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='295' y='55' text-anchor='middle' class='rule'>constant-expression</text>
    </a>
    <rect x='400' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='410' y='55' text-anchor='middle' class='literal'>)</text>
    <path d='M440 30 v10'/>
    <path d='M420 50 h10 q10 0 10 -10'/>
    <path d='M380 50 h20'/>
    <path d='M190 50 h20'/>
    <path d='M150 50 h20'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M440 30 q0 -10 10 -10'/>
    <path d='M380 20 h90'/>
    <path d='M340 20 h20'/>
    <path d='M230 20 h20'/>
    <path d='M190 20 h20'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h90'/>
  </svg>
 </section>

 <section>
  <h2><a name='pointer'>pointer:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='55' width='460'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M450.5 34 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='40' y='45' text-anchor='middle' class='literal'>*</text>
    <path d='M177 10 l-4 3 v-6 z' class='arrow'/>
    <a href='#type-qualifier-list'>
    <rect x='100' y='30' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='175' y='45' text-anchor='middle' class='rule'>type-qualifier-list</text>
    </a>
    <path d='M367 10 l-4 3 v-6 z' class='arrow'/>
    <a href='#pointer'>
    <rect x='330' y='30' height='20' width='70' rx='0' ry='0' class='rule'/>
    <text x='365' y='45' text-anchor='middle' class='rule'>pointer</text>
    </a>
    <path d='M310 20 v10'/>
    <path d='M420 30 q0 10 10 10'/>
    <path d='M400 40 h50'/>
    <path d='M300 40 q10 0 10 -10'/>
    <path d='M310 20 q0 -10 10 -10 h90 q10 0 10 10 v10'/>
    <path d='M80 20 v10'/>
    <path d='M270 30 q0 10 10 10'/>
    <path d='M250 40 h80'/>
    <path d='M70 40 q10 0 10 -10'/>
    <path d='M80 20 q0 -10 10 -10 h170 q10 0 10 10 v10'/>
    <path d='M50 40 h50'/>
    <path d='M10 40 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='direct-declarator'>direct-declarator:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='385' width='880'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M870.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='395' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='440' y='25' text-anchor='middle' class='rule'>identifier</text>
    <rect x='355' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='365' y='55' text-anchor='middle' class='literal'>(</text>
    <a href='#declarator'>
    <rect x='395' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='440' y='55' text-anchor='middle' class='rule'>declarator</text>
    </a>
    <rect x='505' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='515' y='55' text-anchor='middle' class='literal'>)</text>
    <a href='#direct-declarator'>
    <rect x='275' y='90' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='350' y='105' text-anchor='middle' class='rule'>direct-declarator</text>
    </a>
    <rect x='445' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='455' y='105' text-anchor='middle' class='literal'>[</text>
    <path d='M527 70 l-4 3 v-6 z' class='arrow'/>
    <rect x='515' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='525' y='105' text-anchor='middle' class='literal'>*</text>
    <rect x='585' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='595' y='105' text-anchor='middle' class='literal'>]</text>
    <a href='#direct-declarator'>
    <rect x='60' y='140' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='155' text-anchor='middle' class='rule'>direct-declarator</text>
    </a>
    <rect x='230' y='140' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='240' y='155' text-anchor='middle' class='literal'>[</text>
    <rect x='270' y='140' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='305' y='155' text-anchor='middle' class='literal'>static</text>
    <path d='M467 120 l-4 3 v-6 z' class='arrow'/>
    <a href='#type-qualifier-list'>
    <rect x='390' y='140' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='465' y='155' text-anchor='middle' class='rule'>type-qualifier-list</text>
    </a>
    <a href='#assignment-expression'>
    <rect x='590' y='140' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='685' y='155' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='800' y='140' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='810' y='155' text-anchor='middle' class='literal'>]</text>
    <a href='#direct-declarator'>
    <rect x='190' y='190' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='265' y='205' text-anchor='middle' class='rule'>direct-declarator</text>
    </a>
    <rect x='360' y='190' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='370' y='205' text-anchor='middle' class='literal'>[</text>
    <a href='#type-qualifier-list'>
    <rect x='400' y='190' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='475' y='205' text-anchor='middle' class='rule'>type-qualifier-list</text>
    </a>
    <path d='M612 170 l-4 3 v-6 z' class='arrow'/>
    <rect x='600' y='190' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='610' y='205' text-anchor='middle' class='literal'>*</text>
    <rect x='670' y='190' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='680' y='205' text-anchor='middle' class='literal'>]</text>
    <a href='#direct-declarator'>
    <rect x='60' y='240' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='255' text-anchor='middle' class='rule'>direct-declarator</text>
    </a>
    <rect x='230' y='240' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='240' y='255' text-anchor='middle' class='literal'>[</text>
    <a href='#type-qualifier-list'>
    <rect x='270' y='240' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='345' y='255' text-anchor='middle' class='rule'>type-qualifier-list</text>
    </a>
    <path d='M507 220 l-4 3 v-6 z' class='arrow'/>
    <rect x='470' y='240' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='505' y='255' text-anchor='middle' class='literal'>static</text>
    <a href='#assignment-expression'>
    <rect x='590' y='240' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='685' y='255' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='800' y='240' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='810' y='255' text-anchor='middle' class='literal'>]</text>
    <a href='#direct-declarator'>
    <rect x='220' y='270' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='295' y='285' text-anchor='middle' class='rule'>direct-declarator</text>
    </a>
    <rect x='390' y='270' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='400' y='285' text-anchor='middle' class='literal'>[</text>
    <a href='#assignment-expression'>
    <rect x='430' y='270' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='525' y='285' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='640' y='270' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='650' y='285' text-anchor='middle' class='literal'>]</text>
    <a href='#direct-declarator'>
    <rect x='230' y='300' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='305' y='315' text-anchor='middle' class='rule'>direct-declarator</text>
    </a>
    <rect x='400' y='300' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='410' y='315' text-anchor='middle' class='literal'>(</text>
    <a href='#parameter-type-list'>
    <rect x='440' y='300' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='525' y='315' text-anchor='middle' class='rule'>parameter-type-list</text>
    </a>
    <rect x='630' y='300' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='640' y='315' text-anchor='middle' class='literal'>)</text>
    <a href='#direct-declarator'>
    <rect x='260' y='330' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='335' y='345' text-anchor='middle' class='rule'>direct-declarator</text>
    </a>
    <rect x='430' y='330' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='440' y='345' text-anchor='middle' class='literal'>(</text>
    <a href='#identifier-list'>
    <rect x='470' y='330' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='525' y='345' text-anchor='middle' class='rule'>identifier-list</text>
    </a>
    <rect x='600' y='330' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='610' y='345' text-anchor='middle' class='literal'>)</text>
    <a href='#direct-declarator'>
    <rect x='325' y='360' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='400' y='375' text-anchor='middle' class='rule'>direct-declarator</text>
    </a>
    <rect x='495' y='360' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='505' y='375' text-anchor='middle' class='literal'>(</text>
    <rect x='535' y='360' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='545' y='375' text-anchor='middle' class='literal'>)</text>
    <path d='M840 30 v330'/>
    <path d='M555 370 h275 q10 0 10 -10'/>
    <path d='M515 370 h20'/>
    <path d='M475 370 h20'/>
    <path d='M40 360 q0 10 10 10 h275'/>
    <path d='M620 340 h210 q10 0 10 -10'/>
    <path d='M580 340 h20'/>
    <path d='M450 340 h20'/>
    <path d='M410 340 h20'/>
    <path d='M40 330 q0 10 10 10 h210'/>
    <path d='M650 310 h180 q10 0 10 -10'/>
    <path d='M610 310 h20'/>
    <path d='M420 310 h20'/>
    <path d='M380 310 h20'/>
    <path d='M40 300 q0 10 10 10 h180'/>
    <path d='M660 280 h170 q10 0 10 -10'/>
    <path d='M620 280 h20'/>
    <path d='M410 280 h20'/>
    <path d='M370 280 h20'/>
    <path d='M40 270 q0 10 10 10 h170'/>
    <path d='M820 250 h10 q10 0 10 -10'/>
    <path d='M780 250 h20'/>
    <path d='M450 230 v10'/>
    <path d='M560 240 q0 10 10 10'/>
    <path d='M540 250 h50'/>
    <path d='M440 250 q10 0 10 -10'/>
    <path d='M450 230 q0 -10 10 -10 h90 q10 0 10 10 v10'/>
    <path d='M420 250 h50'/>
    <path d='M250 250 h20'/>
    <path d='M210 250 h20'/>
    <path d='M40 240 q0 10 10 10 h10'/>
    <path d='M690 200 h140 q10 0 10 -10'/>
    <path d='M580 180 v10'/>
    <path d='M640 190 q0 10 10 10'/>
    <path d='M620 200 h50'/>
    <path d='M570 200 q10 0 10 -10'/>
    <path d='M580 180 q0 -10 10 -10 h40 q10 0 10 10 v10'/>
    <path d='M550 200 h50'/>
    <path d='M380 200 h20'/>
    <path d='M340 200 h20'/>
    <path d='M40 190 q0 10 10 10 h140'/>
    <path d='M820 150 h10 q10 0 10 -10'/>
    <path d='M780 150 h20'/>
    <path d='M370 130 v10'/>
    <path d='M560 140 q0 10 10 10'/>
    <path d='M540 150 h50'/>
    <path d='M360 150 q10 0 10 -10'/>
    <path d='M370 130 q0 -10 10 -10 h170 q10 0 10 10 v10'/>
    <path d='M340 150 h50'/>
    <path d='M250 150 h20'/>
    <path d='M210 150 h20'/>
    <path d='M40 140 q0 10 10 10 h10'/>
    <path d='M605 100 h225 q10 0 10 -10'/>
    <path d='M495 80 v10'/>
    <path d='M555 90 q0 10 10 10'/>
    <path d='M535 100 h50'/>
    <path d='M485 100 q10 0 10 -10'/>
    <path d='M495 80 q0 -10 10 -10 h40 q10 0 10 10 v10'/>
    <path d='M465 100 h50'/>
    <path d='M425 100 h20'/>
    <path d='M40 90 q0 10 10 10 h225'/>
    <path d='M525 50 h305 q10 0 10 -10'/>
    <path d='M485 50 h20'/>
    <path d='M375 50 h20'/>
    <path d='M40 40 q0 10 10 10 h305'/>
    <path d='M840 30 q0 -10 10 -10'/>
    <path d='M485 20 h385'/>
    <path d='M30 20 q10 0 10 10 v330'/>
    <path d='M10 20 h385'/>
  </svg>
 </section>

 <section>
  <h2><a name='identifier-list'>identifier-list:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='210'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M200.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='25' text-anchor='middle' class='rule'>identifier</text>
    <rect x='95' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='105' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h45'/>
    <path d='M115 50 h45 q10 0 10 -10'/>
    <path d='M160 20 q10 0 10 10 v10'/>
    <path d='M150 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='initializer-list'>initializer-list:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='290'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M280.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#designative-initializer'>
    <rect x='60' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='25' text-anchor='middle' class='rule'>designative-initializer</text>
    </a>
    <rect x='135' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='145' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h85'/>
    <path d='M155 50 h85 q10 0 10 -10'/>
    <path d='M240 20 q10 0 10 10 v10'/>
    <path d='M230 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='designative-initializer'>designative-initializer:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='55' width='320'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M310.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M107 10 l-4 3 v-6 z' class='arrow'/>
    <a href='#designation'>
    <rect x='60' y='30' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='45' text-anchor='middle' class='rule'>designation</text>
    </a>
    <a href='#initializer'>
    <rect x='200' y='30' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='245' y='45' text-anchor='middle' class='rule'>initializer</text>
    </a>
    <path d='M40 20 v10'/>
    <path d='M170 30 q0 10 10 10'/>
    <path d='M150 40 h50'/>
    <path d='M30 40 q10 0 10 -10'/>
    <path d='M40 20 q0 -10 10 -10 h110 q10 0 10 10 v10'/>
    <path d='M290 40 h20'/>
    <path d='M10 40 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='initializer'>initializer:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='85' width='410'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M400.5 34 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='45' text-anchor='middle' class='literal'>{</text>
    <a href='#initializer-list'>
    <rect x='100' y='30' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='155' y='45' text-anchor='middle' class='rule'>initializer-list</text>
    </a>
    <path d='M272 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='260' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='270' y='45' text-anchor='middle' class='literal'>,</text>
    <rect x='330' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='340' y='45' text-anchor='middle' class='literal'>}</text>
    <a href='#assignment-expression'>
    <rect x='110' y='60' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='205' y='75' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <path d='M370 50 v10'/>
    <path d='M300 70 h60 q10 0 10 -10'/>
    <path d='M40 60 q0 10 10 10 h60'/>
    <path d='M370 50 q0 -10 10 -10'/>
    <path d='M350 40 h50'/>
    <path d='M240 20 v10'/>
    <path d='M300 30 q0 10 10 10'/>
    <path d='M280 40 h50'/>
    <path d='M230 40 q10 0 10 -10'/>
    <path d='M240 20 q0 -10 10 -10 h40 q10 0 10 10 v10'/>
    <path d='M210 40 h50'/>
    <path d='M80 40 h20'/>
    <path d='M30 40 q10 0 10 10 v10'/>
    <path d='M10 40 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='constant-expression'>constant-expression:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='35' width='250'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M240.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#conditional-expression'>
    <rect x='30' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='125' y='25' text-anchor='middle' class='rule'>conditional-expression</text>
    </a>
    <path d='M220 20 h20'/>
    <path d='M10 20 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='atomic-type-specifier'>atomic-type-specifier:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='35' width='330'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M320.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='10' height='20' width='80' rx='8' ry='8' class='literal'/>
    <text x='70' y='25' text-anchor='middle' class='literal'>_Atomic</text>
    <rect x='130' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='140' y='25' text-anchor='middle' class='literal'>(</text>
    <a href='#type-name'>
    <rect x='170' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='215' y='25' text-anchor='middle' class='rule'>type-name</text>
    </a>
    <rect x='280' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='290' y='25' text-anchor='middle' class='literal'>)</text>
    <path d='M260 20 h20'/>
    <path d='M150 20 h20'/>
    <path d='M110 20 h20'/>
    <path d='M300 20 h20'/>
    <path d='M10 20 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='struct-or-union-specifier'>struct-or-union-specifier:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='85' width='690'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M680.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#struct-or-union'>
    <rect x='145' y='10' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='210' y='25' text-anchor='middle' class='rule'>struct-or-union</text>
    </a>
    <rect x='295' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='305' y='25' text-anchor='middle' class='literal'>{</text>
    <a href='#struct-declaration-list'>
    <rect x='335' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='420' y='25' text-anchor='middle' class='rule'>struct-declaration-list</text>
    </a>
    <rect x='525' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='535' y='25' text-anchor='middle' class='literal'>}</text>
    <a href='#struct-or-union'>
    <rect x='60' y='60' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='125' y='75' text-anchor='middle' class='rule'>struct-or-union</text>
    </a>
    <rect x='210' y='60' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='255' y='75' text-anchor='middle' class='rule'>identifier</text>
    <path d='M477 40 l-4 3 v-6 z' class='arrow'/>
    <rect x='350' y='60' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='360' y='75' text-anchor='middle' class='literal'>{</text>
    <a href='#struct-declaration-list'>
    <rect x='390' y='60' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='475' y='75' text-anchor='middle' class='rule'>struct-declaration-list</text>
    </a>
    <rect x='580' y='60' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='590' y='75' text-anchor='middle' class='literal'>}</text>
    <path d='M650 30 v30'/>
    <path d='M330 50 v10'/>
    <path d='M620 60 q0 10 10 10'/>
    <path d='M600 70 h40 q10 0 10 -10'/>
    <path d='M560 70 h20'/>
    <path d='M370 70 h20'/>
    <path d='M320 70 q10 0 10 -10'/>
    <path d='M330 50 q0 -10 10 -10 h270 q10 0 10 10 v10'/>
    <path d='M300 70 h50'/>
    <path d='M190 70 h20'/>
    <path d='M40 60 q0 10 10 10 h10'/>
    <path d='M650 30 q0 -10 10 -10'/>
    <path d='M545 20 h135'/>
    <path d='M505 20 h20'/>
    <path d='M315 20 h20'/>
    <path d='M275 20 h20'/>
    <path d='M30 20 q10 0 10 10 v30'/>
    <path d='M10 20 h135'/>
  </svg>
 </section>

 <section>
  <h2><a name='struct-or-union'>struct-or-union:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='190'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M180.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='95' y='25' text-anchor='middle' class='literal'>struct</text>
    <rect x='65' y='40' height='20' width='60' rx='8' ry='8' class='literal'/>
    <text x='95' y='55' text-anchor='middle' class='literal'>union</text>
    <path d='M150 30 v10'/>
    <path d='M125 50 h15 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h15'/>
    <path d='M150 30 q0 -10 10 -10'/>
    <path d='M130 20 h50'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='struct-declaration-list'>struct-declaration-list:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='55' width='270'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M260.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#struct-declaration'>
    <rect x='60' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='25' text-anchor='middle' class='rule'>struct-declaration</text>
    </a>
    <path d='M133 40 l4 3 v-6 z' class='arrow'/>
    <path d='M40 30 v0 q0 10 10 10 h170 q10 0 10 -10 v0'/>
    <path d='M220 20 q10 0 10 10'/>
    <path d='M210 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='struct-declaration'>struct-declaration:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='95' width='540'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M530.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#specifier-qualifier-list'>
    <rect x='155' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='250' y='25' text-anchor='middle' class='rule'>specifier-qualifier-list</text>
    </a>
    <rect x='365' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='375' y='25' text-anchor='middle' class='literal'>;</text>
    <a href='#specifier-qualifier-list'>
    <rect x='60' y='40' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='155' y='55' text-anchor='middle' class='rule'>specifier-qualifier-list</text>
    </a>
    <a href='#struct-declarator-list'>
    <rect x='270' y='40' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='355' y='55' text-anchor='middle' class='rule'>struct-declarator-list</text>
    </a>
    <rect x='460' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='470' y='55' text-anchor='middle' class='literal'>;</text>
    <a href='#static-assert-declaration'>
    <rect x='175' y='70' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='270' y='85' text-anchor='middle' class='rule'>static-assert-declaration</text>
    </a>
    <path d='M500 30 v40'/>
    <path d='M365 80 h125 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h125'/>
    <path d='M480 50 h10 q10 0 10 -10'/>
    <path d='M440 50 h20'/>
    <path d='M250 50 h20'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M500 30 q0 -10 10 -10'/>
    <path d='M385 20 h145'/>
    <path d='M345 20 h20'/>
    <path d='M30 20 q10 0 10 10 v40'/>
    <path d='M10 20 h145'/>
  </svg>
 </section>

 <section>
  <h2><a name='enum-specifier'>enum-specifier:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='125' width='670'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M660.5 34 v12 m 4 0 v-12' class='station'/>
    <rect x='145' y='30' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='170' y='45' text-anchor='middle' class='literal'>enum</text>
    <rect x='215' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='225' y='45' text-anchor='middle' class='literal'>{</text>
    <a href='#enumerator-list'>
    <rect x='255' y='30' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='320' y='45' text-anchor='middle' class='rule'>enumerator-list</text>
    </a>
    <path d='M447 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='435' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='445' y='45' text-anchor='middle' class='literal'>,</text>
    <rect x='505' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='515' y='45' text-anchor='middle' class='literal'>}</text>
    <rect x='60' y='100' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='85' y='115' text-anchor='middle' class='literal'>enum</text>
    <rect x='130' y='100' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='175' y='115' text-anchor='middle' class='rule'>identifier</text>
    <path d='M427 60 l-4 3 v-6 z' class='arrow'/>
    <rect x='270' y='100' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='280' y='115' text-anchor='middle' class='literal'>{</text>
    <a href='#enumerator-list'>
    <rect x='310' y='100' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='375' y='115' text-anchor='middle' class='rule'>enumerator-list</text>
    </a>
    <path d='M502 80 l-4 3 v-6 z' class='arrow'/>
    <rect x='490' y='100' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='500' y='115' text-anchor='middle' class='literal'>,</text>
    <rect x='560' y='100' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='570' y='115' text-anchor='middle' class='literal'>}</text>
    <path d='M630 50 v50'/>
    <path d='M250 70 v30'/>
    <path d='M600 100 q0 10 10 10'/>
    <path d='M580 110 h40 q10 0 10 -10'/>
    <path d='M470 90 v10'/>
    <path d='M530 100 q0 10 10 10'/>
    <path d='M510 110 h50'/>
    <path d='M460 110 q10 0 10 -10'/>
    <path d='M470 90 q0 -10 10 -10 h40 q10 0 10 10 v10'/>
    <path d='M440 110 h50'/>
    <path d='M290 110 h20'/>
    <path d='M240 110 q10 0 10 -10'/>
    <path d='M250 70 q0 -10 10 -10 h330 q10 0 10 10 v30'/>
    <path d='M220 110 h50'/>
    <path d='M110 110 h20'/>
    <path d='M40 100 q0 10 10 10 h10'/>
    <path d='M630 50 q0 -10 10 -10'/>
    <path d='M525 40 h135'/>
    <path d='M415 20 v10'/>
    <path d='M475 30 q0 10 10 10'/>
    <path d='M455 40 h50'/>
    <path d='M405 40 q10 0 10 -10'/>
    <path d='M415 20 q0 -10 10 -10 h40 q10 0 10 10 v10'/>
    <path d='M385 40 h50'/>
    <path d='M235 40 h20'/>
    <path d='M195 40 h20'/>
    <path d='M30 40 q10 0 10 10 v50'/>
    <path d='M10 40 h135'/>
  </svg>
 </section>

 <section>
  <h2><a name='enumerator-list'>enumerator-list:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='230'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M220.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#enumerator'>
    <rect x='60' y='10' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='115' y='25' text-anchor='middle' class='rule'>enumerator</text>
    </a>
    <rect x='105' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='115' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h55'/>
    <path d='M125 50 h55 q10 0 10 -10'/>
    <path d='M180 20 q10 0 10 10 v10'/>
    <path d='M170 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='enumerator'>enumerator:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='55' width='520'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M510.5 34 v12 m 4 0 v-12' class='station'/>
    <a href='#enumeration-constant'>
    <rect x='30' y='30' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='115' y='45' text-anchor='middle' class='rule'>enumeration-constant</text>
    </a>
    <path d='M357 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='250' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='260' y='45' text-anchor='middle' class='literal'>=</text>
    <a href='#constant-expression'>
    <rect x='290' y='30' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='375' y='45' text-anchor='middle' class='rule'>constant-expression</text>
    </a>
    <path d='M230 20 v10'/>
    <path d='M480 30 q0 10 10 10'/>
    <path d='M460 40 h50'/>
    <path d='M270 40 h20'/>
    <path d='M220 40 q10 0 10 -10'/>
    <path d='M230 20 q0 -10 10 -10 h230 q10 0 10 10 v10'/>
    <path d='M200 40 h50'/>
    <path d='M10 40 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='enumeration-constant'>enumeration-constant:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='35' width='150'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M140.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='75' y='25' text-anchor='middle' class='rule'>identifier</text>
    <path d='M120 20 h20'/>
    <path d='M10 20 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='type-name'>type-name:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='55' width='480'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M470.5 34 v12 m 4 0 v-12' class='station'/>
    <a href='#specifier-qualifier-list'>
    <rect x='30' y='30' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='125' y='45' text-anchor='middle' class='rule'>specifier-qualifier-list</text>
    </a>
    <path d='M347 10 l-4 3 v-6 z' class='arrow'/>
    <a href='#abstract-declarator'>
    <rect x='270' y='30' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='345' y='45' text-anchor='middle' class='rule'>abstract-declarator</text>
    </a>
    <path d='M250 20 v10'/>
    <path d='M440 30 q0 10 10 10'/>
    <path d='M420 40 h50'/>
    <path d='M240 40 q10 0 10 -10'/>
    <path d='M250 20 q0 -10 10 -10 h170 q10 0 10 10 v10'/>
    <path d='M220 40 h50'/>
    <path d='M10 40 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='specifier-qualifier-list'>specifier-qualifier-list:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='55' width='270'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M260.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#specifier-qualifier'>
    <rect x='60' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='25' text-anchor='middle' class='rule'>specifier-qualifier</text>
    </a>
    <path d='M133 40 l4 3 v-6 z' class='arrow'/>
    <path d='M40 30 v0 q0 10 10 10 h170 q10 0 10 -10 v0'/>
    <path d='M220 20 q10 0 10 10'/>
    <path d='M210 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='specifier-qualifier'>specifier-qualifier:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='230'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M220.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#type-specifier'>
    <rect x='60' y='10' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='115' y='25' text-anchor='middle' class='rule'>type-specifier</text>
    </a>
    <a href='#type-qualifier'>
    <rect x='60' y='40' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='115' y='55' text-anchor='middle' class='rule'>type-qualifier</text>
    </a>
    <path d='M190 30 v10'/>
    <path d='M170 50 h10 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M190 30 q0 -10 10 -10'/>
    <path d='M170 20 h50'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='abstract-declarator'>abstract-declarator:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='85' width='480'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M470.5 34 v12 m 4 0 v-12' class='station'/>
    <a href='#pointer'>
    <rect x='60' y='30' height='20' width='70' rx='0' ry='0' class='rule'/>
    <text x='95' y='45' text-anchor='middle' class='rule'>pointer</text>
    </a>
    <path d='M287 10 l-4 3 v-6 z' class='arrow'/>
    <a href='#direct-abstract-declarator'>
    <rect x='180' y='30' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='285' y='45' text-anchor='middle' class='rule'>direct-abstract-declarator</text>
    </a>
    <a href='#direct-abstract-declarator'>
    <rect x='135' y='60' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='240' y='75' text-anchor='middle' class='rule'>direct-abstract-declarator</text>
    </a>
    <path d='M440 50 v10'/>
    <path d='M345 70 h85 q10 0 10 -10'/>
    <path d='M40 60 q0 10 10 10 h85'/>
    <path d='M440 50 q0 -10 10 -10'/>
    <path d='M160 20 v10'/>
    <path d='M410 30 q0 10 10 10'/>
    <path d='M390 40 h80'/>
    <path d='M150 40 q10 0 10 -10'/>
    <path d='M160 20 q0 -10 10 -10 h230 q10 0 10 10 v10'/>
    <path d='M130 40 h50'/>
    <path d='M30 40 q10 0 10 10 v10'/>
    <path d='M10 40 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='direct-abstract-declarator'>direct-abstract-declarator:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='555' width='1000'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M990.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='385' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='395' y='25' text-anchor='middle' class='literal'>(</text>
    <a href='#abstract-declarator'>
    <rect x='425' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='500' y='25' text-anchor='middle' class='rule'>abstract-declarator</text>
    </a>
    <rect x='595' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='605' y='25' text-anchor='middle' class='literal'>)</text>
    <rect x='375' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='385' y='55' text-anchor='middle' class='literal'>(</text>
    <a href='#parameter-type-list'>
    <rect x='415' y='40' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='500' y='55' text-anchor='middle' class='rule'>parameter-type-list</text>
    </a>
    <rect x='605' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='615' y='55' text-anchor='middle' class='literal'>)</text>
    <rect x='470' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='480' y='85' text-anchor='middle' class='literal'>(</text>
    <rect x='510' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='520' y='85' text-anchor='middle' class='literal'>)</text>
    <rect x='420' y='120' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='430' y='135' text-anchor='middle' class='literal'>[</text>
    <path d='M502 100 l-4 3 v-6 z' class='arrow'/>
    <rect x='490' y='120' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='500' y='135' text-anchor='middle' class='literal'>*</text>
    <rect x='560' y='120' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='570' y='135' text-anchor='middle' class='literal'>]</text>
    <rect x='205' y='170' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='215' y='185' text-anchor='middle' class='literal'>[</text>
    <rect x='245' y='170' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='280' y='185' text-anchor='middle' class='literal'>static</text>
    <path d='M442 150 l-4 3 v-6 z' class='arrow'/>
    <a href='#type-qualifier-list'>
    <rect x='365' y='170' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='440' y='185' text-anchor='middle' class='rule'>type-qualifier-list</text>
    </a>
    <a href='#assignment-expression'>
    <rect x='565' y='170' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='660' y='185' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='775' y='170' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='785' y='185' text-anchor='middle' class='literal'>]</text>
    <rect x='175' y='240' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='185' y='255' text-anchor='middle' class='literal'>[</text>
    <a href='#type-qualifier-list'>
    <rect x='215' y='240' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='290' y='255' text-anchor='middle' class='rule'>type-qualifier-list</text>
    </a>
    <path d='M587 200 l-4 3 v-6 z' class='arrow'/>
    <path d='M482 220 l-4 3 v-6 z' class='arrow'/>
    <rect x='445' y='240' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='480' y='255' text-anchor='middle' class='literal'>static</text>
    <a href='#assignment-expression'>
    <rect x='565' y='240' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='660' y='255' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='805' y='240' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='815' y='255' text-anchor='middle' class='literal'>]</text>
    <rect x='365' y='270' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='375' y='285' text-anchor='middle' class='literal'>[</text>
    <a href='#assignment-expression'>
    <rect x='405' y='270' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='500' y='285' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='615' y='270' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='625' y='285' text-anchor='middle' class='literal'>]</text>
    <a href='#direct-abstract-declarator'>
    <rect x='305' y='320' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='410' y='335' text-anchor='middle' class='rule'>direct-abstract-declarator</text>
    </a>
    <rect x='535' y='320' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='545' y='335' text-anchor='middle' class='literal'>[</text>
    <path d='M617 300 l-4 3 v-6 z' class='arrow'/>
    <rect x='605' y='320' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='615' y='335' text-anchor='middle' class='literal'>*</text>
    <rect x='675' y='320' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='685' y='335' text-anchor='middle' class='literal'>]</text>
    <a href='#direct-abstract-declarator'>
    <rect x='90' y='370' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='195' y='385' text-anchor='middle' class='rule'>direct-abstract-declarator</text>
    </a>
    <rect x='320' y='370' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='330' y='385' text-anchor='middle' class='literal'>[</text>
    <rect x='360' y='370' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='395' y='385' text-anchor='middle' class='literal'>static</text>
    <path d='M557 350 l-4 3 v-6 z' class='arrow'/>
    <a href='#type-qualifier-list'>
    <rect x='480' y='370' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='555' y='385' text-anchor='middle' class='rule'>type-qualifier-list</text>
    </a>
    <a href='#assignment-expression'>
    <rect x='680' y='370' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='775' y='385' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='890' y='370' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='900' y='385' text-anchor='middle' class='literal'>]</text>
    <a href='#direct-abstract-declarator'>
    <rect x='60' y='440' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='165' y='455' text-anchor='middle' class='rule'>direct-abstract-declarator</text>
    </a>
    <rect x='290' y='440' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='300' y='455' text-anchor='middle' class='literal'>[</text>
    <a href='#type-qualifier-list'>
    <rect x='330' y='440' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='405' y='455' text-anchor='middle' class='rule'>type-qualifier-list</text>
    </a>
    <path d='M702 400 l-4 3 v-6 z' class='arrow'/>
    <path d='M597 420 l-4 3 v-6 z' class='arrow'/>
    <rect x='560' y='440' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='595' y='455' text-anchor='middle' class='literal'>static</text>
    <a href='#assignment-expression'>
    <rect x='680' y='440' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='775' y='455' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='920' y='440' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='930' y='455' text-anchor='middle' class='literal'>]</text>
    <a href='#direct-abstract-declarator'>
    <rect x='250' y='470' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='355' y='485' text-anchor='middle' class='rule'>direct-abstract-declarator</text>
    </a>
    <rect x='480' y='470' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='490' y='485' text-anchor='middle' class='literal'>[</text>
    <a href='#assignment-expression'>
    <rect x='520' y='470' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='615' y='485' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='730' y='470' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='740' y='485' text-anchor='middle' class='literal'>]</text>
    <a href='#direct-abstract-declarator'>
    <rect x='260' y='500' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='365' y='515' text-anchor='middle' class='rule'>direct-abstract-declarator</text>
    </a>
    <rect x='490' y='500' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='500' y='515' text-anchor='middle' class='literal'>(</text>
    <a href='#parameter-type-list'>
    <rect x='530' y='500' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='615' y='515' text-anchor='middle' class='rule'>parameter-type-list</text>
    </a>
    <rect x='720' y='500' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='730' y='515' text-anchor='middle' class='literal'>)</text>
    <a href='#direct-abstract-declarator'>
    <rect x='355' y='530' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='460' y='545' text-anchor='middle' class='rule'>direct-abstract-declarator</text>
    </a>
    <rect x='585' y='530' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='595' y='545' text-anchor='middle' class='literal'>(</text>
    <rect x='625' y='530' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='635' y='545' text-anchor='middle' class='literal'>)</text>
    <path d='M960 30 v500'/>
    <path d='M645 540 h305 q10 0 10 -10'/>
    <path d='M605 540 h20'/>
    <path d='M565 540 h20'/>
    <path d='M40 530 q0 10 10 10 h305'/>
    <path d='M740 510 h210 q10 0 10 -10'/>
    <path d='M700 510 h20'/>
    <path d='M510 510 h20'/>
    <path d='M470 510 h20'/>
    <path d='M40 500 q0 10 10 10 h210'/>
    <path d='M750 480 h200 q10 0 10 -10'/>
    <path d='M710 480 h20'/>
    <path d='M500 480 h20'/>
    <path d='M460 480 h20'/>
    <path d='M40 470 q0 10 10 10 h200'/>
    <path d='M940 450 h10 q10 0 10 -10'/>
    <path d='M510 410 v30'/>
    <path d='M890 440 q0 10 10 10'/>
    <path d='M870 450 h50'/>
    <path d='M540 430 v10'/>
    <path d='M650 440 q0 10 10 10'/>
    <path d='M630 450 h50'/>
    <path d='M530 450 q10 0 10 -10'/>
    <path d='M540 430 q0 -10 10 -10 h90 q10 0 10 10 v10'/>
    <path d='M500 450 q10 0 10 -10'/>
    <path d='M510 410 q0 -10 10 -10 h360 q10 0 10 10 v30'/>
    <path d='M480 450 h80'/>
    <path d='M310 450 h20'/>
    <path d='M270 450 h20'/>
    <path d='M40 440 q0 10 10 10 h10'/>
    <path d='M910 380 h40 q10 0 10 -10'/>
    <path d='M870 380 h20'/>
    <path d='M460 360 v10'/>
    <path d='M650 370 q0 10 10 10'/>
    <path d='M630 380 h50'/>
    <path d='M450 380 q10 0 10 -10'/>
    <path d='M460 360 q0 -10 10 -10 h170 q10 0 10 10 v10'/>
    <path d='M430 380 h50'/>
    <path d='M340 380 h20'/>
    <path d='M300 380 h20'/>
    <path d='M40 370 q0 10 10 10 h40'/>
    <path d='M695 330 h255 q10 0 10 -10'/>
    <path d='M585 310 v10'/>
    <path d='M645 320 q0 10 10 10'/>
    <path d='M625 330 h50'/>
    <path d='M575 330 q10 0 10 -10'/>
    <path d='M585 310 q0 -10 10 -10 h40 q10 0 10 10 v10'/>
    <path d='M555 330 h50'/>
    <path d='M515 330 h20'/>
    <path d='M40 320 q0 10 10 10 h255'/>
    <path d='M635 280 h315 q10 0 10 -10'/>
    <path d='M595 280 h20'/>
    <path d='M385 280 h20'/>
    <path d='M40 270 q0 10 10 10 h315'/>
    <path d='M825 250 h125 q10 0 10 -10'/>
    <path d='M395 210 v30'/>
    <path d='M775 240 q0 10 10 10'/>
    <path d='M755 250 h50'/>
    <path d='M425 230 v10'/>
    <path d='M535 240 q0 10 10 10'/>
    <path d='M515 250 h50'/>
    <path d='M415 250 q10 0 10 -10'/>
    <path d='M425 230 q0 -10 10 -10 h90 q10 0 10 10 v10'/>
    <path d='M385 250 q10 0 10 -10'/>
    <path d='M395 210 q0 -10 10 -10 h360 q10 0 10 10 v30'/>
    <path d='M365 250 h80'/>
    <path d='M195 250 h20'/>
    <path d='M40 240 q0 10 10 10 h125'/>
    <path d='M795 180 h155 q10 0 10 -10'/>
    <path d='M755 180 h20'/>
    <path d='M345 160 v10'/>
    <path d='M535 170 q0 10 10 10'/>
    <path d='M515 180 h50'/>
    <path d='M335 180 q10 0 10 -10'/>
    <path d='M345 160 q0 -10 10 -10 h170 q10 0 10 10 v10'/>
    <path d='M315 180 h50'/>
    <path d='M225 180 h20'/>
    <path d='M40 170 q0 10 10 10 h155'/>
    <path d='M580 130 h370 q10 0 10 -10'/>
    <path d='M470 110 v10'/>
    <path d='M530 120 q0 10 10 10'/>
    <path d='M510 130 h50'/>
    <path d='M460 130 q10 0 10 -10'/>
    <path d='M470 110 q0 -10 10 -10 h40 q10 0 10 10 v10'/>
    <path d='M440 130 h50'/>
    <path d='M40 120 q0 10 10 10 h370'/>
    <path d='M530 80 h420 q10 0 10 -10'/>
    <path d='M490 80 h20'/>
    <path d='M40 70 q0 10 10 10 h420'/>
    <path d='M625 50 h325 q10 0 10 -10'/>
    <path d='M585 50 h20'/>
    <path d='M395 50 h20'/>
    <path d='M40 40 q0 10 10 10 h325'/>
    <path d='M960 30 q0 -10 10 -10'/>
    <path d='M615 20 h375'/>
    <path d='M575 20 h20'/>
    <path d='M405 20 h20'/>
    <path d='M30 20 q10 0 10 10 v500'/>
    <path d='M10 20 h375'/>
  </svg>
 </section>

 <section>
  <h2><a name='struct-declarator-list'>struct-declarator-list:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='270'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M260.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#struct-declarator'>
    <rect x='60' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='25' text-anchor='middle' class='rule'>struct-declarator</text>
    </a>
    <rect x='125' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='135' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h75'/>
    <path d='M145 50 h75 q10 0 10 -10'/>
    <path d='M220 20 q10 0 10 10 v10'/>
    <path d='M210 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='type-qualifier-list'>type-qualifier-list:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='55' width='230'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M220.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#type-qualifier'>
    <rect x='60' y='10' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='115' y='25' text-anchor='middle' class='rule'>type-qualifier</text>
    </a>
    <path d='M113 40 l4 3 v-6 z' class='arrow'/>
    <path d='M40 30 v0 q0 10 10 10 h130 q10 0 10 -10 v0'/>
    <path d='M180 20 q10 0 10 10'/>
    <path d='M170 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='parameter-type-list'>parameter-type-list:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='55' width='350'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M340.5 34 v12 m 4 0 v-12' class='station'/>
    <a href='#parameter-list'>
    <rect x='30' y='30' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='95' y='45' text-anchor='middle' class='rule'>parameter-list</text>
    </a>
    <path d='M252 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='210' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='220' y='45' text-anchor='middle' class='literal'>,</text>
    <rect x='250' y='30' height='20' width='40' rx='8' ry='8' class='literal'/>
    <text x='270' y='45' text-anchor='middle' class='literal'>...</text>
    <path d='M190 20 v10'/>
    <path d='M310 30 q0 10 10 10'/>
    <path d='M290 40 h50'/>
    <path d='M230 40 h20'/>
    <path d='M180 40 q10 0 10 -10'/>
    <path d='M190 20 q0 -10 10 -10 h100 q10 0 10 10 v10'/>
    <path d='M160 40 h50'/>
    <path d='M10 40 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='struct-declarator'>struct-declarator:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='85' width='500'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M490.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='145' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='155' y='25' text-anchor='middle' class='literal'>:</text>
    <a href='#constant-expression'>
    <rect x='185' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='270' y='25' text-anchor='middle' class='rule'>constant-expression</text>
    </a>
    <a href='#declarator'>
    <rect x='60' y='60' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='75' text-anchor='middle' class='rule'>declarator</text>
    </a>
    <path d='M307 40 l-4 3 v-6 z' class='arrow'/>
    <rect x='200' y='60' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='210' y='75' text-anchor='middle' class='literal'>:</text>
    <a href='#constant-expression'>
    <rect x='240' y='60' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='325' y='75' text-anchor='middle' class='rule'>constant-expression</text>
    </a>
    <path d='M460 30 v30'/>
    <path d='M180 50 v10'/>
    <path d='M430 60 q0 10 10 10'/>
    <path d='M410 70 h40 q10 0 10 -10'/>
    <path d='M220 70 h20'/>
    <path d='M170 70 q10 0 10 -10'/>
    <path d='M180 50 q0 -10 10 -10 h230 q10 0 10 10 v10'/>
    <path d='M150 70 h50'/>
    <path d='M40 60 q0 10 10 10 h10'/>
    <path d='M460 30 q0 -10 10 -10'/>
    <path d='M355 20 h135'/>
    <path d='M165 20 h20'/>
    <path d='M30 20 q10 0 10 10 v30'/>
    <path d='M10 20 h135'/>
  </svg>
 </section>

 <section>
  <h2><a name='assignment-operator'>assignment-operator:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='335' width='160'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M150.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='70' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='80' y='25' text-anchor='middle' class='literal'>=</text>
    <rect x='65' y='40' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='80' y='55' text-anchor='middle' class='literal'>*=</text>
    <rect x='65' y='70' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='80' y='85' text-anchor='middle' class='literal'>/=</text>
    <rect x='65' y='100' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='80' y='115' text-anchor='middle' class='literal'>%=</text>
    <rect x='65' y='130' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='80' y='145' text-anchor='middle' class='literal'>+=</text>
    <rect x='65' y='160' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='80' y='175' text-anchor='middle' class='literal'>-=</text>
    <rect x='60' y='190' height='20' width='40' rx='8' ry='8' class='literal'/>
    <text x='80' y='205' text-anchor='middle' class='literal'>&lt;&lt;=</text>
    <rect x='60' y='220' height='20' width='40' rx='8' ry='8' class='literal'/>
    <text x='80' y='235' text-anchor='middle' class='literal'>&gt;&gt;=</text>
    <rect x='65' y='250' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='80' y='265' text-anchor='middle' class='literal'>&amp;=</text>
    <rect x='65' y='280' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='80' y='295' text-anchor='middle' class='literal'>^=</text>
    <rect x='65' y='310' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='80' y='325' text-anchor='middle' class='literal'>|=</text>
    <path d='M120 30 v280'/>
    <path d='M95 320 h15 q10 0 10 -10'/>
    <path d='M40 310 q0 10 10 10 h15'/>
    <path d='M95 290 h15 q10 0 10 -10'/>
    <path d='M40 280 q0 10 10 10 h15'/>
    <path d='M95 260 h15 q10 0 10 -10'/>
    <path d='M40 250 q0 10 10 10 h15'/>
    <path d='M100 230 h10 q10 0 10 -10'/>
    <path d='M40 220 q0 10 10 10 h10'/>
    <path d='M100 200 h10 q10 0 10 -10'/>
    <path d='M40 190 q0 10 10 10 h10'/>
    <path d='M95 170 h15 q10 0 10 -10'/>
    <path d='M40 160 q0 10 10 10 h15'/>
    <path d='M95 140 h15 q10 0 10 -10'/>
    <path d='M40 130 q0 10 10 10 h15'/>
    <path d='M95 110 h15 q10 0 10 -10'/>
    <path d='M40 100 q0 10 10 10 h15'/>
    <path d='M95 80 h15 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h15'/>
    <path d='M95 50 h15 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h15'/>
    <path d='M120 30 q0 -10 10 -10'/>
    <path d='M90 20 h60'/>
    <path d='M30 20 q10 0 10 10 v280'/>
    <path d='M10 20 h60'/>
  </svg>
 </section>

 <section>
  <h2><a name='parameter-list'>parameter-list:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='290'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M280.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#parameter-declaration'>
    <rect x='60' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='25' text-anchor='middle' class='rule'>parameter-declaration</text>
    </a>
    <rect x='135' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='145' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h85'/>
    <path d='M155 50 h85 q10 0 10 -10'/>
    <path d='M240 20 q10 0 10 10 v10'/>
    <path d='M230 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='parameter-declaration'>parameter-declaration:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='85' width='460'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M450.5 34 v12 m 4 0 v-12' class='station'/>
    <a href='#declaration-specifiers'>
    <rect x='30' y='30' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='115' y='45' text-anchor='middle' class='rule'>declaration-specifiers</text>
    </a>
    <path d='M327 10 l-4 3 v-6 z' class='arrow'/>
    <a href='#declarator'>
    <rect x='280' y='30' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='325' y='45' text-anchor='middle' class='rule'>declarator</text>
    </a>
    <a href='#abstract-declarator'>
    <rect x='250' y='60' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='325' y='75' text-anchor='middle' class='rule'>abstract-declarator</text>
    </a>
    <path d='M420 50 v10'/>
    <path d='M230 20 v10'/>
    <path d='M400 70 h10 q10 0 10 -10'/>
    <path d='M230 60 q0 10 10 10 h10'/>
    <path d='M420 30 q0 10 10 10'/>
    <path d='M420 50 q0 -10 10 -10'/>
    <path d='M370 40 h80'/>
    <path d='M220 40 q10 0 10 10 v10'/>
    <path d='M220 40 q10 0 10 -10'/>
    <path d='M230 20 q0 -10 10 -10 h170 q10 0 10 10 v10'/>
    <path d='M200 40 h80'/>
    <path d='M10 40 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='expression'>expression:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='310'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M300.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#assignment-expression'>
    <rect x='60' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='155' y='25' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='145' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='155' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h95'/>
    <path d='M165 50 h95 q10 0 10 -10'/>
    <path d='M260 20 q10 0 10 10 v10'/>
    <path d='M250 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='assignment-expression'>assignment-expression:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='670'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M660.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#conditional-expression'>
    <rect x='240' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='335' y='25' text-anchor='middle' class='rule'>conditional-expression</text>
    </a>
    <a href='#unary-expression'>
    <rect x='60' y='40' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='55' text-anchor='middle' class='rule'>unary-expression</text>
    </a>
    <a href='#assignment-operator'>
    <rect x='230' y='40' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='315' y='55' text-anchor='middle' class='rule'>assignment-operator</text>
    </a>
    <a href='#assignment-expression'>
    <rect x='420' y='40' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='515' y='55' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <path d='M630 30 v10'/>
    <path d='M610 50 h10 q10 0 10 -10'/>
    <path d='M400 50 h20'/>
    <path d='M210 50 h20'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M630 30 q0 -10 10 -10'/>
    <path d='M430 20 h230'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h230'/>
  </svg>
 </section>

 <section>
  <h2><a name='conditional-expression'>conditional-expression:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='55' width='690'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M680.5 34 v12 m 4 0 v-12' class='station'/>
    <a href='#logical-or-expression'>
    <rect x='30' y='30' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='115' y='45' text-anchor='middle' class='rule'>logical-or-expression</text>
    </a>
    <path d='M442 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='250' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='260' y='45' text-anchor='middle' class='literal'>?</text>
    <a href='#expression'>
    <rect x='290' y='30' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='335' y='45' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='400' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='410' y='45' text-anchor='middle' class='literal'>:</text>
    <a href='#conditional-expression'>
    <rect x='440' y='30' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='535' y='45' text-anchor='middle' class='rule'>conditional-expression</text>
    </a>
    <path d='M230 20 v10'/>
    <path d='M650 30 q0 10 10 10'/>
    <path d='M630 40 h50'/>
    <path d='M420 40 h20'/>
    <path d='M380 40 h20'/>
    <path d='M270 40 h20'/>
    <path d='M220 40 q10 0 10 -10'/>
    <path d='M230 20 q0 -10 10 -10 h400 q10 0 10 10 v10'/>
    <path d='M200 40 h50'/>
    <path d='M10 40 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='logical-or-expression'>logical-or-expression:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='310'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M300.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#logical-and-expression'>
    <rect x='60' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='155' y='25' text-anchor='middle' class='rule'>logical-and-expression</text>
    </a>
    <rect x='140' y='40' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='155' y='55' text-anchor='middle' class='literal'>||</text>
    <path d='M40 30 v10 q0 10 10 10 h90'/>
    <path d='M170 50 h90 q10 0 10 -10'/>
    <path d='M260 20 q10 0 10 10 v10'/>
    <path d='M250 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='logical-and-expression'>logical-and-expression:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='310'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M300.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#inclusive-or-expression'>
    <rect x='60' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='155' y='25' text-anchor='middle' class='rule'>inclusive-or-expression</text>
    </a>
    <rect x='140' y='40' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='155' y='55' text-anchor='middle' class='literal'>&amp;&amp;</text>
    <path d='M40 30 v10 q0 10 10 10 h90'/>
    <path d='M170 50 h90 q10 0 10 -10'/>
    <path d='M260 20 q10 0 10 10 v10'/>
    <path d='M250 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='inclusive-or-expression'>inclusive-or-expression:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='310'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M300.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#exclusive-or-expression'>
    <rect x='60' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='155' y='25' text-anchor='middle' class='rule'>exclusive-or-expression</text>
    </a>
    <rect x='145' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='155' y='55' text-anchor='middle' class='literal'>|</text>
    <path d='M40 30 v10 q0 10 10 10 h95'/>
    <path d='M165 50 h95 q10 0 10 -10'/>
    <path d='M260 20 q10 0 10 10 v10'/>
    <path d='M250 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='exclusive-or-expression'>exclusive-or-expression:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='250'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M240.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#and-expression'>
    <rect x='60' y='10' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='125' y='25' text-anchor='middle' class='rule'>and-expression</text>
    </a>
    <rect x='115' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='125' y='55' text-anchor='middle' class='literal'>^</text>
    <path d='M40 30 v10 q0 10 10 10 h65'/>
    <path d='M135 50 h65 q10 0 10 -10'/>
    <path d='M200 20 q10 0 10 10 v10'/>
    <path d='M190 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='and-expression'>and-expression:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='270'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M260.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#equality-expression'>
    <rect x='60' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='25' text-anchor='middle' class='rule'>equality-expression</text>
    </a>
    <rect x='125' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='135' y='55' text-anchor='middle' class='literal'>&amp;</text>
    <path d='M40 30 v10 q0 10 10 10 h75'/>
    <path d='M145 50 h75 q10 0 10 -10'/>
    <path d='M220 20 q10 0 10 10 v10'/>
    <path d='M210 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='equality-expression'>equality-expression:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='95' width='290'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M280.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#relational-expression'>
    <rect x='60' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='25' text-anchor='middle' class='rule'>relational-expression</text>
    </a>
    <rect x='130' y='40' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='145' y='55' text-anchor='middle' class='literal'>==</text>
    <rect x='130' y='70' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='145' y='85' text-anchor='middle' class='literal'>!=</text>
    <path d='M40 30 v10 q0 10 10 10 h80'/>
    <path d='M180 60 v10'/>
    <path d='M160 80 h10 q10 0 10 -10'/>
    <path d='M110 70 q0 10 10 10 h10'/>
    <path d='M180 60 q0 -10 10 -10'/>
    <path d='M160 50 h80 q10 0 10 -10'/>
    <path d='M100 50 q10 0 10 10 v10'/>
    <path d='M240 20 q10 0 10 10 v10'/>
    <path d='M230 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='relational-expression'>relational-expression:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='155' width='250'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M240.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#shift-expression'>
    <rect x='60' y='10' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='125' y='25' text-anchor='middle' class='rule'>shift-expression</text>
    </a>
    <rect x='115' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='125' y='55' text-anchor='middle' class='literal'>&lt;</text>
    <rect x='115' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='125' y='85' text-anchor='middle' class='literal'>&gt;</text>
    <rect x='110' y='100' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='125' y='115' text-anchor='middle' class='literal'>&lt;=</text>
    <rect x='110' y='130' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='125' y='145' text-anchor='middle' class='literal'>&gt;=</text>
    <path d='M40 30 v10 q0 10 10 10 h65'/>
    <path d='M160 60 v70'/>
    <path d='M140 140 h10 q10 0 10 -10'/>
    <path d='M90 130 q0 10 10 10 h10'/>
    <path d='M140 110 h10 q10 0 10 -10'/>
    <path d='M90 100 q0 10 10 10 h10'/>
    <path d='M135 80 h15 q10 0 10 -10'/>
    <path d='M90 70 q0 10 10 10 h15'/>
    <path d='M160 60 q0 -10 10 -10'/>
    <path d='M135 50 h65 q10 0 10 -10'/>
    <path d='M80 50 q10 0 10 10 v70'/>
    <path d='M200 20 q10 0 10 10 v10'/>
    <path d='M190 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='shift-expression'>shift-expression:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='95' width='270'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M260.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#additive-expression'>
    <rect x='60' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='25' text-anchor='middle' class='rule'>additive-expression</text>
    </a>
    <rect x='120' y='40' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='135' y='55' text-anchor='middle' class='literal'>&lt;&lt;</text>
    <rect x='120' y='70' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='135' y='85' text-anchor='middle' class='literal'>&gt;&gt;</text>
    <path d='M40 30 v10 q0 10 10 10 h70'/>
    <path d='M170 60 v10'/>
    <path d='M150 80 h10 q10 0 10 -10'/>
    <path d='M100 70 q0 10 10 10 h10'/>
    <path d='M170 60 q0 -10 10 -10'/>
    <path d='M150 50 h70 q10 0 10 -10'/>
    <path d='M90 50 q10 0 10 10 v10'/>
    <path d='M220 20 q10 0 10 10 v10'/>
    <path d='M210 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='additive-expression'>additive-expression:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='95' width='310'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M300.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#multiplicative-expression'>
    <rect x='60' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='155' y='25' text-anchor='middle' class='rule'>multiplicative-expression</text>
    </a>
    <rect x='145' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='155' y='55' text-anchor='middle' class='literal'>+</text>
    <rect x='145' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='155' y='85' text-anchor='middle' class='literal'>-</text>
    <path d='M40 30 v10 q0 10 10 10 h95'/>
    <path d='M185 60 v10'/>
    <path d='M165 80 h10 q10 0 10 -10'/>
    <path d='M125 70 q0 10 10 10 h10'/>
    <path d='M185 60 q0 -10 10 -10'/>
    <path d='M165 50 h95 q10 0 10 -10'/>
    <path d='M115 50 q10 0 10 10 v10'/>
    <path d='M260 20 q10 0 10 10 v10'/>
    <path d='M250 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='multiplicative-expression'>multiplicative-expression:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='125' width='250'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M240.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#cast-expression'>
    <rect x='60' y='10' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='125' y='25' text-anchor='middle' class='rule'>cast-expression</text>
    </a>
    <rect x='115' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='125' y='55' text-anchor='middle' class='literal'>%</text>
    <rect x='115' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='125' y='85' text-anchor='middle' class='literal'>*</text>
    <rect x='115' y='100' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='125' y='115' text-anchor='middle' class='literal'>/</text>
    <path d='M40 30 v10 q0 10 10 10 h65'/>
    <path d='M155 60 v40'/>
    <path d='M135 110 h10 q10 0 10 -10'/>
    <path d='M95 100 q0 10 10 10 h10'/>
    <path d='M135 80 h10 q10 0 10 -10'/>
    <path d='M95 70 q0 10 10 10 h10'/>
    <path d='M155 60 q0 -10 10 -10'/>
    <path d='M135 50 h65 q10 0 10 -10'/>
    <path d='M85 50 q10 0 10 10 v40'/>
    <path d='M200 20 q10 0 10 10 v10'/>
    <path d='M190 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='cast-expression'>cast-expression:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='440'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M430.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#unary-expression'>
    <rect x='145' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='220' y='25' text-anchor='middle' class='rule'>unary-expression</text>
    </a>
    <rect x='60' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='55' text-anchor='middle' class='literal'>(</text>
    <a href='#type-name'>
    <rect x='100' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='145' y='55' text-anchor='middle' class='rule'>type-name</text>
    </a>
    <rect x='210' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='220' y='55' text-anchor='middle' class='literal'>)</text>
    <a href='#cast-expression'>
    <rect x='250' y='40' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='315' y='55' text-anchor='middle' class='rule'>cast-expression</text>
    </a>
    <path d='M400 30 v10'/>
    <path d='M380 50 h10 q10 0 10 -10'/>
    <path d='M230 50 h20'/>
    <path d='M190 50 h20'/>
    <path d='M80 50 h20'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M400 30 q0 -10 10 -10'/>
    <path d='M295 20 h135'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h135'/>
  </svg>
 </section>

 <section>
  <h2><a name='unary-expression'>unary-expression:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='215' width='400'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M390.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#postfix-expression'>
    <rect x='125' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='200' y='25' text-anchor='middle' class='rule'>postfix-expression</text>
    </a>
    <rect x='100' y='40' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='115' y='55' text-anchor='middle' class='literal'>++</text>
    <rect x='100' y='70' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='115' y='85' text-anchor='middle' class='literal'>--</text>
    <a href='#unary-expression'>
    <rect x='180' y='40' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='255' y='55' text-anchor='middle' class='rule'>unary-expression</text>
    </a>
    <a href='#unary-operator'>
    <rect x='60' y='100' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='125' y='115' text-anchor='middle' class='rule'>unary-operator</text>
    </a>
    <a href='#cast-expression'>
    <rect x='210' y='100' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='275' y='115' text-anchor='middle' class='rule'>cast-expression</text>
    </a>
    <rect x='80' y='130' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='115' y='145' text-anchor='middle' class='literal'>sizeof</text>
    <a href='#unary-expression'>
    <rect x='170' y='130' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='245' y='145' text-anchor='middle' class='rule'>unary-expression</text>
    </a>
    <rect x='70' y='160' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='105' y='175' text-anchor='middle' class='literal'>sizeof</text>
    <rect x='160' y='160' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='170' y='175' text-anchor='middle' class='literal'>(</text>
    <a href='#type-name'>
    <rect x='200' y='160' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='245' y='175' text-anchor='middle' class='rule'>type-name</text>
    </a>
    <rect x='310' y='160' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='320' y='175' text-anchor='middle' class='literal'>)</text>
    <rect x='60' y='190' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='105' y='205' text-anchor='middle' class='literal'>_Alignof</text>
    <rect x='170' y='190' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='180' y='205' text-anchor='middle' class='literal'>(</text>
    <a href='#type-name'>
    <rect x='210' y='190' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='255' y='205' text-anchor='middle' class='rule'>type-name</text>
    </a>
    <rect x='320' y='190' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='330' y='205' text-anchor='middle' class='literal'>)</text>
    <path d='M360 30 v160'/>
    <path d='M340 200 h10 q10 0 10 -10'/>
    <path d='M300 200 h20'/>
    <path d='M190 200 h20'/>
    <path d='M150 200 h20'/>
    <path d='M40 190 q0 10 10 10 h10'/>
    <path d='M330 170 h20 q10 0 10 -10'/>
    <path d='M290 170 h20'/>
    <path d='M180 170 h20'/>
    <path d='M140 170 h20'/>
    <path d='M40 160 q0 10 10 10 h20'/>
    <path d='M320 140 h30 q10 0 10 -10'/>
    <path d='M150 140 h20'/>
    <path d='M40 130 q0 10 10 10 h30'/>
    <path d='M340 110 h10 q10 0 10 -10'/>
    <path d='M190 110 h20'/>
    <path d='M40 100 q0 10 10 10 h10'/>
    <path d='M330 50 h20 q10 0 10 -10'/>
    <path d='M150 60 v10'/>
    <path d='M130 80 h10 q10 0 10 -10'/>
    <path d='M80 70 q0 10 10 10 h10'/>
    <path d='M150 60 q0 -10 10 -10'/>
    <path d='M130 50 h50'/>
    <path d='M70 50 q10 0 10 10 v10'/>
    <path d='M40 40 q0 10 10 10 h50'/>
    <path d='M360 30 q0 -10 10 -10'/>
    <path d='M275 20 h115'/>
    <path d='M30 20 q10 0 10 10 v160'/>
    <path d='M10 20 h115'/>
  </svg>
 </section>

 <section>
  <h2><a name='postfix-expression'>postfix-expression:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='285' width='640'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M630.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#primary-expression'>
    <rect x='235' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='320' y='25' text-anchor='middle' class='rule'>primary-expression</text>
    </a>
    <a href='#postfix-expression'>
    <rect x='150' y='40' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='225' y='55' text-anchor='middle' class='rule'>postfix-expression</text>
    </a>
    <rect x='320' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='330' y='55' text-anchor='middle' class='literal'>[</text>
    <a href='#expression'>
    <rect x='360' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='405' y='55' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='470' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='480' y='55' text-anchor='middle' class='literal'>]</text>
    <a href='#postfix-expression'>
    <rect x='60' y='90' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='105' text-anchor='middle' class='rule'>postfix-expression</text>
    </a>
    <rect x='230' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='240' y='105' text-anchor='middle' class='literal'>(</text>
    <path d='M407 70 l-4 3 v-6 z' class='arrow'/>
    <a href='#argument-expression-list'>
    <rect x='300' y='90' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='405' y='105' text-anchor='middle' class='rule'>argument-expression-list</text>
    </a>
    <rect x='560' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='570' y='105' text-anchor='middle' class='literal'>)</text>
    <a href='#postfix-expression'>
    <rect x='135' y='120' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='210' y='135' text-anchor='middle' class='rule'>postfix-expression</text>
    </a>
    <rect x='340' y='120' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='350' y='135' text-anchor='middle' class='literal'>.</text>
    <rect x='335' y='150' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='350' y='165' text-anchor='middle' class='literal'>-&gt;</text>
    <rect x='415' y='120' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='460' y='135' text-anchor='middle' class='rule'>identifier</text>
    <a href='#postfix-expression'>
    <rect x='190' y='180' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='265' y='195' text-anchor='middle' class='rule'>postfix-expression</text>
    </a>
    <rect x='390' y='180' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='405' y='195' text-anchor='middle' class='literal'>++</text>
    <rect x='390' y='210' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='405' y='225' text-anchor='middle' class='literal'>--</text>
    <rect x='80' y='260' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='90' y='275' text-anchor='middle' class='literal'>(</text>
    <a href='#type-name'>
    <rect x='120' y='260' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='165' y='275' text-anchor='middle' class='rule'>type-name</text>
    </a>
    <rect x='230' y='260' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='240' y='275' text-anchor='middle' class='literal'>)</text>
    <rect x='270' y='260' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='280' y='275' text-anchor='middle' class='literal'>{</text>
    <a href='#initializer-list'>
    <rect x='310' y='260' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='365' y='275' text-anchor='middle' class='rule'>initializer-list</text>
    </a>
    <path d='M482 240 l-4 3 v-6 z' class='arrow'/>
    <rect x='470' y='260' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='480' y='275' text-anchor='middle' class='literal'>,</text>
    <rect x='540' y='260' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='550' y='275' text-anchor='middle' class='literal'>}</text>
    <path d='M600 30 v230'/>
    <path d='M560 270 h30 q10 0 10 -10'/>
    <path d='M450 250 v10'/>
    <path d='M510 260 q0 10 10 10'/>
    <path d='M490 270 h50'/>
    <path d='M440 270 q10 0 10 -10'/>
    <path d='M450 250 q0 -10 10 -10 h40 q10 0 10 10 v10'/>
    <path d='M420 270 h50'/>
    <path d='M290 270 h20'/>
    <path d='M250 270 h20'/>
    <path d='M210 270 h20'/>
    <path d='M100 270 h20'/>
    <path d='M40 260 q0 10 10 10 h30'/>
    <path d='M440 200 v10'/>
    <path d='M420 220 h10 q10 0 10 -10'/>
    <path d='M370 210 q0 10 10 10 h10'/>
    <path d='M440 200 q0 -10 10 -10'/>
    <path d='M420 190 h170 q10 0 10 -10'/>
    <path d='M360 190 q10 0 10 10 v10'/>
    <path d='M340 190 h50'/>
    <path d='M40 180 q0 10 10 10 h140'/>
    <path d='M505 130 h85 q10 0 10 -10'/>
    <path d='M385 140 v10'/>
    <path d='M365 160 h10 q10 0 10 -10'/>
    <path d='M315 150 q0 10 10 10 h10'/>
    <path d='M385 140 q0 -10 10 -10'/>
    <path d='M360 130 h55'/>
    <path d='M305 130 q10 0 10 10 v10'/>
    <path d='M285 130 h55'/>
    <path d='M40 120 q0 10 10 10 h85'/>
    <path d='M580 100 h10 q10 0 10 -10'/>
    <path d='M280 80 v10'/>
    <path d='M530 90 q0 10 10 10'/>
    <path d='M510 100 h50'/>
    <path d='M270 100 q10 0 10 -10'/>
    <path d='M280 80 q0 -10 10 -10 h230 q10 0 10 10 v10'/>
    <path d='M250 100 h50'/>
    <path d='M210 100 h20'/>
    <path d='M40 90 q0 10 10 10 h10'/>
    <path d='M490 50 h100 q10 0 10 -10'/>
    <path d='M450 50 h20'/>
    <path d='M340 50 h20'/>
    <path d='M300 50 h20'/>
    <path d='M40 40 q0 10 10 10 h100'/>
    <path d='M600 30 q0 -10 10 -10'/>
    <path d='M405 20 h225'/>
    <path d='M30 20 q10 0 10 10 v230'/>
    <path d='M10 20 h225'/>
  </svg>
 </section>

 <section>
  <h2><a name='unary-operator'>unary-operator:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='185' width='140'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M130.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='25' text-anchor='middle' class='literal'>!</text>
    <rect x='60' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='55' text-anchor='middle' class='literal'>&amp;</text>
    <rect x='60' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='85' text-anchor='middle' class='literal'>*</text>
    <rect x='60' y='100' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='115' text-anchor='middle' class='literal'>+</text>
    <rect x='60' y='130' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='145' text-anchor='middle' class='literal'>-</text>
    <rect x='60' y='160' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='175' text-anchor='middle' class='literal'>~</text>
    <path d='M100 30 v130'/>
    <path d='M80 170 h10 q10 0 10 -10'/>
    <path d='M40 160 q0 10 10 10 h10'/>
    <path d='M80 140 h10 q10 0 10 -10'/>
    <path d='M40 130 q0 10 10 10 h10'/>
    <path d='M80 110 h10 q10 0 10 -10'/>
    <path d='M40 100 q0 10 10 10 h10'/>
    <path d='M80 80 h10 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h10'/>
    <path d='M80 50 h10 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M100 30 q0 -10 10 -10'/>
    <path d='M80 20 h50'/>
    <path d='M30 20 q10 0 10 10 v130'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='primary-expression'>primary-expression:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='155' width='290'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M280.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='100' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='145' y='25' text-anchor='middle' class='rule'>identifier</text>
    <a href='#constant'>
    <rect x='110' y='40' height='20' width='70' rx='0' ry='0' class='rule'/>
    <text x='145' y='55' text-anchor='middle' class='rule'>constant</text>
    </a>
    <a href='#string'>
    <rect x='110' y='70' height='20' width='70' rx='0' ry='0' class='rule'/>
    <text x='145' y='85' text-anchor='middle' class='rule'>string</text>
    </a>
    <rect x='60' y='100' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='115' text-anchor='middle' class='literal'>(</text>
    <a href='#expression'>
    <rect x='100' y='100' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='145' y='115' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='210' y='100' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='220' y='115' text-anchor='middle' class='literal'>)</text>
    <a href='#generic-selection'>
    <rect x='70' y='130' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='145' y='145' text-anchor='middle' class='rule'>generic-selection</text>
    </a>
    <path d='M250 30 v100'/>
    <path d='M220 140 h20 q10 0 10 -10'/>
    <path d='M40 130 q0 10 10 10 h20'/>
    <path d='M230 110 h10 q10 0 10 -10'/>
    <path d='M190 110 h20'/>
    <path d='M80 110 h20'/>
    <path d='M40 100 q0 10 10 10 h10'/>
    <path d='M180 80 h60 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h60'/>
    <path d='M180 50 h60 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h60'/>
    <path d='M250 30 q0 -10 10 -10'/>
    <path d='M190 20 h90'/>
    <path d='M30 20 q10 0 10 10 v100'/>
    <path d='M10 20 h90'/>
  </svg>
 </section>

 <section>
  <h2><a name='argument-expression-list'>argument-expression-list:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='310'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M300.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#assignment-expression'>
    <rect x='60' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='155' y='25' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='145' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='155' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h95'/>
    <path d='M165 50 h95 q10 0 10 -10'/>
    <path d='M260 20 q10 0 10 10 v10'/>
    <path d='M250 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='constant'>constant:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='125' width='290'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M280.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='80' y='10' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='145' y='25' text-anchor='middle' class='rule'>integer-constant</text>
    <rect x='70' y='40' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='145' y='55' text-anchor='middle' class='rule'>character-constant</text>
    <rect x='80' y='70' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='145' y='85' text-anchor='middle' class='rule'>floating-constant</text>
    <a href='#enumeration-constant'>
    <rect x='60' y='100' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='115' text-anchor='middle' class='rule'>enumeration-constant</text>
    </a>
    <path d='M250 30 v70'/>
    <path d='M230 110 h10 q10 0 10 -10'/>
    <path d='M40 100 q0 10 10 10 h10'/>
    <path d='M210 80 h30 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h30'/>
    <path d='M220 50 h20 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h20'/>
    <path d='M250 30 q0 -10 10 -10'/>
    <path d='M210 20 h70'/>
    <path d='M30 20 q10 0 10 10 v70'/>
    <path d='M10 20 h70'/>
  </svg>
 </section>

 <section>
  <h2><a name='string'>string:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='230'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M220.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='115' y='25' text-anchor='middle' class='rule'>string-literal</text>
    <rect x='70' y='40' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='115' y='55' text-anchor='middle' class='literal'>__func__</text>
    <path d='M190 30 v10'/>
    <path d='M160 50 h20 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h20'/>
    <path d='M190 30 q0 -10 10 -10'/>
    <path d='M170 20 h50'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='generic-selection'>generic-selection:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='35' width='650'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M640.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='10' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='75' y='25' text-anchor='middle' class='literal'>_Generic</text>
    <rect x='140' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='150' y='25' text-anchor='middle' class='literal'>(</text>
    <a href='#assignment-expression'>
    <rect x='180' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='275' y='25' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='390' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='400' y='25' text-anchor='middle' class='literal'>,</text>
    <a href='#generic-assoc-list'>
    <rect x='430' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='505' y='25' text-anchor='middle' class='rule'>generic-assoc-list</text>
    </a>
    <rect x='600' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='610' y='25' text-anchor='middle' class='literal'>)</text>
    <path d='M580 20 h20'/>
    <path d='M410 20 h20'/>
    <path d='M370 20 h20'/>
    <path d='M160 20 h20'/>
    <path d='M120 20 h20'/>
    <path d='M620 20 h20'/>
    <path d='M10 20 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='generic-assoc-list'>generic-assoc-list:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='270'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M260.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#generic-association'>
    <rect x='60' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='25' text-anchor='middle' class='rule'>generic-association</text>
    </a>
    <rect x='125' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='135' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h75'/>
    <path d='M145 50 h75 q10 0 10 -10'/>
    <path d='M220 20 q10 0 10 10 v10'/>
    <path d='M210 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='generic-association'>generic-association:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='460'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M450.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#type-name'>
    <rect x='60' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='25' text-anchor='middle' class='rule'>type-name</text>
    </a>
    <rect x='170' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='180' y='25' text-anchor='middle' class='literal'>:</text>
    <a href='#assignment-expression'>
    <rect x='210' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='305' y='25' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <rect x='65' y='40' height='20' width='80' rx='8' ry='8' class='literal'/>
    <text x='105' y='55' text-anchor='middle' class='literal'>default</text>
    <rect x='165' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='175' y='55' text-anchor='middle' class='literal'>:</text>
    <a href='#assignment-expression'>
    <rect x='205' y='40' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='300' y='55' text-anchor='middle' class='rule'>assignment-expression</text>
    </a>
    <path d='M420 30 v10'/>
    <path d='M395 50 h15 q10 0 10 -10'/>
    <path d='M185 50 h20'/>
    <path d='M145 50 h20'/>
    <path d='M40 40 q0 10 10 10 h15'/>
    <path d='M420 30 q0 -10 10 -10'/>
    <path d='M400 20 h50'/>
    <path d='M190 20 h20'/>
    <path d='M150 20 h20'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='designation'>designation:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='35' width='230'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M220.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#designator-list'>
    <rect x='30' y='10' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='95' y='25' text-anchor='middle' class='rule'>designator-list</text>
    </a>
    <rect x='180' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='190' y='25' text-anchor='middle' class='literal'>=</text>
    <path d='M160 20 h20'/>
    <path d='M200 20 h20'/>
    <path d='M10 20 h20'/>
  </svg>
 </section>

 <section>
  <h2><a name='designator-list'>designator-list:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='55' width='210'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M200.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#designator'>
    <rect x='60' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='25' text-anchor='middle' class='rule'>designator</text>
    </a>
    <path d='M103 40 l4 3 v-6 z' class='arrow'/>
    <path d='M40 30 v0 q0 10 10 10 h110 q10 0 10 -10 v0'/>
    <path d='M160 20 q10 0 10 10'/>
    <path d='M150 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='designator'>designator:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='65' width='370'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M360.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='25' text-anchor='middle' class='literal'>[</text>
    <a href='#constant-expression'>
    <rect x='100' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='185' y='25' text-anchor='middle' class='rule'>constant-expression</text>
    </a>
    <rect x='290' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='300' y='25' text-anchor='middle' class='literal'>]</text>
    <rect x='120' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='130' y='55' text-anchor='middle' class='literal'>.</text>
    <rect x='160' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='205' y='55' text-anchor='middle' class='rule'>identifier</text>
    <path d='M330 30 v10'/>
    <path d='M250 50 h70 q10 0 10 -10'/>
    <path d='M140 50 h20'/>
    <path d='M40 40 q0 10 10 10 h70'/>
    <path d='M330 30 q0 -10 10 -10'/>
    <path d='M310 20 h50'/>
    <path d='M270 20 h20'/>
    <path d='M80 20 h20'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='statement'>statement:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='185' width='290'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M280.5 14 v12 m 4 0 v-12' class='station'/>
    <a href='#labeled-statement'>
    <rect x='70' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='145' y='25' text-anchor='middle' class='rule'>labeled-statement</text>
    </a>
    <a href='#compound-statement'>
    <rect x='60' y='40' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='55' text-anchor='middle' class='rule'>compound-statement</text>
    </a>
    <a href='#expression-statement'>
    <rect x='60' y='70' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='85' text-anchor='middle' class='rule'>expression-statement</text>
    </a>
    <a href='#selection-statement'>
    <rect x='70' y='100' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='145' y='115' text-anchor='middle' class='rule'>selection-statement</text>
    </a>
    <a href='#iteration-statement'>
    <rect x='70' y='130' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='145' y='145' text-anchor='middle' class='rule'>iteration-statement</text>
    </a>
    <a href='#jump-statement'>
    <rect x='80' y='160' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='145' y='175' text-anchor='middle' class='rule'>jump-statement</text>
    </a>
    <path d='M250 30 v130'/>
    <path d='M210 170 h30 q10 0 10 -10'/>
    <path d='M40 160 q0 10 10 10 h30'/>
    <path d='M220 140 h20 q10 0 10 -10'/>
    <path d='M40 130 q0 10 10 10 h20'/>
    <path d='M220 110 h20 q10 0 10 -10'/>
    <path d='M40 100 q0 10 10 10 h20'/>
    <path d='M230 80 h10 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h10'/>
    <path d='M230 50 h10 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M250 30 q0 -10 10 -10'/>
    <path d='M220 20 h60'/>
    <path d='M30 20 q10 0 10 10 v130'/>
    <path d='M10 20 h60'/>
  </svg>
 </section>

 <section>
  <h2><a name='labeled-statement'>labeled-statement:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='95' width='510'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M500.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='135' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='180' y='25' text-anchor='middle' class='rule'>identifier</text>
    <rect x='245' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='255' y='25' text-anchor='middle' class='literal'>:</text>
    <a href='#statement'>
    <rect x='285' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='330' y='25' text-anchor='middle' class='rule'>statement</text>
    </a>
    <rect x='60' y='40' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='85' y='55' text-anchor='middle' class='literal'>case</text>
    <a href='#constant-expression'>
    <rect x='130' y='40' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='215' y='55' text-anchor='middle' class='rule'>constant-expression</text>
    </a>
    <rect x='320' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='330' y='55' text-anchor='middle' class='literal'>:</text>
    <a href='#statement'>
    <rect x='360' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='405' y='55' text-anchor='middle' class='rule'>statement</text>
    </a>
    <rect x='140' y='70' height='20' width='80' rx='8' ry='8' class='literal'/>
    <text x='180' y='85' text-anchor='middle' class='literal'>default</text>
    <rect x='240' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='250' y='85' text-anchor='middle' class='literal'>:</text>
    <a href='#statement'>
    <rect x='280' y='70' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='325' y='85' text-anchor='middle' class='rule'>statement</text>
    </a>
    <path d='M470 30 v40'/>
    <path d='M370 80 h90 q10 0 10 -10'/>
    <path d='M260 80 h20'/>
    <path d='M220 80 h20'/>
    <path d='M40 70 q0 10 10 10 h90'/>
    <path d='M450 50 h10 q10 0 10 -10'/>
    <path d='M340 50 h20'/>
    <path d='M300 50 h20'/>
    <path d='M110 50 h20'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M470 30 q0 -10 10 -10'/>
    <path d='M375 20 h125'/>
    <path d='M265 20 h20'/>
    <path d='M225 20 h20'/>
    <path d='M30 20 q10 0 10 10 v40'/>
    <path d='M10 20 h125'/>
  </svg>
 </section>

 <section>
  <h2><a name='expression-statement'>expression-statement:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='55' width='250'>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M240.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M107 10 l-4 3 v-6 z' class='arrow'/>
    <a href='#expression'>
    <rect x='60' y='30' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='45' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='200' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='210' y='45' text-anchor='middle' class='literal'>;</text>
    <path d='M40 20 v10'/>
    <path d='M170 30 q0 10 10 10'/>
    <path d='M150 40 h50'/>
    <path d='M30 40 q10 0 10 -10'/>
    <path d='M40 20 q0 -10 10 -10 h110 q10 0 10 10 v10'/>
    <path d='M220 40 h20'/>
    <path d='M10 40 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='selection-statement'>selection-statement:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='95' width='630'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M620.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='75' y='25' text-anchor='middle' class='literal'>if</text>
    <rect x='110' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='120' y='25' text-anchor='middle' class='literal'>(</text>
    <a href='#expression'>
    <rect x='150' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='195' y='25' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='260' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='270' y='25' text-anchor='middle' class='literal'>)</text>
    <a href='#statement'>
    <rect x='300' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='345' y='25' text-anchor='middle' class='rule'>statement</text>
    </a>
    <rect x='410' y='10' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='435' y='25' text-anchor='middle' class='literal'>else</text>
    <a href='#statement'>
    <rect x='480' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='525' y='25' text-anchor='middle' class='rule'>statement</text>
    </a>
    <rect x='150' y='40' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='165' y='55' text-anchor='middle' class='literal'>if</text>
    <rect x='200' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='210' y='55' text-anchor='middle' class='literal'>(</text>
    <a href='#expression'>
    <rect x='240' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='285' y='55' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='350' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='360' y='55' text-anchor='middle' class='literal'>)</text>
    <a href='#statement'>
    <rect x='390' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='435' y='55' text-anchor='middle' class='rule'>statement</text>
    </a>
    <rect x='130' y='70' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='165' y='85' text-anchor='middle' class='literal'>switch</text>
    <rect x='220' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='230' y='85' text-anchor='middle' class='literal'>(</text>
    <a href='#expression'>
    <rect x='260' y='70' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='305' y='85' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='370' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='380' y='85' text-anchor='middle' class='literal'>)</text>
    <a href='#statement'>
    <rect x='410' y='70' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='455' y='85' text-anchor='middle' class='rule'>statement</text>
    </a>
    <path d='M590 30 v40'/>
    <path d='M500 80 h80 q10 0 10 -10'/>
    <path d='M390 80 h20'/>
    <path d='M350 80 h20'/>
    <path d='M240 80 h20'/>
    <path d='M200 80 h20'/>
    <path d='M40 70 q0 10 10 10 h80'/>
    <path d='M480 50 h100 q10 0 10 -10'/>
    <path d='M370 50 h20'/>
    <path d='M330 50 h20'/>
    <path d='M220 50 h20'/>
    <path d='M180 50 h20'/>
    <path d='M40 40 q0 10 10 10 h100'/>
    <path d='M590 30 q0 -10 10 -10'/>
    <path d='M570 20 h50'/>
    <path d='M460 20 h20'/>
    <path d='M390 20 h20'/>
    <path d='M280 20 h20'/>
    <path d='M240 20 h20'/>
    <path d='M130 20 h20'/>
    <path d='M90 20 h20'/>
    <path d='M30 20 q10 0 10 10 v40'/>
    <path d='M10 20 h50'/>
  </svg>
 </section>

 <section>
  <h2><a name='iteration-statement'>iteration-statement:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='165' width='940'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M930.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='290' y='10' height='20' width='60' rx='8' ry='8' class='literal'/>
    <text x='320' y='25' text-anchor='middle' class='literal'>while</text>
    <rect x='370' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='380' y='25' text-anchor='middle' class='literal'>(</text>
    <a href='#expression'>
    <rect x='410' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='455' y='25' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='520' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='530' y='25' text-anchor='middle' class='literal'>)</text>
    <a href='#statement'>
    <rect x='560' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='605' y='25' text-anchor='middle' class='rule'>statement</text>
    </a>
    <rect x='245' y='40' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='260' y='55' text-anchor='middle' class='literal'>do</text>
    <a href='#statement'>
    <rect x='295' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='340' y='55' text-anchor='middle' class='rule'>statement</text>
    </a>
    <rect x='405' y='40' height='20' width='60' rx='8' ry='8' class='literal'/>
    <text x='435' y='55' text-anchor='middle' class='literal'>while</text>
    <rect x='485' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='495' y='55' text-anchor='middle' class='literal'>(</text>
    <a href='#expression'>
    <rect x='525' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='570' y='55' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='635' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='645' y='55' text-anchor='middle' class='literal'>)</text>
    <rect x='675' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='685' y='55' text-anchor='middle' class='literal'>;</text>
    <rect x='60' y='90' height='20' width='40' rx='8' ry='8' class='literal'/>
    <text x='80' y='105' text-anchor='middle' class='literal'>for</text>
    <rect x='120' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='130' y='105' text-anchor='middle' class='literal'>(</text>
    <path d='M237 70 l-4 3 v-6 z' class='arrow'/>
    <a href='#expression'>
    <rect x='190' y='90' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='235' y='105' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='330' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='340' y='105' text-anchor='middle' class='literal'>;</text>
    <path d='M447 70 l-4 3 v-6 z' class='arrow'/>
    <a href='#expression'>
    <rect x='400' y='90' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='445' y='105' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='540' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='550' y='105' text-anchor='middle' class='literal'>;</text>
    <path d='M657 70 l-4 3 v-6 z' class='arrow'/>
    <a href='#expression'>
    <rect x='610' y='90' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='655' y='105' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='750' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='760' y='105' text-anchor='middle' class='literal'>)</text>
    <a href='#statement'>
    <rect x='790' y='90' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='835' y='105' text-anchor='middle' class='rule'>statement</text>
    </a>
    <rect x='110' y='140' height='20' width='40' rx='8' ry='8' class='literal'/>
    <text x='130' y='155' text-anchor='middle' class='literal'>for</text>
    <rect x='170' y='140' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='180' y='155' text-anchor='middle' class='literal'>(</text>
    <a href='#declaration'>
    <rect x='210' y='140' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='255' y='155' text-anchor='middle' class='rule'>declaration</text>
    </a>
    <path d='M397 120 l-4 3 v-6 z' class='arrow'/>
    <a href='#expression'>
    <rect x='350' y='140' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='395' y='155' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='490' y='140' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='500' y='155' text-anchor='middle' class='literal'>;</text>
    <path d='M607 120 l-4 3 v-6 z' class='arrow'/>
    <a href='#expression'>
    <rect x='560' y='140' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='605' y='155' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='700' y='140' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='710' y='155' text-anchor='middle' class='literal'>)</text>
    <a href='#statement'>
    <rect x='740' y='140' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='785' y='155' text-anchor='middle' class='rule'>statement</text>
    </a>
    <path d='M900 30 v110'/>
    <path d='M830 150 h60 q10 0 10 -10'/>
    <path d='M720 150 h20'/>
    <path d='M540 130 v10'/>
    <path d='M670 140 q0 10 10 10'/>
    <path d='M650 150 h50'/>
    <path d='M530 150 q10 0 10 -10'/>
    <path d='M540 130 q0 -10 10 -10 h110 q10 0 10 10 v10'/>
    <path d='M510 150 h50'/>
    <path d='M330 130 v10'/>
    <path d='M460 140 q0 10 10 10'/>
    <path d='M440 150 h50'/>
    <path d='M320 150 q10 0 10 -10'/>
    <path d='M330 130 q0 -10 10 -10 h110 q10 0 10 10 v10'/>
    <path d='M300 150 h50'/>
    <path d='M190 150 h20'/>
    <path d='M150 150 h20'/>
    <path d='M40 140 q0 10 10 10 h60'/>
    <path d='M880 100 h10 q10 0 10 -10'/>
    <path d='M770 100 h20'/>
    <path d='M590 80 v10'/>
    <path d='M720 90 q0 10 10 10'/>
    <path d='M700 100 h50'/>
    <path d='M580 100 q10 0 10 -10'/>
    <path d='M590 80 q0 -10 10 -10 h110 q10 0 10 10 v10'/>
    <path d='M560 100 h50'/>
    <path d='M380 80 v10'/>
    <path d='M510 90 q0 10 10 10'/>
    <path d='M490 100 h50'/>
    <path d='M370 100 q10 0 10 -10'/>
    <path d='M380 80 q0 -10 10 -10 h110 q10 0 10 10 v10'/>
    <path d='M350 100 h50'/>
    <path d='M170 80 v10'/>
    <path d='M300 90 q0 10 10 10'/>
    <path d='M280 100 h50'/>
    <path d='M160 100 q10 0 10 -10'/>
    <path d='M170 80 q0 -10 10 -10 h110 q10 0 10 10 v10'/>
    <path d='M140 100 h50'/>
    <path d='M100 100 h20'/>
    <path d='M40 90 q0 10 10 10 h10'/>
    <path d='M695 50 h195 q10 0 10 -10'/>
    <path d='M655 50 h20'/>
    <path d='M615 50 h20'/>
    <path d='M505 50 h20'/>
    <path d='M465 50 h20'/>
    <path d='M385 50 h20'/>
    <path d='M275 50 h20'/>
    <path d='M40 40 q0 10 10 10 h195'/>
    <path d='M900 30 q0 -10 10 -10'/>
    <path d='M650 20 h280'/>
    <path d='M540 20 h20'/>
    <path d='M500 20 h20'/>
    <path d='M390 20 h20'/>
    <path d='M350 20 h20'/>
    <path d='M30 20 q10 0 10 10 v110'/>
    <path d='M10 20 h280'/>
  </svg>
 </section>

 <section>
  <h2><a name='jump-statement'>jump-statement:</a></h2>
  <svg xmlns='http://www.w3.org/2000/svg' height='145' width='400'>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M390.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='100' y='10' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='125' y='25' text-anchor='middle' class='literal'>goto</text>
    <rect x='170' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='215' y='25' text-anchor='middle' class='rule'>identifier</text>
    <rect x='280' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='290' y='25' text-anchor='middle' class='literal'>;</text>
    <rect x='135' y='40' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='180' y='55' text-anchor='middle' class='literal'>continue</text>
    <rect x='245' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='255' y='55' text-anchor='middle' class='literal'>;</text>
    <rect x='150' y='70' height='20' width='60' rx='8' ry='8' class='literal'/>
    <text x='180' y='85' text-anchor='middle' class='literal'>break</text>
    <rect x='230' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='240' y='85' text-anchor='middle' class='literal'>;</text>
    <rect x='60' y='120' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='95' y='135' text-anchor='middle' class='literal'>return</text>
    <path d='M227 100 l-4 3 v-6 z' class='arrow'/>
    <a href='#expression'>
    <rect x='180' y='120' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='225' y='135' text-anchor='middle' class='rule'>expression</text>
    </a>
    <rect x='320' y='120' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='330' y='135' text-anchor='middle' class='literal'>;</text>
    <path d='M360 30 v90'/>
    <path d='M340 130 h10 q10 0 10 -10'/>
    <path d='M160 110 v10'/>
    <path d='M290 120 q0 10 10 10'/>
    <path d='M270 130 h50'/>
    <path d='M150 130 q10 0 10 -10'/>
    <path d='M160 110 q0 -10 10 -10 h110 q10 0 10 10 v10'/>
    <path d='M130 130 h50'/>
    <path d='M40 120 q0 10 10 10 h10'/>
    <path d='M250 80 h100 q10 0 10 -10'/>
    <path d='M210 80 h20'/>
    <path d='M40 70 q0 10 10 10 h100'/>
    <path d='M265 50 h85 q10 0 10 -10'/>
    <path d='M225 50 h20'/>
    <path d='M40 40 q0 10 10 10 h85'/>
    <path d='M360 30 q0 -10 10 -10'/>
    <path d='M300 20 h90'/>
    <path d='M260 20 h20'/>
    <path d='M150 20 h20'/>
    <path d='M30 20 q10 0 10 10 v90'/>
    <path d='M10 20 h90'/>
  </svg>
 </section>

 </body>
</html>
translation-unit = [ external-declaration ] 
	;

external-declaration = function-definition
	| declaration
	;

function-definition = declaration-specifiers, declarator, [ declaration-list ] , compound-statement
	;

declaration = declaration-specifiers, [ init-declarator-list ] , ";"
	| static-assert-declaration
	| ";"
	;

declaration-specifiers = declaration-specifier, [ declaration-specifier ] 
	;

declaration-specifier = storage-class-specifier
	| type-specifier
	| type-qualifier
	| function-specifier
	| alignment-specifier
	;

declarator = [ pointer ] , direct-declarator
	;

declaration-list = declaration, [ declaration ] 
	;

compound-statement = "{", [ declaration-or-statement ] , "}"
	;

declaration-or-statement = declaration
	| statement
	;

init-declarator-list = init-declarator, [ "," init-declarator ] 
	;

init-declarator = declarator, [ "=" initializer ] 
	;

static-assert-declaration = "_Static_assert", "(", constant-expression, ",", string-literal, ")", ";"
	;

storage-class-specifier = "typedef"
	| "extern"
	| "static"
	| "_Thread_local"
	| "auto"
	| "register"
	;

type-specifier = "void"
	| "char"
	| "short"
	| "int"
	| "long"
	| "float"
	| "double"
	| "signed"
	| "unsigned"
	| "_Bool"
	| "_Complex"
	| "_Imaginary"
	| atomic-type-specifier
	| struct-or-union-specifier
	| enum-specifier
	| typedef-name
	;

typedef-name = identifier
	;

type-qualifier = "const"
	| "restrict"
	| "volatile"
	| "_Atomic"
	;

function-specifier = "inline"
	| "_Noreturn"
	;

alignment-specifier = "_Alignas", "(", type-name, ")"
	| "_Alignas", "(", constant-expression, ")"
	;

pointer = "*", [ type-qualifier-list ] , [ pointer ] 
	;

direct-declarator = identifier
	| "(", declarator, ")"
	| direct-declarator, "[", [ "*" ] , "]"
	| direct-declarator, "[", "static", [ type-qualifier-list ] , assignment-expression, "]"
	| direct-declarator, "[", type-qualifier-list, [ "*" ] , "]"
	| direct-declarator, "[", type-qualifier-list, [ "static" ] , assignment-expression, "]"
	| direct-declarator, "[", assignment-expression, "]"
	| direct-declarator, "(", parameter-type-list, ")"
	| direct-declarator, "(", identifier-list, ")"
	| direct-declarator, "(", ")"
	;

identifier-list = identifier, [ "," identifier ] 
	;

initializer-list = designative-initializer, [ "," designative-initializer ] 
	;

designative-initializer = [ designation ] , initializer
	;

initializer = "{", initializer-list, [ "," ] , "}"
	| assignment-expression
	;

constant-expression = conditional-expression
	;

atomic-type-specifier = "_Atomic", "(", type-name, ")"
	;

struct-or-union-specifier = struct-or-union, "{", struct-declaration-list, "}"
	| struct-or-union, identifier, [ "{" struct-declaration-list "}" ] 
	;

struct-or-union = "struct"
	| "union"
	;

struct-declaration-list = struct-declaration, [ struct-declaration ] 
	;

struct-declaration = specifier-qualifier-list, ";"
	| specifier-qualifier-list, struct-declarator-list, ";"
	| static-assert-declaration
	;

enum-specifier = "enum", "{", enumerator-list, [ "," ] , "}"
	| "enum", identifier, [ "{" enumerator-list [ "," ]  "}" ] 
	;

enumerator-list = enumerator, [ "," enumerator ] 
	;

enumerator = enumeration-constant, [ "=" constant-expression ] 
	;

enumeration-constant = identifier
	;

type-name = specifier-qualifier-list, [ abstract-declarator ] 
	;

specifier-qualifier-list = specifier-qualifier, [ specifier-qualifier ] 
	;

specifier-qualifier = type-specifier
	| type-qualifier
	;

abstract-declarator = pointer, [ direct-abstract-declarator ] 
	| direct-abstract-declarator
	;

direct-abstract-declarator = "(", abstract-declarator, ")"
	| "(", parameter-type-list, ")"
	| "(", ")"
	| "[", [ "*" ] , "]"
	| "[", "static", [ type-qualifier-list ] , assignment-expression, "]"
	| "[", type-qualifier-list, [ [ "static" ]  assignment-expression ] , "]"
	| "[", assignment-expression, "]"
	| direct-abstract-declarator, "[", [ "*" ] , "]"
	| direct-abstract-declarator, "[", "static", [ type-qualifier-list ] , assignment-expression, "]"
	| direct-abstract-declarator, "[", type-qualifier-list, [ [ "static" ]  assignment-expression ] , "]"
	| direct-abstract-declarator, "[", assignment-expression, "]"
	| direct-abstract-declarator, "(", parameter-type-list, ")"
	| direct-abstract-declarator, "(", ")"
	;

struct-declarator-list = struct-declarator, [ "," struct-declarator ] 
	;

type-qualifier-list = type-qualifier, [ type-qualifier ] 
	;

parameter-type-list = parameter-list, [ "," "..." ] 
	;

struct-declarator = ":", constant-expression
	| declarator, [ ":" constant-expression ] 
	;

assignment-operator = "="
	| "*="
	| "/="
	| "%="
	| "+="
	| "-="
	| "<<="
	| ">>="
	| "&="
	| "^="
	| "|="
	;

parameter-list = parameter-declaration, [ "," parameter-declaration ] 
	;

parameter-declaration = declaration-specifiers, [ declarator | abstract-declarator ] 
	;

expression = assignment-expression, [ "," assignment-expression ] 
	;

assignment-expression = conditional-expression
	| unary-expression, assignment-operator, assignment-expression
	;

conditional-expression = logical-or-expression, [ "?" expression ":" conditional-expression ] 
	;

logical-or-expression = logical-and-expression, [ "||" logical-and-expression ] 
	;

logical-and-expression = inclusive-or-expression, [ "&&" inclusive-or-expression ] 
	;

inclusive-or-expression = exclusive-or-expression, [ "|" exclusive-or-expression ] 
	;

exclusive-or-expression = and-expression, [ "^" and-expression ] 
	;

and-expression = equality-expression, [ "&" equality-expression ] 
	;

equality-expression = relational-expression, [ ( "==" | "!=" )  relational-expression ] 
	;

relational-expression = shift-expression, [ ( "<" | ">" | "<=" | ">=" )  shift-expression ] 
	;

shift-expression = additive-expression, [ ( "<<" | ">>" )  additive-expression ] 
	;

additive-expression = multiplicative-expression, [ ( "+" | "-" )  multiplicative-expression ] 
	;

multiplicative-expression = cast-expression, [ ( "*" | "/" | "%" )  cast-expression ] 
	;

cast-expression = unary-expression
	| "(", type-name, ")", cast-expression
	;

unary-expression = postfix-expression
	| ( "++" | "--" ) , unary-expression
	| unary-operator, cast-expression
	| "sizeof", unary-expression
	| "sizeof", "(", type-name, ")"
	| "_Alignof", "(", type-name, ")"
	;

postfix-expression = primary-expression
	| postfix-expression, "[", expression, "]"
	| postfix-expression, "(", [ argument-expression-list ] , ")"
	| postfix-expression, ( "." | "->" ) , identifier
	| postfix-expression, ( "++" | "--" ) 
	| "(", type-name, ")", "{", initializer-list, [ "," ] , "}"
	;

unary-operator = "&"
	| "*"
	| "+"
	| "-"
	| "~"
	| "!"
	;

primary-expression = identifier
	| constant
	| string
	| "(", expression, ")"
	| generic-selection
	;

argument-expression-list = assignment-expression, [ "," assignment-expression ] 
	;

constant = integer-constant
	| character-constant
	| floating-constant
	| enumeration-constant
	;

string = string-literal
	| "__func__"
	;

generic-selection = "_Generic", "(", assignment-expression, ",", generic-assoc-list, ")"
	;

generic-assoc-list = generic-association, [ "," generic-association ] 
	;

generic-association = type-name, ":", assignment-expression
	| "default", ":", assignment-expression
	;

designation = designator-list, "="
	;

designator-list = designator, [ designator ] 
	;

designator = "[", constant-expression, "]"
	| ".", identifier
	;

statement = labeled-statement
	| compound-statement
	| expression-statement
	| selection-statement
	| iteration-statement
	| jump-statement
	;

labeled-statement = identifier, ":", statement
	| "case", constant-expression, ":", statement
	| "default", ":", statement
	;

expression-statement = [ expression ] , ";"
	;

selection-statement = "if", "(", expression, ")", statement, "else", statement
	| "if", "(", expression, ")", statement
	| "switch", "(", expression, ")", statement
	;

iteration-statement = "while", "(", expression, ")", statement
	| "do", statement, "while", "(", expression, ")", ";"
	| "for", "(", [ expression ] , ";", [ expression ] , ";", [ expression ] , ")", statement
	| "for", "(", declaration, [ expression ] , ";", [ expression ] , ")", statement
	;

jump-statement = "goto", identifier, ";"
	| "continue", ";"
	| "break", ";"
	| "return", [ expression ] , ";"
	;

[{"$isa":"rule","name":"translation-unit","alts":[{"$isa":"alt","terms":[{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"external-declaration"}]}]}]}]},{"$isa":"rule","name":"external-declaration","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"function-definition"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"declaration"}]}]},{"$isa":"rule","name":"function-definition","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"declaration-specifiers"},{"$isa":"rule","rule":"declarator"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"declaration-list"}]}]},{"$isa":"rule","rule":"compound-statement"}]}]},{"$isa":"rule","name":"declaration","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"declaration-specifiers"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"init-declarator-list"}]}]},{"$isa":"cs_literal","literal":";"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"static-assert-declaration"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":";"}]}]},{"$isa":"rule","name":"declaration-specifiers","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"declaration-specifier"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"declaration-specifier"}]}]}]}]},{"$isa":"rule","name":"declaration-specifier","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"storage-class-specifier"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"type-specifier"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"type-qualifier"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"function-specifier"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"alignment-specifier"}]}]},{"$isa":"rule","name":"declarator","alts":[{"$isa":"alt","terms":[{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"pointer"}]}]},{"$isa":"rule","rule":"direct-declarator"}]}]},{"$isa":"rule","name":"declaration-list","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"declaration"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"declaration"}]}]}]}]},{"$isa":"rule","name":"compound-statement","alts":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"{"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"declaration-or-statement"}]}]},{"$isa":"cs_literal","literal":"}"}]}]},{"$isa":"rule","name":"declaration-or-statement","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"declaration"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"statement"}]}]},{"$isa":"rule","name":"init-declarator-list","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"init-declarator"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":","},{"$isa":"rule","rule":"init-declarator"}]}]}]}]},{"$isa":"rule","name":"init-declarator","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"declarator"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"="},{"$isa":"rule","rule":"initializer"}]}]}]}]},{"$isa":"rule","name":"static-assert-declaration","alts":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"_Static_assert"},{"$isa":"cs_literal","literal":"("},{"$isa":"rule","rule":"constant-expression"},{"$isa":"cs_literal","literal":","},{"$isa":"token","token":"string-literal"},{"$isa":"cs_literal","literal":")"},{"$isa":"cs_literal","literal":";"}]}]},{"$isa":"rule","name":"storage-class-specifier","alts":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"typedef"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"extern"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"static"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"_Thread_local"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"auto"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"register"}]}]},{"$isa":"rule","name":"type-specifier","alts":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"void"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"char"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"short"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"int"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"long"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"float"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"double"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"signed"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"unsigned"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"_Bool"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"_Complex"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"_Imaginary"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"atomic-type-specifier"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"struct-or-union-specifier"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"enum-specifier"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"typedef-name"}]}]},{"$isa":"rule","name":"typedef-name","alts":[{"$isa":"alt","terms":[{"$isa":"token","token":"identifier"}]}]},{"$isa":"rule","name":"type-qualifier","alts":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"const"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"restrict"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"volatile"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"_Atomic"}]}]},{"$isa":"rule","name":"function-specifier","alts":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"inline"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"_Noreturn"}]}]},{"$isa":"rule","name":"alignment-specifier","alts":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"_Alignas"},{"$isa":"cs_literal","literal":"("},{"$isa":"rule","rule":"type-name"},{"$isa":"cs_literal","literal":")"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"_Alignas"},{"$isa":"cs_literal","literal":"("},{"$isa":"rule","rule":"constant-expression"},{"$isa":"cs_literal","literal":")"}]}]},{"$isa":"rule","name":"pointer","alts":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"*"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"type-qualifier-list"}]}]},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"pointer"}]}]}]}]},{"$isa":"rule","name":"direct-declarator","alts":[{"$isa":"alt","terms":[{"$isa":"token","token":"identifier"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"("},{"$isa":"rule","rule":"declarator"},{"$isa":"cs_literal","literal":")"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"direct-declarator"},{"$isa":"cs_literal","literal":"["},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"*"}]}]},{"$isa":"cs_literal","literal":"]"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"direct-declarator"},{"$isa":"cs_literal","literal":"["},{"$isa":"cs_literal","literal":"static"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"type-qualifier-list"}]}]},{"$isa":"rule","rule":"assignment-expression"},{"$isa":"cs_literal","literal":"]"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"direct-declarator"},{"$isa":"cs_literal","literal":"["},{"$isa":"rule","rule":"type-qualifier-list"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"*"}]}]},{"$isa":"cs_literal","literal":"]"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"direct-declarator"},{"$isa":"cs_literal","literal":"["},{"$isa":"rule","rule":"type-qualifier-list"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"static"}]}]},{"$isa":"rule","rule":"assignment-expression"},{"$isa":"cs_literal","literal":"]"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"direct-declarator"},{"$isa":"cs_literal","literal":"["},{"$isa":"rule","rule":"assignment-expression"},{"$isa":"cs_literal","literal":"]"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"direct-declarator"},{"$isa":"cs_literal","literal":"("},{"$isa":"rule","rule":"parameter-type-list"},{"$isa":"cs_literal","literal":")"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"direct-declarator"},{"$isa":"cs_literal","literal":"("},{"$isa":"rule","rule":"identifier-list"},{"$isa":"cs_literal","literal":")"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"direct-declarator"},{"$isa":"cs_literal","literal":"("},{"$isa":"cs_literal","literal":")"}]}]},{"$isa":"rule","name":"identifier-list","alts":[{"$isa":"alt","terms":[{"$isa":"token","token":"identifier"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":","},{"$isa":"rule","rule":"identifier"}]}]}]}]},{"$isa":"rule","name":"initializer-list","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"designative-initializer"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":","},{"$isa":"rule","rule":"designative-initializer"}]}]}]}]},{"$isa":"rule","name":"designative-initializer","alts":[{"$isa":"alt","terms":[{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"designation"}]}]},{"$isa":"rule","rule":"initializer"}]}]},{"$isa":"rule","name":"initializer","alts":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"{"},{"$isa":"rule","rule":"initializer-list"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":","}]}]},{"$isa":"cs_literal","literal":"}"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"assignment-expression"}]}]},{"$isa":"rule","name":"constant-expression","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"conditional-expression"}]}]},{"$isa":"rule","name":"atomic-type-specifier","alts":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"_Atomic"},{"$isa":"cs_literal","literal":"("},{"$isa":"rule","rule":"type-name"},{"$isa":"cs_literal","literal":")"}]}]},{"$isa":"rule","name":"struct-or-union-specifier","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"struct-or-union"},{"$isa":"cs_literal","literal":"{"},{"$isa":"rule","rule":"struct-declaration-list"},{"$isa":"cs_literal","literal":"}"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"struct-or-union"},{"$isa":"token","token":"identifier"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"{"},{"$isa":"rule","rule":"struct-declaration-list"},{"$isa":"cs_literal","literal":"}"}]}]}]}]},{"$isa":"rule","name":"struct-or-union","alts":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"struct"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"union"}]}]},{"$isa":"rule","name":"struct-declaration-list","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"struct-declaration"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"struct-declaration"}]}]}]}]},{"$isa":"rule","name":"struct-declaration","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"specifier-qualifier-list"},{"$isa":"cs_literal","literal":";"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"specifier-qualifier-list"},{"$isa":"rule","rule":"struct-declarator-list"},{"$isa":"cs_literal","literal":";"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"static-assert-declaration"}]}]},{"$isa":"rule","name":"enum-specifier","alts":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"enum"},{"$isa":"cs_literal","literal":"{"},{"$isa":"rule","rule":"enumerator-list"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":","}]}]},{"$isa":"cs_literal","literal":"}"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"enum"},{"$isa":"token","token":"identifier"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"{"},{"$isa":"rule","rule":"enumerator-list"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":","}]}]},{"$isa":"cs_literal","literal":"}"}]}]}]}]},{"$isa":"rule","name":"enumerator-list","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"enumerator"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":","},{"$isa":"rule","rule":"enumerator"}]}]}]}]},{"$isa":"rule","name":"enumerator","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"enumeration-constant"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"="},{"$isa":"rule","rule":"constant-expression"}]}]}]}]},{"$isa":"rule","name":"enumeration-constant","alts":[{"$isa":"alt","terms":[{"$isa":"token","token":"identifier"}]}]},{"$isa":"rule","name":"type-name","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"specifier-qualifier-list"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"abstract-declarator"}]}]}]}]},{"$isa":"rule","name":"specifier-qualifier-list","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"specifier-qualifier"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"specifier-qualifier"}]}]}]}]},{"$isa":"rule","name":"specifier-qualifier","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"type-specifier"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"type-qualifier"}]}]},{"$isa":"rule","name":"abstract-declarator","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"pointer"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"direct-abstract-declarator"}]}]}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"direct-abstract-declarator"}]}]},{"$isa":"rule","name":"direct-abstract-declarator","alts":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"("},{"$isa":"rule","rule":"abstract-declarator"},{"$isa":"cs_literal","literal":")"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"("},{"$isa":"rule","rule":"parameter-type-list"},{"$isa":"cs_literal","literal":")"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"("},{"$isa":"cs_literal","literal":")"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"["},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"*"}]}]},{"$isa":"cs_literal","literal":"]"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"["},{"$isa":"cs_literal","literal":"static"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"type-qualifier-list"}]}]},{"$isa":"rule","rule":"assignment-expression"},{"$isa":"cs_literal","literal":"]"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"["},{"$isa":"rule","rule":"type-qualifier-list"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"static"}]}]},{"$isa":"rule","rule":"assignment-expression"}]}]},{"$isa":"cs_literal","literal":"]"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"["},{"$isa":"rule","rule":"assignment-expression"},{"$isa":"cs_literal","literal":"]"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"direct-abstract-declarator"},{"$isa":"cs_literal","literal":"["},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"*"}]}]},{"$isa":"cs_literal","literal":"]"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"direct-abstract-declarator"},{"$isa":"cs_literal","literal":"["},{"$isa":"cs_literal","literal":"static"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"type-qualifier-list"}]}]},{"$isa":"rule","rule":"assignment-expression"},{"$isa":"cs_literal","literal":"]"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"direct-abstract-declarator"},{"$isa":"cs_literal","literal":"["},{"$isa":"rule","rule":"type-qualifier-list"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"static"}]}]},{"$isa":"rule","rule":"assignment-expression"}]}]},{"$isa":"cs_literal","literal":"]"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"direct-abstract-declarator"},{"$isa":"cs_literal","literal":"["},{"$isa":"rule","rule":"assignment-expression"},{"$isa":"cs_literal","literal":"]"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"direct-abstract-declarator"},{"$isa":"cs_literal","literal":"("},{"$isa":"rule","rule":"parameter-type-list"},{"$isa":"cs_literal","literal":")"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"direct-abstract-declarator"},{"$isa":"cs_literal","literal":"("},{"$isa":"cs_literal","literal":")"}]}]},{"$isa":"rule","name":"struct-declarator-list","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"struct-declarator"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":","},{"$isa":"rule","rule":"struct-declarator"}]}]}]}]},{"$isa":"rule","name":"type-qualifier-list","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"type-qualifier"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"type-qualifier"}]}]}]}]},{"$isa":"rule","name":"parameter-type-list","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"parameter-list"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":","},{"$isa":"cs_literal","literal":"..."}]}]}]}]},{"$isa":"rule","name":"struct-declarator","alts":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":":"},{"$isa":"rule","rule":"constant-expression"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"declarator"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":":"},{"$isa":"rule","rule":"constant-expression"}]}]}]}]},{"$isa":"rule","name":"assignment-operator","alts":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"="}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"*="}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"/="}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"%="}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"+="}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"-="}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"<<="}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":">>="}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"&="}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"^="}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"|="}]}]},{"$isa":"rule","name":"parameter-list","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"parameter-declaration"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":","},{"$isa":"rule","rule":"parameter-declaration"}]}]}]}]},{"$isa":"rule","name":"parameter-declaration","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"declaration-specifiers"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"declarator"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"abstract-declarator"}]}]}]}]},{"$isa":"rule","name":"expression","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"assignment-expression"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":","},{"$isa":"rule","rule":"assignment-expression"}]}]}]}]},{"$isa":"rule","name":"assignment-expression","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"conditional-expression"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"unary-expression"},{"$isa":"rule","rule":"assignment-operator"},{"$isa":"rule","rule":"assignment-expression"}]}]},{"$isa":"rule","name":"conditional-expression","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"logical-or-expression"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"?"},{"$isa":"rule","rule":"expression"},{"$isa":"cs_literal","literal":":"},{"$isa":"rule","rule":"conditional-expression"}]}]}]}]},{"$isa":"rule","name":"logical-or-expression","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"logical-and-expression"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"||"},{"$isa":"rule","rule":"logical-and-expression"}]}]}]}]},{"$isa":"rule","name":"logical-and-expression","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"inclusive-or-expression"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"&&"},{"$isa":"rule","rule":"inclusive-or-expression"}]}]}]}]},{"$isa":"rule","name":"inclusive-or-expression","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"exclusive-or-expression"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"|"},{"$isa":"rule","rule":"exclusive-or-expression"}]}]}]}]},{"$isa":"rule","name":"exclusive-or-expression","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"and-expression"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"^"},{"$isa":"rule","rule":"and-expression"}]}]}]}]},{"$isa":"rule","name":"and-expression","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"equality-expression"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"&"},{"$isa":"rule","rule":"equality-expression"}]}]}]}]},{"$isa":"rule","name":"equality-expression","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"relational-expression"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"group","group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"=="}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"!="}]}]},{"$isa":"rule","rule":"relational-expression"}]}]}]}]},{"$isa":"rule","name":"relational-expression","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"shift-expression"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"group","group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"<"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":">"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"<="}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":">="}]}]},{"$isa":"rule","rule":"shift-expression"}]}]}]}]},{"$isa":"rule","name":"shift-expression","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"additive-expression"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"group","group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"<<"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":">>"}]}]},{"$isa":"rule","rule":"additive-expression"}]}]}]}]},{"$isa":"rule","name":"additive-expression","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"multiplicative-expression"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"group","group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"+"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"-"}]}]},{"$isa":"rule","rule":"multiplicative-expression"}]}]}]}]},{"$isa":"rule","name":"multiplicative-expression","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"cast-expression"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"group","group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"*"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"/"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"%"}]}]},{"$isa":"rule","rule":"cast-expression"}]}]}]}]},{"$isa":"rule","name":"cast-expression","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"unary-expression"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"("},{"$isa":"rule","rule":"type-name"},{"$isa":"cs_literal","literal":")"},{"$isa":"rule","rule":"cast-expression"}]}]},{"$isa":"rule","name":"unary-expression","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"postfix-expression"}]},{"$isa":"alt","terms":[{"$isa":"group","group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"++"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"--"}]}]},{"$isa":"rule","rule":"unary-expression"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"unary-operator"},{"$isa":"rule","rule":"cast-expression"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"sizeof"},{"$isa":"rule","rule":"unary-expression"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"sizeof"},{"$isa":"cs_literal","literal":"("},{"$isa":"rule","rule":"type-name"},{"$isa":"cs_literal","literal":")"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"_Alignof"},{"$isa":"cs_literal","literal":"("},{"$isa":"rule","rule":"type-name"},{"$isa":"cs_literal","literal":")"}]}]},{"$isa":"rule","name":"postfix-expression","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"primary-expression"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"postfix-expression"},{"$isa":"cs_literal","literal":"["},{"$isa":"rule","rule":"expression"},{"$isa":"cs_literal","literal":"]"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"postfix-expression"},{"$isa":"cs_literal","literal":"("},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"argument-expression-list"}]}]},{"$isa":"cs_literal","literal":")"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"postfix-expression"},{"$isa":"group","group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"."}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"->"}]}]},{"$isa":"token","token":"identifier"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"postfix-expression"},{"$isa":"group","group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"++"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"--"}]}]}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"("},{"$isa":"rule","rule":"type-name"},{"$isa":"cs_literal","literal":")"},{"$isa":"cs_literal","literal":"{"},{"$isa":"rule","rule":"initializer-list"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":","}]}]},{"$isa":"cs_literal","literal":"}"}]}]},{"$isa":"rule","name":"unary-operator","alts":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"&"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"*"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"+"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"-"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"~"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"!"}]}]},{"$isa":"rule","name":"primary-expression","alts":[{"$isa":"alt","terms":[{"$isa":"token","token":"identifier"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"constant"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"string"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"("},{"$isa":"rule","rule":"expression"},{"$isa":"cs_literal","literal":")"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"generic-selection"}]}]},{"$isa":"rule","name":"argument-expression-list","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"assignment-expression"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":","},{"$isa":"rule","rule":"assignment-expression"}]}]}]}]},{"$isa":"rule","name":"constant","alts":[{"$isa":"alt","terms":[{"$isa":"token","token":"integer-constant"}]},{"$isa":"alt","terms":[{"$isa":"token","token":"character-constant"}]},{"$isa":"alt","terms":[{"$isa":"token","token":"floating-constant"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"enumeration-constant"}]}]},{"$isa":"rule","name":"string","alts":[{"$isa":"alt","terms":[{"$isa":"token","token":"string-literal"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"__func__"}]}]},{"$isa":"rule","name":"generic-selection","alts":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"_Generic"},{"$isa":"cs_literal","literal":"("},{"$isa":"rule","rule":"assignment-expression"},{"$isa":"cs_literal","literal":","},{"$isa":"rule","rule":"generic-assoc-list"},{"$isa":"cs_literal","literal":")"}]}]},{"$isa":"rule","name":"generic-assoc-list","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"generic-association"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":","},{"$isa":"rule","rule":"generic-association"}]}]}]}]},{"$isa":"rule","name":"generic-association","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"type-name"},{"$isa":"cs_literal","literal":":"},{"$isa":"rule","rule":"assignment-expression"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"default"},{"$isa":"cs_literal","literal":":"},{"$isa":"rule","rule":"assignment-expression"}]}]},{"$isa":"rule","name":"designation","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"designator-list"},{"$isa":"cs_literal","literal":"="}]}]},{"$isa":"rule","name":"designator-list","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"designator"},{"$isa":"group","min":0,"max":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"designator"}]}]}]}]},{"$isa":"rule","name":"designator","alts":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"["},{"$isa":"rule","rule":"constant-expression"},{"$isa":"cs_literal","literal":"]"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"."},{"$isa":"token","token":"identifier"}]}]},{"$isa":"rule","name":"statement","alts":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"labeled-statement"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"compound-statement"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"expression-statement"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"selection-statement"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"iteration-statement"}]},{"$isa":"alt","terms":[{"$isa":"rule","rule":"jump-statement"}]}]},{"$isa":"rule","name":"labeled-statement","alts":[{"$isa":"alt","terms":[{"$isa":"token","token":"identifier"},{"$isa":"cs_literal","literal":":"},{"$isa":"rule","rule":"statement"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"case"},{"$isa":"rule","rule":"constant-expression"},{"$isa":"cs_literal","literal":":"},{"$isa":"rule","rule":"statement"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"default"},{"$isa":"cs_literal","literal":":"},{"$isa":"rule","rule":"statement"}]}]},{"$isa":"rule","name":"expression-statement","alts":[{"$isa":"alt","terms":[{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"expression"}]}]},{"$isa":"cs_literal","literal":";"}]}]},{"$isa":"rule","name":"selection-statement","alts":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"if"},{"$isa":"cs_literal","literal":"("},{"$isa":"rule","rule":"expression"},{"$isa":"cs_literal","literal":")"},{"$isa":"rule","rule":"statement"},{"$isa":"cs_literal","literal":"else"},{"$isa":"rule","rule":"statement"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"if"},{"$isa":"cs_literal","literal":"("},{"$isa":"rule","rule":"expression"},{"$isa":"cs_literal","literal":")"},{"$isa":"rule","rule":"statement"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"switch"},{"$isa":"cs_literal","literal":"("},{"$isa":"rule","rule":"expression"},{"$isa":"cs_literal","literal":")"},{"$isa":"rule","rule":"statement"}]}]},{"$isa":"rule","name":"iteration-statement","alts":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"while"},{"$isa":"cs_literal","literal":"("},{"$isa":"rule","rule":"expression"},{"$isa":"cs_literal","literal":")"},{"$isa":"rule","rule":"statement"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"do"},{"$isa":"rule","rule":"statement"},{"$isa":"cs_literal","literal":"while"},{"$isa":"cs_literal","literal":"("},{"$isa":"rule","rule":"expression"},{"$isa":"cs_literal","literal":")"},{"$isa":"cs_literal","literal":";"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"for"},{"$isa":"cs_literal","literal":"("},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"expression"}]}]},{"$isa":"cs_literal","literal":";"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"expression"}]}]},{"$isa":"cs_literal","literal":";"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"expression"}]}]},{"$isa":"cs_literal","literal":")"},{"$isa":"rule","rule":"statement"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"for"},{"$isa":"cs_literal","literal":"("},{"$isa":"rule","rule":"declaration"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"expression"}]}]},{"$isa":"cs_literal","literal":";"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"expression"}]}]},{"$isa":"cs_literal","literal":")"},{"$isa":"rule","rule":"statement"}]}]},{"$isa":"rule","name":"jump-statement","alts":[{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"goto"},{"$isa":"token","token":"identifier"},{"$isa":"cs_literal","literal":";"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"continue"},{"$isa":"cs_literal","literal":";"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"break"},{"$isa":"cs_literal","literal":";"}]},{"$isa":"alt","terms":[{"$isa":"cs_literal","literal":"return"},{"$isa":"group","min":0,"group":[{"$isa":"alt","terms":[{"$isa":"rule","rule":"expression"}]}]},{"$isa":"cs_literal","literal":";"}]}]}]
<translation-unit> ::= [ <external-declaration> ] 

<external-declaration> ::= <function-definition>
	| <declaration>

<function-definition> ::= <declaration-specifiers> <declarator> [ <declaration-list> ]  <compound-statement>

<declaration> ::= <declaration-specifiers> [ <init-declarator-list> ] 
%types%


%terminals%

	"return"; 
	"break"; 
	"continue"; 
	"goto"; 
	"for"; 
	"do"; 
	"while"; 
	"switch"; 
	"else"; 
	"if"; 
	"case"; 
	"."; 
	"default"; 
	"_Generic"; 
	"__func__"; 
	"!"; 
	"~"; 
	"-"; 
	"+"; 
	"&"; 
	"_Alignof"; 
	"sizeof"; 
	"|="; 
	"^="; 
	"&="; 
	">>="; 
	"<<="; 
	"-="; 
	"+="; 
	"%="; 
	"/="; 
	"*="; 
	"="; 
	":"; 
	"enum"; 
	"union"; 
	"struct"; 
	"]"; 
	"["; 
	"*"; 
	"_Alignas"; 
	"_Noreturn"; 
	"inline"; 
	"_Atomic"; 
	"volatile"; 
	"restrict"; 
	"const"; 
	"_Imaginary"; 
	"_Complex"; 
	"_Bool"; 
	"unsigned"; 
	"signed"; 
	"double"; 
	"float"; 
	"long"; 
	"int"; 
	"short"; 
	"char"; 
	"void"; 
	"register"; 
	"auto"; 
	"_Thread_local"; 
	"static"; 
	"extern"; 
	"typedef"; 
	")"; 
	","; 
	"("; 
	"_Static_assert"; 
	"}"; 
	"{"; 
	";"; 

%rules%

	translation-unit = {
		{ $$; || { external-declaration; }; }; 
	};

	external-declaration = {
		function-definition; 
	||
		declaration; 
	};

	function-definition = {
		declaration-specifiers; declarator; { $$; || { declaration-list; }; }; compound-statement; 
	};

	declaration = {
		declaration-specifiers; { $$; || { init-declarator-list; }; }; ";"; 
	||
		static-assert-declaration; 
	||
		";"; 
	};

	declaration-specifiers = {
		declaration-specifier; { $$; || { declaration-specifier; }; }; 
	};

	declaration-specifier = {
		storage-class-specifier; 
	||
		type-specifier; 
	||
		type-qualifier; 
	||
		function-specifier; 
	||
		alignment-specifier; 
	};

	declarator = {
		{ $$; || { pointer; }; }; direct-declarator; 
	};

	declaration-list = {
		declaration; { $$; || { declaration; }; }; 
	};

	compound-statement = {
		"{"; { $$; || { declaration-or-statement; }; }; "}"; 
	};

	declaration-or-statement = {
		declaration; 
	||
		statement; 
	};

	init-declarator-list = {
		init-declarator; { $$; || { ","; init-declarator; }; }; 
	};

	init-declarator = {
		declarator; { $$; || { "="; initializer; }; }; 
	};

	static-assert-declaration = {
		"_Static_assert"; "("; constant-expression; ","; string-literal; ")"; ";"; 
	};

	storage-class-specifier = {
		"typedef"; 
	||
		"extern"; 
	||
		"static"; 
	||
		"_Thread_local"; 
	||
		"auto"; 
	||
		"register"; 
	};

	type-specifier = {
		"void"; 
	||
		"char"; 
	||
		"short"; 
	||
		"int"; 
	||
		"long"; 
	||
		"float"; 
	||
		"double"; 
	||
		"signed"; 
	||
		"unsigned"; 
	||
		"_Bool"; 
	||
		"_Complex"; 
	||
		"_Imaginary"; 
	||
		atomic-type-specifier; 
	||
		struct-or-union-specifier; 
	||
		enum-specifier; 
	||
		typedef-name; 
	};

	typedef-name = {
		identifier; 
	};

	type-qualifier = {
		"const"; 
	||
		"restrict"; 
	||
		"volatile"; 
	||
		"_Atomic"; 
	};

	function-specifier = {
		"inline"; 
	||
		"_Noreturn"; 
	};

	alignment-specifier = {
		"_Alignas"; "("; type-name; ")"; 
	||
		"_Alignas"; "("; constant-expression; ")"; 
	};

	pointer = {
		"*"; { $$; || { type-qualifier-list; }; }; { $$; || { pointer; }; }; 
	};

	direct-declarator = {
		identifier; 
	||
		"("; declarator; ")"; 
	||
		direct-declarator; "["; { $$; || { "*"; }; }; "]"; 
	||
		direct-declarator; "["; "static"; { $$; || { type-qualifier-list; }; }; assignment-expression; "]"; 
	||
		direct-declarator; "["; type-qualifier-list; { $$; || { "*"; }; }; "]"; 
	||
		direct-declarator; "["; type-qualifier-list; { $$; || { "static"; }; }; assignment-expression; "]"; 
	||
		direct-declarator; "["; assignment-expression; "]"; 
	||
		direct-declarator; "("; parameter-type-list; ")"; 
	||
		direct-declarator; "("; identifier-list; ")"; 
	||
		direct-declarator; "("; ")"; 
	};

	identifier-list = {
		identifier; { $$; || { ","; identifier; }; }; 
	};

	initializer-list = {
		designative-initializer; { $$; || { ","; designative-initializer; }; }; 
	};

	designative-initializer = {
		{ $$; || { designation; }; }; initializer; 
	};

	initializer = {
		"{"; initializer-list; { $$; || { ","; }; }; "}"; 
	||
		assignment-expression; 
	};

	constant-expression = {
		conditional-expression; 
	};

	atomic-type-specifier = {
		"_Atomic"; "("; type-name; ")"; 
	};

	struct-or-union-specifier = {
		struct-or-union; "{"; struct-declaration-list; "}"; 
	||
		struct-or-union; identifier; { $$; || { "{"; struct-declaration-list; "}"; }; }; 
	};

	struct-or-union = {
		"struct"; 
	||
		"union"; 
	};

	struct-declaration-list = {
		struct-declaration; { $$; || { struct-declaration; }; }; 
	};

	struct-declaration = {
		specifier-qualifier-list; ";"; 
	||
		specifier-qualifier-list; struct-declarator-list; ";"; 
	||
		static-assert-declaration; 
	};

	enum-specifier = {
		"enum"; "{"; enumerator-list; { $$; || { ","; }; }; "}"; 
	||
		"enum"; identifier; { $$; || { "{"; enumerator-list; { $$; || { ","; }; }; "}"; }; }; 
	};

	enumerator-list = {
		enumerator; { $$; || { ","; enumerator; }; }; 
	};

	enumerator = {
		enumeration-constant; { $$; || { "="; constant-expression; }; }; 
	};

	enumeration-constant = {
		identifier; 
	};

	type-name = {
		specifier-qualifier-list; { $$; || { abstract-declarator; }; }; 
	};

	specifier-qualifier-list = {
		specifier-qualifier; { $$; || { specifier-qualifier; }; }; 
	};

	specifier-qualifier = {
		type-specifier; 
	||
		type-qualifier; 
	};

	abstract-declarator = {
		pointer; { $$; || { direct-abstract-declarator; }; }; 
	||
		direct-abstract-declarator; 
	};

	direct-abstract-declarator = {
		"("; abstract-declarator; ")"; 
	||
		"("; parameter-type-list; ")"; 
	||
		"("; ")"; 
	||
		"["; { $$; || { "*"; }; }; "]"; 
	||
		"["; "static"; { $$; || { type-qualifier-list; }; }; assignment-expression; "]"; 
	||
		"["; type-qualifier-list; { $$; || { { $$; || { "static"; }; }; assignment-expression; }; }; "]"; 
	||
		"["; assignment-expression; "]"; 
	||
		direct-abstract-declarator; "["; { $$; || { "*"; }; }; "]"; 
	||
		direct-abstract-declarator; "["; "static"; { $$; || { type-qualifier-list; }; }; assignment-expression; "]"; 
	||
		direct-abstract-declarator; "["; type-qualifier-list; { $$; || { { $$; || { "static"; }; }; assignment-expression; }; }; "]"; 
	||
		direct-abstract-declarator; "["; assignment-expression; "]"; 
	||
		direct-abstract-declarator; "("; parameter-type-list; ")"; 
	||
		direct-abstract-declarator; "("; ")"; 
	};

	struct-declarator-list = {
		struct-declarator; { $$; || { ","; struct-declarator; }; }; 
	};

	type-qualifier-list = {
		type-qualifier; { $$; || { type-qualifier; }; }; 
	};

	parameter-type-list = {
		parameter-list; { $$; || { ","; "..."; }; }; 
	};

	struct-declarator = {
		":"; constant-expression; 
	||
		declarator; { $$; || { ":"; constant-expression; }; }; 
	};

	assignment-operator = {
		"="; 
	||
		"*="; 
	||
		"/="; 
	||
		"%="; 
	||
		"+="; 
	||
		"-="; 
	||
		"<<="; 
	||
		">>="; 
	||
		"&="; 
	||
		"^="; 
	||
		"|="; 
	};

	parameter-list = {
		parameter-declaration; { $$; || { ","; parameter-declaration; }; }; 
	};

	parameter-declaration = {
		declaration-specifiers; { $$; || { declarator; }; }; 
	};

	expression = {
		assignment-expression; { $$; || { ","; assignment-expression; }; }; 
	};

	assignment-expression = {
		conditional-expression; 
	||
		unary-expression; assignment-operator; assignment-expression; 
	};

	conditional-expression = {
		logical-or-expression; { $$; || { "?"; expression; ":"; conditional-expression; }; }; 
	};

	logical-or-expression = {
		logical-and-expression; { $$; || { "||"; logical-and-expression; }; }; 
	};

	logical-and-expression = {
		inclusive-or-expression; { $$; || { "&&"; inclusive-or-expression; }; }; 
	};

	inclusive-or-expression = {
		exclusive-or-expression; { $$; || { "|"; exclusive-or-expression; }; }; 
	};

	exclusive-or-expression = {
		and-expression; { $$; || { "^"; and-expression; }; }; 
	};

	and-expression = {
		equality-expression; { $$; || { "&"; equality-expression; }; }; 
	};

	equality-expression = {
		relational-expression; { $$; || { { "=="; }; relational-expression; }; }; 
	};

	relational-expression = {
		shift-expression; { $$; || { { "<"; }; shift-expression; }; }; 
	};

	shift-expression = {
		additive-expression; { $$; || { { "<<"; }; additive-expression; }; }; 
	};

	additive-expression = {
		multiplicative-expression; { $$; || { { "+"; }; multiplicative-expression; }; }; 
	};

	multiplicative-expression = {
		cast-expression; { $$; || { { "*"; }; cast-expression; }; }; 
	};

	cast-expression = {
		unary-expression; 
	||
		"("; type-name; ")"; cast-expression; 
	};

	unary-expression = {
		postfix-expression; 
	||
		{ "++"; }; unary-expression; 
	||
		unary-operator; cast-expression; 
	||
		"sizeof"; unary-expression; 
	||
		"sizeof"; "("; type-name; ")"; 
	||
		"_Alignof"; "("; type-name; ")"; 
	};

	postfix-expression = {
		primary-expression; 
	||
		postfix-expression; "["; expression; "]"; 
	||
		postfix-expression; "("; { $$; || { argument-expression-list; }; }; ")"; 
	||
		postfix-expression; { "."; }; identifier; 
	||
		postfix-expression; { "++"; }; 
	||
		"("; type-name; ")"; "{"; initializer-list; { $$; || { ","; }; }; "}"; 
	};

	unary-operator = {
		"&"; 
	||
		"*"; 
	||
		"+"; 
	||
		"-"; 
	||
		"~"; 
	||
		"!"; 
	};

	primary-expression = {
		identifier; 
	||
		constant; 
	||
		string; 
	||
		"("; expression; ")"; 
	||
		generic-selection; 
	};

	argument-expression-list = {
		assignment-expression; { $$; || { ","; assignment-expression; }; }; 
	};

	constant = {
		integer-constant; 
	||
		character-constant; 
	||
		floating-constant; 
	||
		enumeration-constant; 
	};

	string = {
		string-literal; 
	||
		"__func__"; 
	};

	generic-selection = {
		"_Generic"; "("; assignment-expression; ","; generic-assoc-list; ")"; 
	};

	generic-assoc-list = {
		generic-association; { $$; || { ","; generic-association; }; }; 
	};

	generic-association = {
		type-name; ":"; assignment-expression; 
	||
		"default"; ":"; assignment-expression; 
	};

	designation = {
		designator-list; "="; 
	};

	designator-list = {
		designator; { $$; || { designator; }; }; 
	};

	designator = {
		"["; constant-expression; "]"; 
	||
		"."; identifier; 
	};

	statement = {
		labeled-statement; 
	||
		compound-statement; 
	||
		expression-statement; 
	||
		selection-statement; 
	||
		iteration-statement; 
	||
		jump-statement; 
	};

	labeled-statement = {
		identifier; ":"; statement; 
	||
		"case"; constant-expression; ":"; statement; 
	||
		"default"; ":"; statement; 
	};

	expression-statement = {
		{ $$; || { expression; }; }; ";"; 
	};

	selection-statement = {
		"if"; "("; expression; ")"; statement; "else"; statement; 
	||
		"if"; "("; expression; ")"; statement; 
	||
		"switch"; "("; expression; ")"; statement; 
	};

	iteration-statement = {
		"while"; "("; expression; ")"; statement; 
	||
		"do"; statement; "while"; "("; expression; ")"; ";"; 
	||
		"for"; "("; { $$; || { expression; }; }; ";"; { $$; || { expression; }; }; ";"; { $$; || { expression; }; }; ")"; statement; 
	||
		"for"; "("; declaration; { $$; || { expression; }; }; ";"; { $$; || { expression; }; }; ")"; statement; 
	};

	jump-statement = {
		"goto"; identifier; ";"; 
	||
		"continue"; ";"; 
	||
		"break"; ";"; 
	||
		"return"; { $$; || { expression; }; }; ";"; 
	};


%entry%

	translation-unit;

<?xml version='1.0' encoding='utf-8'?>
<svg
  xmlns='http://www.w3.org/2000/svg'
  xmlns:xlink='http://www.w3.org/1999/xlink'

  width='1060' height='11780'>

  <style>
    rect, line, path { stroke-width: 1.5px; stroke: black; fill: transparent; }
    rect, line, path { stroke-linecap: square; stroke-linejoin: rounded; }
    path { fill: transparent; }
    text.literal { font-family: monospace; }
    line.ellipsis { stroke-dasharray: 1 3.5; }
    tspan.hex { font-family: monospace; font-size: 90%; }
    path.arrow { fill: black; }
  </style>

  <g transform='translate(40 50)'>
    <text x='-30' y='-10'>translation-unit:</text>
    <path d='M5.5 4 v12 m 4 0 v-12' class='station'/>
    <path d='M280.5 4 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='30' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='45' text-anchor='middle' class='rule'>external-declaration</text>
    <path d='M40 20 v10 q0 10 10 10 h10'/>
    <path d='M230 40 h10 q10 0 10 -10'/>
    <path d='M240 10 q10 0 10 10 v10'/>
    <path d='M40 20 q0 -10 10 -10'/>
    <path d='M10 10 h270'/>
  </g>

  <g transform='translate(40 150)'>
    <text x='-30' y='-10'>external-declaration:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M260.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='25' text-anchor='middle' class='rule'>function-definition</text>
    <rect x='90' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='135' y='55' text-anchor='middle' class='rule'>declaration</text>
    <path d='M230 30 v10'/>
    <path d='M180 50 h40 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h40'/>
    <path d='M230 30 q0 -10 10 -10'/>
    <path d='M210 20 h50'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 260)'>
    <text x='-30' y='-10'>function-definition:</text>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M730.5 34 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='30' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='115' y='45' text-anchor='middle' class='rule'>declaration-specifiers</text>
    <rect x='220' y='30' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='265' y='45' text-anchor='middle' class='rule'>declarator</text>
    <path d='M427 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='360' y='30' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='425' y='45' text-anchor='middle' class='rule'>declaration-list</text>
    <rect x='540' y='30' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='625' y='45' text-anchor='middle' class='rule'>compound-statement</text>
    <path d='M340 20 v10'/>
    <path d='M510 30 q0 10 10 10'/>
    <path d='M490 40 h50'/>
    <path d='M330 40 q10 0 10 -10'/>
    <path d='M340 20 q0 -10 10 -10 h150 q10 0 10 10 v10'/>
    <path d='M310 40 h50'/>
    <path d='M200 40 h20'/>
    <path d='M710 40 h20'/>
    <path d='M10 40 h20'/>
  </g>

  <g transform='translate(40 360)'>
    <text x='-30' y='-10'>declaration:</text>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M550.5 34 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='30' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='45' text-anchor='middle' class='rule'>declaration-specifiers</text>
    <path d='M357 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='280' y='30' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='355' y='45' text-anchor='middle' class='rule'>init-declarator-list</text>
    <rect x='480' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='490' y='45' text-anchor='middle' class='literal'>;</text>
    <rect x='185' y='60' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='280' y='75' text-anchor='middle' class='rule'>static-assert-declaration</text>
    <rect x='270' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='280' y='105' text-anchor='middle' class='literal'>;</text>
    <path d='M520 50 v40'/>
    <path d='M290 100 h220 q10 0 10 -10'/>
    <path d='M40 90 q0 10 10 10 h220'/>
    <path d='M375 70 h135 q10 0 10 -10'/>
    <path d='M40 60 q0 10 10 10 h135'/>
    <path d='M520 50 q0 -10 10 -10'/>
    <path d='M500 40 h50'/>
    <path d='M260 20 v10'/>
    <path d='M450 30 q0 10 10 10'/>
    <path d='M430 40 h50'/>
    <path d='M250 40 q10 0 10 -10'/>
    <path d='M260 20 q0 -10 10 -10 h170 q10 0 10 10 v10'/>
    <path d='M230 40 h50'/>
    <path d='M30 40 q10 0 10 10 v40'/>
    <path d='M10 40 h50'/>
  </g>

  <g transform='translate(40 520)'>
    <text x='-30' y='-10'>declaration-specifiers:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M280.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='25' text-anchor='middle' class='rule'>declaration-specifier</text>
    <path d='M143 40 l4 3 v-6 z' class='arrow'/>
    <path d='M40 30 v0 q0 10 10 10 h190 q10 0 10 -10 v0'/>
    <path d='M240 20 q10 0 10 10'/>
    <path d='M230 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 620)'>
    <text x='-30' y='-10'>declaration-specifier:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M300.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='155' y='25' text-anchor='middle' class='rule'>storage-class-specifier</text>
    <rect x='100' y='40' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='155' y='55' text-anchor='middle' class='rule'>type-specifier</text>
    <rect x='100' y='70' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='155' y='85' text-anchor='middle' class='rule'>type-qualifier</text>
    <rect x='80' y='100' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='155' y='115' text-anchor='middle' class='rule'>function-specifier</text>
    <rect x='80' y='130' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='155' y='145' text-anchor='middle' class='rule'>alignment-specifier</text>
    <path d='M270 30 v100'/>
    <path d='M230 140 h30 q10 0 10 -10'/>
    <path d='M40 130 q0 10 10 10 h30'/>
    <path d='M230 110 h30 q10 0 10 -10'/>
    <path d='M40 100 q0 10 10 10 h30'/>
    <path d='M210 80 h50 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h50'/>
    <path d='M210 50 h50 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h50'/>
    <path d='M270 30 q0 -10 10 -10'/>
    <path d='M250 20 h50'/>
    <path d='M30 20 q10 0 10 10 v100'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 820)'>
    <text x='-30' y='-10'>declarator:</text>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M350.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M97 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='60' y='30' height='20' width='70' rx='0' ry='0' class='rule'/>
    <text x='95' y='45' text-anchor='middle' class='rule'>pointer</text>
    <rect x='180' y='30' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='255' y='45' text-anchor='middle' class='rule'>direct-declarator</text>
    <path d='M40 20 v10'/>
    <path d='M150 30 q0 10 10 10'/>
    <path d='M130 40 h50'/>
    <path d='M30 40 q10 0 10 -10'/>
    <path d='M40 20 q0 -10 10 -10 h90 q10 0 10 10 v10'/>
    <path d='M330 40 h20'/>
    <path d='M10 40 h50'/>
  </g>

  <g transform='translate(40 920)'>
    <text x='-30' y='-10'>declaration-list:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M200.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='25' text-anchor='middle' class='rule'>declaration</text>
    <path d='M103 40 l4 3 v-6 z' class='arrow'/>
    <path d='M40 30 v0 q0 10 10 10 h110 q10 0 10 -10 v0'/>
    <path d='M160 20 q10 0 10 10'/>
    <path d='M150 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 1020)'>
    <text x='-30' y='-10'>compound-statement:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M380.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='40' y='25' text-anchor='middle' class='literal'>{</text>
    <rect x='100' y='40' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='195' y='55' text-anchor='middle' class='rule'>declaration-or-statement</text>
    <rect x='340' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='350' y='25' text-anchor='middle' class='literal'>}</text>
    <path d='M80 30 v10 q0 10 10 10 h10'/>
    <path d='M290 50 h10 q10 0 10 -10'/>
    <path d='M300 20 q10 0 10 10 v10'/>
    <path d='M80 30 q0 -10 10 -10'/>
    <path d='M50 20 h290'/>
    <path d='M360 20 h20'/>
    <path d='M10 20 h20'/>
  </g>

  <g transform='translate(40 1130)'>
    <text x='-30' y='-10'>declaration-or-statement:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M200.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='25' text-anchor='middle' class='rule'>declaration</text>
    <rect x='60' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='55' text-anchor='middle' class='rule'>statement</text>
    <path d='M170 30 v10'/>
    <path d='M150 50 h10 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M170 30 q0 -10 10 -10'/>
    <path d='M150 20 h50'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 1240)'>
    <text x='-30' y='-10'>init-declarator-list:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M240.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='125' y='25' text-anchor='middle' class='rule'>init-declarator</text>
    <rect x='115' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='125' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h65'/>
    <path d='M135 50 h65 q10 0 10 -10'/>
    <path d='M200 20 q10 0 10 10 v10'/>
    <path d='M190 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 1350)'>
    <text x='-30' y='-10'>init-declarator:</text>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M350.5 34 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='30' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='75' y='45' text-anchor='middle' class='rule'>declarator</text>
    <path d='M237 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='170' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='180' y='45' text-anchor='middle' class='literal'>=</text>
    <rect x='210' y='30' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='255' y='45' text-anchor='middle' class='rule'>initializer</text>
    <path d='M150 20 v10'/>
    <path d='M320 30 q0 10 10 10'/>
    <path d='M300 40 h50'/>
    <path d='M190 40 h20'/>
    <path d='M140 40 q10 0 10 -10'/>
    <path d='M150 20 q0 -10 10 -10 h150 q10 0 10 10 v10'/>
    <path d='M120 40 h50'/>
    <path d='M10 40 h20'/>
  </g>

  <g transform='translate(40 1450)'>
    <text x='-30' y='-10'>static-assert-declaration:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M680.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='10' height='20' width='150' rx='8' ry='8' class='literal'/>
    <text x='105' y='25' text-anchor='middle' class='literal'>_Static_assert</text>
    <rect x='200' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='210' y='25' text-anchor='middle' class='literal'>(</text>
    <rect x='240' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='325' y='25' text-anchor='middle' class='rule'>constant-expression</text>
    <rect x='430' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='440' y='25' text-anchor='middle' class='literal'>,</text>
    <rect x='470' y='10' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='525' y='25' text-anchor='middle' class='rule'>string-literal</text>
    <rect x='600' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='610' y='25' text-anchor='middle' class='literal'>)</text>
    <rect x='640' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='650' y='25' text-anchor='middle' class='literal'>;</text>
    <path d='M620 20 h20'/>
    <path d='M580 20 h20'/>
    <path d='M450 20 h20'/>
    <path d='M410 20 h20'/>
    <path d='M220 20 h20'/>
    <path d='M180 20 h20'/>
    <path d='M660 20 h20'/>
    <path d='M10 20 h20'/>
  </g>

  <g transform='translate(40 1530)'>
    <text x='-30' y='-10'>storage-class-specifier:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M250.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='90' y='10' height='20' width='80' rx='8' ry='8' class='literal'/>
    <text x='130' y='25' text-anchor='middle' class='literal'>typedef</text>
    <rect x='95' y='40' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='130' y='55' text-anchor='middle' class='literal'>extern</text>
    <rect x='95' y='70' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='130' y='85' text-anchor='middle' class='literal'>static</text>
    <rect x='60' y='100' height='20' width='140' rx='8' ry='8' class='literal'/>
    <text x='130' y='115' text-anchor='middle' class='literal'>_Thread_local</text>
    <rect x='105' y='130' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='130' y='145' text-anchor='middle' class='literal'>auto</text>
    <rect x='85' y='160' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='130' y='175' text-anchor='middle' class='literal'>register</text>
    <path d='M220 30 v130'/>
    <path d='M175 170 h35 q10 0 10 -10'/>
    <path d='M40 160 q0 10 10 10 h35'/>
    <path d='M155 140 h55 q10 0 10 -10'/>
    <path d='M40 130 q0 10 10 10 h55'/>
    <path d='M200 110 h10 q10 0 10 -10'/>
    <path d='M40 100 q0 10 10 10 h10'/>
    <path d='M165 80 h45 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h45'/>
    <path d='M165 50 h45 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h45'/>
    <path d='M220 30 q0 -10 10 -10'/>
    <path d='M170 20 h80'/>
    <path d='M30 20 q10 0 10 10 v130'/>
    <path d='M10 20 h80'/>
  </g>

  <g transform='translate(40 1760)'>
    <text x='-30' y='-10'>type-specifier:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M320.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='140' y='10' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='165' y='25' text-anchor='middle' class='literal'>void</text>
    <rect x='140' y='40' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='165' y='55' text-anchor='middle' class='literal'>char</text>
    <rect x='135' y='70' height='20' width='60' rx='8' ry='8' class='literal'/>
    <text x='165' y='85' text-anchor='middle' class='literal'>short</text>
    <rect x='145' y='100' height='20' width='40' rx='8' ry='8' class='literal'/>
    <text x='165' y='115' text-anchor='middle' class='literal'>int</text>
    <rect x='140' y='130' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='165' y='145' text-anchor='middle' class='literal'>long</text>
    <rect x='135' y='160' height='20' width='60' rx='8' ry='8' class='literal'/>
    <text x='165' y='175' text-anchor='middle' class='literal'>float</text>
    <rect x='130' y='190' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='165' y='205' text-anchor='middle' class='literal'>double</text>
    <rect x='130' y='220' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='165' y='235' text-anchor='middle' class='literal'>signed</text>
    <rect x='120' y='250' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='165' y='265' text-anchor='middle' class='literal'>unsigned</text>
    <rect x='135' y='280' height='20' width='60' rx='8' ry='8' class='literal'/>
    <text x='165' y='295' text-anchor='middle' class='literal'>_Bool</text>
    <rect x='120' y='310' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='165' y='325' text-anchor='middle' class='literal'>_Complex</text>
    <rect x='110' y='340' height='20' width='110' rx='8' ry='8' class='literal'/>
    <text x='165' y='355' text-anchor='middle' class='literal'>_Imaginary</text>
    <rect x='80' y='370' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='165' y='385' text-anchor='middle' class='rule'>atomic-type-specifier</text>
    <rect x='60' y='400' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='165' y='415' text-anchor='middle' class='rule'>struct-or-union-specifier</text>
    <rect x='100' y='430' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='165' y='445' text-anchor='middle' class='rule'>enum-specifier</text>
    <rect x='110' y='460' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='165' y='475' text-anchor='middle' class='rule'>typedef-name</text>
    <path d='M290 30 v430'/>
    <path d='M220 470 h60 q10 0 10 -10'/>
    <path d='M40 460 q0 10 10 10 h60'/>
    <path d='M230 440 h50 q10 0 10 -10'/>
    <path d='M40 430 q0 10 10 10 h50'/>
    <path d='M270 410 h10 q10 0 10 -10'/>
    <path d='M40 400 q0 10 10 10 h10'/>
    <path d='M250 380 h30 q10 0 10 -10'/>
    <path d='M40 370 q0 10 10 10 h30'/>
    <path d='M220 350 h60 q10 0 10 -10'/>
    <path d='M40 340 q0 10 10 10 h60'/>
    <path d='M210 320 h70 q10 0 10 -10'/>
    <path d='M40 310 q0 10 10 10 h70'/>
    <path d='M195 290 h85 q10 0 10 -10'/>
    <path d='M40 280 q0 10 10 10 h85'/>
    <path d='M210 260 h70 q10 0 10 -10'/>
    <path d='M40 250 q0 10 10 10 h70'/>
    <path d='M200 230 h80 q10 0 10 -10'/>
    <path d='M40 220 q0 10 10 10 h80'/>
    <path d='M200 200 h80 q10 0 10 -10'/>
    <path d='M40 190 q0 10 10 10 h80'/>
    <path d='M195 170 h85 q10 0 10 -10'/>
    <path d='M40 160 q0 10 10 10 h85'/>
    <path d='M190 140 h90 q10 0 10 -10'/>
    <path d='M40 130 q0 10 10 10 h90'/>
    <path d='M185 110 h95 q10 0 10 -10'/>
    <path d='M40 100 q0 10 10 10 h95'/>
    <path d='M195 80 h85 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h85'/>
    <path d='M190 50 h90 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h90'/>
    <path d='M290 30 q0 -10 10 -10'/>
    <path d='M190 20 h130'/>
    <path d='M30 20 q10 0 10 10 v430'/>
    <path d='M10 20 h130'/>
  </g>

  <g transform='translate(40 2290)'>
    <text x='-30' y='-10'>typedef-name:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M140.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='75' y='25' text-anchor='middle' class='rule'>identifier</text>
    <path d='M120 20 h20'/>
    <path d='M10 20 h20'/>
  </g>

  <g transform='translate(40 2370)'>
    <text x='-30' y='-10'>type-qualifier:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M200.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='75' y='10' height='20' width='60' rx='8' ry='8' class='literal'/>
    <text x='105' y='25' text-anchor='middle' class='literal'>const</text>
    <rect x='60' y='40' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='105' y='55' text-anchor='middle' class='literal'>restrict</text>
    <rect x='60' y='70' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='105' y='85' text-anchor='middle' class='literal'>volatile</text>
    <rect x='65' y='100' height='20' width='80' rx='8' ry='8' class='literal'/>
    <text x='105' y='115' text-anchor='middle' class='literal'>_Atomic</text>
    <path d='M170 30 v70'/>
    <path d='M145 110 h15 q10 0 10 -10'/>
    <path d='M40 100 q0 10 10 10 h15'/>
    <path d='M150 80 h10 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h10'/>
    <path d='M150 50 h10 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M170 30 q0 -10 10 -10'/>
    <path d='M135 20 h65'/>
    <path d='M30 20 q10 0 10 10 v70'/>
    <path d='M10 20 h65'/>
  </g>

  <g transform='translate(40 2540)'>
    <text x='-30' y='-10'>function-specifier:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M210.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='75' y='10' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='110' y='25' text-anchor='middle' class='literal'>inline</text>
    <rect x='60' y='40' height='20' width='100' rx='8' ry='8' class='literal'/>
    <text x='110' y='55' text-anchor='middle' class='literal'>_Noreturn</text>
    <path d='M180 30 v10'/>
    <path d='M160 50 h10 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M180 30 q0 -10 10 -10'/>
    <path d='M145 20 h65'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h65'/>
  </g>

  <g transform='translate(40 2650)'>
    <text x='-30' y='-10'>alignment-specifier:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M470.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='100' y='10' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='145' y='25' text-anchor='middle' class='literal'>_Alignas</text>
    <rect x='210' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='220' y='25' text-anchor='middle' class='literal'>(</text>
    <rect x='250' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='295' y='25' text-anchor='middle' class='rule'>type-name</text>
    <rect x='360' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='370' y='25' text-anchor='middle' class='literal'>)</text>
    <rect x='60' y='40' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='105' y='55' text-anchor='middle' class='literal'>_Alignas</text>
    <rect x='170' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='180' y='55' text-anchor='middle' class='literal'>(</text>
    <rect x='210' y='40' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='295' y='55' text-anchor='middle' class='rule'>constant-expression</text>
    <rect x='400' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='410' y='55' text-anchor='middle' class='literal'>)</text>
    <path d='M440 30 v10'/>
    <path d='M420 50 h10 q10 0 10 -10'/>
    <path d='M380 50 h20'/>
    <path d='M190 50 h20'/>
    <path d='M150 50 h20'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M440 30 q0 -10 10 -10'/>
    <path d='M380 20 h90'/>
    <path d='M340 20 h20'/>
    <path d='M230 20 h20'/>
    <path d='M190 20 h20'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h90'/>
  </g>

  <g transform='translate(40 2760)'>
    <text x='-30' y='-10'>pointer:</text>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M450.5 34 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='40' y='45' text-anchor='middle' class='literal'>*</text>
    <path d='M177 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='100' y='30' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='175' y='45' text-anchor='middle' class='rule'>type-qualifier-list</text>
    <path d='M367 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='330' y='30' height='20' width='70' rx='0' ry='0' class='rule'/>
    <text x='365' y='45' text-anchor='middle' class='rule'>pointer</text>
    <path d='M310 20 v10'/>
    <path d='M420 30 q0 10 10 10'/>
    <path d='M400 40 h50'/>
    <path d='M300 40 q10 0 10 -10'/>
    <path d='M310 20 q0 -10 10 -10 h90 q10 0 10 10 v10'/>
    <path d='M80 20 v10'/>
    <path d='M270 30 q0 10 10 10'/>
    <path d='M250 40 h80'/>
    <path d='M70 40 q10 0 10 -10'/>
    <path d='M80 20 q0 -10 10 -10 h170 q10 0 10 10 v10'/>
    <path d='M50 40 h50'/>
    <path d='M10 40 h20'/>
  </g>

  <g transform='translate(40 2860)'>
    <text x='-30' y='-10'>direct-declarator:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M870.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='395' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='440' y='25' text-anchor='middle' class='rule'>identifier</text>
    <rect x='355' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='365' y='55' text-anchor='middle' class='literal'>(</text>
    <rect x='395' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='440' y='55' text-anchor='middle' class='rule'>declarator</text>
    <rect x='505' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='515' y='55' text-anchor='middle' class='literal'>)</text>
    <rect x='275' y='90' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='350' y='105' text-anchor='middle' class='rule'>direct-declarator</text>
    <rect x='445' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='455' y='105' text-anchor='middle' class='literal'>[</text>
    <path d='M527 70 l-4 3 v-6 z' class='arrow'/>
    <rect x='515' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='525' y='105' text-anchor='middle' class='literal'>*</text>
    <rect x='585' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='595' y='105' text-anchor='middle' class='literal'>]</text>
    <rect x='60' y='140' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='155' text-anchor='middle' class='rule'>direct-declarator</text>
    <rect x='230' y='140' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='240' y='155' text-anchor='middle' class='literal'>[</text>
    <rect x='270' y='140' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='305' y='155' text-anchor='middle' class='literal'>static</text>
    <path d='M467 120 l-4 3 v-6 z' class='arrow'/>
    <rect x='390' y='140' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='465' y='155' text-anchor='middle' class='rule'>type-qualifier-list</text>
    <rect x='590' y='140' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='685' y='155' text-anchor='middle' class='rule'>assignment-expression</text>
    <rect x='800' y='140' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='810' y='155' text-anchor='middle' class='literal'>]</text>
    <rect x='190' y='190' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='265' y='205' text-anchor='middle' class='rule'>direct-declarator</text>
    <rect x='360' y='190' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='370' y='205' text-anchor='middle' class='literal'>[</text>
    <rect x='400' y='190' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='475' y='205' text-anchor='middle' class='rule'>type-qualifier-list</text>
    <path d='M612 170 l-4 3 v-6 z' class='arrow'/>
    <rect x='600' y='190' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='610' y='205' text-anchor='middle' class='literal'>*</text>
    <rect x='670' y='190' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='680' y='205' text-anchor='middle' class='literal'>]</text>
    <rect x='60' y='240' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='255' text-anchor='middle' class='rule'>direct-declarator</text>
    <rect x='230' y='240' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='240' y='255' text-anchor='middle' class='literal'>[</text>
    <rect x='270' y='240' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='345' y='255' text-anchor='middle' class='rule'>type-qualifier-list</text>
    <path d='M507 220 l-4 3 v-6 z' class='arrow'/>
    <rect x='470' y='240' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='505' y='255' text-anchor='middle' class='literal'>static</text>
    <rect x='590' y='240' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='685' y='255' text-anchor='middle' class='rule'>assignment-expression</text>
    <rect x='800' y='240' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='810' y='255' text-anchor='middle' class='literal'>]</text>
    <rect x='220' y='270' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='295' y='285' text-anchor='middle' class='rule'>direct-declarator</text>
    <rect x='390' y='270' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='400' y='285' text-anchor='middle' class='literal'>[</text>
    <rect x='430' y='270' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='525' y='285' text-anchor='middle' class='rule'>assignment-expression</text>
    <rect x='640' y='270' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='650' y='285' text-anchor='middle' class='literal'>]</text>
    <rect x='230' y='300' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='305' y='315' text-anchor='middle' class='rule'>direct-declarator</text>
    <rect x='400' y='300' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='410' y='315' text-anchor='middle' class='literal'>(</text>
    <rect x='440' y='300' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='525' y='315' text-anchor='middle' class='rule'>parameter-type-list</text>
    <rect x='630' y='300' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='640' y='315' text-anchor='middle' class='literal'>)</text>
    <rect x='260' y='330' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='335' y='345' text-anchor='middle' class='rule'>direct-declarator</text>
    <rect x='430' y='330' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='440' y='345' text-anchor='middle' class='literal'>(</text>
    <rect x='470' y='330' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='525' y='345' text-anchor='middle' class='rule'>identifier-list</text>
    <rect x='600' y='330' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='610' y='345' text-anchor='middle' class='literal'>)</text>
    <rect x='325' y='360' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='400' y='375' text-anchor='middle' class='rule'>direct-declarator</text>
    <rect x='495' y='360' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='505' y='375' text-anchor='middle' class='literal'>(</text>
    <rect x='535' y='360' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='545' y='375' text-anchor='middle' class='literal'>)</text>
    <path d='M840 30 v330'/>
    <path d='M555 370 h275 q10 0 10 -10'/>
    <path d='M515 370 h20'/>
    <path d='M475 370 h20'/>
    <path d='M40 360 q0 10 10 10 h275'/>
    <path d='M620 340 h210 q10 0 10 -10'/>
    <path d='M580 340 h20'/>
    <path d='M450 340 h20'/>
    <path d='M410 340 h20'/>
    <path d='M40 330 q0 10 10 10 h210'/>
    <path d='M650 310 h180 q10 0 10 -10'/>
    <path d='M610 310 h20'/>
    <path d='M420 310 h20'/>
    <path d='M380 310 h20'/>
    <path d='M40 300 q0 10 10 10 h180'/>
    <path d='M660 280 h170 q10 0 10 -10'/>
    <path d='M620 280 h20'/>
    <path d='M410 280 h20'/>
    <path d='M370 280 h20'/>
    <path d='M40 270 q0 10 10 10 h170'/>
    <path d='M820 250 h10 q10 0 10 -10'/>
    <path d='M780 250 h20'/>
    <path d='M450 230 v10'/>
    <path d='M560 240 q0 10 10 10'/>
    <path d='M540 250 h50'/>
    <path d='M440 250 q10 0 10 -10'/>
    <path d='M450 230 q0 -10 10 -10 h90 q10 0 10 10 v10'/>
    <path d='M420 250 h50'/>
    <path d='M250 250 h20'/>
    <path d='M210 250 h20'/>
    <path d='M40 240 q0 10 10 10 h10'/>
    <path d='M690 200 h140 q10 0 10 -10'/>
    <path d='M580 180 v10'/>
    <path d='M640 190 q0 10 10 10'/>
    <path d='M620 200 h50'/>
    <path d='M570 200 q10 0 10 -10'/>
    <path d='M580 180 q0 -10 10 -10 h40 q10 0 10 10 v10'/>
    <path d='M550 200 h50'/>
    <path d='M380 200 h20'/>
    <path d='M340 200 h20'/>
    <path d='M40 190 q0 10 10 10 h140'/>
    <path d='M820 150 h10 q10 0 10 -10'/>
    <path d='M780 150 h20'/>
    <path d='M370 130 v10'/>
    <path d='M560 140 q0 10 10 10'/>
    <path d='M540 150 h50'/>
    <path d='M360 150 q10 0 10 -10'/>
    <path d='M370 130 q0 -10 10 -10 h170 q10 0 10 10 v10'/>
    <path d='M340 150 h50'/>
    <path d='M250 150 h20'/>
    <path d='M210 150 h20'/>
    <path d='M40 140 q0 10 10 10 h10'/>
    <path d='M605 100 h225 q10 0 10 -10'/>
    <path d='M495 80 v10'/>
    <path d='M555 90 q0 10 10 10'/>
    <path d='M535 100 h50'/>
    <path d='M485 100 q10 0 10 -10'/>
    <path d='M495 80 q0 -10 10 -10 h40 q10 0 10 10 v10'/>
    <path d='M465 100 h50'/>
    <path d='M425 100 h20'/>
    <path d='M40 90 q0 10 10 10 h225'/>
    <path d='M525 50 h305 q10 0 10 -10'/>
    <path d='M485 50 h20'/>
    <path d='M375 50 h20'/>
    <path d='M40 40 q0 10 10 10 h305'/>
    <path d='M840 30 q0 -10 10 -10'/>
    <path d='M485 20 h385'/>
    <path d='M30 20 q10 0 10 10 v330'/>
    <path d='M10 20 h385'/>
  </g>

  <g transform='translate(40 3290)'>
    <text x='-30' y='-10'>identifier-list:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M200.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='25' text-anchor='middle' class='rule'>identifier</text>
    <rect x='95' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='105' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h45'/>
    <path d='M115 50 h45 q10 0 10 -10'/>
    <path d='M160 20 q10 0 10 10 v10'/>
    <path d='M150 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 3400)'>
    <text x='-30' y='-10'>initializer-list:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M280.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='25' text-anchor='middle' class='rule'>designative-initializer</text>
    <rect x='135' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='145' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h85'/>
    <path d='M155 50 h85 q10 0 10 -10'/>
    <path d='M240 20 q10 0 10 10 v10'/>
    <path d='M230 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 3510)'>
    <text x='-30' y='-10'>designative-initializer:</text>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M310.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M107 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='60' y='30' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='45' text-anchor='middle' class='rule'>designation</text>
    <rect x='200' y='30' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='245' y='45' text-anchor='middle' class='rule'>initializer</text>
    <path d='M40 20 v10'/>
    <path d='M170 30 q0 10 10 10'/>
    <path d='M150 40 h50'/>
    <path d='M30 40 q10 0 10 -10'/>
    <path d='M40 20 q0 -10 10 -10 h110 q10 0 10 10 v10'/>
    <path d='M290 40 h20'/>
    <path d='M10 40 h50'/>
  </g>

  <g transform='translate(40 3610)'>
    <text x='-30' y='-10'>initializer:</text>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M400.5 34 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='45' text-anchor='middle' class='literal'>{</text>
    <rect x='100' y='30' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='155' y='45' text-anchor='middle' class='rule'>initializer-list</text>
    <path d='M272 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='260' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='270' y='45' text-anchor='middle' class='literal'>,</text>
    <rect x='330' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='340' y='45' text-anchor='middle' class='literal'>}</text>
    <rect x='110' y='60' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='205' y='75' text-anchor='middle' class='rule'>assignment-expression</text>
    <path d='M370 50 v10'/>
    <path d='M300 70 h60 q10 0 10 -10'/>
    <path d='M40 60 q0 10 10 10 h60'/>
    <path d='M370 50 q0 -10 10 -10'/>
    <path d='M350 40 h50'/>
    <path d='M240 20 v10'/>
    <path d='M300 30 q0 10 10 10'/>
    <path d='M280 40 h50'/>
    <path d='M230 40 q10 0 10 -10'/>
    <path d='M240 20 q0 -10 10 -10 h40 q10 0 10 10 v10'/>
    <path d='M210 40 h50'/>
    <path d='M80 40 h20'/>
    <path d='M30 40 q10 0 10 10 v10'/>
    <path d='M10 40 h50'/>
  </g>

  <g transform='translate(40 3740)'>
    <text x='-30' y='-10'>constant-expression:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M240.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='125' y='25' text-anchor='middle' class='rule'>conditional-expression</text>
    <path d='M220 20 h20'/>
    <path d='M10 20 h20'/>
  </g>

  <g transform='translate(40 3820)'>
    <text x='-30' y='-10'>atomic-type-specifier:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M320.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='10' height='20' width='80' rx='8' ry='8' class='literal'/>
    <text x='70' y='25' text-anchor='middle' class='literal'>_Atomic</text>
    <rect x='130' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='140' y='25' text-anchor='middle' class='literal'>(</text>
    <rect x='170' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='215' y='25' text-anchor='middle' class='rule'>type-name</text>
    <rect x='280' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='290' y='25' text-anchor='middle' class='literal'>)</text>
    <path d='M260 20 h20'/>
    <path d='M150 20 h20'/>
    <path d='M110 20 h20'/>
    <path d='M300 20 h20'/>
    <path d='M10 20 h20'/>
  </g>

  <g transform='translate(40 3900)'>
    <text x='-30' y='-10'>struct-or-union-specifier:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M680.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='145' y='10' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='210' y='25' text-anchor='middle' class='rule'>struct-or-union</text>
    <rect x='295' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='305' y='25' text-anchor='middle' class='literal'>{</text>
    <rect x='335' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='420' y='25' text-anchor='middle' class='rule'>struct-declaration-list</text>
    <rect x='525' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='535' y='25' text-anchor='middle' class='literal'>}</text>
    <rect x='60' y='60' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='125' y='75' text-anchor='middle' class='rule'>struct-or-union</text>
    <rect x='210' y='60' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='255' y='75' text-anchor='middle' class='rule'>identifier</text>
    <path d='M477 40 l-4 3 v-6 z' class='arrow'/>
    <rect x='350' y='60' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='360' y='75' text-anchor='middle' class='literal'>{</text>
    <rect x='390' y='60' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='475' y='75' text-anchor='middle' class='rule'>struct-declaration-list</text>
    <rect x='580' y='60' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='590' y='75' text-anchor='middle' class='literal'>}</text>
    <path d='M650 30 v30'/>
    <path d='M330 50 v10'/>
    <path d='M620 60 q0 10 10 10'/>
    <path d='M600 70 h40 q10 0 10 -10'/>
    <path d='M560 70 h20'/>
    <path d='M370 70 h20'/>
    <path d='M320 70 q10 0 10 -10'/>
    <path d='M330 50 q0 -10 10 -10 h270 q10 0 10 10 v10'/>
    <path d='M300 70 h50'/>
    <path d='M190 70 h20'/>
    <path d='M40 60 q0 10 10 10 h10'/>
    <path d='M650 30 q0 -10 10 -10'/>
    <path d='M545 20 h135'/>
    <path d='M505 20 h20'/>
    <path d='M315 20 h20'/>
    <path d='M275 20 h20'/>
    <path d='M30 20 q10 0 10 10 v30'/>
    <path d='M10 20 h135'/>
  </g>

  <g transform='translate(40 4030)'>
    <text x='-30' y='-10'>struct-or-union:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M180.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='95' y='25' text-anchor='middle' class='literal'>struct</text>
    <rect x='65' y='40' height='20' width='60' rx='8' ry='8' class='literal'/>
    <text x='95' y='55' text-anchor='middle' class='literal'>union</text>
    <path d='M150 30 v10'/>
    <path d='M125 50 h15 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h15'/>
    <path d='M150 30 q0 -10 10 -10'/>
    <path d='M130 20 h50'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 4140)'>
    <text x='-30' y='-10'>struct-declaration-list:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M260.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='25' text-anchor='middle' class='rule'>struct-declaration</text>
    <path d='M133 40 l4 3 v-6 z' class='arrow'/>
    <path d='M40 30 v0 q0 10 10 10 h170 q10 0 10 -10 v0'/>
    <path d='M220 20 q10 0 10 10'/>
    <path d='M210 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 4240)'>
    <text x='-30' y='-10'>struct-declaration:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M530.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='155' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='250' y='25' text-anchor='middle' class='rule'>specifier-qualifier-list</text>
    <rect x='365' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='375' y='25' text-anchor='middle' class='literal'>;</text>
    <rect x='60' y='40' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='155' y='55' text-anchor='middle' class='rule'>specifier-qualifier-list</text>
    <rect x='270' y='40' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='355' y='55' text-anchor='middle' class='rule'>struct-declarator-list</text>
    <rect x='460' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='470' y='55' text-anchor='middle' class='literal'>;</text>
    <rect x='175' y='70' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='270' y='85' text-anchor='middle' class='rule'>static-assert-declaration</text>
    <path d='M500 30 v40'/>
    <path d='M365 80 h125 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h125'/>
    <path d='M480 50 h10 q10 0 10 -10'/>
    <path d='M440 50 h20'/>
    <path d='M250 50 h20'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M500 30 q0 -10 10 -10'/>
    <path d='M385 20 h145'/>
    <path d='M345 20 h20'/>
    <path d='M30 20 q10 0 10 10 v40'/>
    <path d='M10 20 h145'/>
  </g>

  <g transform='translate(40 4380)'>
    <text x='-30' y='-10'>enum-specifier:</text>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M660.5 34 v12 m 4 0 v-12' class='station'/>
    <rect x='145' y='30' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='170' y='45' text-anchor='middle' class='literal'>enum</text>
    <rect x='215' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='225' y='45' text-anchor='middle' class='literal'>{</text>
    <rect x='255' y='30' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='320' y='45' text-anchor='middle' class='rule'>enumerator-list</text>
    <path d='M447 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='435' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='445' y='45' text-anchor='middle' class='literal'>,</text>
    <rect x='505' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='515' y='45' text-anchor='middle' class='literal'>}</text>
    <rect x='60' y='100' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='85' y='115' text-anchor='middle' class='literal'>enum</text>
    <rect x='130' y='100' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='175' y='115' text-anchor='middle' class='rule'>identifier</text>
    <path d='M427 60 l-4 3 v-6 z' class='arrow'/>
    <rect x='270' y='100' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='280' y='115' text-anchor='middle' class='literal'>{</text>
    <rect x='310' y='100' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='375' y='115' text-anchor='middle' class='rule'>enumerator-list</text>
    <path d='M502 80 l-4 3 v-6 z' class='arrow'/>
    <rect x='490' y='100' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='500' y='115' text-anchor='middle' class='literal'>,</text>
    <rect x='560' y='100' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='570' y='115' text-anchor='middle' class='literal'>}</text>
    <path d='M630 50 v50'/>
    <path d='M250 70 v30'/>
    <path d='M600 100 q0 10 10 10'/>
    <path d='M580 110 h40 q10 0 10 -10'/>
    <path d='M470 90 v10'/>
    <path d='M530 100 q0 10 10 10'/>
    <path d='M510 110 h50'/>
    <path d='M460 110 q10 0 10 -10'/>
    <path d='M470 90 q0 -10 10 -10 h40 q10 0 10 10 v10'/>
    <path d='M440 110 h50'/>
    <path d='M290 110 h20'/>
    <path d='M240 110 q10 0 10 -10'/>
    <path d='M250 70 q0 -10 10 -10 h330 q10 0 10 10 v30'/>
    <path d='M220 110 h50'/>
    <path d='M110 110 h20'/>
    <path d='M40 100 q0 10 10 10 h10'/>
    <path d='M630 50 q0 -10 10 -10'/>
    <path d='M525 40 h135'/>
    <path d='M415 20 v10'/>
    <path d='M475 30 q0 10 10 10'/>
    <path d='M455 40 h50'/>
    <path d='M405 40 q10 0 10 -10'/>
    <path d='M415 20 q0 -10 10 -10 h40 q10 0 10 10 v10'/>
    <path d='M385 40 h50'/>
    <path d='M235 40 h20'/>
    <path d='M195 40 h20'/>
    <path d='M30 40 q10 0 10 10 v50'/>
    <path d='M10 40 h135'/>
  </g>

  <g transform='translate(40 4550)'>
    <text x='-30' y='-10'>enumerator-list:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M220.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='115' y='25' text-anchor='middle' class='rule'>enumerator</text>
    <rect x='105' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='115' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h55'/>
    <path d='M125 50 h55 q10 0 10 -10'/>
    <path d='M180 20 q10 0 10 10 v10'/>
    <path d='M170 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 4660)'>
    <text x='-30' y='-10'>enumerator:</text>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M510.5 34 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='30' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='115' y='45' text-anchor='middle' class='rule'>enumeration-constant</text>
    <path d='M357 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='250' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='260' y='45' text-anchor='middle' class='literal'>=</text>
    <rect x='290' y='30' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='375' y='45' text-anchor='middle' class='rule'>constant-expression</text>
    <path d='M230 20 v10'/>
    <path d='M480 30 q0 10 10 10'/>
    <path d='M460 40 h50'/>
    <path d='M270 40 h20'/>
    <path d='M220 40 q10 0 10 -10'/>
    <path d='M230 20 q0 -10 10 -10 h230 q10 0 10 10 v10'/>
    <path d='M200 40 h50'/>
    <path d='M10 40 h20'/>
  </g>

  <g transform='translate(40 4760)'>
    <text x='-30' y='-10'>enumeration-constant:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M140.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='75' y='25' text-anchor='middle' class='rule'>identifier</text>
    <path d='M120 20 h20'/>
    <path d='M10 20 h20'/>
  </g>

  <g transform='translate(40 4840)'>
    <text x='-30' y='-10'>type-name:</text>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M470.5 34 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='30' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='125' y='45' text-anchor='middle' class='rule'>specifier-qualifier-list</text>
    <path d='M347 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='270' y='30' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='345' y='45' text-anchor='middle' class='rule'>abstract-declarator</text>
    <path d='M250 20 v10'/>
    <path d='M440 30 q0 10 10 10'/>
    <path d='M420 40 h50'/>
    <path d='M240 40 q10 0 10 -10'/>
    <path d='M250 20 q0 -10 10 -10 h170 q10 0 10 10 v10'/>
    <path d='M220 40 h50'/>
    <path d='M10 40 h20'/>
  </g>

  <g transform='translate(40 4940)'>
    <text x='-30' y='-10'>specifier-qualifier-list:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M260.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='25' text-anchor='middle' class='rule'>specifier-qualifier</text>
    <path d='M133 40 l4 3 v-6 z' class='arrow'/>
    <path d='M40 30 v0 q0 10 10 10 h170 q10 0 10 -10 v0'/>
    <path d='M220 20 q10 0 10 10'/>
    <path d='M210 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 5040)'>
    <text x='-30' y='-10'>specifier-qualifier:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M220.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='115' y='25' text-anchor='middle' class='rule'>type-specifier</text>
    <rect x='60' y='40' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='115' y='55' text-anchor='middle' class='rule'>type-qualifier</text>
    <path d='M190 30 v10'/>
    <path d='M170 50 h10 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M190 30 q0 -10 10 -10'/>
    <path d='M170 20 h50'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 5150)'>
    <text x='-30' y='-10'>abstract-declarator:</text>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M470.5 34 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='30' height='20' width='70' rx='0' ry='0' class='rule'/>
    <text x='95' y='45' text-anchor='middle' class='rule'>pointer</text>
    <path d='M287 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='180' y='30' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='285' y='45' text-anchor='middle' class='rule'>direct-abstract-declarator</text>
    <rect x='135' y='60' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='240' y='75' text-anchor='middle' class='rule'>direct-abstract-declarator</text>
    <path d='M440 50 v10'/>
    <path d='M345 70 h85 q10 0 10 -10'/>
    <path d='M40 60 q0 10 10 10 h85'/>
    <path d='M440 50 q0 -10 10 -10'/>
    <path d='M160 20 v10'/>
    <path d='M410 30 q0 10 10 10'/>
    <path d='M390 40 h80'/>
    <path d='M150 40 q10 0 10 -10'/>
    <path d='M160 20 q0 -10 10 -10 h230 q10 0 10 10 v10'/>
    <path d='M130 40 h50'/>
    <path d='M30 40 q10 0 10 10 v10'/>
    <path d='M10 40 h50'/>
  </g>

  <g transform='translate(40 5280)'>
    <text x='-30' y='-10'>direct-abstract-declarator:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M990.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='385' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='395' y='25' text-anchor='middle' class='literal'>(</text>
    <rect x='425' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='500' y='25' text-anchor='middle' class='rule'>abstract-declarator</text>
    <rect x='595' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='605' y='25' text-anchor='middle' class='literal'>)</text>
    <rect x='375' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='385' y='55' text-anchor='middle' class='literal'>(</text>
    <rect x='415' y='40' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='500' y='55' text-anchor='middle' class='rule'>parameter-type-list</text>
    <rect x='605' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='615' y='55' text-anchor='middle' class='literal'>)</text>
    <rect x='470' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='480' y='85' text-anchor='middle' class='literal'>(</text>
    <rect x='510' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='520' y='85' text-anchor='middle' class='literal'>)</text>
    <rect x='420' y='120' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='430' y='135' text-anchor='middle' class='literal'>[</text>
    <path d='M502 100 l-4 3 v-6 z' class='arrow'/>
    <rect x='490' y='120' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='500' y='135' text-anchor='middle' class='literal'>*</text>
    <rect x='560' y='120' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='570' y='135' text-anchor='middle' class='literal'>]</text>
    <rect x='205' y='170' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='215' y='185' text-anchor='middle' class='literal'>[</text>
    <rect x='245' y='170' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='280' y='185' text-anchor='middle' class='literal'>static</text>
    <path d='M442 150 l-4 3 v-6 z' class='arrow'/>
    <rect x='365' y='170' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='440' y='185' text-anchor='middle' class='rule'>type-qualifier-list</text>
    <rect x='565' y='170' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='660' y='185' text-anchor='middle' class='rule'>assignment-expression</text>
    <rect x='775' y='170' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='785' y='185' text-anchor='middle' class='literal'>]</text>
    <rect x='175' y='240' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='185' y='255' text-anchor='middle' class='literal'>[</text>
    <rect x='215' y='240' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='290' y='255' text-anchor='middle' class='rule'>type-qualifier-list</text>
    <path d='M587 200 l-4 3 v-6 z' class='arrow'/>
    <path d='M482 220 l-4 3 v-6 z' class='arrow'/>
    <rect x='445' y='240' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='480' y='255' text-anchor='middle' class='literal'>static</text>
    <rect x='565' y='240' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='660' y='255' text-anchor='middle' class='rule'>assignment-expression</text>
    <rect x='805' y='240' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='815' y='255' text-anchor='middle' class='literal'>]</text>
    <rect x='365' y='270' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='375' y='285' text-anchor='middle' class='literal'>[</text>
    <rect x='405' y='270' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='500' y='285' text-anchor='middle' class='rule'>assignment-expression</text>
    <rect x='615' y='270' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='625' y='285' text-anchor='middle' class='literal'>]</text>
    <rect x='305' y='320' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='410' y='335' text-anchor='middle' class='rule'>direct-abstract-declarator</text>
    <rect x='535' y='320' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='545' y='335' text-anchor='middle' class='literal'>[</text>
    <path d='M617 300 l-4 3 v-6 z' class='arrow'/>
    <rect x='605' y='320' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='615' y='335' text-anchor='middle' class='literal'>*</text>
    <rect x='675' y='320' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='685' y='335' text-anchor='middle' class='literal'>]</text>
    <rect x='90' y='370' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='195' y='385' text-anchor='middle' class='rule'>direct-abstract-declarator</text>
    <rect x='320' y='370' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='330' y='385' text-anchor='middle' class='literal'>[</text>
    <rect x='360' y='370' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='395' y='385' text-anchor='middle' class='literal'>static</text>
    <path d='M557 350 l-4 3 v-6 z' class='arrow'/>
    <rect x='480' y='370' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='555' y='385' text-anchor='middle' class='rule'>type-qualifier-list</text>
    <rect x='680' y='370' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='775' y='385' text-anchor='middle' class='rule'>assignment-expression</text>
    <rect x='890' y='370' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='900' y='385' text-anchor='middle' class='literal'>]</text>
    <rect x='60' y='440' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='165' y='455' text-anchor='middle' class='rule'>direct-abstract-declarator</text>
    <rect x='290' y='440' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='300' y='455' text-anchor='middle' class='literal'>[</text>
    <rect x='330' y='440' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='405' y='455' text-anchor='middle' class='rule'>type-qualifier-list</text>
    <path d='M702 400 l-4 3 v-6 z' class='arrow'/>
    <path d='M597 420 l-4 3 v-6 z' class='arrow'/>
    <rect x='560' y='440' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='595' y='455' text-anchor='middle' class='literal'>static</text>
    <rect x='680' y='440' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='775' y='455' text-anchor='middle' class='rule'>assignment-expression</text>
    <rect x='920' y='440' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='930' y='455' text-anchor='middle' class='literal'>]</text>
    <rect x='250' y='470' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='355' y='485' text-anchor='middle' class='rule'>direct-abstract-declarator</text>
    <rect x='480' y='470' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='490' y='485' text-anchor='middle' class='literal'>[</text>
    <rect x='520' y='470' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='615' y='485' text-anchor='middle' class='rule'>assignment-expression</text>
    <rect x='730' y='470' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='740' y='485' text-anchor='middle' class='literal'>]</text>
    <rect x='260' y='500' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='365' y='515' text-anchor='middle' class='rule'>direct-abstract-declarator</text>
    <rect x='490' y='500' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='500' y='515' text-anchor='middle' class='literal'>(</text>
    <rect x='530' y='500' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='615' y='515' text-anchor='middle' class='rule'>parameter-type-list</text>
    <rect x='720' y='500' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='730' y='515' text-anchor='middle' class='literal'>)</text>
    <rect x='355' y='530' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='460' y='545' text-anchor='middle' class='rule'>direct-abstract-declarator</text>
    <rect x='585' y='530' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='595' y='545' text-anchor='middle' class='literal'>(</text>
    <rect x='625' y='530' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='635' y='545' text-anchor='middle' class='literal'>)</text>
    <path d='M960 30 v500'/>
    <path d='M645 540 h305 q10 0 10 -10'/>
    <path d='M605 540 h20'/>
    <path d='M565 540 h20'/>
    <path d='M40 530 q0 10 10 10 h305'/>
    <path d='M740 510 h210 q10 0 10 -10'/>
    <path d='M700 510 h20'/>
    <path d='M510 510 h20'/>
    <path d='M470 510 h20'/>
    <path d='M40 500 q0 10 10 10 h210'/>
    <path d='M750 480 h200 q10 0 10 -10'/>
    <path d='M710 480 h20'/>
    <path d='M500 480 h20'/>
    <path d='M460 480 h20'/>
    <path d='M40 470 q0 10 10 10 h200'/>
    <path d='M940 450 h10 q10 0 10 -10'/>
    <path d='M510 410 v30'/>
    <path d='M890 440 q0 10 10 10'/>
    <path d='M870 450 h50'/>
    <path d='M540 430 v10'/>
    <path d='M650 440 q0 10 10 10'/>
    <path d='M630 450 h50'/>
    <path d='M530 450 q10 0 10 -10'/>
    <path d='M540 430 q0 -10 10 -10 h90 q10 0 10 10 v10'/>
    <path d='M500 450 q10 0 10 -10'/>
    <path d='M510 410 q0 -10 10 -10 h360 q10 0 10 10 v30'/>
    <path d='M480 450 h80'/>
    <path d='M310 450 h20'/>
    <path d='M270 450 h20'/>
    <path d='M40 440 q0 10 10 10 h10'/>
    <path d='M910 380 h40 q10 0 10 -10'/>
    <path d='M870 380 h20'/>
    <path d='M460 360 v10'/>
    <path d='M650 370 q0 10 10 10'/>
    <path d='M630 380 h50'/>
    <path d='M450 380 q10 0 10 -10'/>
    <path d='M460 360 q0 -10 10 -10 h170 q10 0 10 10 v10'/>
    <path d='M430 380 h50'/>
    <path d='M340 380 h20'/>
    <path d='M300 380 h20'/>
    <path d='M40 370 q0 10 10 10 h40'/>
    <path d='M695 330 h255 q10 0 10 -10'/>
    <path d='M585 310 v10'/>
    <path d='M645 320 q0 10 10 10'/>
    <path d='M625 330 h50'/>
    <path d='M575 330 q10 0 10 -10'/>
    <path d='M585 310 q0 -10 10 -10 h40 q10 0 10 10 v10'/>
    <path d='M555 330 h50'/>
    <path d='M515 330 h20'/>
    <path d='M40 320 q0 10 10 10 h255'/>
    <path d='M635 280 h315 q10 0 10 -10'/>
    <path d='M595 280 h20'/>
    <path d='M385 280 h20'/>
    <path d='M40 270 q0 10 10 10 h315'/>
    <path d='M825 250 h125 q10 0 10 -10'/>
    <path d='M395 210 v30'/>
    <path d='M775 240 q0 10 10 10'/>
    <path d='M755 250 h50'/>
    <path d='M425 230 v10'/>
    <path d='M535 240 q0 10 10 10'/>
    <path d='M515 250 h50'/>
    <path d='M415 250 q10 0 10 -10'/>
    <path d='M425 230 q0 -10 10 -10 h90 q10 0 10 10 v10'/>
    <path d='M385 250 q10 0 10 -10'/>
    <path d='M395 210 q0 -10 10 -10 h360 q10 0 10 10 v30'/>
    <path d='M365 250 h80'/>
    <path d='M195 250 h20'/>
    <path d='M40 240 q0 10 10 10 h125'/>
    <path d='M795 180 h155 q10 0 10 -10'/>
    <path d='M755 180 h20'/>
    <path d='M345 160 v10'/>
    <path d='M535 170 q0 10 10 10'/>
    <path d='M515 180 h50'/>
    <path d='M335 180 q10 0 10 -10'/>
    <path d='M345 160 q0 -10 10 -10 h170 q10 0 10 10 v10'/>
    <path d='M315 180 h50'/>
    <path d='M225 180 h20'/>
    <path d='M40 170 q0 10 10 10 h155'/>
    <path d='M580 130 h370 q10 0 10 -10'/>
    <path d='M470 110 v10'/>
    <path d='M530 120 q0 10 10 10'/>
    <path d='M510 130 h50'/>
    <path d='M460 130 q10 0 10 -10'/>
    <path d='M470 110 q0 -10 10 -10 h40 q10 0 10 10 v10'/>
    <path d='M440 130 h50'/>
    <path d='M40 120 q0 10 10 10 h370'/>
    <path d='M530 80 h420 q10 0 10 -10'/>
    <path d='M490 80 h20'/>
    <path d='M40 70 q0 10 10 10 h420'/>
    <path d='M625 50 h325 q10 0 10 -10'/>
    <path d='M585 50 h20'/>
    <path d='M395 50 h20'/>
    <path d='M40 40 q0 10 10 10 h325'/>
    <path d='M960 30 q0 -10 10 -10'/>
    <path d='M615 20 h375'/>
    <path d='M575 20 h20'/>
    <path d='M405 20 h20'/>
    <path d='M30 20 q10 0 10 10 v500'/>
    <path d='M10 20 h375'/>
  </g>

  <g transform='translate(40 5880)'>
    <text x='-30' y='-10'>struct-declarator-list:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M260.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='25' text-anchor='middle' class='rule'>struct-declarator</text>
    <rect x='125' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='135' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h75'/>
    <path d='M145 50 h75 q10 0 10 -10'/>
    <path d='M220 20 q10 0 10 10 v10'/>
    <path d='M210 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 5990)'>
    <text x='-30' y='-10'>type-qualifier-list:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M220.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='115' y='25' text-anchor='middle' class='rule'>type-qualifier</text>
    <path d='M113 40 l4 3 v-6 z' class='arrow'/>
    <path d='M40 30 v0 q0 10 10 10 h130 q10 0 10 -10 v0'/>
    <path d='M180 20 q10 0 10 10'/>
    <path d='M170 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 6090)'>
    <text x='-30' y='-10'>parameter-type-list:</text>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M340.5 34 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='30' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='95' y='45' text-anchor='middle' class='rule'>parameter-list</text>
    <path d='M252 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='210' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='220' y='45' text-anchor='middle' class='literal'>,</text>
    <rect x='250' y='30' height='20' width='40' rx='8' ry='8' class='literal'/>
    <text x='270' y='45' text-anchor='middle' class='literal'>...</text>
    <path d='M190 20 v10'/>
    <path d='M310 30 q0 10 10 10'/>
    <path d='M290 40 h50'/>
    <path d='M230 40 h20'/>
    <path d='M180 40 q10 0 10 -10'/>
    <path d='M190 20 q0 -10 10 -10 h100 q10 0 10 10 v10'/>
    <path d='M160 40 h50'/>
    <path d='M10 40 h20'/>
  </g>

  <g transform='translate(40 6190)'>
    <text x='-30' y='-10'>struct-declarator:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M490.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='145' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='155' y='25' text-anchor='middle' class='literal'>:</text>
    <rect x='185' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='270' y='25' text-anchor='middle' class='rule'>constant-expression</text>
    <rect x='60' y='60' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='75' text-anchor='middle' class='rule'>declarator</text>
    <path d='M307 40 l-4 3 v-6 z' class='arrow'/>
    <rect x='200' y='60' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='210' y='75' text-anchor='middle' class='literal'>:</text>
    <rect x='240' y='60' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='325' y='75' text-anchor='middle' class='rule'>constant-expression</text>
    <path d='M460 30 v30'/>
    <path d='M180 50 v10'/>
    <path d='M430 60 q0 10 10 10'/>
    <path d='M410 70 h40 q10 0 10 -10'/>
    <path d='M220 70 h20'/>
    <path d='M170 70 q10 0 10 -10'/>
    <path d='M180 50 q0 -10 10 -10 h230 q10 0 10 10 v10'/>
    <path d='M150 70 h50'/>
    <path d='M40 60 q0 10 10 10 h10'/>
    <path d='M460 30 q0 -10 10 -10'/>
    <path d='M355 20 h135'/>
    <path d='M165 20 h20'/>
    <path d='M30 20 q10 0 10 10 v30'/>
    <path d='M10 20 h135'/>
  </g>

  <g transform='translate(40 6320)'>
    <text x='-30' y='-10'>assignment-operator:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M150.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='70' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='80' y='25' text-anchor='middle' class='literal'>=</text>
    <rect x='65' y='40' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='80' y='55' text-anchor='middle' class='literal'>*=</text>
    <rect x='65' y='70' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='80' y='85' text-anchor='middle' class='literal'>/=</text>
    <rect x='65' y='100' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='80' y='115' text-anchor='middle' class='literal'>%=</text>
    <rect x='65' y='130' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='80' y='145' text-anchor='middle' class='literal'>+=</text>
    <rect x='65' y='160' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='80' y='175' text-anchor='middle' class='literal'>-=</text>
    <rect x='60' y='190' height='20' width='40' rx='8' ry='8' class='literal'/>
    <text x='80' y='205' text-anchor='middle' class='literal'>&lt;&lt;=</text>
    <rect x='60' y='220' height='20' width='40' rx='8' ry='8' class='literal'/>
    <text x='80' y='235' text-anchor='middle' class='literal'>&gt;&gt;=</text>
    <rect x='65' y='250' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='80' y='265' text-anchor='middle' class='literal'>&amp;=</text>
    <rect x='65' y='280' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='80' y='295' text-anchor='middle' class='literal'>^=</text>
    <rect x='65' y='310' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='80' y='325' text-anchor='middle' class='literal'>|=</text>
    <path d='M120 30 v280'/>
    <path d='M95 320 h15 q10 0 10 -10'/>
    <path d='M40 310 q0 10 10 10 h15'/>
    <path d='M95 290 h15 q10 0 10 -10'/>
    <path d='M40 280 q0 10 10 10 h15'/>
    <path d='M95 260 h15 q10 0 10 -10'/>
    <path d='M40 250 q0 10 10 10 h15'/>
    <path d='M100 230 h10 q10 0 10 -10'/>
    <path d='M40 220 q0 10 10 10 h10'/>
    <path d='M100 200 h10 q10 0 10 -10'/>
    <path d='M40 190 q0 10 10 10 h10'/>
    <path d='M95 170 h15 q10 0 10 -10'/>
    <path d='M40 160 q0 10 10 10 h15'/>
    <path d='M95 140 h15 q10 0 10 -10'/>
    <path d='M40 130 q0 10 10 10 h15'/>
    <path d='M95 110 h15 q10 0 10 -10'/>
    <path d='M40 100 q0 10 10 10 h15'/>
    <path d='M95 80 h15 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h15'/>
    <path d='M95 50 h15 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h15'/>
    <path d='M120 30 q0 -10 10 -10'/>
    <path d='M90 20 h60'/>
    <path d='M30 20 q10 0 10 10 v280'/>
    <path d='M10 20 h60'/>
  </g>

  <g transform='translate(40 6700)'>
    <text x='-30' y='-10'>parameter-list:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M280.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='25' text-anchor='middle' class='rule'>parameter-declaration</text>
    <rect x='135' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='145' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h85'/>
    <path d='M155 50 h85 q10 0 10 -10'/>
    <path d='M240 20 q10 0 10 10 v10'/>
    <path d='M230 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 6810)'>
    <text x='-30' y='-10'>parameter-declaration:</text>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M450.5 34 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='30' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='115' y='45' text-anchor='middle' class='rule'>declaration-specifiers</text>
    <path d='M327 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='280' y='30' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='325' y='45' text-anchor='middle' class='rule'>declarator</text>
    <rect x='250' y='60' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='325' y='75' text-anchor='middle' class='rule'>abstract-declarator</text>
    <path d='M420 50 v10'/>
    <path d='M230 20 v10'/>
    <path d='M400 70 h10 q10 0 10 -10'/>
    <path d='M230 60 q0 10 10 10 h10'/>
    <path d='M420 30 q0 10 10 10'/>
    <path d='M420 50 q0 -10 10 -10'/>
    <path d='M370 40 h80'/>
    <path d='M220 40 q10 0 10 10 v10'/>
    <path d='M220 40 q10 0 10 -10'/>
    <path d='M230 20 q0 -10 10 -10 h170 q10 0 10 10 v10'/>
    <path d='M200 40 h80'/>
    <path d='M10 40 h20'/>
  </g>

  <g transform='translate(40 6940)'>
    <text x='-30' y='-10'>expression:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M300.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='155' y='25' text-anchor='middle' class='rule'>assignment-expression</text>
    <rect x='145' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='155' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h95'/>
    <path d='M165 50 h95 q10 0 10 -10'/>
    <path d='M260 20 q10 0 10 10 v10'/>
    <path d='M250 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 7050)'>
    <text x='-30' y='-10'>assignment-expression:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M660.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='240' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='335' y='25' text-anchor='middle' class='rule'>conditional-expression</text>
    <rect x='60' y='40' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='55' text-anchor='middle' class='rule'>unary-expression</text>
    <rect x='230' y='40' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='315' y='55' text-anchor='middle' class='rule'>assignment-operator</text>
    <rect x='420' y='40' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='515' y='55' text-anchor='middle' class='rule'>assignment-expression</text>
    <path d='M630 30 v10'/>
    <path d='M610 50 h10 q10 0 10 -10'/>
    <path d='M400 50 h20'/>
    <path d='M210 50 h20'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M630 30 q0 -10 10 -10'/>
    <path d='M430 20 h230'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h230'/>
  </g>

  <g transform='translate(40 7160)'>
    <text x='-30' y='-10'>conditional-expression:</text>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M680.5 34 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='30' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='115' y='45' text-anchor='middle' class='rule'>logical-or-expression</text>
    <path d='M442 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='250' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='260' y='45' text-anchor='middle' class='literal'>?</text>
    <rect x='290' y='30' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='335' y='45' text-anchor='middle' class='rule'>expression</text>
    <rect x='400' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='410' y='45' text-anchor='middle' class='literal'>:</text>
    <rect x='440' y='30' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='535' y='45' text-anchor='middle' class='rule'>conditional-expression</text>
    <path d='M230 20 v10'/>
    <path d='M650 30 q0 10 10 10'/>
    <path d='M630 40 h50'/>
    <path d='M420 40 h20'/>
    <path d='M380 40 h20'/>
    <path d='M270 40 h20'/>
    <path d='M220 40 q10 0 10 -10'/>
    <path d='M230 20 q0 -10 10 -10 h400 q10 0 10 10 v10'/>
    <path d='M200 40 h50'/>
    <path d='M10 40 h20'/>
  </g>

  <g transform='translate(40 7260)'>
    <text x='-30' y='-10'>logical-or-expression:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M300.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='155' y='25' text-anchor='middle' class='rule'>logical-and-expression</text>
    <rect x='140' y='40' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='155' y='55' text-anchor='middle' class='literal'>||</text>
    <path d='M40 30 v10 q0 10 10 10 h90'/>
    <path d='M170 50 h90 q10 0 10 -10'/>
    <path d='M260 20 q10 0 10 10 v10'/>
    <path d='M250 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 7370)'>
    <text x='-30' y='-10'>logical-and-expression:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M300.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='155' y='25' text-anchor='middle' class='rule'>inclusive-or-expression</text>
    <rect x='140' y='40' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='155' y='55' text-anchor='middle' class='literal'>&amp;&amp;</text>
    <path d='M40 30 v10 q0 10 10 10 h90'/>
    <path d='M170 50 h90 q10 0 10 -10'/>
    <path d='M260 20 q10 0 10 10 v10'/>
    <path d='M250 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 7480)'>
    <text x='-30' y='-10'>inclusive-or-expression:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M300.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='155' y='25' text-anchor='middle' class='rule'>exclusive-or-expression</text>
    <rect x='145' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='155' y='55' text-anchor='middle' class='literal'>|</text>
    <path d='M40 30 v10 q0 10 10 10 h95'/>
    <path d='M165 50 h95 q10 0 10 -10'/>
    <path d='M260 20 q10 0 10 10 v10'/>
    <path d='M250 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 7590)'>
    <text x='-30' y='-10'>exclusive-or-expression:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M240.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='125' y='25' text-anchor='middle' class='rule'>and-expression</text>
    <rect x='115' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='125' y='55' text-anchor='middle' class='literal'>^</text>
    <path d='M40 30 v10 q0 10 10 10 h65'/>
    <path d='M135 50 h65 q10 0 10 -10'/>
    <path d='M200 20 q10 0 10 10 v10'/>
    <path d='M190 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 7700)'>
    <text x='-30' y='-10'>and-expression:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M260.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='25' text-anchor='middle' class='rule'>equality-expression</text>
    <rect x='125' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='135' y='55' text-anchor='middle' class='literal'>&amp;</text>
    <path d='M40 30 v10 q0 10 10 10 h75'/>
    <path d='M145 50 h75 q10 0 10 -10'/>
    <path d='M220 20 q10 0 10 10 v10'/>
    <path d='M210 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 7810)'>
    <text x='-30' y='-10'>equality-expression:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M280.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='25' text-anchor='middle' class='rule'>relational-expression</text>
    <rect x='130' y='40' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='145' y='55' text-anchor='middle' class='literal'>==</text>
    <rect x='130' y='70' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='145' y='85' text-anchor='middle' class='literal'>!=</text>
    <path d='M40 30 v10 q0 10 10 10 h80'/>
    <path d='M180 60 v10'/>
    <path d='M160 80 h10 q10 0 10 -10'/>
    <path d='M110 70 q0 10 10 10 h10'/>
    <path d='M180 60 q0 -10 10 -10'/>
    <path d='M160 50 h80 q10 0 10 -10'/>
    <path d='M100 50 q10 0 10 10 v10'/>
    <path d='M240 20 q10 0 10 10 v10'/>
    <path d='M230 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 7950)'>
    <text x='-30' y='-10'>relational-expression:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M240.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='125' y='25' text-anchor='middle' class='rule'>shift-expression</text>
    <rect x='115' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='125' y='55' text-anchor='middle' class='literal'>&lt;</text>
    <rect x='115' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='125' y='85' text-anchor='middle' class='literal'>&gt;</text>
    <rect x='110' y='100' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='125' y='115' text-anchor='middle' class='literal'>&lt;=</text>
    <rect x='110' y='130' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='125' y='145' text-anchor='middle' class='literal'>&gt;=</text>
    <path d='M40 30 v10 q0 10 10 10 h65'/>
    <path d='M160 60 v70'/>
    <path d='M140 140 h10 q10 0 10 -10'/>
    <path d='M90 130 q0 10 10 10 h10'/>
    <path d='M140 110 h10 q10 0 10 -10'/>
    <path d='M90 100 q0 10 10 10 h10'/>
    <path d='M135 80 h15 q10 0 10 -10'/>
    <path d='M90 70 q0 10 10 10 h15'/>
    <path d='M160 60 q0 -10 10 -10'/>
    <path d='M135 50 h65 q10 0 10 -10'/>
    <path d='M80 50 q10 0 10 10 v70'/>
    <path d='M200 20 q10 0 10 10 v10'/>
    <path d='M190 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 8150)'>
    <text x='-30' y='-10'>shift-expression:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M260.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='25' text-anchor='middle' class='rule'>additive-expression</text>
    <rect x='120' y='40' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='135' y='55' text-anchor='middle' class='literal'>&lt;&lt;</text>
    <rect x='120' y='70' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='135' y='85' text-anchor='middle' class='literal'>&gt;&gt;</text>
    <path d='M40 30 v10 q0 10 10 10 h70'/>
    <path d='M170 60 v10'/>
    <path d='M150 80 h10 q10 0 10 -10'/>
    <path d='M100 70 q0 10 10 10 h10'/>
    <path d='M170 60 q0 -10 10 -10'/>
    <path d='M150 50 h70 q10 0 10 -10'/>
    <path d='M90 50 q10 0 10 10 v10'/>
    <path d='M220 20 q10 0 10 10 v10'/>
    <path d='M210 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 8290)'>
    <text x='-30' y='-10'>additive-expression:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M300.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='155' y='25' text-anchor='middle' class='rule'>multiplicative-expression</text>
    <rect x='145' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='155' y='55' text-anchor='middle' class='literal'>+</text>
    <rect x='145' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='155' y='85' text-anchor='middle' class='literal'>-</text>
    <path d='M40 30 v10 q0 10 10 10 h95'/>
    <path d='M185 60 v10'/>
    <path d='M165 80 h10 q10 0 10 -10'/>
    <path d='M125 70 q0 10 10 10 h10'/>
    <path d='M185 60 q0 -10 10 -10'/>
    <path d='M165 50 h95 q10 0 10 -10'/>
    <path d='M115 50 q10 0 10 10 v10'/>
    <path d='M260 20 q10 0 10 10 v10'/>
    <path d='M250 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 8430)'>
    <text x='-30' y='-10'>multiplicative-expression:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M240.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='125' y='25' text-anchor='middle' class='rule'>cast-expression</text>
    <rect x='115' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='125' y='55' text-anchor='middle' class='literal'>%</text>
    <rect x='115' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='125' y='85' text-anchor='middle' class='literal'>*</text>
    <rect x='115' y='100' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='125' y='115' text-anchor='middle' class='literal'>/</text>
    <path d='M40 30 v10 q0 10 10 10 h65'/>
    <path d='M155 60 v40'/>
    <path d='M135 110 h10 q10 0 10 -10'/>
    <path d='M95 100 q0 10 10 10 h10'/>
    <path d='M135 80 h10 q10 0 10 -10'/>
    <path d='M95 70 q0 10 10 10 h10'/>
    <path d='M155 60 q0 -10 10 -10'/>
    <path d='M135 50 h65 q10 0 10 -10'/>
    <path d='M85 50 q10 0 10 10 v40'/>
    <path d='M200 20 q10 0 10 10 v10'/>
    <path d='M190 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 8600)'>
    <text x='-30' y='-10'>cast-expression:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M430.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='145' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='220' y='25' text-anchor='middle' class='rule'>unary-expression</text>
    <rect x='60' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='55' text-anchor='middle' class='literal'>(</text>
    <rect x='100' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='145' y='55' text-anchor='middle' class='rule'>type-name</text>
    <rect x='210' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='220' y='55' text-anchor='middle' class='literal'>)</text>
    <rect x='250' y='40' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='315' y='55' text-anchor='middle' class='rule'>cast-expression</text>
    <path d='M400 30 v10'/>
    <path d='M380 50 h10 q10 0 10 -10'/>
    <path d='M230 50 h20'/>
    <path d='M190 50 h20'/>
    <path d='M80 50 h20'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M400 30 q0 -10 10 -10'/>
    <path d='M295 20 h135'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h135'/>
  </g>

  <g transform='translate(40 8710)'>
    <text x='-30' y='-10'>unary-expression:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M390.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='125' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='200' y='25' text-anchor='middle' class='rule'>postfix-expression</text>
    <rect x='100' y='40' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='115' y='55' text-anchor='middle' class='literal'>++</text>
    <rect x='100' y='70' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='115' y='85' text-anchor='middle' class='literal'>--</text>
    <rect x='180' y='40' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='255' y='55' text-anchor='middle' class='rule'>unary-expression</text>
    <rect x='60' y='100' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='125' y='115' text-anchor='middle' class='rule'>unary-operator</text>
    <rect x='210' y='100' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='275' y='115' text-anchor='middle' class='rule'>cast-expression</text>
    <rect x='80' y='130' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='115' y='145' text-anchor='middle' class='literal'>sizeof</text>
    <rect x='170' y='130' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='245' y='145' text-anchor='middle' class='rule'>unary-expression</text>
    <rect x='70' y='160' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='105' y='175' text-anchor='middle' class='literal'>sizeof</text>
    <rect x='160' y='160' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='170' y='175' text-anchor='middle' class='literal'>(</text>
    <rect x='200' y='160' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='245' y='175' text-anchor='middle' class='rule'>type-name</text>
    <rect x='310' y='160' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='320' y='175' text-anchor='middle' class='literal'>)</text>
    <rect x='60' y='190' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='105' y='205' text-anchor='middle' class='literal'>_Alignof</text>
    <rect x='170' y='190' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='180' y='205' text-anchor='middle' class='literal'>(</text>
    <rect x='210' y='190' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='255' y='205' text-anchor='middle' class='rule'>type-name</text>
    <rect x='320' y='190' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='330' y='205' text-anchor='middle' class='literal'>)</text>
    <path d='M360 30 v160'/>
    <path d='M340 200 h10 q10 0 10 -10'/>
    <path d='M300 200 h20'/>
    <path d='M190 200 h20'/>
    <path d='M150 200 h20'/>
    <path d='M40 190 q0 10 10 10 h10'/>
    <path d='M330 170 h20 q10 0 10 -10'/>
    <path d='M290 170 h20'/>
    <path d='M180 170 h20'/>
    <path d='M140 170 h20'/>
    <path d='M40 160 q0 10 10 10 h20'/>
    <path d='M320 140 h30 q10 0 10 -10'/>
    <path d='M150 140 h20'/>
    <path d='M40 130 q0 10 10 10 h30'/>
    <path d='M340 110 h10 q10 0 10 -10'/>
    <path d='M190 110 h20'/>
    <path d='M40 100 q0 10 10 10 h10'/>
    <path d='M330 50 h20 q10 0 10 -10'/>
    <path d='M150 60 v10'/>
    <path d='M130 80 h10 q10 0 10 -10'/>
    <path d='M80 70 q0 10 10 10 h10'/>
    <path d='M150 60 q0 -10 10 -10'/>
    <path d='M130 50 h50'/>
    <path d='M70 50 q10 0 10 10 v10'/>
    <path d='M40 40 q0 10 10 10 h50'/>
    <path d='M360 30 q0 -10 10 -10'/>
    <path d='M275 20 h115'/>
    <path d='M30 20 q10 0 10 10 v160'/>
    <path d='M10 20 h115'/>
  </g>

  <g transform='translate(40 8970)'>
    <text x='-30' y='-10'>postfix-expression:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M630.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='235' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='320' y='25' text-anchor='middle' class='rule'>primary-expression</text>
    <rect x='150' y='40' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='225' y='55' text-anchor='middle' class='rule'>postfix-expression</text>
    <rect x='320' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='330' y='55' text-anchor='middle' class='literal'>[</text>
    <rect x='360' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='405' y='55' text-anchor='middle' class='rule'>expression</text>
    <rect x='470' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='480' y='55' text-anchor='middle' class='literal'>]</text>
    <rect x='60' y='90' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='105' text-anchor='middle' class='rule'>postfix-expression</text>
    <rect x='230' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='240' y='105' text-anchor='middle' class='literal'>(</text>
    <path d='M407 70 l-4 3 v-6 z' class='arrow'/>
    <rect x='300' y='90' height='20' width='210' rx='0' ry='0' class='rule'/>
    <text x='405' y='105' text-anchor='middle' class='rule'>argument-expression-list</text>
    <rect x='560' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='570' y='105' text-anchor='middle' class='literal'>)</text>
    <rect x='135' y='120' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='210' y='135' text-anchor='middle' class='rule'>postfix-expression</text>
    <rect x='340' y='120' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='350' y='135' text-anchor='middle' class='literal'>.</text>
    <rect x='335' y='150' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='350' y='165' text-anchor='middle' class='literal'>-&gt;</text>
    <rect x='415' y='120' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='460' y='135' text-anchor='middle' class='rule'>identifier</text>
    <rect x='190' y='180' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='265' y='195' text-anchor='middle' class='rule'>postfix-expression</text>
    <rect x='390' y='180' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='405' y='195' text-anchor='middle' class='literal'>++</text>
    <rect x='390' y='210' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='405' y='225' text-anchor='middle' class='literal'>--</text>
    <rect x='80' y='260' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='90' y='275' text-anchor='middle' class='literal'>(</text>
    <rect x='120' y='260' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='165' y='275' text-anchor='middle' class='rule'>type-name</text>
    <rect x='230' y='260' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='240' y='275' text-anchor='middle' class='literal'>)</text>
    <rect x='270' y='260' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='280' y='275' text-anchor='middle' class='literal'>{</text>
    <rect x='310' y='260' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='365' y='275' text-anchor='middle' class='rule'>initializer-list</text>
    <path d='M482 240 l-4 3 v-6 z' class='arrow'/>
    <rect x='470' y='260' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='480' y='275' text-anchor='middle' class='literal'>,</text>
    <rect x='540' y='260' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='550' y='275' text-anchor='middle' class='literal'>}</text>
    <path d='M600 30 v230'/>
    <path d='M560 270 h30 q10 0 10 -10'/>
    <path d='M450 250 v10'/>
    <path d='M510 260 q0 10 10 10'/>
    <path d='M490 270 h50'/>
    <path d='M440 270 q10 0 10 -10'/>
    <path d='M450 250 q0 -10 10 -10 h40 q10 0 10 10 v10'/>
    <path d='M420 270 h50'/>
    <path d='M290 270 h20'/>
    <path d='M250 270 h20'/>
    <path d='M210 270 h20'/>
    <path d='M100 270 h20'/>
    <path d='M40 260 q0 10 10 10 h30'/>
    <path d='M440 200 v10'/>
    <path d='M420 220 h10 q10 0 10 -10'/>
    <path d='M370 210 q0 10 10 10 h10'/>
    <path d='M440 200 q0 -10 10 -10'/>
    <path d='M420 190 h170 q10 0 10 -10'/>
    <path d='M360 190 q10 0 10 10 v10'/>
    <path d='M340 190 h50'/>
    <path d='M40 180 q0 10 10 10 h140'/>
    <path d='M505 130 h85 q10 0 10 -10'/>
    <path d='M385 140 v10'/>
    <path d='M365 160 h10 q10 0 10 -10'/>
    <path d='M315 150 q0 10 10 10 h10'/>
    <path d='M385 140 q0 -10 10 -10'/>
    <path d='M360 130 h55'/>
    <path d='M305 130 q10 0 10 10 v10'/>
    <path d='M285 130 h55'/>
    <path d='M40 120 q0 10 10 10 h85'/>
    <path d='M580 100 h10 q10 0 10 -10'/>
    <path d='M280 80 v10'/>
    <path d='M530 90 q0 10 10 10'/>
    <path d='M510 100 h50'/>
    <path d='M270 100 q10 0 10 -10'/>
    <path d='M280 80 q0 -10 10 -10 h230 q10 0 10 10 v10'/>
    <path d='M250 100 h50'/>
    <path d='M210 100 h20'/>
    <path d='M40 90 q0 10 10 10 h10'/>
    <path d='M490 50 h100 q10 0 10 -10'/>
    <path d='M450 50 h20'/>
    <path d='M340 50 h20'/>
    <path d='M300 50 h20'/>
    <path d='M40 40 q0 10 10 10 h100'/>
    <path d='M600 30 q0 -10 10 -10'/>
    <path d='M405 20 h225'/>
    <path d='M30 20 q10 0 10 10 v230'/>
    <path d='M10 20 h225'/>
  </g>

  <g transform='translate(40 9300)'>
    <text x='-30' y='-10'>unary-operator:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M130.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='25' text-anchor='middle' class='literal'>!</text>
    <rect x='60' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='55' text-anchor='middle' class='literal'>&amp;</text>
    <rect x='60' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='85' text-anchor='middle' class='literal'>*</text>
    <rect x='60' y='100' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='115' text-anchor='middle' class='literal'>+</text>
    <rect x='60' y='130' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='145' text-anchor='middle' class='literal'>-</text>
    <rect x='60' y='160' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='175' text-anchor='middle' class='literal'>~</text>
    <path d='M100 30 v130'/>
    <path d='M80 170 h10 q10 0 10 -10'/>
    <path d='M40 160 q0 10 10 10 h10'/>
    <path d='M80 140 h10 q10 0 10 -10'/>
    <path d='M40 130 q0 10 10 10 h10'/>
    <path d='M80 110 h10 q10 0 10 -10'/>
    <path d='M40 100 q0 10 10 10 h10'/>
    <path d='M80 80 h10 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h10'/>
    <path d='M80 50 h10 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M100 30 q0 -10 10 -10'/>
    <path d='M80 20 h50'/>
    <path d='M30 20 q10 0 10 10 v130'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 9530)'>
    <text x='-30' y='-10'>primary-expression:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M280.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='100' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='145' y='25' text-anchor='middle' class='rule'>identifier</text>
    <rect x='110' y='40' height='20' width='70' rx='0' ry='0' class='rule'/>
    <text x='145' y='55' text-anchor='middle' class='rule'>constant</text>
    <rect x='110' y='70' height='20' width='70' rx='0' ry='0' class='rule'/>
    <text x='145' y='85' text-anchor='middle' class='rule'>string</text>
    <rect x='60' y='100' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='115' text-anchor='middle' class='literal'>(</text>
    <rect x='100' y='100' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='145' y='115' text-anchor='middle' class='rule'>expression</text>
    <rect x='210' y='100' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='220' y='115' text-anchor='middle' class='literal'>)</text>
    <rect x='70' y='130' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='145' y='145' text-anchor='middle' class='rule'>generic-selection</text>
    <path d='M250 30 v100'/>
    <path d='M220 140 h20 q10 0 10 -10'/>
    <path d='M40 130 q0 10 10 10 h20'/>
    <path d='M230 110 h10 q10 0 10 -10'/>
    <path d='M190 110 h20'/>
    <path d='M80 110 h20'/>
    <path d='M40 100 q0 10 10 10 h10'/>
    <path d='M180 80 h60 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h60'/>
    <path d='M180 50 h60 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h60'/>
    <path d='M250 30 q0 -10 10 -10'/>
    <path d='M190 20 h90'/>
    <path d='M30 20 q10 0 10 10 v100'/>
    <path d='M10 20 h90'/>
  </g>

  <g transform='translate(40 9730)'>
    <text x='-30' y='-10'>argument-expression-list:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M300.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='155' y='25' text-anchor='middle' class='rule'>assignment-expression</text>
    <rect x='145' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='155' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h95'/>
    <path d='M165 50 h95 q10 0 10 -10'/>
    <path d='M260 20 q10 0 10 10 v10'/>
    <path d='M250 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 9840)'>
    <text x='-30' y='-10'>constant:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M280.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='80' y='10' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='145' y='25' text-anchor='middle' class='rule'>integer-constant</text>
    <rect x='70' y='40' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='145' y='55' text-anchor='middle' class='rule'>character-constant</text>
    <rect x='80' y='70' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='145' y='85' text-anchor='middle' class='rule'>floating-constant</text>
    <rect x='60' y='100' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='115' text-anchor='middle' class='rule'>enumeration-constant</text>
    <path d='M250 30 v70'/>
    <path d='M230 110 h10 q10 0 10 -10'/>
    <path d='M40 100 q0 10 10 10 h10'/>
    <path d='M210 80 h30 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h30'/>
    <path d='M220 50 h20 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h20'/>
    <path d='M250 30 q0 -10 10 -10'/>
    <path d='M210 20 h70'/>
    <path d='M30 20 q10 0 10 10 v70'/>
    <path d='M10 20 h70'/>
  </g>

  <g transform='translate(40 10010)'>
    <text x='-30' y='-10'>string:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M220.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='110' rx='0' ry='0' class='rule'/>
    <text x='115' y='25' text-anchor='middle' class='rule'>string-literal</text>
    <rect x='70' y='40' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='115' y='55' text-anchor='middle' class='literal'>__func__</text>
    <path d='M190 30 v10'/>
    <path d='M160 50 h20 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h20'/>
    <path d='M190 30 q0 -10 10 -10'/>
    <path d='M170 20 h50'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 10120)'>
    <text x='-30' y='-10'>generic-selection:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M640.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='10' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='75' y='25' text-anchor='middle' class='literal'>_Generic</text>
    <rect x='140' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='150' y='25' text-anchor='middle' class='literal'>(</text>
    <rect x='180' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='275' y='25' text-anchor='middle' class='rule'>assignment-expression</text>
    <rect x='390' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='400' y='25' text-anchor='middle' class='literal'>,</text>
    <rect x='430' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='505' y='25' text-anchor='middle' class='rule'>generic-assoc-list</text>
    <rect x='600' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='610' y='25' text-anchor='middle' class='literal'>)</text>
    <path d='M580 20 h20'/>
    <path d='M410 20 h20'/>
    <path d='M370 20 h20'/>
    <path d='M160 20 h20'/>
    <path d='M120 20 h20'/>
    <path d='M620 20 h20'/>
    <path d='M10 20 h20'/>
  </g>

  <g transform='translate(40 10200)'>
    <text x='-30' y='-10'>generic-assoc-list:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M260.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='135' y='25' text-anchor='middle' class='rule'>generic-association</text>
    <rect x='125' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='135' y='55' text-anchor='middle' class='literal'>,</text>
    <path d='M40 30 v10 q0 10 10 10 h75'/>
    <path d='M145 50 h75 q10 0 10 -10'/>
    <path d='M220 20 q10 0 10 10 v10'/>
    <path d='M210 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 10310)'>
    <text x='-30' y='-10'>generic-association:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M450.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='25' text-anchor='middle' class='rule'>type-name</text>
    <rect x='170' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='180' y='25' text-anchor='middle' class='literal'>:</text>
    <rect x='210' y='10' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='305' y='25' text-anchor='middle' class='rule'>assignment-expression</text>
    <rect x='65' y='40' height='20' width='80' rx='8' ry='8' class='literal'/>
    <text x='105' y='55' text-anchor='middle' class='literal'>default</text>
    <rect x='165' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='175' y='55' text-anchor='middle' class='literal'>:</text>
    <rect x='205' y='40' height='20' width='190' rx='0' ry='0' class='rule'/>
    <text x='300' y='55' text-anchor='middle' class='rule'>assignment-expression</text>
    <path d='M420 30 v10'/>
    <path d='M395 50 h15 q10 0 10 -10'/>
    <path d='M185 50 h20'/>
    <path d='M145 50 h20'/>
    <path d='M40 40 q0 10 10 10 h15'/>
    <path d='M420 30 q0 -10 10 -10'/>
    <path d='M400 20 h50'/>
    <path d='M190 20 h20'/>
    <path d='M150 20 h20'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 10420)'>
    <text x='-30' y='-10'>designation:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M220.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='30' y='10' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='95' y='25' text-anchor='middle' class='rule'>designator-list</text>
    <rect x='180' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='190' y='25' text-anchor='middle' class='literal'>=</text>
    <path d='M160 20 h20'/>
    <path d='M200 20 h20'/>
    <path d='M10 20 h20'/>
  </g>

  <g transform='translate(40 10500)'>
    <text x='-30' y='-10'>designator-list:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M200.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='25' text-anchor='middle' class='rule'>designator</text>
    <path d='M103 40 l4 3 v-6 z' class='arrow'/>
    <path d='M40 30 v0 q0 10 10 10 h110 q10 0 10 -10 v0'/>
    <path d='M160 20 q10 0 10 10'/>
    <path d='M150 20 h50'/>
    <path d='M40 30 q0 -10 10 -10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 10600)'>
    <text x='-30' y='-10'>designator:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M360.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='70' y='25' text-anchor='middle' class='literal'>[</text>
    <rect x='100' y='10' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='185' y='25' text-anchor='middle' class='rule'>constant-expression</text>
    <rect x='290' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='300' y='25' text-anchor='middle' class='literal'>]</text>
    <rect x='120' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='130' y='55' text-anchor='middle' class='literal'>.</text>
    <rect x='160' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='205' y='55' text-anchor='middle' class='rule'>identifier</text>
    <path d='M330 30 v10'/>
    <path d='M250 50 h70 q10 0 10 -10'/>
    <path d='M140 50 h20'/>
    <path d='M40 40 q0 10 10 10 h70'/>
    <path d='M330 30 q0 -10 10 -10'/>
    <path d='M310 20 h50'/>
    <path d='M270 20 h20'/>
    <path d='M80 20 h20'/>
    <path d='M30 20 q10 0 10 10 v10'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 10710)'>
    <text x='-30' y='-10'>statement:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M280.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='70' y='10' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='145' y='25' text-anchor='middle' class='rule'>labeled-statement</text>
    <rect x='60' y='40' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='55' text-anchor='middle' class='rule'>compound-statement</text>
    <rect x='60' y='70' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='145' y='85' text-anchor='middle' class='rule'>expression-statement</text>
    <rect x='70' y='100' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='145' y='115' text-anchor='middle' class='rule'>selection-statement</text>
    <rect x='70' y='130' height='20' width='150' rx='0' ry='0' class='rule'/>
    <text x='145' y='145' text-anchor='middle' class='rule'>iteration-statement</text>
    <rect x='80' y='160' height='20' width='130' rx='0' ry='0' class='rule'/>
    <text x='145' y='175' text-anchor='middle' class='rule'>jump-statement</text>
    <path d='M250 30 v130'/>
    <path d='M210 170 h30 q10 0 10 -10'/>
    <path d='M40 160 q0 10 10 10 h30'/>
    <path d='M220 140 h20 q10 0 10 -10'/>
    <path d='M40 130 q0 10 10 10 h20'/>
    <path d='M220 110 h20 q10 0 10 -10'/>
    <path d='M40 100 q0 10 10 10 h20'/>
    <path d='M230 80 h10 q10 0 10 -10'/>
    <path d='M40 70 q0 10 10 10 h10'/>
    <path d='M230 50 h10 q10 0 10 -10'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M250 30 q0 -10 10 -10'/>
    <path d='M220 20 h60'/>
    <path d='M30 20 q10 0 10 10 v130'/>
    <path d='M10 20 h60'/>
  </g>

  <g transform='translate(40 10940)'>
    <text x='-30' y='-10'>labeled-statement:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M500.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='135' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='180' y='25' text-anchor='middle' class='rule'>identifier</text>
    <rect x='245' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='255' y='25' text-anchor='middle' class='literal'>:</text>
    <rect x='285' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='330' y='25' text-anchor='middle' class='rule'>statement</text>
    <rect x='60' y='40' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='85' y='55' text-anchor='middle' class='literal'>case</text>
    <rect x='130' y='40' height='20' width='170' rx='0' ry='0' class='rule'/>
    <text x='215' y='55' text-anchor='middle' class='rule'>constant-expression</text>
    <rect x='320' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='330' y='55' text-anchor='middle' class='literal'>:</text>
    <rect x='360' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='405' y='55' text-anchor='middle' class='rule'>statement</text>
    <rect x='140' y='70' height='20' width='80' rx='8' ry='8' class='literal'/>
    <text x='180' y='85' text-anchor='middle' class='literal'>default</text>
    <rect x='240' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='250' y='85' text-anchor='middle' class='literal'>:</text>
    <rect x='280' y='70' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='325' y='85' text-anchor='middle' class='rule'>statement</text>
    <path d='M470 30 v40'/>
    <path d='M370 80 h90 q10 0 10 -10'/>
    <path d='M260 80 h20'/>
    <path d='M220 80 h20'/>
    <path d='M40 70 q0 10 10 10 h90'/>
    <path d='M450 50 h10 q10 0 10 -10'/>
    <path d='M340 50 h20'/>
    <path d='M300 50 h20'/>
    <path d='M110 50 h20'/>
    <path d='M40 40 q0 10 10 10 h10'/>
    <path d='M470 30 q0 -10 10 -10'/>
    <path d='M375 20 h125'/>
    <path d='M265 20 h20'/>
    <path d='M225 20 h20'/>
    <path d='M30 20 q10 0 10 10 v40'/>
    <path d='M10 20 h125'/>
  </g>

  <g transform='translate(40 11080)'>
    <text x='-30' y='-10'>expression-statement:</text>
    <path d='M5.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M240.5 34 v12 m 4 0 v-12' class='station'/>
    <path d='M107 10 l-4 3 v-6 z' class='arrow'/>
    <rect x='60' y='30' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='105' y='45' text-anchor='middle' class='rule'>expression</text>
    <rect x='200' y='30' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='210' y='45' text-anchor='middle' class='literal'>;</text>
    <path d='M40 20 v10'/>
    <path d='M170 30 q0 10 10 10'/>
    <path d='M150 40 h50'/>
    <path d='M30 40 q10 0 10 -10'/>
    <path d='M40 20 q0 -10 10 -10 h110 q10 0 10 10 v10'/>
    <path d='M220 40 h20'/>
    <path d='M10 40 h50'/>
  </g>

  <g transform='translate(40 11180)'>
    <text x='-30' y='-10'>selection-statement:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M620.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='60' y='10' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='75' y='25' text-anchor='middle' class='literal'>if</text>
    <rect x='110' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='120' y='25' text-anchor='middle' class='literal'>(</text>
    <rect x='150' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='195' y='25' text-anchor='middle' class='rule'>expression</text>
    <rect x='260' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='270' y='25' text-anchor='middle' class='literal'>)</text>
    <rect x='300' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='345' y='25' text-anchor='middle' class='rule'>statement</text>
    <rect x='410' y='10' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='435' y='25' text-anchor='middle' class='literal'>else</text>
    <rect x='480' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='525' y='25' text-anchor='middle' class='rule'>statement</text>
    <rect x='150' y='40' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='165' y='55' text-anchor='middle' class='literal'>if</text>
    <rect x='200' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='210' y='55' text-anchor='middle' class='literal'>(</text>
    <rect x='240' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='285' y='55' text-anchor='middle' class='rule'>expression</text>
    <rect x='350' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='360' y='55' text-anchor='middle' class='literal'>)</text>
    <rect x='390' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='435' y='55' text-anchor='middle' class='rule'>statement</text>
    <rect x='130' y='70' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='165' y='85' text-anchor='middle' class='literal'>switch</text>
    <rect x='220' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='230' y='85' text-anchor='middle' class='literal'>(</text>
    <rect x='260' y='70' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='305' y='85' text-anchor='middle' class='rule'>expression</text>
    <rect x='370' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='380' y='85' text-anchor='middle' class='literal'>)</text>
    <rect x='410' y='70' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='455' y='85' text-anchor='middle' class='rule'>statement</text>
    <path d='M590 30 v40'/>
    <path d='M500 80 h80 q10 0 10 -10'/>
    <path d='M390 80 h20'/>
    <path d='M350 80 h20'/>
    <path d='M240 80 h20'/>
    <path d='M200 80 h20'/>
    <path d='M40 70 q0 10 10 10 h80'/>
    <path d='M480 50 h100 q10 0 10 -10'/>
    <path d='M370 50 h20'/>
    <path d='M330 50 h20'/>
    <path d='M220 50 h20'/>
    <path d='M180 50 h20'/>
    <path d='M40 40 q0 10 10 10 h100'/>
    <path d='M590 30 q0 -10 10 -10'/>
    <path d='M570 20 h50'/>
    <path d='M460 20 h20'/>
    <path d='M390 20 h20'/>
    <path d='M280 20 h20'/>
    <path d='M240 20 h20'/>
    <path d='M130 20 h20'/>
    <path d='M90 20 h20'/>
    <path d='M30 20 q10 0 10 10 v40'/>
    <path d='M10 20 h50'/>
  </g>

  <g transform='translate(40 11320)'>
    <text x='-30' y='-10'>iteration-statement:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M930.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='290' y='10' height='20' width='60' rx='8' ry='8' class='literal'/>
    <text x='320' y='25' text-anchor='middle' class='literal'>while</text>
    <rect x='370' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='380' y='25' text-anchor='middle' class='literal'>(</text>
    <rect x='410' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='455' y='25' text-anchor='middle' class='rule'>expression</text>
    <rect x='520' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='530' y='25' text-anchor='middle' class='literal'>)</text>
    <rect x='560' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='605' y='25' text-anchor='middle' class='rule'>statement</text>
    <rect x='245' y='40' height='20' width='30' rx='8' ry='8' class='literal'/>
    <text x='260' y='55' text-anchor='middle' class='literal'>do</text>
    <rect x='295' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='340' y='55' text-anchor='middle' class='rule'>statement</text>
    <rect x='405' y='40' height='20' width='60' rx='8' ry='8' class='literal'/>
    <text x='435' y='55' text-anchor='middle' class='literal'>while</text>
    <rect x='485' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='495' y='55' text-anchor='middle' class='literal'>(</text>
    <rect x='525' y='40' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='570' y='55' text-anchor='middle' class='rule'>expression</text>
    <rect x='635' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='645' y='55' text-anchor='middle' class='literal'>)</text>
    <rect x='675' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='685' y='55' text-anchor='middle' class='literal'>;</text>
    <rect x='60' y='90' height='20' width='40' rx='8' ry='8' class='literal'/>
    <text x='80' y='105' text-anchor='middle' class='literal'>for</text>
    <rect x='120' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='130' y='105' text-anchor='middle' class='literal'>(</text>
    <path d='M237 70 l-4 3 v-6 z' class='arrow'/>
    <rect x='190' y='90' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='235' y='105' text-anchor='middle' class='rule'>expression</text>
    <rect x='330' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='340' y='105' text-anchor='middle' class='literal'>;</text>
    <path d='M447 70 l-4 3 v-6 z' class='arrow'/>
    <rect x='400' y='90' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='445' y='105' text-anchor='middle' class='rule'>expression</text>
    <rect x='540' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='550' y='105' text-anchor='middle' class='literal'>;</text>
    <path d='M657 70 l-4 3 v-6 z' class='arrow'/>
    <rect x='610' y='90' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='655' y='105' text-anchor='middle' class='rule'>expression</text>
    <rect x='750' y='90' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='760' y='105' text-anchor='middle' class='literal'>)</text>
    <rect x='790' y='90' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='835' y='105' text-anchor='middle' class='rule'>statement</text>
    <rect x='110' y='140' height='20' width='40' rx='8' ry='8' class='literal'/>
    <text x='130' y='155' text-anchor='middle' class='literal'>for</text>
    <rect x='170' y='140' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='180' y='155' text-anchor='middle' class='literal'>(</text>
    <rect x='210' y='140' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='255' y='155' text-anchor='middle' class='rule'>declaration</text>
    <path d='M397 120 l-4 3 v-6 z' class='arrow'/>
    <rect x='350' y='140' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='395' y='155' text-anchor='middle' class='rule'>expression</text>
    <rect x='490' y='140' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='500' y='155' text-anchor='middle' class='literal'>;</text>
    <path d='M607 120 l-4 3 v-6 z' class='arrow'/>
    <rect x='560' y='140' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='605' y='155' text-anchor='middle' class='rule'>expression</text>
    <rect x='700' y='140' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='710' y='155' text-anchor='middle' class='literal'>)</text>
    <rect x='740' y='140' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='785' y='155' text-anchor='middle' class='rule'>statement</text>
    <path d='M900 30 v110'/>
    <path d='M830 150 h60 q10 0 10 -10'/>
    <path d='M720 150 h20'/>
    <path d='M540 130 v10'/>
    <path d='M670 140 q0 10 10 10'/>
    <path d='M650 150 h50'/>
    <path d='M530 150 q10 0 10 -10'/>
    <path d='M540 130 q0 -10 10 -10 h110 q10 0 10 10 v10'/>
    <path d='M510 150 h50'/>
    <path d='M330 130 v10'/>
    <path d='M460 140 q0 10 10 10'/>
    <path d='M440 150 h50'/>
    <path d='M320 150 q10 0 10 -10'/>
    <path d='M330 130 q0 -10 10 -10 h110 q10 0 10 10 v10'/>
    <path d='M300 150 h50'/>
    <path d='M190 150 h20'/>
    <path d='M150 150 h20'/>
    <path d='M40 140 q0 10 10 10 h60'/>
    <path d='M880 100 h10 q10 0 10 -10'/>
    <path d='M770 100 h20'/>
    <path d='M590 80 v10'/>
    <path d='M720 90 q0 10 10 10'/>
    <path d='M700 100 h50'/>
    <path d='M580 100 q10 0 10 -10'/>
    <path d='M590 80 q0 -10 10 -10 h110 q10 0 10 10 v10'/>
    <path d='M560 100 h50'/>
    <path d='M380 80 v10'/>
    <path d='M510 90 q0 10 10 10'/>
    <path d='M490 100 h50'/>
    <path d='M370 100 q10 0 10 -10'/>
    <path d='M380 80 q0 -10 10 -10 h110 q10 0 10 10 v10'/>
    <path d='M350 100 h50'/>
    <path d='M170 80 v10'/>
    <path d='M300 90 q0 10 10 10'/>
    <path d='M280 100 h50'/>
    <path d='M160 100 q10 0 10 -10'/>
    <path d='M170 80 q0 -10 10 -10 h110 q10 0 10 10 v10'/>
    <path d='M140 100 h50'/>
    <path d='M100 100 h20'/>
    <path d='M40 90 q0 10 10 10 h10'/>
    <path d='M695 50 h195 q10 0 10 -10'/>
    <path d='M655 50 h20'/>
    <path d='M615 50 h20'/>
    <path d='M505 50 h20'/>
    <path d='M465 50 h20'/>
    <path d='M385 50 h20'/>
    <path d='M275 50 h20'/>
    <path d='M40 40 q0 10 10 10 h195'/>
    <path d='M900 30 q0 -10 10 -10'/>
    <path d='M650 20 h280'/>
    <path d='M540 20 h20'/>
    <path d='M500 20 h20'/>
    <path d='M390 20 h20'/>
    <path d='M350 20 h20'/>
    <path d='M30 20 q10 0 10 10 v110'/>
    <path d='M10 20 h280'/>
  </g>

  <g transform='translate(40 11530)'>
    <text x='-30' y='-10'>jump-statement:</text>
    <path d='M5.5 14 v12 m 4 0 v-12' class='station'/>
    <path d='M390.5 14 v12 m 4 0 v-12' class='station'/>
    <rect x='100' y='10' height='20' width='50' rx='8' ry='8' class='literal'/>
    <text x='125' y='25' text-anchor='middle' class='literal'>goto</text>
    <rect x='170' y='10' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='215' y='25' text-anchor='middle' class='rule'>identifier</text>
    <rect x='280' y='10' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='290' y='25' text-anchor='middle' class='literal'>;</text>
    <rect x='135' y='40' height='20' width='90' rx='8' ry='8' class='literal'/>
    <text x='180' y='55' text-anchor='middle' class='literal'>continue</text>
    <rect x='245' y='40' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='255' y='55' text-anchor='middle' class='literal'>;</text>
    <rect x='150' y='70' height='20' width='60' rx='8' ry='8' class='literal'/>
    <text x='180' y='85' text-anchor='middle' class='literal'>break</text>
    <rect x='230' y='70' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='240' y='85' text-anchor='middle' class='literal'>;</text>
    <rect x='60' y='120' height='20' width='70' rx='8' ry='8' class='literal'/>
    <text x='95' y='135' text-anchor='middle' class='literal'>return</text>
    <path d='M227 100 l-4 3 v-6 z' class='arrow'/>
    <rect x='180' y='120' height='20' width='90' rx='0' ry='0' class='rule'/>
    <text x='225' y='135' text-anchor='middle' class='rule'>expression</text>
    <rect x='320' y='120' height='20' width='20' rx='8' ry='8' class='literal'/>
    <text x='330' y='135' text-anchor='middle' class='literal'>;</text>
    <path d='M360 30 v90'/>
    <path d='M340 130 h10 q10 0 10 -10'/>
    <path d='M160 110 v10'/>
    <path d='M290 120 q0 10 10 10'/>
    <path d='M270 130 h50'/>
    <path d='M150 130 q10 0 10 -10'/>
    <path d='M160 110 q0 -10 10 -10 h110 q10 0 10 10 v10'/>
    <path d='M130 130 h50'/>
    <path d='M40 120 q0 10 10 10 h10'/>
    <path d='M250 80 h100 q10 0 10 -10'/>
    <path d='M210 80 h20'/>
    <path d='M40 70 q0 10 10 10 h100'/>
    <path d='M265 50 h85 q10 0 10 -10'/>
    <path d='M225 50 h20'/>
    <path d='M40 40 q0 10 10 10 h85'/>
    <path d='M360 30 q0 -10 10 -10'/>
    <path d='M300 20 h90'/>
    <path d='M260 20 h20'/>
    <path d='M150 20 h20'/>
    <path d='M30 20 q10 0 10 10 v90'/>
    <path d='M10 20 h90'/>
  </g>

</svg>
translation-unit = [  external-declaration ] .

external-declaration = function-definition
	| declaration .

function-definition = declaration-specifiers declarator [  declaration-list ] compound-statement .

declaration = declaration-specifiers [  init-declarator-list ] ";"
	| static-assert-declaration
	| ";" .

declaration-specifiers = declaration-specifier [  declaration-specifier ] .

declaration-specifier = storage-class-specifier
	| type-specifier
	| type-qualifier
	| function-specifier
	| alignment-specifier .

declarator = [  pointer ] direct-declarator .

declaration-list = declaration [  declaration ] .

compound-statement = "{" [  declaration-or-statement ] "}" .

declaration-or-statement = declaration
	| statement .

init-declarator-list = init-declarator [  "," init-declarator ] .

init-declarator = declarator [  "=" initializer ] .

static-assert-declaration = "_Static_assert" "(" constant-expression "," string-literal ")" ";" .

storage-class-specifier = "typedef"
	| "extern"
	| "static"
	| "_Thread_local"
	| "auto"
	| "register" .

type-specifier = "void"
	| "char"
	| "short"
	| "int"
	| "long"
	| "float"
	| "double"
	| "signed"
	| "unsigned"
	| "_Bool"
	| "_Complex"
	| "_Imaginary"
	| atomic-type-specifier
	| struct-or-union-specifier
	| enum-specifier
	| typedef-name .

typedef-name = identifier .

type-qualifier = "const"
	| "restrict"
	| "volatile"
	| "_Atomic" .

function-specifier = "inline"
	| "_Noreturn" .

alignment-specifier = "_Alignas" "(" type-name ")"
	| "_Alignas" "(" constant-expression ")" .

pointer = "*" [  type-qualifier-list ] [  pointer ] .

direct-declarator = identifier
	| "(" declarator ")"
	| direct-declarator "[" [  "*" ] "]"
	| direct-declarator "[" "static" [  type-qualifier-list ] assignment-expression "]"
	| direct-declarator "[" type-qualifier-list [  "*" ] "]"
	| direct-declarator "[" type-qualifier-list [  "static" ] assignment-expression "]"
	| direct-declarator "[" assignment-expression "]"
	| direct-declarator "(" parameter-type-list ")"
	| direct-declarator "(" identifier-list ")"
	| direct-declarator "(" ")" .

identifier-list = identifier [  "," identifier ] .

initializer-list = designative-initializer [  "," designative-initializer ] .

designative-initializer = [  designation ] initializer .

initializer = "{" initializer-list [  "," ] "}"
	| assignment-expression .

constant-expression = conditional-expression .

atomic-type-specifier = "_Atomic" "(" type-name ")" .

struct-or-union-specifier = struct-or-union "{" struct-declaration-list "}"
	| struct-or-union identifier [  "{" struct-declaration-list "}" ] .

struct-or-union = "struct"
	| "union" .

struct-declaration-list = struct-declaration [  struct-declaration ] .

struct-declaration = specifier-qualifier-list ";"
	| specifier-qualifier-list struct-declarator-list ";"
	| static-assert-declaration .

enum-specifier = "enum" "{" enumerator-list [  "," ] "}"
	| "enum" identifier [  "{" enumerator-list [  "," ] "}" ] .

enumerator-list = enumerator [  "," enumerator ] .

enumerator = enumeration-constant [  "=" constant-expression ] .

enumeration-constant = identifier .

type-name = specifier-qualifier-list [  abstract-declarator ] .

specifier-qualifier-list = specifier-qualifier [  specifier-qualifier ] .

specifier-qualifier = type-specifier
	| type-qualifier .

abstract-declarator = pointer [  direct-abstract-declarator ]
	| direct-abstract-declarator .

direct-abstract-declarator = "(" abstract-declarator ")"
	| "(" parameter-type-list ")"
	| "(" ")"
	| "[" [  "*" ] "]"
	| "[" "static" [  type-qualifier-list ] assignment-expression "]"
	| "[" type-qualifier-list [  [  "static" ] assignment-expression ] "]"
	| "[" assignment-expression "]"
	| direct-abstract-declarator "[" [  "*" ] "]"
	| direct-abstract-declarator "[" "static" [  type-qualifier-list ] assignment-expression "]"
	| direct-abstract-declarator "[" type-qualifier-list [  [  "static" ] assignment-expression ] "]"
	| direct-abstract-declarator "[" assignment-expression "]"
	| direct-abstract-declarator "(" parameter-type-list ")"
	| direct-abstract-declarator "(" ")" .

struct-declarator-list = struct-declarator [  "," struct-declarator ] .

type-qualifier-list = type-qualifier [  type-qualifier ] .

parameter-type-list = parameter-list [  "," "..." ] .

struct-declarator = ":" constant-expression
	| declarator [  ":" constant-expression ] .

assignment-operator = "="
	| "*="
	| "/="
	| "%="
	| "+="
	| "-="
	| "<<="
	| ">>="
	| "&="
	| "^="
	| "|=" .

parameter-list = parameter-declaration [  "," parameter-declaration ] .

parameter-declaration = declaration-specifiers [  declarator ] .

expression = assignment-expression [  "," assignment-expression ] .

assignment-expression = conditional-expression
	| unary-expression assignment-operator assignment-expression .

conditional-expression = logical-or-expression [  "?" expression ":" conditional-expression ] .

logical-or-expression = logical-and-expression [  "||" logical-and-expression ] .

logical-and-expression = inclusive-or-expression [  "&&" inclusive-or-expression ] .

inclusive-or-expression = exclusive-or-expression [  "|" exclusive-or-expression ] .

exclusive-or-expression = and-expression [  "^" and-expression ] .

and-expression = equality-expression [  "&" equality-expression ] .

equality-expression = relational-expression [  (  "==" ) relational-expression ] .

relational-expression = shift-expression [  (  "<" ) shift-expression ] .

shift-expression = additive-expression [  (  "<<" ) additive-expression ] .

additive-expression = multiplicative-expression [  (  "+" ) multiplicative-expression ] .

multiplicative-expression = cast-expression [  (  "*" ) cast-expression ] .

cast-expression = unary-expression
	| "(" type-name ")" cast-expression .

unary-expression = postfix-expression
	| (  "++" ) unary-expression
	| unary-operator cast-expression
	| "sizeof" unary-expression
	| "sizeof" "(" type-name ")"
	| "_Alignof" "(" type-name ")" .

postfix-expression = primary-expression
	| postfix-expression "[" expression "]"
	| postfix-expression "(" [  argument-expression-list ] ")"
	| postfix-expression (  "." ) identifier
	| postfix-expression (  "++" )
	| "(" type-name ")" "{" initializer-list [  "," ] "}" .

unary-operator = "&"
	| "*"
	| "+"
	| "-"
	| "~"
	| "!" .

primary-expression = identifier
	| constant
	| string
	| "(" expression ")"
	| generic-selection .

argument-expression-list = assignment-expression [  "," assignment-expression ] .

constant = integer-constant
	| character-constant
	| floating-constant
	| enumeration-constant .

string = string-literal
	| "__func__" .

generic-selection = "_Generic" "(" assignment-expression "," generic-assoc-list ")" .

generic-assoc-list = generic-association [  "," generic-association ] .

generic-association = type-name ":" assignment-expression
	| "default" ":" assignment-expression .

designation = designator-list "=" .

designator-list = designator [  designator ] .

designator = "[" constant-expression "]"
	| "." identifier .

statement = labeled-statement
	| compound-statement
	| expression-statement
	| selection-statement
	| iteration-statement
	| jump-statement .

labeled-statement = identifier ":" statement
	| "case" constant-expression ":" statement
	| "default" ":" statement .

expression-statement = [  expression ] ";" .

selection-statement = "if" "(" expression ")" statement "else" statement
	| "if" "(" expression ")" statement
	| "switch" "(" expression ")" statement .

iteration-statement = "while" "(" expression ")" statement
	| "do" statement "while" "(" expression ")" ";"
	| "for" "(" [  expression ] ";" [  expression ] ";" [  expression ] ")" statement
	| "for" "(" declaration [  expression ] ";" [  expression ] ")" statement .

jump-statement = "goto" identifier ";"
	| "continue" ";"
	| "break" ";"
	| "return" [  expression ] ";" .

digraph G {
	node [ shape = record, style = rounded ];
	edge [ dir = none ];
	"translation-unit/0000000000000000" [ shape = plaintext, label = "translation-unit" ];
	"translation-unit/0000000000000000" -> "translation-unit/0000000000000000";
	"translation-unit/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"translation-unit/0000000000000000":b -> "translation-unit/0000000000000000";
	"translation-unit/0000000000000000" [ label = "\<external-declaration\>" ];
	"external-declaration/0000000000000000" [ shape = plaintext, label = "external-declaration" ];
	{ rank = same;
		"external-declaration/0000000000000000";
		"external-declaration/0000000000000000";
	};
	"external-declaration/0000000000000000" -> "external-declaration/0000000000000000";
	"external-declaration/0000000000000000" [ label = "ALT" ];
	"external-declaration/0000000000000000" -> "external-declaration/0000000000000000";
	"external-declaration/0000000000000000" [ label = "\<function-definition\>" ];
	"external-declaration/0000000000000000" -> "external-declaration/0000000000000000";
	"external-declaration/0000000000000000" [ label = "\<declaration\>" ];
	"function-definition/0000000000000000" [ shape = plaintext, label = "function-definition" ];
	{ rank = same;
		"function-definition/0000000000000000";
		"function-definition/0000000000000000";
		"function-definition/0000000000000000";
		"function-definition/0000000000000000";
	};
	"function-definition/0000000000000000" -> "function-definition/0000000000000000";
	"function-definition/0000000000000000" [ label = "SEQ" ];
	"function-definition/0000000000000000" -> "function-definition/0000000000000000";
	"function-definition/0000000000000000" [ label = "\<declaration-specifiers\>" ];
	"function-definition/0000000000000000" -> "function-definition/0000000000000000";
	"function-definition/0000000000000000" [ label = "\<declarator\>" ];
	{ rank = same;
		"function-definition/0000000000000000";
	};
	"function-definition/0000000000000000" -> "function-definition/0000000000000000";
	"function-definition/0000000000000000" [ label = "ALT|&epsilon;" ];
	"function-definition/0000000000000000" -> "function-definition/0000000000000000";
	"function-definition/0000000000000000" [ label = "\<declaration-list\>" ];
	"function-definition/0000000000000000" -> "function-definition/0000000000000000";
	"function-definition/0000000000000000" [ label = "\<compound-statement\>" ];
	"declaration/0000000000000000" [ shape = plaintext, label = "declaration" ];
	{ rank = same;
		"declaration/0000000000000000";
		"declaration/0000000000000000";
		"declaration/0000000000000000";
	};
	"declaration/0000000000000000" -> "declaration/0000000000000000";
	"declaration/0000000000000000" [ label = "ALT" ];
	{ rank = same;
		"declaration/0000000000000000";
		"declaration/0000000000000000";
		"declaration/0000000000000000";
	};
	"declaration/0000000000000000" -> "declaration/0000000000000000";
	"declaration/0000000000000000" [ label = "SEQ" ];
	"declaration/0000000000000000" -> "declaration/0000000000000000";
	"declaration/0000000000000000" [ label = "\<declaration-specifiers\>" ];
	{ rank = same;
		"declaration/0000000000000000";
	};
	"declaration/0000000000000000" -> "declaration/0000000000000000";
	"declaration/0000000000000000" [ label = "ALT|&epsilon;" ];
	"declaration/0000000000000000" -> "declaration/0000000000000000";
	"declaration/0000000000000000" [ label = "\<init-declarator-list\>" ];
	"declaration/0000000000000000" -> "declaration/0000000000000000";
	"declaration/0000000000000000" [ style = "filled", shape = box, label = "\";\"" ];
	"declaration/0000000000000000" -> "declaration/0000000000000000";
	"declaration/0000000000000000" [ label = "\<static-assert-declaration\>" ];
	"declaration/0000000000000000" -> "declaration/0000000000000000";
	"declaration/0000000000000000" [ style = "filled", shape = box, label = "\";\"" ];
	"declaration-specifiers/0000000000000000" [ shape = plaintext, label = "declaration-specifiers" ];
	"declaration-specifiers/0000000000000000" -> "declaration-specifiers/0000000000000000";
	"declaration-specifiers/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"declaration-specifiers/0000000000000000":f -> "declaration-specifiers/0000000000000000";
	"declaration-specifiers/0000000000000000" [ label = "\<declaration-specifier\>" ];
	"declaration-specifier/0000000000000000" [ shape = plaintext, label = "declaration-specifier" ];
	{ rank = same;
		"declaration-specifier/0000000000000000";
		"declaration-specifier/0000000000000000";
		"declaration-specifier/0000000000000000";
		"declaration-specifier/0000000000000000";
		"declaration-specifier/0000000000000000";
	};
	"declaration-specifier/0000000000000000" -> "declaration-specifier/0000000000000000";
	"declaration-specifier/0000000000000000" [ label = "ALT" ];
	"declaration-specifier/0000000000000000" -> "declaration-specifier/0000000000000000";
	"declaration-specifier/0000000000000000" [ label = "\<storage-class-specifier\>" ];
	"declaration-specifier/0000000000000000" -> "declaration-specifier/0000000000000000";
	"declaration-specifier/0000000000000000" [ label = "\<type-specifier\>" ];
	"declaration-specifier/0000000000000000" -> "declaration-specifier/0000000000000000";
	"declaration-specifier/0000000000000000" [ label = "\<type-qualifier\>" ];
	"declaration-specifier/0000000000000000" -> "declaration-specifier/0000000000000000";
	"declaration-specifier/0000000000000000" [ label = "\<function-specifier\>" ];
	"declaration-specifier/0000000000000000" -> "declaration-specifier/0000000000000000";
	"declaration-specifier/0000000000000000" [ label = "\<alignment-specifier\>" ];
	"declarator/0000000000000000" [ shape = plaintext, label = "declarator" ];
	{ rank = same;
		"declarator/0000000000000000";
		"declarator/0000000000000000";
	};
	"declarator/0000000000000000" -> "declarator/0000000000000000";
	"declarator/0000000000000000" [ label = "SEQ" ];
	{ rank = same;
		"declarator/0000000000000000";
	};
	"declarator/0000000000000000" -> "declarator/0000000000000000";
	"declarator/0000000000000000" [ label = "ALT|&epsilon;" ];
	"declarator/0000000000000000" -> "declarator/0000000000000000";
	"declarator/0000000000000000" [ label = "\<pointer\>" ];
	"declarator/0000000000000000" -> "declarator/0000000000000000";
	"declarator/0000000000000000" [ label = "\<direct-declarator\>" ];
	"declaration-list/0000000000000000" [ shape = plaintext, label = "declaration-list" ];
	"declaration-list/0000000000000000" -> "declaration-list/0000000000000000";
	"declaration-list/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"declaration-list/0000000000000000":f -> "declaration-list/0000000000000000";
	"declaration-list/0000000000000000" [ label = "\<declaration\>" ];
	"compound-statement/0000000000000000" [ shape = plaintext, label = "compound-statement" ];
	{ rank = same;
		"compound-statement/0000000000000000";
		"compound-statement/0000000000000000";
		"compound-statement/0000000000000000";
	};
	"compound-statement/0000000000000000" -> "compound-statement/0000000000000000";
	"compound-statement/0000000000000000" [ label = "SEQ" ];
	"compound-statement/0000000000000000" -> "compound-statement/0000000000000000";
	"compound-statement/0000000000000000" [ style = "filled", shape = box, label = "\"{\"" ];
	"compound-statement/0000000000000000" -> "compound-statement/0000000000000000";
	"compound-statement/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"compound-statement/0000000000000000":b -> "compound-statement/0000000000000000";
	"compound-statement/0000000000000000" [ label = "\<declaration-or-statement\>" ];
	"compound-statement/0000000000000000" -> "compound-statement/0000000000000000";
	"compound-statement/0000000000000000" [ style = "filled", shape = box, label = "\"}\"" ];
	"declaration-or-statement/0000000000000000" [ shape = plaintext, label = "declaration-or-statement" ];
	{ rank = same;
		"declaration-or-statement/0000000000000000";
		"declaration-or-statement/0000000000000000";
	};
	"declaration-or-statement/0000000000000000" -> "declaration-or-statement/0000000000000000";
	"declaration-or-statement/0000000000000000" [ label = "ALT" ];
	"declaration-or-statement/0000000000000000" -> "declaration-or-statement/0000000000000000";
	"declaration-or-statement/0000000000000000" [ label = "\<declaration\>" ];
	"declaration-or-statement/0000000000000000" -> "declaration-or-statement/0000000000000000";
	"declaration-or-statement/0000000000000000" [ label = "\<statement\>" ];
	"init-declarator-list/0000000000000000" [ shape = plaintext, label = "init-declarator-list" ];
	"init-declarator-list/0000000000000000" -> "init-declarator-list/0000000000000000";
	"init-declarator-list/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"init-declarator-list/0000000000000000":f -> "init-declarator-list/0000000000000000";
	"init-declarator-list/0000000000000000" [ label = "\<init-declarator\>" ];
	"init-declarator-list/0000000000000000":b -> "init-declarator-list/0000000000000000";
	"init-declarator-list/0000000000000000" [ style = "filled", shape = box, label = "\",\"" ];
	"init-declarator/0000000000000000" [ shape = plaintext, label = "init-declarator" ];
	{ rank = same;
		"init-declarator/0000000000000000";
		"init-declarator/0000000000000000";
	};
	"init-declarator/0000000000000000" -> "init-declarator/0000000000000000";
	"init-declarator/0000000000000000" [ label = "SEQ" ];
	"init-declarator/0000000000000000" -> "init-declarator/0000000000000000";
	"init-declarator/0000000000000000" [ label = "\<declarator\>" ];
	{ rank = same;
		"init-declarator/0000000000000000";
	};
	"init-declarator/0000000000000000" -> "init-declarator/0000000000000000";
	"init-declarator/0000000000000000" [ label = "ALT|&epsilon;" ];
	{ rank = same;
		"init-declarator/0000000000000000";
		"init-declarator/0000000000000000";
	};
	"init-declarator/0000000000000000" -> "init-declarator/0000000000000000";
	"init-declarator/0000000000000000" [ label = "SEQ" ];
	"init-declarator/0000000000000000" -> "init-declarator/0000000000000000";
	"init-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"=\"" ];
	"init-declarator/0000000000000000" -> "init-declarator/0000000000000000";
	"init-declarator/0000000000000000" [ label = "\<initializer\>" ];
	"static-assert-declaration/0000000000000000" [ shape = plaintext, label = "static-assert-declaration" ];
	{ rank = same;
		"static-assert-declaration/0000000000000000";
		"static-assert-declaration/0000000000000000";
		"static-assert-declaration/0000000000000000";
		"static-assert-declaration/0000000000000000";
		"static-assert-declaration/0000000000000000";
		"static-assert-declaration/0000000000000000";
		"static-assert-declaration/0000000000000000";
	};
	"static-assert-declaration/0000000000000000" -> "static-assert-declaration/0000000000000000";
	"static-assert-declaration/0000000000000000" [ label = "SEQ" ];
	"static-assert-declaration/0000000000000000" -> "static-assert-declaration/0000000000000000";
	"static-assert-declaration/0000000000000000" [ style = "filled", shape = box, label = "\"_Static_assert\"" ];
	"static-assert-declaration/0000000000000000" -> "static-assert-declaration/0000000000000000";
	"static-assert-declaration/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"static-assert-declaration/0000000000000000" -> "static-assert-declaration/0000000000000000";
	"static-assert-declaration/0000000000000000" [ label = "\<constant-expression\>" ];
	"static-assert-declaration/0000000000000000" -> "static-assert-declaration/0000000000000000";
	"static-assert-declaration/0000000000000000" [ style = "filled", shape = box, label = "\",\"" ];
	"static-assert-declaration/0000000000000000" -> "static-assert-declaration/0000000000000000";
	"static-assert-declaration/0000000000000000" [ label = "\<string-literal\>" ];
	"static-assert-declaration/0000000000000000" -> "static-assert-declaration/0000000000000000";
	"static-assert-declaration/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	"static-assert-declaration/0000000000000000" -> "static-assert-declaration/0000000000000000";
	"static-assert-declaration/0000000000000000" [ style = "filled", shape = box, label = "\";\"" ];
	"storage-class-specifier/0000000000000000" [ shape = plaintext, label = "storage-class-specifier" ];
	{ rank = same;
		"storage-class-specifier/0000000000000000";
		"storage-class-specifier/0000000000000000";
		"storage-class-specifier/0000000000000000";
		"storage-class-specifier/0000000000000000";
		"storage-class-specifier/0000000000000000";
		"storage-class-specifier/0000000000000000";
	};
	"storage-class-specifier/0000000000000000" -> "storage-class-specifier/0000000000000000";
	"storage-class-specifier/0000000000000000" [ label = "ALT" ];
	"storage-class-specifier/0000000000000000" -> "storage-class-specifier/0000000000000000";
	"storage-class-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"typedef\"" ];
	"storage-class-specifier/0000000000000000" -> "storage-class-specifier/0000000000000000";
	"storage-class-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"extern\"" ];
	"storage-class-specifier/0000000000000000" -> "storage-class-specifier/0000000000000000";
	"storage-class-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"static\"" ];
	"storage-class-specifier/0000000000000000" -> "storage-class-specifier/0000000000000000";
	"storage-class-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"_Thread_local\"" ];
	"storage-class-specifier/0000000000000000" -> "storage-class-specifier/0000000000000000";
	"storage-class-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"auto\"" ];
	"storage-class-specifier/0000000000000000" -> "storage-class-specifier/0000000000000000";
	"storage-class-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"register\"" ];
	"type-specifier/0000000000000000" [ shape = plaintext, label = "type-specifier" ];
	{ rank = same;
		"type-specifier/0000000000000000";
		"type-specifier/0000000000000000";
		"type-specifier/0000000000000000";
		"type-specifier/0000000000000000";
		"type-specifier/0000000000000000";
		"type-specifier/0000000000000000";
		"type-specifier/0000000000000000";
		"type-specifier/0000000000000000";
		"type-specifier/0000000000000000";
		"type-specifier/0000000000000000";
		"type-specifier/0000000000000000";
		"type-specifier/0000000000000000";
		"type-specifier/0000000000000000";
		"type-specifier/0000000000000000";
		"type-specifier/0000000000000000";
		"type-specifier/0000000000000000";
	};
	"type-specifier/0000000000000000" -> "type-specifier/0000000000000000";
	"type-specifier/0000000000000000" [ label = "ALT" ];
	"type-specifier/0000000000000000" -> "type-specifier/0000000000000000";
	"type-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"void\"" ];
	"type-specifier/0000000000000000" -> "type-specifier/0000000000000000";
	"type-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"char\"" ];
	"type-specifier/0000000000000000" -> "type-specifier/0000000000000000";
	"type-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"short\"" ];
	"type-specifier/0000000000000000" -> "type-specifier/0000000000000000";
	"type-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"int\"" ];
	"type-specifier/0000000000000000" -> "type-specifier/0000000000000000";
	"type-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"long\"" ];
	"type-specifier/0000000000000000" -> "type-specifier/0000000000000000";
	"type-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"float\"" ];
	"type-specifier/0000000000000000" -> "type-specifier/0000000000000000";
	"type-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"double\"" ];
	"type-specifier/0000000000000000" -> "type-specifier/0000000000000000";
	"type-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"signed\"" ];
	"type-specifier/0000000000000000" -> "type-specifier/0000000000000000";
	"type-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"unsigned\"" ];
	"type-specifier/0000000000000000" -> "type-specifier/0000000000000000";
	"type-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"_Bool\"" ];
	"type-specifier/0000000000000000" -> "type-specifier/0000000000000000";
	"type-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"_Complex\"" ];
	"type-specifier/0000000000000000" -> "type-specifier/0000000000000000";
	"type-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"_Imaginary\"" ];
	"type-specifier/0000000000000000" -> "type-specifier/0000000000000000";
	"type-specifier/0000000000000000" [ label = "\<atomic-type-specifier\>" ];
	"type-specifier/0000000000000000" -> "type-specifier/0000000000000000";
	"type-specifier/0000000000000000" [ label = "\<struct-or-union-specifier\>" ];
	"type-specifier/0000000000000000" -> "type-specifier/0000000000000000";
	"type-specifier/0000000000000000" [ label = "\<enum-specifier\>" ];
	"type-specifier/0000000000000000" -> "type-specifier/0000000000000000";
	"type-specifier/0000000000000000" [ label = "\<typedef-name\>" ];
	"typedef-name/0000000000000000" [ shape = plaintext, label = "typedef-name" ];
	"typedef-name/0000000000000000" -> "typedef-name/0000000000000000";
	"typedef-name/0000000000000000" [ label = "\<identifier\>" ];
	"type-qualifier/0000000000000000" [ shape = plaintext, label = "type-qualifier" ];
	{ rank = same;
		"type-qualifier/0000000000000000";
		"type-qualifier/0000000000000000";
		"type-qualifier/0000000000000000";
		"type-qualifier/0000000000000000";
	};
	"type-qualifier/0000000000000000" -> "type-qualifier/0000000000000000";
	"type-qualifier/0000000000000000" [ label = "ALT" ];
	"type-qualifier/0000000000000000" -> "type-qualifier/0000000000000000";
	"type-qualifier/0000000000000000" [ style = "filled", shape = box, label = "\"const\"" ];
	"type-qualifier/0000000000000000" -> "type-qualifier/0000000000000000";
	"type-qualifier/0000000000000000" [ style = "filled", shape = box, label = "\"restrict\"" ];
	"type-qualifier/0000000000000000" -> "type-qualifier/0000000000000000";
	"type-qualifier/0000000000000000" [ style = "filled", shape = box, label = "\"volatile\"" ];
	"type-qualifier/0000000000000000" -> "type-qualifier/0000000000000000";
	"type-qualifier/0000000000000000" [ style = "filled", shape = box, label = "\"_Atomic\"" ];
	"function-specifier/0000000000000000" [ shape = plaintext, label = "function-specifier" ];
	{ rank = same;
		"function-specifier/0000000000000000";
		"function-specifier/0000000000000000";
	};
	"function-specifier/0000000000000000" -> "function-specifier/0000000000000000";
	"function-specifier/0000000000000000" [ label = "ALT" ];
	"function-specifier/0000000000000000" -> "function-specifier/0000000000000000";
	"function-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"inline\"" ];
	"function-specifier/0000000000000000" -> "function-specifier/0000000000000000";
	"function-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"_Noreturn\"" ];
	"alignment-specifier/0000000000000000" [ shape = plaintext, label = "alignment-specifier" ];
	{ rank = same;
		"alignment-specifier/0000000000000000";
		"alignment-specifier/0000000000000000";
	};
	"alignment-specifier/0000000000000000" -> "alignment-specifier/0000000000000000";
	"alignment-specifier/0000000000000000" [ label = "ALT" ];
	{ rank = same;
		"alignment-specifier/0000000000000000";
		"alignment-specifier/0000000000000000";
		"alignment-specifier/0000000000000000";
		"alignment-specifier/0000000000000000";
	};
	"alignment-specifier/0000000000000000" -> "alignment-specifier/0000000000000000";
	"alignment-specifier/0000000000000000" [ label = "SEQ" ];
	"alignment-specifier/0000000000000000" -> "alignment-specifier/0000000000000000";
	"alignment-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"_Alignas\"" ];
	"alignment-specifier/0000000000000000" -> "alignment-specifier/0000000000000000";
	"alignment-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"alignment-specifier/0000000000000000" -> "alignment-specifier/0000000000000000";
	"alignment-specifier/0000000000000000" [ label = "\<type-name\>" ];
	"alignment-specifier/0000000000000000" -> "alignment-specifier/0000000000000000";
	"alignment-specifier/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	{ rank = same;
		"alignment-specifier/0000000000000000";
		"alignment-specifier/0000000000000000";
		"alignment-specifier/0000000000000000";
		"alignment-specifier/0000000000000000";
	};
	"alignment-specifier/0000000000000000" -> "alignment-specifier/0000000000000000";
	"alignment-specifier/0000000000000000" [ label = "SEQ" ];
	"alignment-specifier/0000000000000000" -> "alignment-specifier/0000000000000000";
	"alignment-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"_Alignas\"" ];
	"alignment-specifier/0000000000000000" -> "alignment-specifier/0000000000000000";
	"alignment-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"alignment-specifier/0000000000000000" -> "alignment-specifier/0000000000000000";
	"alignment-specifier/0000000000000000" [ label = "\<constant-expression\>" ];
	"alignment-specifier/0000000000000000" -> "alignment-specifier/0000000000000000";
	"alignment-specifier/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	"pointer/0000000000000000" [ shape = plaintext, label = "pointer" ];
	{ rank = same;
		"pointer/0000000000000000";
		"pointer/0000000000000000";
		"pointer/0000000000000000";
	};
	"pointer/0000000000000000" -> "pointer/0000000000000000";
	"pointer/0000000000000000" [ label = "SEQ" ];
	"pointer/0000000000000000" -> "pointer/0000000000000000";
	"pointer/0000000000000000" [ style = "filled", shape = box, label = "\"*\"" ];
	{ rank = same;
		"pointer/0000000000000000";
	};
	"pointer/0000000000000000" -> "pointer/0000000000000000";
	"pointer/0000000000000000" [ label = "ALT|&epsilon;" ];
	"pointer/0000000000000000" -> "pointer/0000000000000000";
	"pointer/0000000000000000" [ label = "\<type-qualifier-list\>" ];
	{ rank = same;
		"pointer/0000000000000000";
	};
	"pointer/0000000000000000" -> "pointer/0000000000000000";
	"pointer/0000000000000000" [ label = "ALT|&epsilon;" ];
	"pointer/0000000000000000" -> "pointer/0000000000000000";
	"pointer/0000000000000000" [ label = "\<pointer\>" ];
	"direct-declarator/0000000000000000" [ shape = plaintext, label = "direct-declarator" ];
	{ rank = same;
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
	};
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "ALT" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "\<identifier\>" ];
	{ rank = same;
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
	};
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "SEQ" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "\<declarator\>" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	{ rank = same;
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
	};
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "SEQ" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "\<direct-declarator\>" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"[\"" ];
	{ rank = same;
		"direct-declarator/0000000000000000";
	};
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "ALT|&epsilon;" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"*\"" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"]\"" ];
	{ rank = same;
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
	};
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "SEQ" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "\<direct-declarator\>" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"[\"" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"static\"" ];
	{ rank = same;
		"direct-declarator/0000000000000000";
	};
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "ALT|&epsilon;" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "\<type-qualifier-list\>" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "\<assignment-expression\>" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"]\"" ];
	{ rank = same;
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
	};
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "SEQ" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "\<direct-declarator\>" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"[\"" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "\<type-qualifier-list\>" ];
	{ rank = same;
		"direct-declarator/0000000000000000";
	};
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "ALT|&epsilon;" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"*\"" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"]\"" ];
	{ rank = same;
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
	};
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "SEQ" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "\<direct-declarator\>" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"[\"" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "\<type-qualifier-list\>" ];
	{ rank = same;
		"direct-declarator/0000000000000000";
	};
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "ALT|&epsilon;" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"static\"" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "\<assignment-expression\>" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"]\"" ];
	{ rank = same;
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
	};
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "SEQ" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "\<direct-declarator\>" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"[\"" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "\<assignment-expression\>" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"]\"" ];
	{ rank = same;
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
	};
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "SEQ" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "\<direct-declarator\>" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "\<parameter-type-list\>" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	{ rank = same;
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
	};
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "SEQ" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "\<direct-declarator\>" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "\<identifier-list\>" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	{ rank = same;
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
		"direct-declarator/0000000000000000";
	};
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "SEQ" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ label = "\<direct-declarator\>" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"direct-declarator/0000000000000000" -> "direct-declarator/0000000000000000";
	"direct-declarator/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	"identifier-list/0000000000000000" [ shape = plaintext, label = "identifier-list" ];
	"identifier-list/0000000000000000" -> "identifier-list/0000000000000000";
	"identifier-list/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"identifier-list/0000000000000000":f -> "identifier-list/0000000000000000";
	"identifier-list/0000000000000000" [ label = "\<identifier\>" ];
	"identifier-list/0000000000000000":b -> "identifier-list/0000000000000000";
	"identifier-list/0000000000000000" [ style = "filled", shape = box, label = "\",\"" ];
	"initializer-list/0000000000000000" [ shape = plaintext, label = "initializer-list" ];
	"initializer-list/0000000000000000" -> "initializer-list/0000000000000000";
	"initializer-list/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"initializer-list/0000000000000000":f -> "initializer-list/0000000000000000";
	"initializer-list/0000000000000000" [ label = "\<designative-initializer\>" ];
	"initializer-list/0000000000000000":b -> "initializer-list/0000000000000000";
	"initializer-list/0000000000000000" [ style = "filled", shape = box, label = "\",\"" ];
	"designative-initializer/0000000000000000" [ shape = plaintext, label = "designative-initializer" ];
	{ rank = same;
		"designative-initializer/0000000000000000";
		"designative-initializer/0000000000000000";
	};
	"designative-initializer/0000000000000000" -> "designative-initializer/0000000000000000";
	"designative-initializer/0000000000000000" [ label = "SEQ" ];
	{ rank = same;
		"designative-initializer/0000000000000000";
	};
	"designative-initializer/0000000000000000" -> "designative-initializer/0000000000000000";
	"designative-initializer/0000000000000000" [ label = "ALT|&epsilon;" ];
	"designative-initializer/0000000000000000" -> "designative-initializer/0000000000000000";
	"designative-initializer/0000000000000000" [ label = "\<designation\>" ];
	"designative-initializer/0000000000000000" -> "designative-initializer/0000000000000000";
	"designative-initializer/0000000000000000" [ label = "\<initializer\>" ];
	"initializer/0000000000000000" [ shape = plaintext, label = "initializer" ];
	{ rank = same;
		"initializer/0000000000000000";
		"initializer/0000000000000000";
	};
	"initializer/0000000000000000" -> "initializer/0000000000000000";
	"initializer/0000000000000000" [ label = "ALT" ];
	{ rank = same;
		"initializer/0000000000000000";
		"initializer/0000000000000000";
		"initializer/0000000000000000";
		"initializer/0000000000000000";
	};
	"initializer/0000000000000000" -> "initializer/0000000000000000";
	"initializer/0000000000000000" [ label = "SEQ" ];
	"initializer/0000000000000000" -> "initializer/0000000000000000";
	"initializer/0000000000000000" [ style = "filled", shape = box, label = "\"{\"" ];
	"initializer/0000000000000000" -> "initializer/0000000000000000";
	"initializer/0000000000000000" [ label = "\<initializer-list\>" ];
	{ rank = same;
		"initializer/0000000000000000";
	};
	"initializer/0000000000000000" -> "initializer/0000000000000000";
	"initializer/0000000000000000" [ label = "ALT|&epsilon;" ];
	"initializer/0000000000000000" -> "initializer/0000000000000000";
	"initializer/0000000000000000" [ style = "filled", shape = box, label = "\",\"" ];
	"initializer/0000000000000000" -> "initializer/0000000000000000";
	"initializer/0000000000000000" [ style = "filled", shape = box, label = "\"}\"" ];
	"initializer/0000000000000000" -> "initializer/0000000000000000";
	"initializer/0000000000000000" [ label = "\<assignment-expression\>" ];
	"constant-expression/0000000000000000" [ shape = plaintext, label = "constant-expression" ];
	"constant-expression/0000000000000000" -> "constant-expression/0000000000000000";
	"constant-expression/0000000000000000" [ label = "\<conditional-expression\>" ];
	"atomic-type-specifier/0000000000000000" [ shape = plaintext, label = "atomic-type-specifier" ];
	{ rank = same;
		"atomic-type-specifier/0000000000000000";
		"atomic-type-specifier/0000000000000000";
		"atomic-type-specifier/0000000000000000";
		"atomic-type-specifier/0000000000000000";
	};
	"atomic-type-specifier/0000000000000000" -> "atomic-type-specifier/0000000000000000";
	"atomic-type-specifier/0000000000000000" [ label = "SEQ" ];
	"atomic-type-specifier/0000000000000000" -> "atomic-type-specifier/0000000000000000";
	"atomic-type-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"_Atomic\"" ];
	"atomic-type-specifier/0000000000000000" -> "atomic-type-specifier/0000000000000000";
	"atomic-type-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"atomic-type-specifier/0000000000000000" -> "atomic-type-specifier/0000000000000000";
	"atomic-type-specifier/0000000000000000" [ label = "\<type-name\>" ];
	"atomic-type-specifier/0000000000000000" -> "atomic-type-specifier/0000000000000000";
	"atomic-type-specifier/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	"struct-or-union-specifier/0000000000000000" [ shape = plaintext, label = "struct-or-union-specifier" ];
	{ rank = same;
		"struct-or-union-specifier/0000000000000000";
		"struct-or-union-specifier/0000000000000000";
	};
	"struct-or-union-specifier/0000000000000000" -> "struct-or-union-specifier/0000000000000000";
	"struct-or-union-specifier/0000000000000000" [ label = "ALT" ];
	{ rank = same;
		"struct-or-union-specifier/0000000000000000";
		"struct-or-union-specifier/0000000000000000";
		"struct-or-union-specifier/0000000000000000";
		"struct-or-union-specifier/0000000000000000";
	};
	"struct-or-union-specifier/0000000000000000" -> "struct-or-union-specifier/0000000000000000";
	"struct-or-union-specifier/0000000000000000" [ label = "SEQ" ];
	"struct-or-union-specifier/0000000000000000" -> "struct-or-union-specifier/0000000000000000";
	"struct-or-union-specifier/0000000000000000" [ label = "\<struct-or-union\>" ];
	"struct-or-union-specifier/0000000000000000" -> "struct-or-union-specifier/0000000000000000";
	"struct-or-union-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"{\"" ];
	"struct-or-union-specifier/0000000000000000" -> "struct-or-union-specifier/0000000000000000";
	"struct-or-union-specifier/0000000000000000" [ label = "\<struct-declaration-list\>" ];
	"struct-or-union-specifier/0000000000000000" -> "struct-or-union-specifier/0000000000000000";
	"struct-or-union-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"}\"" ];
	{ rank = same;
		"struct-or-union-specifier/0000000000000000";
		"struct-or-union-specifier/0000000000000000";
		"struct-or-union-specifier/0000000000000000";
	};
	"struct-or-union-specifier/0000000000000000" -> "struct-or-union-specifier/0000000000000000";
	"struct-or-union-specifier/0000000000000000" [ label = "SEQ" ];
	"struct-or-union-specifier/0000000000000000" -> "struct-or-union-specifier/0000000000000000";
	"struct-or-union-specifier/0000000000000000" [ label = "\<struct-or-union\>" ];
	"struct-or-union-specifier/0000000000000000" -> "struct-or-union-specifier/0000000000000000";
	"struct-or-union-specifier/0000000000000000" [ label = "\<identifier\>" ];
	{ rank = same;
		"struct-or-union-specifier/0000000000000000";
	};
	"struct-or-union-specifier/0000000000000000" -> "struct-or-union-specifier/0000000000000000";
	"struct-or-union-specifier/0000000000000000" [ label = "ALT|&epsilon;" ];
	{ rank = same;
		"struct-or-union-specifier/0000000000000000";
		"struct-or-union-specifier/0000000000000000";
		"struct-or-union-specifier/0000000000000000";
	};
	"struct-or-union-specifier/0000000000000000" -> "struct-or-union-specifier/0000000000000000";
	"struct-or-union-specifier/0000000000000000" [ label = "SEQ" ];
	"struct-or-union-specifier/0000000000000000" -> "struct-or-union-specifier/0000000000000000";
	"struct-or-union-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"{\"" ];
	"struct-or-union-specifier/0000000000000000" -> "struct-or-union-specifier/0000000000000000";
	"struct-or-union-specifier/0000000000000000" [ label = "\<struct-declaration-list\>" ];
	"struct-or-union-specifier/0000000000000000" -> "struct-or-union-specifier/0000000000000000";
	"struct-or-union-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"}\"" ];
	"struct-or-union/0000000000000000" [ shape = plaintext, label = "struct-or-union" ];
	{ rank = same;
		"struct-or-union/0000000000000000";
		"struct-or-union/0000000000000000";
	};
	"struct-or-union/0000000000000000" -> "struct-or-union/0000000000000000";
	"struct-or-union/0000000000000000" [ label = "ALT" ];
	"struct-or-union/0000000000000000" -> "struct-or-union/0000000000000000";
	"struct-or-union/0000000000000000" [ style = "filled", shape = box, label = "\"struct\"" ];
	"struct-or-union/0000000000000000" -> "struct-or-union/0000000000000000";
	"struct-or-union/0000000000000000" [ style = "filled", shape = box, label = "\"union\"" ];
	"struct-declaration-list/0000000000000000" [ shape = plaintext, label = "struct-declaration-list" ];
	"struct-declaration-list/0000000000000000" -> "struct-declaration-list/0000000000000000";
	"struct-declaration-list/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"struct-declaration-list/0000000000000000":f -> "struct-declaration-list/0000000000000000";
	"struct-declaration-list/0000000000000000" [ label = "\<struct-declaration\>" ];
	"struct-declaration/0000000000000000" [ shape = plaintext, label = "struct-declaration" ];
	{ rank = same;
		"struct-declaration/0000000000000000";
		"struct-declaration/0000000000000000";
		"struct-declaration/0000000000000000";
	};
	"struct-declaration/0000000000000000" -> "struct-declaration/0000000000000000";
	"struct-declaration/0000000000000000" [ label = "ALT" ];
	{ rank = same;
		"struct-declaration/0000000000000000";
		"struct-declaration/0000000000000000";
	};
	"struct-declaration/0000000000000000" -> "struct-declaration/0000000000000000";
	"struct-declaration/0000000000000000" [ label = "SEQ" ];
	"struct-declaration/0000000000000000" -> "struct-declaration/0000000000000000";
	"struct-declaration/0000000000000000" [ label = "\<specifier-qualifier-list\>" ];
	"struct-declaration/0000000000000000" -> "struct-declaration/0000000000000000";
	"struct-declaration/0000000000000000" [ style = "filled", shape = box, label = "\";\"" ];
	{ rank = same;
		"struct-declaration/0000000000000000";
		"struct-declaration/0000000000000000";
		"struct-declaration/0000000000000000";
	};
	"struct-declaration/0000000000000000" -> "struct-declaration/0000000000000000";
	"struct-declaration/0000000000000000" [ label = "SEQ" ];
	"struct-declaration/0000000000000000" -> "struct-declaration/0000000000000000";
	"struct-declaration/0000000000000000" [ label = "\<specifier-qualifier-list\>" ];
	"struct-declaration/0000000000000000" -> "struct-declaration/0000000000000000";
	"struct-declaration/0000000000000000" [ label = "\<struct-declarator-list\>" ];
	"struct-declaration/0000000000000000" -> "struct-declaration/0000000000000000";
	"struct-declaration/0000000000000000" [ style = "filled", shape = box, label = "\";\"" ];
	"struct-declaration/0000000000000000" -> "struct-declaration/0000000000000000";
	"struct-declaration/0000000000000000" [ label = "\<static-assert-declaration\>" ];
	"enum-specifier/0000000000000000" [ shape = plaintext, label = "enum-specifier" ];
	{ rank = same;
		"enum-specifier/0000000000000000";
		"enum-specifier/0000000000000000";
	};
	"enum-specifier/0000000000000000" -> "enum-specifier/0000000000000000";
	"enum-specifier/0000000000000000" [ label = "ALT" ];
	{ rank = same;
		"enum-specifier/0000000000000000";
		"enum-specifier/0000000000000000";
		"enum-specifier/0000000000000000";
		"enum-specifier/0000000000000000";
		"enum-specifier/0000000000000000";
	};
	"enum-specifier/0000000000000000" -> "enum-specifier/0000000000000000";
	"enum-specifier/0000000000000000" [ label = "SEQ" ];
	"enum-specifier/0000000000000000" -> "enum-specifier/0000000000000000";
	"enum-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"enum\"" ];
	"enum-specifier/0000000000000000" -> "enum-specifier/0000000000000000";
	"enum-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"{\"" ];
	"enum-specifier/0000000000000000" -> "enum-specifier/0000000000000000";
	"enum-specifier/0000000000000000" [ label = "\<enumerator-list\>" ];
	{ rank = same;
		"enum-specifier/0000000000000000";
	};
	"enum-specifier/0000000000000000" -> "enum-specifier/0000000000000000";
	"enum-specifier/0000000000000000" [ label = "ALT|&epsilon;" ];
	"enum-specifier/0000000000000000" -> "enum-specifier/0000000000000000";
	"enum-specifier/0000000000000000" [ style = "filled", shape = box, label = "\",\"" ];
	"enum-specifier/0000000000000000" -> "enum-specifier/0000000000000000";
	"enum-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"}\"" ];
	{ rank = same;
		"enum-specifier/0000000000000000";
		"enum-specifier/0000000000000000";
		"enum-specifier/0000000000000000";
	};
	"enum-specifier/0000000000000000" -> "enum-specifier/0000000000000000";
	"enum-specifier/0000000000000000" [ label = "SEQ" ];
	"enum-specifier/0000000000000000" -> "enum-specifier/0000000000000000";
	"enum-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"enum\"" ];
	"enum-specifier/0000000000000000" -> "enum-specifier/0000000000000000";
	"enum-specifier/0000000000000000" [ label = "\<identifier\>" ];
	{ rank = same;
		"enum-specifier/0000000000000000";
	};
	"enum-specifier/0000000000000000" -> "enum-specifier/0000000000000000";
	"enum-specifier/0000000000000000" [ label = "ALT|&epsilon;" ];
	{ rank = same;
		"enum-specifier/0000000000000000";
		"enum-specifier/0000000000000000";
		"enum-specifier/0000000000000000";
		"enum-specifier/0000000000000000";
	};
	"enum-specifier/0000000000000000" -> "enum-specifier/0000000000000000";
	"enum-specifier/0000000000000000" [ label = "SEQ" ];
	"enum-specifier/0000000000000000" -> "enum-specifier/0000000000000000";
	"enum-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"{\"" ];
	"enum-specifier/0000000000000000" -> "enum-specifier/0000000000000000";
	"enum-specifier/0000000000000000" [ label = "\<enumerator-list\>" ];
	{ rank = same;
		"enum-specifier/0000000000000000";
	};
	"enum-specifier/0000000000000000" -> "enum-specifier/0000000000000000";
	"enum-specifier/0000000000000000" [ label = "ALT|&epsilon;" ];
	"enum-specifier/0000000000000000" -> "enum-specifier/0000000000000000";
	"enum-specifier/0000000000000000" [ style = "filled", shape = box, label = "\",\"" ];
	"enum-specifier/0000000000000000" -> "enum-specifier/0000000000000000";
	"enum-specifier/0000000000000000" [ style = "filled", shape = box, label = "\"}\"" ];
	"enumerator-list/0000000000000000" [ shape = plaintext, label = "enumerator-list" ];
	"enumerator-list/0000000000000000" -> "enumerator-list/0000000000000000";
	"enumerator-list/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"enumerator-list/0000000000000000":f -> "enumerator-list/0000000000000000";
	"enumerator-list/0000000000000000" [ label = "\<enumerator\>" ];
	"enumerator-list/0000000000000000":b -> "enumerator-list/0000000000000000";
	"enumerator-list/0000000000000000" [ style = "filled", shape = box, label = "\",\"" ];
	"enumerator/0000000000000000" [ shape = plaintext, label = "enumerator" ];
	{ rank = same;
		"enumerator/0000000000000000";
		"enumerator/0000000000000000";
	};
	"enumerator/0000000000000000" -> "enumerator/0000000000000000";
	"enumerator/0000000000000000" [ label = "SEQ" ];
	"enumerator/0000000000000000" -> "enumerator/0000000000000000";
	"enumerator/0000000000000000" [ label = "\<enumeration-constant\>" ];
	{ rank = same;
		"enumerator/0000000000000000";
	};
	"enumerator/0000000000000000" -> "enumerator/0000000000000000";
	"enumerator/0000000000000000" [ label = "ALT|&epsilon;" ];
	{ rank = same;
		"enumerator/0000000000000000";
		"enumerator/0000000000000000";
	};
	"enumerator/0000000000000000" -> "enumerator/0000000000000000";
	"enumerator/0000000000000000" [ label = "SEQ" ];
	"enumerator/0000000000000000" -> "enumerator/0000000000000000";
	"enumerator/0000000000000000" [ style = "filled", shape = box, label = "\"=\"" ];
	"enumerator/0000000000000000" -> "enumerator/0000000000000000";
	"enumerator/0000000000000000" [ label = "\<constant-expression\>" ];
	"enumeration-constant/0000000000000000" [ shape = plaintext, label = "enumeration-constant" ];
	"enumeration-constant/0000000000000000" -> "enumeration-constant/0000000000000000";
	"enumeration-constant/0000000000000000" [ label = "\<identifier\>" ];
	"type-name/0000000000000000" [ shape = plaintext, label = "type-name" ];
	{ rank = same;
		"type-name/0000000000000000";
		"type-name/0000000000000000";
	};
	"type-name/0000000000000000" -> "type-name/0000000000000000";
	"type-name/0000000000000000" [ label = "SEQ" ];
	"type-name/0000000000000000" -> "type-name/0000000000000000";
	"type-name/0000000000000000" [ label = "\<specifier-qualifier-list\>" ];
	{ rank = same;
		"type-name/0000000000000000";
	};
	"type-name/0000000000000000" -> "type-name/0000000000000000";
	"type-name/0000000000000000" [ label = "ALT|&epsilon;" ];
	"type-name/0000000000000000" -> "type-name/0000000000000000";
	"type-name/0000000000000000" [ label = "\<abstract-declarator\>" ];
	"specifier-qualifier-list/0000000000000000" [ shape = plaintext, label = "specifier-qualifier-list" ];
	"specifier-qualifier-list/0000000000000000" -> "specifier-qualifier-list/0000000000000000";
	"specifier-qualifier-list/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"specifier-qualifier-list/0000000000000000":f -> "specifier-qualifier-list/0000000000000000";
	"specifier-qualifier-list/0000000000000000" [ label = "\<specifier-qualifier\>" ];
	"specifier-qualifier/0000000000000000" [ shape = plaintext, label = "specifier-qualifier" ];
	{ rank = same;
		"specifier-qualifier/0000000000000000";
		"specifier-qualifier/0000000000000000";
	};
	"specifier-qualifier/0000000000000000" -> "specifier-qualifier/0000000000000000";
	"specifier-qualifier/0000000000000000" [ label = "ALT" ];
	"specifier-qualifier/0000000000000000" -> "specifier-qualifier/0000000000000000";
	"specifier-qualifier/0000000000000000" [ label = "\<type-specifier\>" ];
	"specifier-qualifier/0000000000000000" -> "specifier-qualifier/0000000000000000";
	"specifier-qualifier/0000000000000000" [ label = "\<type-qualifier\>" ];
	"abstract-declarator/0000000000000000" [ shape = plaintext, label = "abstract-declarator" ];
	{ rank = same;
		"abstract-declarator/0000000000000000";
		"abstract-declarator/0000000000000000";
	};
	"abstract-declarator/0000000000000000" -> "abstract-declarator/0000000000000000";
	"abstract-declarator/0000000000000000" [ label = "ALT" ];
	{ rank = same;
		"abstract-declarator/0000000000000000";
		"abstract-declarator/0000000000000000";
	};
	"abstract-declarator/0000000000000000" -> "abstract-declarator/0000000000000000";
	"abstract-declarator/0000000000000000" [ label = "SEQ" ];
	"abstract-declarator/0000000000000000" -> "abstract-declarator/0000000000000000";
	"abstract-declarator/0000000000000000" [ label = "\<pointer\>" ];
	{ rank = same;
		"abstract-declarator/0000000000000000";
	};
	"abstract-declarator/0000000000000000" -> "abstract-declarator/0000000000000000";
	"abstract-declarator/0000000000000000" [ label = "ALT|&epsilon;" ];
	"abstract-declarator/0000000000000000" -> "abstract-declarator/0000000000000000";
	"abstract-declarator/0000000000000000" [ label = "\<direct-abstract-declarator\>" ];
	"abstract-declarator/0000000000000000" -> "abstract-declarator/0000000000000000";
	"abstract-declarator/0000000000000000" [ label = "\<direct-abstract-declarator\>" ];
	"direct-abstract-declarator/0000000000000000" [ shape = plaintext, label = "direct-abstract-declarator" ];
	{ rank = same;
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
	};
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "ALT" ];
	{ rank = same;
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
	};
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "SEQ" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "\<abstract-declarator\>" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	{ rank = same;
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
	};
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "SEQ" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "\<parameter-type-list\>" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	{ rank = same;
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
	};
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "SEQ" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	{ rank = same;
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
	};
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "SEQ" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"[\"" ];
	{ rank = same;
		"direct-abstract-declarator/0000000000000000";
	};
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "ALT|&epsilon;" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"*\"" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"]\"" ];
	{ rank = same;
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
	};
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "SEQ" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"[\"" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"static\"" ];
	{ rank = same;
		"direct-abstract-declarator/0000000000000000";
	};
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "ALT|&epsilon;" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "\<type-qualifier-list\>" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "\<assignment-expression\>" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"]\"" ];
	{ rank = same;
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
	};
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "SEQ" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"[\"" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "\<type-qualifier-list\>" ];
	{ rank = same;
		"direct-abstract-declarator/0000000000000000";
	};
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "ALT|&epsilon;" ];
	{ rank = same;
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
	};
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "SEQ" ];
	{ rank = same;
		"direct-abstract-declarator/0000000000000000";
	};
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "ALT|&epsilon;" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"static\"" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "\<assignment-expression\>" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"]\"" ];
	{ rank = same;
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
	};
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "SEQ" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"[\"" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "\<assignment-expression\>" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"]\"" ];
	{ rank = same;
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
	};
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "SEQ" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "\<direct-abstract-declarator\>" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"[\"" ];
	{ rank = same;
		"direct-abstract-declarator/0000000000000000";
	};
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "ALT|&epsilon;" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"*\"" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"]\"" ];
	{ rank = same;
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
	};
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "SEQ" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "\<direct-abstract-declarator\>" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"[\"" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"static\"" ];
	{ rank = same;
		"direct-abstract-declarator/0000000000000000";
	};
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "ALT|&epsilon;" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "\<type-qualifier-list\>" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "\<assignment-expression\>" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"]\"" ];
	{ rank = same;
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
	};
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "SEQ" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "\<direct-abstract-declarator\>" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"[\"" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "\<type-qualifier-list\>" ];
	{ rank = same;
		"direct-abstract-declarator/0000000000000000";
	};
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "ALT|&epsilon;" ];
	{ rank = same;
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
	};
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "SEQ" ];
	{ rank = same;
		"direct-abstract-declarator/0000000000000000";
	};
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "ALT|&epsilon;" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"static\"" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "\<assignment-expression\>" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"]\"" ];
	{ rank = same;
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
	};
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "SEQ" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "\<direct-abstract-declarator\>" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"[\"" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "\<assignment-expression\>" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"]\"" ];
	{ rank = same;
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
	};
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "SEQ" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "\<direct-abstract-declarator\>" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "\<parameter-type-list\>" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	{ rank = same;
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
		"direct-abstract-declarator/0000000000000000";
	};
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "SEQ" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ label = "\<direct-abstract-declarator\>" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"direct-abstract-declarator/0000000000000000" -> "direct-abstract-declarator/0000000000000000";
	"direct-abstract-declarator/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	"struct-declarator-list/0000000000000000" [ shape = plaintext, label = "struct-declarator-list" ];
	"struct-declarator-list/0000000000000000" -> "struct-declarator-list/0000000000000000";
	"struct-declarator-list/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"struct-declarator-list/0000000000000000":f -> "struct-declarator-list/0000000000000000";
	"struct-declarator-list/0000000000000000" [ label = "\<struct-declarator\>" ];
	"struct-declarator-list/0000000000000000":b -> "struct-declarator-list/0000000000000000";
	"struct-declarator-list/0000000000000000" [ style = "filled", shape = box, label = "\",\"" ];
	"type-qualifier-list/0000000000000000" [ shape = plaintext, label = "type-qualifier-list" ];
	"type-qualifier-list/0000000000000000" -> "type-qualifier-list/0000000000000000";
	"type-qualifier-list/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"type-qualifier-list/0000000000000000":f -> "type-qualifier-list/0000000000000000";
	"type-qualifier-list/0000000000000000" [ label = "\<type-qualifier\>" ];
	"parameter-type-list/0000000000000000" [ shape = plaintext, label = "parameter-type-list" ];
	{ rank = same;
		"parameter-type-list/0000000000000000";
		"parameter-type-list/0000000000000000";
	};
	"parameter-type-list/0000000000000000" -> "parameter-type-list/0000000000000000";
	"parameter-type-list/0000000000000000" [ label = "SEQ" ];
	"parameter-type-list/0000000000000000" -> "parameter-type-list/0000000000000000";
	"parameter-type-list/0000000000000000" [ label = "\<parameter-list\>" ];
	{ rank = same;
		"parameter-type-list/0000000000000000";
	};
	"parameter-type-list/0000000000000000" -> "parameter-type-list/0000000000000000";
	"parameter-type-list/0000000000000000" [ label = "ALT|&epsilon;" ];
	{ rank = same;
		"parameter-type-list/0000000000000000";
		"parameter-type-list/0000000000000000";
	};
	"parameter-type-list/0000000000000000" -> "parameter-type-list/0000000000000000";
	"parameter-type-list/0000000000000000" [ label = "SEQ" ];
	"parameter-type-list/0000000000000000" -> "parameter-type-list/0000000000000000";
	"parameter-type-list/0000000000000000" [ style = "filled", shape = box, label = "\",\"" ];
	"parameter-type-list/0000000000000000" -> "parameter-type-list/0000000000000000";
	"parameter-type-list/0000000000000000" [ style = "filled", shape = box, label = "\"...\"" ];
	"struct-declarator/0000000000000000" [ shape = plaintext, label = "struct-declarator" ];
	{ rank = same;
		"struct-declarator/0000000000000000";
		"struct-declarator/0000000000000000";
	};
	"struct-declarator/0000000000000000" -> "struct-declarator/0000000000000000";
	"struct-declarator/0000000000000000" [ label = "ALT" ];
	{ rank = same;
		"struct-declarator/0000000000000000";
		"struct-declarator/0000000000000000";
	};
	"struct-declarator/0000000000000000" -> "struct-declarator/0000000000000000";
	"struct-declarator/0000000000000000" [ label = "SEQ" ];
	"struct-declarator/0000000000000000" -> "struct-declarator/0000000000000000";
	"struct-declarator/0000000000000000" [ style = "filled", shape = box, label = "\":\"" ];
	"struct-declarator/0000000000000000" -> "struct-declarator/0000000000000000";
	"struct-declarator/0000000000000000" [ label = "\<constant-expression\>" ];
	{ rank = same;
		"struct-declarator/0000000000000000";
		"struct-declarator/0000000000000000";
	};
	"struct-declarator/0000000000000000" -> "struct-declarator/0000000000000000";
	"struct-declarator/0000000000000000" [ label = "SEQ" ];
	"struct-declarator/0000000000000000" -> "struct-declarator/0000000000000000";
	"struct-declarator/0000000000000000" [ label = "\<declarator\>" ];
	{ rank = same;
		"struct-declarator/0000000000000000";
	};
	"struct-declarator/0000000000000000" -> "struct-declarator/0000000000000000";
	"struct-declarator/0000000000000000" [ label = "ALT|&epsilon;" ];
	{ rank = same;
		"struct-declarator/0000000000000000";
		"struct-declarator/0000000000000000";
	};
	"struct-declarator/0000000000000000" -> "struct-declarator/0000000000000000";
	"struct-declarator/0000000000000000" [ label = "SEQ" ];
	"struct-declarator/0000000000000000" -> "struct-declarator/0000000000000000";
	"struct-declarator/0000000000000000" [ style = "filled", shape = box, label = "\":\"" ];
	"struct-declarator/0000000000000000" -> "struct-declarator/0000000000000000";
	"struct-declarator/0000000000000000" [ label = "\<constant-expression\>" ];
	"assignment-operator/0000000000000000" [ shape = plaintext, label = "assignment-operator" ];
	{ rank = same;
		"assignment-operator/0000000000000000";
		"assignment-operator/0000000000000000";
		"assignment-operator/0000000000000000";
		"assignment-operator/0000000000000000";
		"assignment-operator/0000000000000000";
		"assignment-operator/0000000000000000";
		"assignment-operator/0000000000000000";
		"assignment-operator/0000000000000000";
		"assignment-operator/0000000000000000";
		"assignment-operator/0000000000000000";
		"assignment-operator/0000000000000000";
	};
	"assignment-operator/0000000000000000" -> "assignment-operator/0000000000000000";
	"assignment-operator/0000000000000000" [ label = "ALT" ];
	"assignment-operator/0000000000000000" -> "assignment-operator/0000000000000000";
	"assignment-operator/0000000000000000" [ style = "filled", shape = box, label = "\"=\"" ];
	"assignment-operator/0000000000000000" -> "assignment-operator/0000000000000000";
	"assignment-operator/0000000000000000" [ style = "filled", shape = box, label = "\"*=\"" ];
	"assignment-operator/0000000000000000" -> "assignment-operator/0000000000000000";
	"assignment-operator/0000000000000000" [ style = "filled", shape = box, label = "\"/=\"" ];
	"assignment-operator/0000000000000000" -> "assignment-operator/0000000000000000";
	"assignment-operator/0000000000000000" [ style = "filled", shape = box, label = "\"%=\"" ];
	"assignment-operator/0000000000000000" -> "assignment-operator/0000000000000000";
	"assignment-operator/0000000000000000" [ style = "filled", shape = box, label = "\"+=\"" ];
	"assignment-operator/0000000000000000" -> "assignment-operator/0000000000000000";
	"assignment-operator/0000000000000000" [ style = "filled", shape = box, label = "\"-=\"" ];
	"assignment-operator/0000000000000000" -> "assignment-operator/0000000000000000";
	"assignment-operator/0000000000000000" [ style = "filled", shape = box, label = "\"&#x3C;&#x3C;=\"" ];
	"assignment-operator/0000000000000000" -> "assignment-operator/0000000000000000";
	"assignment-operator/0000000000000000" [ style = "filled", shape = box, label = "\"&#x3E;&#x3E;=\"" ];
	"assignment-operator/0000000000000000" -> "assignment-operator/0000000000000000";
	"assignment-operator/0000000000000000" [ style = "filled", shape = box, label = "\"&amp;=\"" ];
	"assignment-operator/0000000000000000" -> "assignment-operator/0000000000000000";
	"assignment-operator/0000000000000000" [ style = "filled", shape = box, label = "\"^=\"" ];
	"assignment-operator/0000000000000000" -> "assignment-operator/0000000000000000";
	"assignment-operator/0000000000000000" [ style = "filled", shape = box, label = "\"|=\"" ];
	"parameter-list/0000000000000000" [ shape = plaintext, label = "parameter-list" ];
	"parameter-list/0000000000000000" -> "parameter-list/0000000000000000";
	"parameter-list/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"parameter-list/0000000000000000":f -> "parameter-list/0000000000000000";
	"parameter-list/0000000000000000" [ label = "\<parameter-declaration\>" ];
	"parameter-list/0000000000000000":b -> "parameter-list/0000000000000000";
	"parameter-list/0000000000000000" [ style = "filled", shape = box, label = "\",\"" ];
	"parameter-declaration/0000000000000000" [ shape = plaintext, label = "parameter-declaration" ];
	{ rank = same;
		"parameter-declaration/0000000000000000";
		"parameter-declaration/0000000000000000";
	};
	"parameter-declaration/0000000000000000" -> "parameter-declaration/0000000000000000";
	"parameter-declaration/0000000000000000" [ label = "SEQ" ];
	"parameter-declaration/0000000000000000" -> "parameter-declaration/0000000000000000";
	"parameter-declaration/0000000000000000" [ label = "\<declaration-specifiers\>" ];
	{ rank = same;
		"parameter-declaration/0000000000000000";
		"parameter-declaration/0000000000000000";
	};
	"parameter-declaration/0000000000000000" -> "parameter-declaration/0000000000000000";
	"parameter-declaration/0000000000000000" [ label = "ALT|&epsilon;" ];
	"parameter-declaration/0000000000000000" -> "parameter-declaration/0000000000000000";
	"parameter-declaration/0000000000000000" [ label = "\<declarator\>" ];
	"parameter-declaration/0000000000000000" -> "parameter-declaration/0000000000000000";
	"parameter-declaration/0000000000000000" [ label = "\<abstract-declarator\>" ];
	"expression/0000000000000000" [ shape = plaintext, label = "expression" ];
	"expression/0000000000000000" -> "expression/0000000000000000";
	"expression/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"expression/0000000000000000":f -> "expression/0000000000000000";
	"expression/0000000000000000" [ label = "\<assignment-expression\>" ];
	"expression/0000000000000000":b -> "expression/0000000000000000";
	"expression/0000000000000000" [ style = "filled", shape = box, label = "\",\"" ];
	"assignment-expression/0000000000000000" [ shape = plaintext, label = "assignment-expression" ];
	{ rank = same;
		"assignment-expression/0000000000000000";
		"assignment-expression/0000000000000000";
	};
	"assignment-expression/0000000000000000" -> "assignment-expression/0000000000000000";
	"assignment-expression/0000000000000000" [ label = "ALT" ];
	"assignment-expression/0000000000000000" -> "assignment-expression/0000000000000000";
	"assignment-expression/0000000000000000" [ label = "\<conditional-expression\>" ];
	{ rank = same;
		"assignment-expression/0000000000000000";
		"assignment-expression/0000000000000000";
		"assignment-expression/0000000000000000";
	};
	"assignment-expression/0000000000000000" -> "assignment-expression/0000000000000000";
	"assignment-expression/0000000000000000" [ label = "SEQ" ];
	"assignment-expression/0000000000000000" -> "assignment-expression/0000000000000000";
	"assignment-expression/0000000000000000" [ label = "\<unary-expression\>" ];
	"assignment-expression/0000000000000000" -> "assignment-expression/0000000000000000";
	"assignment-expression/0000000000000000" [ label = "\<assignment-operator\>" ];
	"assignment-expression/0000000000000000" -> "assignment-expression/0000000000000000";
	"assignment-expression/0000000000000000" [ label = "\<assignment-expression\>" ];
	"conditional-expression/0000000000000000" [ shape = plaintext, label = "conditional-expression" ];
	{ rank = same;
		"conditional-expression/0000000000000000";
		"conditional-expression/0000000000000000";
	};
	"conditional-expression/0000000000000000" -> "conditional-expression/0000000000000000";
	"conditional-expression/0000000000000000" [ label = "SEQ" ];
	"conditional-expression/0000000000000000" -> "conditional-expression/0000000000000000";
	"conditional-expression/0000000000000000" [ label = "\<logical-or-expression\>" ];
	{ rank = same;
		"conditional-expression/0000000000000000";
	};
	"conditional-expression/0000000000000000" -> "conditional-expression/0000000000000000";
	"conditional-expression/0000000000000000" [ label = "ALT|&epsilon;" ];
	{ rank = same;
		"conditional-expression/0000000000000000";
		"conditional-expression/0000000000000000";
		"conditional-expression/0000000000000000";
		"conditional-expression/0000000000000000";
	};
	"conditional-expression/0000000000000000" -> "conditional-expression/0000000000000000";
	"conditional-expression/0000000000000000" [ label = "SEQ" ];
	"conditional-expression/0000000000000000" -> "conditional-expression/0000000000000000";
	"conditional-expression/0000000000000000" [ style = "filled", shape = box, label = "\"?\"" ];
	"conditional-expression/0000000000000000" -> "conditional-expression/0000000000000000";
	"conditional-expression/0000000000000000" [ label = "\<expression\>" ];
	"conditional-expression/0000000000000000" -> "conditional-expression/0000000000000000";
	"conditional-expression/0000000000000000" [ style = "filled", shape = box, label = "\":\"" ];
	"conditional-expression/0000000000000000" -> "conditional-expression/0000000000000000";
	"conditional-expression/0000000000000000" [ label = "\<conditional-expression\>" ];
	"logical-or-expression/0000000000000000" [ shape = plaintext, label = "logical-or-expression" ];
	"logical-or-expression/0000000000000000" -> "logical-or-expression/0000000000000000";
	"logical-or-expression/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"logical-or-expression/0000000000000000":f -> "logical-or-expression/0000000000000000";
	"logical-or-expression/0000000000000000" [ label = "\<logical-and-expression\>" ];
	"logical-or-expression/0000000000000000":b -> "logical-or-expression/0000000000000000";
	"logical-or-expression/0000000000000000" [ style = "filled", shape = box, label = "\"||\"" ];
	"logical-and-expression/0000000000000000" [ shape = plaintext, label = "logical-and-expression" ];
	"logical-and-expression/0000000000000000" -> "logical-and-expression/0000000000000000";
	"logical-and-expression/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"logical-and-expression/0000000000000000":f -> "logical-and-expression/0000000000000000";
	"logical-and-expression/0000000000000000" [ label = "\<inclusive-or-expression\>" ];
	"logical-and-expression/0000000000000000":b -> "logical-and-expression/0000000000000000";
	"logical-and-expression/0000000000000000" [ style = "filled", shape = box, label = "\"&amp;&amp;\"" ];
	"inclusive-or-expression/0000000000000000" [ shape = plaintext, label = "inclusive-or-expression" ];
	"inclusive-or-expression/0000000000000000" -> "inclusive-or-expression/0000000000000000";
	"inclusive-or-expression/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"inclusive-or-expression/0000000000000000":f -> "inclusive-or-expression/0000000000000000";
	"inclusive-or-expression/0000000000000000" [ label = "\<exclusive-or-expression\>" ];
	"inclusive-or-expression/0000000000000000":b -> "inclusive-or-expression/0000000000000000";
	"inclusive-or-expression/0000000000000000" [ style = "filled", shape = box, label = "\"|\"" ];
	"exclusive-or-expression/0000000000000000" [ shape = plaintext, label = "exclusive-or-expression" ];
	"exclusive-or-expression/0000000000000000" -> "exclusive-or-expression/0000000000000000";
	"exclusive-or-expression/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"exclusive-or-expression/0000000000000000":f -> "exclusive-or-expression/0000000000000000";
	"exclusive-or-expression/0000000000000000" [ label = "\<and-expression\>" ];
	"exclusive-or-expression/0000000000000000":b -> "exclusive-or-expression/0000000000000000";
	"exclusive-or-expression/0000000000000000" [ style = "filled", shape = box, label = "\"^\"" ];
	"and-expression/0000000000000000" [ shape = plaintext, label = "and-expression" ];
	"and-expression/0000000000000000" -> "and-expression/0000000000000000";
	"and-expression/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"and-expression/0000000000000000":f -> "and-expression/0000000000000000";
	"and-expression/0000000000000000" [ label = "\<equality-expression\>" ];
	"and-expression/0000000000000000":b -> "and-expression/0000000000000000";
	"and-expression/0000000000000000" [ style = "filled", shape = box, label = "\"&amp;\"" ];
	"equality-expression/0000000000000000" [ shape = plaintext, label = "equality-expression" ];
	"equality-expression/0000000000000000" -> "equality-expression/0000000000000000";
	"equality-expression/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"equality-expression/0000000000000000":f -> "equality-expression/0000000000000000";
	"equality-expression/0000000000000000" [ label = "\<relational-expression\>" ];
	{ rank = same;
		"equality-expression/0000000000000000";
		"equality-expression/0000000000000000";
	};
	"equality-expression/0000000000000000":b -> "equality-expression/0000000000000000";
	"equality-expression/0000000000000000" [ label = "ALT" ];
	"equality-expression/0000000000000000" -> "equality-expression/0000000000000000";
	"equality-expression/0000000000000000" [ style = "filled", shape = box, label = "\"==\"" ];
	"equality-expression/0000000000000000" -> "equality-expression/0000000000000000";
	"equality-expression/0000000000000000" [ style = "filled", shape = box, label = "\"!=\"" ];
	"relational-expression/0000000000000000" [ shape = plaintext, label = "relational-expression" ];
	"relational-expression/0000000000000000" -> "relational-expression/0000000000000000";
	"relational-expression/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"relational-expression/0000000000000000":f -> "relational-expression/0000000000000000";
	"relational-expression/0000000000000000" [ label = "\<shift-expression\>" ];
	{ rank = same;
		"relational-expression/0000000000000000";
		"relational-expression/0000000000000000";
		"relational-expression/0000000000000000";
		"relational-expression/0000000000000000";
	};
	"relational-expression/0000000000000000":b -> "relational-expression/0000000000000000";
	"relational-expression/0000000000000000" [ label = "ALT" ];
	"relational-expression/0000000000000000" -> "relational-expression/0000000000000000";
	"relational-expression/0000000000000000" [ style = "filled", shape = box, label = "\"&#x3C;\"" ];
	"relational-expression/0000000000000000" -> "relational-expression/0000000000000000";
	"relational-expression/0000000000000000" [ style = "filled", shape = box, label = "\"&#x3E;\"" ];
	"relational-expression/0000000000000000" -> "relational-expression/0000000000000000";
	"relational-expression/0000000000000000" [ style = "filled", shape = box, label = "\"&#x3C;=\"" ];
	"relational-expression/0000000000000000" -> "relational-expression/0000000000000000";
	"relational-expression/0000000000000000" [ style = "filled", shape = box, label = "\"&#x3E;=\"" ];
	"shift-expression/0000000000000000" [ shape = plaintext, label = "shift-expression" ];
	"shift-expression/0000000000000000" -> "shift-expression/0000000000000000";
	"shift-expression/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"shift-expression/0000000000000000":f -> "shift-expression/0000000000000000";
	"shift-expression/0000000000000000" [ label = "\<additive-expression\>" ];
	{ rank = same;
		"shift-expression/0000000000000000";
		"shift-expression/0000000000000000";
	};
	"shift-expression/0000000000000000":b -> "shift-expression/0000000000000000";
	"shift-expression/0000000000000000" [ label = "ALT" ];
	"shift-expression/0000000000000000" -> "shift-expression/0000000000000000";
	"shift-expression/0000000000000000" [ style = "filled", shape = box, label = "\"&#x3C;&#x3C;\"" ];
	"shift-expression/0000000000000000" -> "shift-expression/0000000000000000";
	"shift-expression/0000000000000000" [ style = "filled", shape = box, label = "\"&#x3E;&#x3E;\"" ];
	"additive-expression/0000000000000000" [ shape = plaintext, label = "additive-expression" ];
	"additive-expression/0000000000000000" -> "additive-expression/0000000000000000";
	"additive-expression/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"additive-expression/0000000000000000":f -> "additive-expression/0000000000000000";
	"additive-expression/0000000000000000" [ label = "\<multiplicative-expression\>" ];
	{ rank = same;
		"additive-expression/0000000000000000";
		"additive-expression/0000000000000000";
	};
	"additive-expression/0000000000000000":b -> "additive-expression/0000000000000000";
	"additive-expression/0000000000000000" [ label = "ALT" ];
	"additive-expression/0000000000000000" -> "additive-expression/0000000000000000";
	"additive-expression/0000000000000000" [ style = "filled", shape = box, label = "\"+\"" ];
	"additive-expression/0000000000000000" -> "additive-expression/0000000000000000";
	"additive-expression/0000000000000000" [ style = "filled", shape = box, label = "\"-\"" ];
	"multiplicative-expression/0000000000000000" [ shape = plaintext, label = "multiplicative-expression" ];
	"multiplicative-expression/0000000000000000" -> "multiplicative-expression/0000000000000000";
	"multiplicative-expression/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"multiplicative-expression/0000000000000000":f -> "multiplicative-expression/0000000000000000";
	"multiplicative-expression/0000000000000000" [ label = "\<cast-expression\>" ];
	{ rank = same;
		"multiplicative-expression/0000000000000000";
		"multiplicative-expression/0000000000000000";
		"multiplicative-expression/0000000000000000";
	};
	"multiplicative-expression/0000000000000000":b -> "multiplicative-expression/0000000000000000";
	"multiplicative-expression/0000000000000000" [ label = "ALT" ];
	"multiplicative-expression/0000000000000000" -> "multiplicative-expression/0000000000000000";
	"multiplicative-expression/0000000000000000" [ style = "filled", shape = box, label = "\"*\"" ];
	"multiplicative-expression/0000000000000000" -> "multiplicative-expression/0000000000000000";
	"multiplicative-expression/0000000000000000" [ style = "filled", shape = box, label = "\"/\"" ];
	"multiplicative-expression/0000000000000000" -> "multiplicative-expression/0000000000000000";
	"multiplicative-expression/0000000000000000" [ style = "filled", shape = box, label = "\"%\"" ];
	"cast-expression/0000000000000000" [ shape = plaintext, label = "cast-expression" ];
	{ rank = same;
		"cast-expression/0000000000000000";
		"cast-expression/0000000000000000";
	};
	"cast-expression/0000000000000000" -> "cast-expression/0000000000000000";
	"cast-expression/0000000000000000" [ label = "ALT" ];
	"cast-expression/0000000000000000" -> "cast-expression/0000000000000000";
	"cast-expression/0000000000000000" [ label = "\<unary-expression\>" ];
	{ rank = same;
		"cast-expression/0000000000000000";
		"cast-expression/0000000000000000";
		"cast-expression/0000000000000000";
		"cast-expression/0000000000000000";
	};
	"cast-expression/0000000000000000" -> "cast-expression/0000000000000000";
	"cast-expression/0000000000000000" [ label = "SEQ" ];
	"cast-expression/0000000000000000" -> "cast-expression/0000000000000000";
	"cast-expression/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"cast-expression/0000000000000000" -> "cast-expression/0000000000000000";
	"cast-expression/0000000000000000" [ label = "\<type-name\>" ];
	"cast-expression/0000000000000000" -> "cast-expression/0000000000000000";
	"cast-expression/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	"cast-expression/0000000000000000" -> "cast-expression/0000000000000000";
	"cast-expression/0000000000000000" [ label = "\<cast-expression\>" ];
	"unary-expression/0000000000000000" [ shape = plaintext, label = "unary-expression" ];
	{ rank = same;
		"unary-expression/0000000000000000";
		"unary-expression/0000000000000000";
		"unary-expression/0000000000000000";
		"unary-expression/0000000000000000";
		"unary-expression/0000000000000000";
		"unary-expression/0000000000000000";
	};
	"unary-expression/0000000000000000" -> "unary-expression/0000000000000000";
	"unary-expression/0000000000000000" [ label = "ALT" ];
	"unary-expression/0000000000000000" -> "unary-expression/0000000000000000";
	"unary-expression/0000000000000000" [ label = "\<postfix-expression\>" ];
	{ rank = same;
		"unary-expression/0000000000000000";
		"unary-expression/0000000000000000";
	};
	"unary-expression/0000000000000000" -> "unary-expression/0000000000000000";
	"unary-expression/0000000000000000" [ label = "SEQ" ];
	{ rank = same;
		"unary-expression/0000000000000000";
		"unary-expression/0000000000000000";
	};
	"unary-expression/0000000000000000" -> "unary-expression/0000000000000000";
	"unary-expression/0000000000000000" [ label = "ALT" ];
	"unary-expression/0000000000000000" -> "unary-expression/0000000000000000";
	"unary-expression/0000000000000000" [ style = "filled", shape = box, label = "\"++\"" ];
	"unary-expression/0000000000000000" -> "unary-expression/0000000000000000";
	"unary-expression/0000000000000000" [ style = "filled", shape = box, label = "\"--\"" ];
	"unary-expression/0000000000000000" -> "unary-expression/0000000000000000";
	"unary-expression/0000000000000000" [ label = "\<unary-expression\>" ];
	{ rank = same;
		"unary-expression/0000000000000000";
		"unary-expression/0000000000000000";
	};
	"unary-expression/0000000000000000" -> "unary-expression/0000000000000000";
	"unary-expression/0000000000000000" [ label = "SEQ" ];
	"unary-expression/0000000000000000" -> "unary-expression/0000000000000000";
	"unary-expression/0000000000000000" [ label = "\<unary-operator\>" ];
	"unary-expression/0000000000000000" -> "unary-expression/0000000000000000";
	"unary-expression/0000000000000000" [ label = "\<cast-expression\>" ];
	{ rank = same;
		"unary-expression/0000000000000000";
		"unary-expression/0000000000000000";
	};
	"unary-expression/0000000000000000" -> "unary-expression/0000000000000000";
	"unary-expression/0000000000000000" [ label = "SEQ" ];
	"unary-expression/0000000000000000" -> "unary-expression/0000000000000000";
	"unary-expression/0000000000000000" [ style = "filled", shape = box, label = "\"sizeof\"" ];
	"unary-expression/0000000000000000" -> "unary-expression/0000000000000000";
	"unary-expression/0000000000000000" [ label = "\<unary-expression\>" ];
	{ rank = same;
		"unary-expression/0000000000000000";
		"unary-expression/0000000000000000";
		"unary-expression/0000000000000000";
		"unary-expression/0000000000000000";
	};
	"unary-expression/0000000000000000" -> "unary-expression/0000000000000000";
	"unary-expression/0000000000000000" [ label = "SEQ" ];
	"unary-expression/0000000000000000" -> "unary-expression/0000000000000000";
	"unary-expression/0000000000000000" [ style = "filled", shape = box, label = "\"sizeof\"" ];
	"unary-expression/0000000000000000" -> "unary-expression/0000000000000000";
	"unary-expression/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"unary-expression/0000000000000000" -> "unary-expression/0000000000000000";
	"unary-expression/0000000000000000" [ label = "\<type-name\>" ];
	"unary-expression/0000000000000000" -> "unary-expression/0000000000000000";
	"unary-expression/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	{ rank = same;
		"unary-expression/0000000000000000";
		"unary-expression/0000000000000000";
		"unary-expression/0000000000000000";
		"unary-expression/0000000000000000";
	};
	"unary-expression/0000000000000000" -> "unary-expression/0000000000000000";
	"unary-expression/0000000000000000" [ label = "SEQ" ];
	"unary-expression/0000000000000000" -> "unary-expression/0000000000000000";
	"unary-expression/0000000000000000" [ style = "filled", shape = box, label = "\"_Alignof\"" ];
	"unary-expression/0000000000000000" -> "unary-expression/0000000000000000";
	"unary-expression/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"unary-expression/0000000000000000" -> "unary-expression/0000000000000000";
	"unary-expression/0000000000000000" [ label = "\<type-name\>" ];
	"unary-expression/0000000000000000" -> "unary-expression/0000000000000000";
	"unary-expression/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	"postfix-expression/0000000000000000" [ shape = plaintext, label = "postfix-expression" ];
	{ rank = same;
		"postfix-expression/0000000000000000";
		"postfix-expression/0000000000000000";
		"postfix-expression/0000000000000000";
		"postfix-expression/0000000000000000";
		"postfix-expression/0000000000000000";
		"postfix-expression/0000000000000000";
	};
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ label = "ALT" ];
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ label = "\<primary-expression\>" ];
	{ rank = same;
		"postfix-expression/0000000000000000";
		"postfix-expression/0000000000000000";
		"postfix-expression/0000000000000000";
		"postfix-expression/0000000000000000";
	};
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ label = "SEQ" ];
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ label = "\<postfix-expression\>" ];
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ style = "filled", shape = box, label = "\"[\"" ];
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ label = "\<expression\>" ];
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ style = "filled", shape = box, label = "\"]\"" ];
	{ rank = same;
		"postfix-expression/0000000000000000";
		"postfix-expression/0000000000000000";
		"postfix-expression/0000000000000000";
		"postfix-expression/0000000000000000";
	};
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ label = "SEQ" ];
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ label = "\<postfix-expression\>" ];
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	{ rank = same;
		"postfix-expression/0000000000000000";
	};
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ label = "ALT|&epsilon;" ];
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ label = "\<argument-expression-list\>" ];
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	{ rank = same;
		"postfix-expression/0000000000000000";
		"postfix-expression/0000000000000000";
		"postfix-expression/0000000000000000";
	};
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ label = "SEQ" ];
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ label = "\<postfix-expression\>" ];
	{ rank = same;
		"postfix-expression/0000000000000000";
		"postfix-expression/0000000000000000";
	};
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ label = "ALT" ];
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ style = "filled", shape = box, label = "\".\"" ];
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ style = "filled", shape = box, label = "\"-&#x3E;\"" ];
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ label = "\<identifier\>" ];
	{ rank = same;
		"postfix-expression/0000000000000000";
		"postfix-expression/0000000000000000";
	};
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ label = "SEQ" ];
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ label = "\<postfix-expression\>" ];
	{ rank = same;
		"postfix-expression/0000000000000000";
		"postfix-expression/0000000000000000";
	};
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ label = "ALT" ];
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ style = "filled", shape = box, label = "\"++\"" ];
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ style = "filled", shape = box, label = "\"--\"" ];
	{ rank = same;
		"postfix-expression/0000000000000000";
		"postfix-expression/0000000000000000";
		"postfix-expression/0000000000000000";
		"postfix-expression/0000000000000000";
		"postfix-expression/0000000000000000";
		"postfix-expression/0000000000000000";
		"postfix-expression/0000000000000000";
	};
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ label = "SEQ" ];
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ label = "\<type-name\>" ];
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ style = "filled", shape = box, label = "\"{\"" ];
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ label = "\<initializer-list\>" ];
	{ rank = same;
		"postfix-expression/0000000000000000";
	};
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ label = "ALT|&epsilon;" ];
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ style = "filled", shape = box, label = "\",\"" ];
	"postfix-expression/0000000000000000" -> "postfix-expression/0000000000000000";
	"postfix-expression/0000000000000000" [ style = "filled", shape = box, label = "\"}\"" ];
	"unary-operator/0000000000000000" [ shape = plaintext, label = "unary-operator" ];
	{ rank = same;
		"unary-operator/0000000000000000";
		"unary-operator/0000000000000000";
		"unary-operator/0000000000000000";
		"unary-operator/0000000000000000";
		"unary-operator/0000000000000000";
		"unary-operator/0000000000000000";
	};
	"unary-operator/0000000000000000" -> "unary-operator/0000000000000000";
	"unary-operator/0000000000000000" [ label = "ALT" ];
	"unary-operator/0000000000000000" -> "unary-operator/0000000000000000";
	"unary-operator/0000000000000000" [ style = "filled", shape = box, label = "\"&amp;\"" ];
	"unary-operator/0000000000000000" -> "unary-operator/0000000000000000";
	"unary-operator/0000000000000000" [ style = "filled", shape = box, label = "\"*\"" ];
	"unary-operator/0000000000000000" -> "unary-operator/0000000000000000";
	"unary-operator/0000000000000000" [ style = "filled", shape = box, label = "\"+\"" ];
	"unary-operator/0000000000000000" -> "unary-operator/0000000000000000";
	"unary-operator/0000000000000000" [ style = "filled", shape = box, label = "\"-\"" ];
	"unary-operator/0000000000000000" -> "unary-operator/0000000000000000";
	"unary-operator/0000000000000000" [ style = "filled", shape = box, label = "\"~\"" ];
	"unary-operator/0000000000000000" -> "unary-operator/0000000000000000";
	"unary-operator/0000000000000000" [ style = "filled", shape = box, label = "\"!\"" ];
	"primary-expression/0000000000000000" [ shape = plaintext, label = "primary-expression" ];
	{ rank = same;
		"primary-expression/0000000000000000";
		"primary-expression/0000000000000000";
		"primary-expression/0000000000000000";
		"primary-expression/0000000000000000";
		"primary-expression/0000000000000000";
	};
	"primary-expression/0000000000000000" -> "primary-expression/0000000000000000";
	"primary-expression/0000000000000000" [ label = "ALT" ];
	"primary-expression/0000000000000000" -> "primary-expression/0000000000000000";
	"primary-expression/0000000000000000" [ label = "\<identifier\>" ];
	"primary-expression/0000000000000000" -> "primary-expression/0000000000000000";
	"primary-expression/0000000000000000" [ label = "\<constant\>" ];
	"primary-expression/0000000000000000" -> "primary-expression/0000000000000000";
	"primary-expression/0000000000000000" [ label = "\<string\>" ];
	{ rank = same;
		"primary-expression/0000000000000000";
		"primary-expression/0000000000000000";
		"primary-expression/0000000000000000";
	};
	"primary-expression/0000000000000000" -> "primary-expression/0000000000000000";
	"primary-expression/0000000000000000" [ label = "SEQ" ];
	"primary-expression/0000000000000000" -> "primary-expression/0000000000000000";
	"primary-expression/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"primary-expression/0000000000000000" -> "primary-expression/0000000000000000";
	"primary-expression/0000000000000000" [ label = "\<expression\>" ];
	"primary-expression/0000000000000000" -> "primary-expression/0000000000000000";
	"primary-expression/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	"primary-expression/0000000000000000" -> "primary-expression/0000000000000000";
	"primary-expression/0000000000000000" [ label = "\<generic-selection\>" ];
	"argument-expression-list/0000000000000000" [ shape = plaintext, label = "argument-expression-list" ];
	"argument-expression-list/0000000000000000" -> "argument-expression-list/0000000000000000";
	"argument-expression-list/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"argument-expression-list/0000000000000000":f -> "argument-expression-list/0000000000000000";
	"argument-expression-list/0000000000000000" [ label = "\<assignment-expression\>" ];
	"argument-expression-list/0000000000000000":b -> "argument-expression-list/0000000000000000";
	"argument-expression-list/0000000000000000" [ style = "filled", shape = box, label = "\",\"" ];
	"constant/0000000000000000" [ shape = plaintext, label = "constant" ];
	{ rank = same;
		"constant/0000000000000000";
		"constant/0000000000000000";
		"constant/0000000000000000";
		"constant/0000000000000000";
	};
	"constant/0000000000000000" -> "constant/0000000000000000";
	"constant/0000000000000000" [ label = "ALT" ];
	"constant/0000000000000000" -> "constant/0000000000000000";
	"constant/0000000000000000" [ label = "\<integer-constant\>" ];
	"constant/0000000000000000" -> "constant/0000000000000000";
	"constant/0000000000000000" [ label = "\<character-constant\>" ];
	"constant/0000000000000000" -> "constant/0000000000000000";
	"constant/0000000000000000" [ label = "\<floating-constant\>" ];
	"constant/0000000000000000" -> "constant/0000000000000000";
	"constant/0000000000000000" [ label = "\<enumeration-constant\>" ];
	"string/0000000000000000" [ shape = plaintext, label = "string" ];
	{ rank = same;
		"string/0000000000000000";
		"string/0000000000000000";
	};
	"string/0000000000000000" -> "string/0000000000000000";
	"string/0000000000000000" [ label = "ALT" ];
	"string/0000000000000000" -> "string/0000000000000000";
	"string/0000000000000000" [ label = "\<string-literal\>" ];
	"string/0000000000000000" -> "string/0000000000000000";
	"string/0000000000000000" [ style = "filled", shape = box, label = "\"__func__\"" ];
	"generic-selection/0000000000000000" [ shape = plaintext, label = "generic-selection" ];
	{ rank = same;
		"generic-selection/0000000000000000";
		"generic-selection/0000000000000000";
		"generic-selection/0000000000000000";
		"generic-selection/0000000000000000";
		"generic-selection/0000000000000000";
		"generic-selection/0000000000000000";
	};
	"generic-selection/0000000000000000" -> "generic-selection/0000000000000000";
	"generic-selection/0000000000000000" [ label = "SEQ" ];
	"generic-selection/0000000000000000" -> "generic-selection/0000000000000000";
	"generic-selection/0000000000000000" [ style = "filled", shape = box, label = "\"_Generic\"" ];
	"generic-selection/0000000000000000" -> "generic-selection/0000000000000000";
	"generic-selection/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"generic-selection/0000000000000000" -> "generic-selection/0000000000000000";
	"generic-selection/0000000000000000" [ label = "\<assignment-expression\>" ];
	"generic-selection/0000000000000000" -> "generic-selection/0000000000000000";
	"generic-selection/0000000000000000" [ style = "filled", shape = box, label = "\",\"" ];
	"generic-selection/0000000000000000" -> "generic-selection/0000000000000000";
	"generic-selection/0000000000000000" [ label = "\<generic-assoc-list\>" ];
	"generic-selection/0000000000000000" -> "generic-selection/0000000000000000";
	"generic-selection/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	"generic-assoc-list/0000000000000000" [ shape = plaintext, label = "generic-assoc-list" ];
	"generic-assoc-list/0000000000000000" -> "generic-assoc-list/0000000000000000";
	"generic-assoc-list/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"generic-assoc-list/0000000000000000":f -> "generic-assoc-list/0000000000000000";
	"generic-assoc-list/0000000000000000" [ label = "\<generic-association\>" ];
	"generic-assoc-list/0000000000000000":b -> "generic-assoc-list/0000000000000000";
	"generic-assoc-list/0000000000000000" [ style = "filled", shape = box, label = "\",\"" ];
	"generic-association/0000000000000000" [ shape = plaintext, label = "generic-association" ];
	{ rank = same;
		"generic-association/0000000000000000";
		"generic-association/0000000000000000";
	};
	"generic-association/0000000000000000" -> "generic-association/0000000000000000";
	"generic-association/0000000000000000" [ label = "ALT" ];
	{ rank = same;
		"generic-association/0000000000000000";
		"generic-association/0000000000000000";
		"generic-association/0000000000000000";
	};
	"generic-association/0000000000000000" -> "generic-association/0000000000000000";
	"generic-association/0000000000000000" [ label = "SEQ" ];
	"generic-association/0000000000000000" -> "generic-association/0000000000000000";
	"generic-association/0000000000000000" [ label = "\<type-name\>" ];
	"generic-association/0000000000000000" -> "generic-association/0000000000000000";
	"generic-association/0000000000000000" [ style = "filled", shape = box, label = "\":\"" ];
	"generic-association/0000000000000000" -> "generic-association/0000000000000000";
	"generic-association/0000000000000000" [ label = "\<assignment-expression\>" ];
	{ rank = same;
		"generic-association/0000000000000000";
		"generic-association/0000000000000000";
		"generic-association/0000000000000000";
	};
	"generic-association/0000000000000000" -> "generic-association/0000000000000000";
	"generic-association/0000000000000000" [ label = "SEQ" ];
	"generic-association/0000000000000000" -> "generic-association/0000000000000000";
	"generic-association/0000000000000000" [ style = "filled", shape = box, label = "\"default\"" ];
	"generic-association/0000000000000000" -> "generic-association/0000000000000000";
	"generic-association/0000000000000000" [ style = "filled", shape = box, label = "\":\"" ];
	"generic-association/0000000000000000" -> "generic-association/0000000000000000";
	"generic-association/0000000000000000" [ label = "\<assignment-expression\>" ];
	"designation/0000000000000000" [ shape = plaintext, label = "designation" ];
	{ rank = same;
		"designation/0000000000000000";
		"designation/0000000000000000";
	};
	"designation/0000000000000000" -> "designation/0000000000000000";
	"designation/0000000000000000" [ label = "SEQ" ];
	"designation/0000000000000000" -> "designation/0000000000000000";
	"designation/0000000000000000" [ label = "\<designator-list\>" ];
	"designation/0000000000000000" -> "designation/0000000000000000";
	"designation/0000000000000000" [ style = "filled", shape = box, label = "\"=\"" ];
	"designator-list/0000000000000000" [ shape = plaintext, label = "designator-list" ];
	"designator-list/0000000000000000" -> "designator-list/0000000000000000";
	"designator-list/0000000000000000" [ label = "<b> &larr;|LOOP \{0,\}&times;|<f> &rarr;" ];
	"designator-list/0000000000000000":f -> "designator-list/0000000000000000";
	"designator-list/0000000000000000" [ label = "\<designator\>" ];
	"designator/0000000000000000" [ shape = plaintext, label = "designator" ];
	{ rank = same;
		"designator/0000000000000000";
		"designator/0000000000000000";
	};
	"designator/0000000000000000" -> "designator/0000000000000000";
	"designator/0000000000000000" [ label = "ALT" ];
	{ rank = same;
		"designator/0000000000000000";
		"designator/0000000000000000";
		"designator/0000000000000000";
	};
	"designator/0000000000000000" -> "designator/0000000000000000";
	"designator/0000000000000000" [ label = "SEQ" ];
	"designator/0000000000000000" -> "designator/0000000000000000";
	"designator/0000000000000000" [ style = "filled", shape = box, label = "\"[\"" ];
	"designator/0000000000000000" -> "designator/0000000000000000";
	"designator/0000000000000000" [ label = "\<constant-expression\>" ];
	"designator/0000000000000000" -> "designator/0000000000000000";
	"designator/0000000000000000" [ style = "filled", shape = box, label = "\"]\"" ];
	{ rank = same;
		"designator/0000000000000000";
		"designator/0000000000000000";
	};
	"designator/0000000000000000" -> "designator/0000000000000000";
	"designator/0000000000000000" [ label = "SEQ" ];
	"designator/0000000000000000" -> "designator/0000000000000000";
	"designator/0000000000000000" [ style = "filled", shape = box, label = "\".\"" ];
	"designator/0000000000000000" -> "designator/0000000000000000";
	"designator/0000000000000000" [ label = "\<identifier\>" ];
	"statement/0000000000000000" [ shape = plaintext, label = "statement" ];
	{ rank = same;
		"statement/0000000000000000";
		"statement/0000000000000000";
		"statement/0000000000000000";
		"statement/0000000000000000";
		"statement/0000000000000000";
		"statement/0000000000000000";
	};
	"statement/0000000000000000" -> "statement/0000000000000000";
	"statement/0000000000000000" [ label = "ALT" ];
	"statement/0000000000000000" -> "statement/0000000000000000";
	"statement/0000000000000000" [ label = "\<labeled-statement\>" ];
	"statement/0000000000000000" -> "statement/0000000000000000";
	"statement/0000000000000000" [ label = "\<compound-statement\>" ];
	"statement/0000000000000000" -> "statement/0000000000000000";
	"statement/0000000000000000" [ label = "\<expression-statement\>" ];
	"statement/0000000000000000" -> "statement/0000000000000000";
	"statement/0000000000000000" [ label = "\<selection-statement\>" ];
	"statement/0000000000000000" -> "statement/0000000000000000";
	"statement/0000000000000000" [ label = "\<iteration-statement\>" ];
	"statement/0000000000000000" -> "statement/0000000000000000";
	"statement/0000000000000000" [ label = "\<jump-statement\>" ];
	"labeled-statement/0000000000000000" [ shape = plaintext, label = "labeled-statement" ];
	{ rank = same;
		"labeled-statement/0000000000000000";
		"labeled-statement/0000000000000000";
		"labeled-statement/0000000000000000";
	};
	"labeled-statement/0000000000000000" -> "labeled-statement/0000000000000000";
	"labeled-statement/0000000000000000" [ label = "ALT" ];
	{ rank = same;
		"labeled-statement/0000000000000000";
		"labeled-statement/0000000000000000";
		"labeled-statement/0000000000000000";
	};
	"labeled-statement/0000000000000000" -> "labeled-statement/0000000000000000";
	"labeled-statement/0000000000000000" [ label = "SEQ" ];
	"labeled-statement/0000000000000000" -> "labeled-statement/0000000000000000";
	"labeled-statement/0000000000000000" [ label = "\<identifier\>" ];
	"labeled-statement/0000000000000000" -> "labeled-statement/0000000000000000";
	"labeled-statement/0000000000000000" [ style = "filled", shape = box, label = "\":\"" ];
	"labeled-statement/0000000000000000" -> "labeled-statement/0000000000000000";
	"labeled-statement/0000000000000000" [ label = "\<statement\>" ];
	{ rank = same;
		"labeled-statement/0000000000000000";
		"labeled-statement/0000000000000000";
		"labeled-statement/0000000000000000";
		"labeled-statement/0000000000000000";
	};
	"labeled-statement/0000000000000000" -> "labeled-statement/0000000000000000";
	"labeled-statement/0000000000000000" [ label = "SEQ" ];
	"labeled-statement/0000000000000000" -> "labeled-statement/0000000000000000";
	"labeled-statement/0000000000000000" [ style = "filled", shape = box, label = "\"case\"" ];
	"labeled-statement/0000000000000000" -> "labeled-statement/0000000000000000";
	"labeled-statement/0000000000000000" [ label = "\<constant-expression\>" ];
	"labeled-statement/0000000000000000" -> "labeled-statement/0000000000000000";
	"labeled-statement/0000000000000000" [ style = "filled", shape = box, label = "\":\"" ];
	"labeled-statement/0000000000000000" -> "labeled-statement/0000000000000000";
	"labeled-statement/0000000000000000" [ label = "\<statement\>" ];
	{ rank = same;
		"labeled-statement/0000000000000000";
		"labeled-statement/0000000000000000";
		"labeled-statement/0000000000000000";
	};
	"labeled-statement/0000000000000000" -> "labeled-statement/0000000000000000";
	"labeled-statement/0000000000000000" [ label = "SEQ" ];
	"labeled-statement/0000000000000000" -> "labeled-statement/0000000000000000";
	"labeled-statement/0000000000000000" [ style = "filled", shape = box, label = "\"default\"" ];
	"labeled-statement/0000000000000000" -> "labeled-statement/0000000000000000";
	"labeled-statement/0000000000000000" [ style = "filled", shape = box, label = "\":\"" ];
	"labeled-statement/0000000000000000" -> "labeled-statement/0000000000000000";
	"labeled-statement/0000000000000000" [ label = "\<statement\>" ];
	"expression-statement/0000000000000000" [ shape = plaintext, label = "expression-statement" ];
	{ rank = same;
		"expression-statement/0000000000000000";
		"expression-statement/0000000000000000";
	};
	"expression-statement/0000000000000000" -> "expression-statement/0000000000000000";
	"expression-statement/0000000000000000" [ label = "SEQ" ];
	{ rank = same;
		"expression-statement/0000000000000000";
	};
	"expression-statement/0000000000000000" -> "expression-statement/0000000000000000";
	"expression-statement/0000000000000000" [ label = "ALT|&epsilon;" ];
	"expression-statement/0000000000000000" -> "expression-statement/0000000000000000";
	"expression-statement/0000000000000000" [ label = "\<expression\>" ];
	"expression-statement/0000000000000000" -> "expression-statement/0000000000000000";
	"expression-statement/0000000000000000" [ style = "filled", shape = box, label = "\";\"" ];
	"selection-statement/0000000000000000" [ shape = plaintext, label = "selection-statement" ];
	{ rank = same;
		"selection-statement/0000000000000000";
		"selection-statement/0000000000000000";
		"selection-statement/0000000000000000";
	};
	"selection-statement/0000000000000000" -> "selection-statement/0000000000000000";
	"selection-statement/0000000000000000" [ label = "ALT" ];
	{ rank = same;
		"selection-statement/0000000000000000";
		"selection-statement/0000000000000000";
		"selection-statement/0000000000000000";
		"selection-statement/0000000000000000";
		"selection-statement/0000000000000000";
		"selection-statement/0000000000000000";
		"selection-statement/0000000000000000";
	};
	"selection-statement/0000000000000000" -> "selection-statement/0000000000000000";
	"selection-statement/0000000000000000" [ label = "SEQ" ];
	"selection-statement/0000000000000000" -> "selection-statement/0000000000000000";
	"selection-statement/0000000000000000" [ style = "filled", shape = box, label = "\"if\"" ];
	"selection-statement/0000000000000000" -> "selection-statement/0000000000000000";
	"selection-statement/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"selection-statement/0000000000000000" -> "selection-statement/0000000000000000";
	"selection-statement/0000000000000000" [ label = "\<expression\>" ];
	"selection-statement/0000000000000000" -> "selection-statement/0000000000000000";
	"selection-statement/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	"selection-statement/0000000000000000" -> "selection-statement/0000000000000000";
	"selection-statement/0000000000000000" [ label = "\<statement\>" ];
	"selection-statement/0000000000000000" -> "selection-statement/0000000000000000";
	"selection-statement/0000000000000000" [ style = "filled", shape = box, label = "\"else\"" ];
	"selection-statement/0000000000000000" -> "selection-statement/0000000000000000";
	"selection-statement/0000000000000000" [ label = "\<statement\>" ];
	{ rank = same;
		"selection-statement/0000000000000000";
		"selection-statement/0000000000000000";
		"selection-statement/0000000000000000";
		"selection-statement/0000000000000000";
		"selection-statement/0000000000000000";
	};
	"selection-statement/0000000000000000" -> "selection-statement/0000000000000000";
	"selection-statement/0000000000000000" [ label = "SEQ" ];
	"selection-statement/0000000000000000" -> "selection-statement/0000000000000000";
	"selection-statement/0000000000000000" [ style = "filled", shape = box, label = "\"if\"" ];
	"selection-statement/0000000000000000" -> "selection-statement/0000000000000000";
	"selection-statement/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"selection-statement/0000000000000000" -> "selection-statement/0000000000000000";
	"selection-statement/0000000000000000" [ label = "\<expression\>" ];
	"selection-statement/0000000000000000" -> "selection-statement/0000000000000000";
	"selection-statement/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	"selection-statement/0000000000000000" -> "selection-statement/0000000000000000";
	"selection-statement/0000000000000000" [ label = "\<statement\>" ];
	{ rank = same;
		"selection-statement/0000000000000000";
		"selection-statement/0000000000000000";
		"selection-statement/0000000000000000";
		"selection-statement/0000000000000000";
		"selection-statement/0000000000000000";
	};
	"selection-statement/0000000000000000" -> "selection-statement/0000000000000000";
	"selection-statement/0000000000000000" [ label = "SEQ" ];
	"selection-statement/0000000000000000" -> "selection-statement/0000000000000000";
	"selection-statement/0000000000000000" [ style = "filled", shape = box, label = "\"switch\"" ];
	"selection-statement/0000000000000000" -> "selection-statement/0000000000000000";
	"selection-statement/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"selection-statement/0000000000000000" -> "selection-statement/0000000000000000";
	"selection-statement/0000000000000000" [ label = "\<expression\>" ];
	"selection-statement/0000000000000000" -> "selection-statement/0000000000000000";
	"selection-statement/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	"selection-statement/0000000000000000" -> "selection-statement/0000000000000000";
	"selection-statement/0000000000000000" [ label = "\<statement\>" ];
	"iteration-statement/0000000000000000" [ shape = plaintext, label = "iteration-statement" ];
	{ rank = same;
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
	};
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ label = "ALT" ];
	{ rank = same;
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
	};
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ label = "SEQ" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ style = "filled", shape = box, label = "\"while\"" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ label = "\<expression\>" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ label = "\<statement\>" ];
	{ rank = same;
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
	};
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ label = "SEQ" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ style = "filled", shape = box, label = "\"do\"" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ label = "\<statement\>" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ style = "filled", shape = box, label = "\"while\"" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ label = "\<expression\>" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ style = "filled", shape = box, label = "\";\"" ];
	{ rank = same;
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
	};
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ label = "SEQ" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ style = "filled", shape = box, label = "\"for\"" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	{ rank = same;
		"iteration-statement/0000000000000000";
	};
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ label = "ALT|&epsilon;" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ label = "\<expression\>" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ style = "filled", shape = box, label = "\";\"" ];
	{ rank = same;
		"iteration-statement/0000000000000000";
	};
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ label = "ALT|&epsilon;" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ label = "\<expression\>" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ style = "filled", shape = box, label = "\";\"" ];
	{ rank = same;
		"iteration-statement/0000000000000000";
	};
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ label = "ALT|&epsilon;" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ label = "\<expression\>" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ label = "\<statement\>" ];
	{ rank = same;
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
		"iteration-statement/0000000000000000";
	};
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ label = "SEQ" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ style = "filled", shape = box, label = "\"for\"" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ style = "filled", shape = box, label = "\"(\"" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ label = "\<declaration\>" ];
	{ rank = same;
		"iteration-statement/0000000000000000";
	};
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ label = "ALT|&epsilon;" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ label = "\<expression\>" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ style = "filled", shape = box, label = "\";\"" ];
	{ rank = same;
		"iteration-statement/0000000000000000";
	};
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ label = "ALT|&epsilon;" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ label = "\<expression\>" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ style = "filled", shape = box, label = "\")\"" ];
	"iteration-statement/0000000000000000" -> "iteration-statement/0000000000000000";
	"iteration-statement/0000000000000000" [ label = "\<statement\>" ];
	"jump-statement/0000000000000000" [ shape = plaintext, label = "jump-statement" ];
	{ rank = same;
		"jump-statement/0000000000000000";
		"jump-statement/0000000000000000";
		"jump-statement/0000000000000000";
		"jump-statement/0000000000000000";
	};
	"jump-statement/0000000000000000" -> "jump-statement/0000000000000000";
	"jump-statement/0000000000000000" [ label = "ALT" ];
	{ rank = same;
		"jump-statement/0000000000000000";
		"jump-statement/0000000000000000";
		"jump-statement/0000000000000000";
	};
	"jump-statement/0000000000000000" -> "jump-statement/0000000000000000";
	"jump-statement/0000000000000000" [ label = "SEQ" ];
	"jump-statement/0000000000000000" -> "jump-statement/0000000000000000";
	"jump-statement/0000000000000000" [ style = "filled", shape = box, label = "\"goto\"" ];
	"jump-statement/0000000000000000" -> "jump-statement/0000000000000000";
	"jump-statement/0000000000000000" [ label = "\<identifier\>" ];
	"jump-statement/0000000000000000" -> "jump-statement/0000000000000000";
	"jump-statement/0000000000000000" [ style = "filled", shape = box, label = "\";\"" ];
	{ rank = same;
		"jump-statement/0000000000000000";
		"jump-statement/0000000000000000";
	};
	"jump-statement/0000000000000000" -> "jump-statement/0000000000000000";
	"jump-statement/0000000000000000" [ label = "SEQ" ];
	"jump-statement/0000000000000000" -> "jump-statement/0000000000000000";
	"jump-statement/0000000000000000" [ style = "filled", shape = box, label = "\"continue\"" ];
	"jump-statement/0000000000000000" -> "jump-statement/0000000000000000";
	"jump-statement/0000000000000000" [ style = "filled", shape = box, label = "\";\"" ];
	{ rank = same;
		"jump-statement/0000000000000000";
		"jump-statement/0000000000000000";
	};
	"jump-statement/0000000000000000" -> "jump-statement/0000000000000000";
	"jump-statement/0000000000000000" [ label = "SEQ" ];
	"jump-statement/0000000000000000" -> "jump-statement/0000000000000000";
	"jump-statement/0000000000000000" [ style = "filled", shape = box, label = "\"break\"" ];
	"jump-statement/0000000000000000" -> "jump-statement/0000000000000000";
	"jump-statement/0000000000000000" [ style = "filled", shape = box, label = "\";\"" ];
	{ rank = same;
		"jump-statement/0000000000000000";
		"jump-statement/0000000000000000";
		"jump-statement/0000000000000000";
	};
	"jump-statement/0000000000000000" -> "jump-statement/0000000000000000";
	"jump-statement/0000000000000000" [ label = "SEQ" ];
	"jump-statement/0000000000000000" -> "jump-statement/0000000000000000";
	"jump-statement/0000000000000000" [ style = "filled", shape = box, label = "\"return\"" ];
	{ rank = same;
		"jump-statement/0000000000000000";
	};
	"jump-statement/0000000000000000" -> "jump-statement/0000000000000000";
	"jump-statement/0000000000000000" [ label = "ALT|&epsilon;" ];
	"jump-statement/0000000000000000" -> "jump-statement/0000000000000000";
	"jump-statement/0000000000000000" [ label = "\<expression\>" ];
	"jump-statement/0000000000000000" -> "jump-statement/0000000000000000";
	"jump-statement/0000000000000000" [ style = "filled", shape = box, label = "\";\"" ];
}

translation-unit: (before prettify)
    ALT: [
        SEQ: [
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            NAME: <external-declaration>
                        ]
                    ]
        ]
    ]

translation-unit: (after prettify)
    LOOP:
        .backward:
            NAME: <external-declaration>

external-declaration: (before prettify)
    ALT: [
        SEQ: [
            NAME: <function-definition>
        ]
        SEQ: [
            NAME: <declaration>
        ]
    ]

external-declaration: (after prettify)
    ALT: [
        NAME: <function-definition>
        NAME: <declaration>
    ]

function-definition: (before prettify)
    ALT: [
        SEQ: [
            NAME: <declaration-specifiers>
            NAME: <declarator>
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        NAME: <declaration-list>
                    ]
                ]
            ]
            NAME: <compound-statement>
        ]
    ]

function-definition: (after prettify)
    SEQ: [
        NAME: <declaration-specifiers>
        NAME: <declarator>
        ALT|SKIP: [
            NAME: <declaration-list>
        ]
        NAME: <compound-statement>
    ]

declaration: (before prettify)
    ALT: [
        SEQ: [
            NAME: <declaration-specifiers>
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        NAME: <init-declarator-list>
                    ]
                ]
            ]
            LITERAL: ";"
        ]
        SEQ: [
            NAME: <static-assert-declaration>
        ]
        SEQ: [
            LITERAL: ";"
        ]
    ]

declaration: (after prettify)
    ALT: [
        SEQ: [
            NAME: <declaration-specifiers>
            ALT|SKIP: [
                NAME: <init-declarator-list>
            ]
            LITERAL: ";"
        ]
        NAME: <static-assert-declaration>
        LITERAL: ";"
    ]

declaration-specifiers: (before prettify)
    ALT: [
        SEQ: [
            NAME: <declaration-specifier>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            NAME: <declaration-specifier>
                        ]
                    ]
        ]
    ]

declaration-specifiers: (after prettify)
    LOOP:
        .forward:
            NAME: <declaration-specifier>

declaration-specifier: (before prettify)
    ALT: [
        SEQ: [
            NAME: <storage-class-specifier>
        ]
        SEQ: [
            NAME: <type-specifier>
        ]
        SEQ: [
            NAME: <type-qualifier>
        ]
        SEQ: [
            NAME: <function-specifier>
        ]
        SEQ: [
            NAME: <alignment-specifier>
        ]
    ]

declaration-specifier: (after prettify)
    ALT: [
        NAME: <storage-class-specifier>
        NAME: <type-specifier>
        NAME: <type-qualifier>
        NAME: <function-specifier>
        NAME: <alignment-specifier>
    ]

declarator: (before prettify)
    ALT: [
        SEQ: [
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        NAME: <pointer>
                    ]
                ]
            ]
            NAME: <direct-declarator>
        ]
    ]

declarator: (after prettify)
    SEQ: [
        ALT|SKIP: [
            NAME: <pointer>
        ]
        NAME: <direct-declarator>
    ]

declaration-list: (before prettify)
    ALT: [
        SEQ: [
            NAME: <declaration>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            NAME: <declaration>
                        ]
                    ]
        ]
    ]

declaration-list: (after prettify)
    LOOP:
        .forward:
            NAME: <declaration>

compound-statement: (before prettify)
    ALT: [
        SEQ: [
            LITERAL: "{"
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            NAME: <declaration-or-statement>
                        ]
                    ]
            LITERAL: "}"
        ]
    ]

compound-statement: (after prettify)
    SEQ: [
        LITERAL: "{"
        LOOP:
            .backward:
                NAME: <declaration-or-statement>
        LITERAL: "}"
    ]

declaration-or-statement: (before prettify)
    ALT: [
        SEQ: [
            NAME: <declaration>
        ]
        SEQ: [
            NAME: <statement>
        ]
    ]

declaration-or-statement: (after prettify)
    ALT: [
        NAME: <declaration>
        NAME: <statement>
    ]

init-declarator-list: (before prettify)
    ALT: [
        SEQ: [
            NAME: <init-declarator>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            LITERAL: ","
                            NAME: <init-declarator>
                        ]
                    ]
        ]
    ]

init-declarator-list: (after prettify)
    LOOP:
        .forward:
            NAME: <init-declarator>
        .backward:
            LITERAL: ","

init-declarator: (before prettify)
    ALT: [
        SEQ: [
            NAME: <declarator>
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        LITERAL: "="
                        NAME: <initializer>
                    ]
                ]
            ]
        ]
    ]

init-declarator: (after prettify)
    SEQ: [
        NAME: <declarator>
        ALT|SKIP: [
            SEQ: [
                LITERAL: "="
                NAME: <initializer>
            ]
        ]
    ]

static-assert-declaration: (before prettify)
    ALT: [
        SEQ: [
            LITERAL: "_Static_assert"
            LITERAL: "("
            NAME: <constant-expression>
            LITERAL: ","
            NAME: <string-literal>
            LITERAL: ")"
            LITERAL: ";"
        ]
    ]

static-assert-declaration: (after prettify)
    SEQ: [
        LITERAL: "_Static_assert"
        LITERAL: "("
        NAME: <constant-expression>
        LITERAL: ","
        NAME: <string-literal>
        LITERAL: ")"
        LITERAL: ";"
    ]

storage-class-specifier: (before prettify)
    ALT: [
        SEQ: [
            LITERAL: "typedef"
        ]
        SEQ: [
            LITERAL: "extern"
        ]
        SEQ: [
            LITERAL: "static"
        ]
        SEQ: [
            LITERAL: "_Thread_local"
        ]
        SEQ: [
            LITERAL: "auto"
        ]
        SEQ: [
            LITERAL: "register"
        ]
    ]

storage-class-specifier: (after prettify)
    ALT: [
        LITERAL: "typedef"
        LITERAL: "extern"
        LITERAL: "static"
        LITERAL: "_Thread_local"
        LITERAL: "auto"
        LITERAL: "register"
    ]

type-specifier: (before prettify)
    ALT: [
        SEQ: [
            LITERAL: "void"
        ]
        SEQ: [
            LITERAL: "char"
        ]
        SEQ: [
            LITERAL: "short"
        ]
        SEQ: [
            LITERAL: "int"
        ]
        SEQ: [
            LITERAL: "long"
        ]
        SEQ: [
            LITERAL: "float"
        ]
        SEQ: [
            LITERAL: "double"
        ]
        SEQ: [
            LITERAL: "signed"
        ]
        SEQ: [
            LITERAL: "unsigned"
        ]
        SEQ: [
            LITERAL: "_Bool"
        ]
        SEQ: [
            LITERAL: "_Complex"
        ]
        SEQ: [
            LITERAL: "_Imaginary"
        ]
        SEQ: [
            NAME: <atomic-type-specifier>
        ]
        SEQ: [
            NAME: <struct-or-union-specifier>
        ]
        SEQ: [
            NAME: <enum-specifier>
        ]
        SEQ: [
            NAME: <typedef-name>
        ]
    ]

type-specifier: (after prettify)
    ALT: [
        LITERAL: "void"
        LITERAL: "char"
        LITERAL: "short"
        LITERAL: "int"
        LITERAL: "long"
        LITERAL: "float"
        LITERAL: "double"
        LITERAL: "signed"
        LITERAL: "unsigned"
        LITERAL: "_Bool"
        LITERAL: "_Complex"
        LITERAL: "_Imaginary"
        NAME: <atomic-type-specifier>
        NAME: <struct-or-union-specifier>
        NAME: <enum-specifier>
        NAME: <typedef-name>
    ]

typedef-name: (before prettify)
    ALT: [
        SEQ: [
            NAME: <identifier>
        ]
    ]

typedef-name: (after prettify)
    NAME: <identifier>

type-qualifier: (before prettify)
    ALT: [
        SEQ: [
            LITERAL: "const"
        ]
        SEQ: [
            LITERAL: "restrict"
        ]
        SEQ: [
            LITERAL: "volatile"
        ]
        SEQ: [
            LITERAL: "_Atomic"
        ]
    ]

type-qualifier: (after prettify)
    ALT: [
        LITERAL: "const"
        LITERAL: "restrict"
        LITERAL: "volatile"
        LITERAL: "_Atomic"
    ]

function-specifier: (before prettify)
    ALT: [
        SEQ: [
            LITERAL: "inline"
        ]
        SEQ: [
            LITERAL: "_Noreturn"
        ]
    ]

function-specifier: (after prettify)
    ALT: [
        LITERAL: "inline"
        LITERAL: "_Noreturn"
    ]

alignment-specifier: (before prettify)
    ALT: [
        SEQ: [
            LITERAL: "_Alignas"
            LITERAL: "("
            NAME: <type-name>
            LITERAL: ")"
        ]
        SEQ: [
            LITERAL: "_Alignas"
            LITERAL: "("
            NAME: <constant-expression>
            LITERAL: ")"
        ]
    ]

alignment-specifier: (after prettify)
    ALT: [
        SEQ: [
            LITERAL: "_Alignas"
            LITERAL: "("
            NAME: <type-name>
            LITERAL: ")"
        ]
        SEQ: [
            LITERAL: "_Alignas"
            LITERAL: "("
            NAME: <constant-expression>
            LITERAL: ")"
        ]
    ]

pointer: (before prettify)
    ALT: [
        SEQ: [
            LITERAL: "*"
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        NAME: <type-qualifier-list>
                    ]
                ]
            ]
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        NAME: <pointer>
                    ]
                ]
            ]
        ]
    ]

pointer: (after prettify)
    SEQ: [
        LITERAL: "*"
        ALT|SKIP: [
            NAME: <type-qualifier-list>
        ]
        ALT|SKIP: [
            NAME: <pointer>
        ]
    ]

direct-declarator: (before prettify)
    ALT: [
        SEQ: [
            NAME: <identifier>
        ]
        SEQ: [
            LITERAL: "("
            NAME: <declarator>
            LITERAL: ")"
        ]
        SEQ: [
            NAME: <direct-declarator>
            LITERAL: "["
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        LITERAL: "*"
                    ]
                ]
            ]
            LITERAL: "]"
        ]
        SEQ: [
            NAME: <direct-declarator>
            LITERAL: "["
            LITERAL: "static"
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        NAME: <type-qualifier-list>
                    ]
                ]
            ]
            NAME: <assignment-expression>
            LITERAL: "]"
        ]
        SEQ: [
            NAME: <direct-declarator>
            LITERAL: "["
            NAME: <type-qualifier-list>
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        LITERAL: "*"
                    ]
                ]
            ]
            LITERAL: "]"
        ]
        SEQ: [
            NAME: <direct-declarator>
            LITERAL: "["
            NAME: <type-qualifier-list>
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        LITERAL: "static"
                    ]
                ]
            ]
            NAME: <assignment-expression>
            LITERAL: "]"
        ]
        SEQ: [
            NAME: <direct-declarator>
            LITERAL: "["
            NAME: <assignment-expression>
            LITERAL: "]"
        ]
        SEQ: [
            NAME: <direct-declarator>
            LITERAL: "("
            NAME: <parameter-type-list>
            LITERAL: ")"
        ]
        SEQ: [
            NAME: <direct-declarator>
            LITERAL: "("
            NAME: <identifier-list>
            LITERAL: ")"
        ]
        SEQ: [
            NAME: <direct-declarator>
            LITERAL: "("
            LITERAL: ")"
        ]
    ]

direct-declarator: (after prettify)
    ALT: [
        NAME: <identifier>
        SEQ: [
            LITERAL: "("
            NAME: <declarator>
            LITERAL: ")"
        ]
        SEQ: [
            NAME: <direct-declarator>
            LITERAL: "["
            ALT|SKIP: [
                LITERAL: "*"
            ]
            LITERAL: "]"
        ]
        SEQ: [
            NAME: <direct-declarator>
            LITERAL: "["
            LITERAL: "static"
            ALT|SKIP: [
                NAME: <type-qualifier-list>
            ]
            NAME: <assignment-expression>
            LITERAL: "]"
        ]
        SEQ: [
            NAME: <direct-declarator>
            LITERAL: "["
            NAME: <type-qualifier-list>
            ALT|SKIP: [
                LITERAL: "*"
            ]
            LITERAL: "]"
        ]
        SEQ: [
            NAME: <direct-declarator>
            LITERAL: "["
            NAME: <type-qualifier-list>
            ALT|SKIP: [
                LITERAL: "static"
            ]
            NAME: <assignment-expression>
            LITERAL: "]"
        ]
        SEQ: [
            NAME: <direct-declarator>
            LITERAL: "["
            NAME: <assignment-expression>
            LITERAL: "]"
        ]
        SEQ: [
            NAME: <direct-declarator>
            LITERAL: "("
            NAME: <parameter-type-list>
            LITERAL: ")"
        ]
        SEQ: [
            NAME: <direct-declarator>
            LITERAL: "("
            NAME: <identifier-list>
            LITERAL: ")"
        ]
        SEQ: [
            NAME: <direct-declarator>
            LITERAL: "("
            LITERAL: ")"
        ]
    ]

identifier-list: (before prettify)
    ALT: [
        SEQ: [
            NAME: <identifier>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            LITERAL: ","
                            NAME: <identifier>
                        ]
                    ]
        ]
    ]

identifier-list: (after prettify)
    LOOP:
        .forward:
            NAME: <identifier>
        .backward:
            LITERAL: ","

initializer-list: (before prettify)
    ALT: [
        SEQ: [
            NAME: <designative-initializer>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            LITERAL: ","
                            NAME: <designative-initializer>
                        ]
                    ]
        ]
    ]

initializer-list: (after prettify)
    LOOP:
        .forward:
            NAME: <designative-initializer>
        .backward:
            LITERAL: ","

designative-initializer: (before prettify)
    ALT: [
        SEQ: [
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        NAME: <designation>
                    ]
                ]
            ]
            NAME: <initializer>
        ]
    ]

designative-initializer: (after prettify)
    SEQ: [
        ALT|SKIP: [
            NAME: <designation>
        ]
        NAME: <initializer>
    ]

initializer: (before prettify)
    ALT: [
        SEQ: [
            LITERAL: "{"
            NAME: <initializer-list>
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        LITERAL: ","
                    ]
                ]
            ]
            LITERAL: "}"
        ]
        SEQ: [
            NAME: <assignment-expression>
        ]
    ]

initializer: (after prettify)
    ALT: [
        SEQ: [
            LITERAL: "{"
            NAME: <initializer-list>
            ALT|SKIP: [
                LITERAL: ","
            ]
            LITERAL: "}"
        ]
        NAME: <assignment-expression>
    ]

constant-expression: (before prettify)
    ALT: [
        SEQ: [
            NAME: <conditional-expression>
        ]
    ]

constant-expression: (after prettify)
    NAME: <conditional-expression>

atomic-type-specifier: (before prettify)
    ALT: [
        SEQ: [
            LITERAL: "_Atomic"
            LITERAL: "("
            NAME: <type-name>
            LITERAL: ")"
        ]
    ]

atomic-type-specifier: (after prettify)
    SEQ: [
        LITERAL: "_Atomic"
        LITERAL: "("
        NAME: <type-name>
        LITERAL: ")"
    ]

struct-or-union-specifier: (before prettify)
    ALT: [
        SEQ: [
            NAME: <struct-or-union>
            LITERAL: "{"
            NAME: <struct-declaration-list>
            LITERAL: "}"
        ]
        SEQ: [
            NAME: <struct-or-union>
            NAME: <identifier>
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        LITERAL: "{"
                        NAME: <struct-declaration-list>
                        LITERAL: "}"
                    ]
                ]
            ]
        ]
    ]

struct-or-union-specifier: (after prettify)
    ALT: [
        SEQ: [
            NAME: <struct-or-union>
            LITERAL: "{"
            NAME: <struct-declaration-list>
            LITERAL: "}"
        ]
        SEQ: [
            NAME: <struct-or-union>
            NAME: <identifier>
            ALT|SKIP: [
                SEQ: [
                    LITERAL: "{"
                    NAME: <struct-declaration-list>
                    LITERAL: "}"
                ]
            ]
        ]
    ]

struct-or-union: (before prettify)
    ALT: [
        SEQ: [
            LITERAL: "struct"
        ]
        SEQ: [
            LITERAL: "union"
        ]
    ]

struct-or-union: (after prettify)
    ALT: [
        LITERAL: "struct"
        LITERAL: "union"
    ]

struct-declaration-list: (before prettify)
    ALT: [
        SEQ: [
            NAME: <struct-declaration>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            NAME: <struct-declaration>
                        ]
                    ]
        ]
    ]

struct-declaration-list: (after prettify)
    LOOP:
        .forward:
            NAME: <struct-declaration>

struct-declaration: (before prettify)
    ALT: [
        SEQ: [
            NAME: <specifier-qualifier-list>
            LITERAL: ";"
        ]
        SEQ: [
            NAME: <specifier-qualifier-list>
            NAME: <struct-declarator-list>
            LITERAL: ";"
        ]
        SEQ: [
            NAME: <static-assert-declaration>
        ]
    ]

struct-declaration: (after prettify)
    ALT: [
        SEQ: [
            NAME: <specifier-qualifier-list>
            LITERAL: ";"
        ]
        SEQ: [
            NAME: <specifier-qualifier-list>
            NAME: <struct-declarator-list>
            LITERAL: ";"
        ]
        NAME: <static-assert-declaration>
    ]

enum-specifier: (before prettify)
    ALT: [
        SEQ: [
            LITERAL: "enum"
            LITERAL: "{"
            NAME: <enumerator-list>
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        LITERAL: ","
                    ]
                ]
            ]
            LITERAL: "}"
        ]
        SEQ: [
            LITERAL: "enum"
            NAME: <identifier>
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        LITERAL: "{"
                        NAME: <enumerator-list>
                        ALT|SKIP: [
                            ALT: [
                                SEQ: [
                                    LITERAL: ","
                                ]
                            ]
                        ]
                        LITERAL: "}"
                    ]
                ]
            ]
        ]
    ]

enum-specifier: (after prettify)
    ALT: [
        SEQ: [
            LITERAL: "enum"
            LITERAL: "{"
            NAME: <enumerator-list>
            ALT|SKIP: [
                LITERAL: ","
            ]
            LITERAL: "}"
        ]
        SEQ: [
            LITERAL: "enum"
            NAME: <identifier>
            ALT|SKIP: [
                SEQ: [
                    LITERAL: "{"
                    NAME: <enumerator-list>
                    ALT|SKIP: [
                        LITERAL: ","
                    ]
                    LITERAL: "}"
                ]
            ]
        ]
    ]

enumerator-list: (before prettify)
    ALT: [
        SEQ: [
            NAME: <enumerator>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            LITERAL: ","
                            NAME: <enumerator>
                        ]
                    ]
        ]
    ]

enumerator-list: (after prettify)
    LOOP:
        .forward:
            NAME: <enumerator>
        .backward:
            LITERAL: ","

enumerator: (before prettify)
    ALT: [
        SEQ: [
            NAME: <enumeration-constant>
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        LITERAL: "="
                        NAME: <constant-expression>
                    ]
                ]
            ]
        ]
    ]

enumerator: (after prettify)
    SEQ: [
        NAME: <enumeration-constant>
        ALT|SKIP: [
            SEQ: [
                LITERAL: "="
                NAME: <constant-expression>
            ]
        ]
    ]

enumeration-constant: (before prettify)
    ALT: [
        SEQ: [
            NAME: <identifier>
        ]
    ]

enumeration-constant: (after prettify)
    NAME: <identifier>

type-name: (before prettify)
    ALT: [
        SEQ: [
            NAME: <specifier-qualifier-list>
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        NAME: <abstract-declarator>
                    ]
                ]
            ]
        ]
    ]

type-name: (after prettify)
    SEQ: [
        NAME: <specifier-qualifier-list>
        ALT|SKIP: [
            NAME: <abstract-declarator>
        ]
    ]

specifier-qualifier-list: (before prettify)
    ALT: [
        SEQ: [
            NAME: <specifier-qualifier>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            NAME: <specifier-qualifier>
                        ]
                    ]
        ]
    ]

specifier-qualifier-list: (after prettify)
    LOOP:
        .forward:
            NAME: <specifier-qualifier>

specifier-qualifier: (before prettify)
    ALT: [
        SEQ: [
            NAME: <type-specifier>
        ]
        SEQ: [
            NAME: <type-qualifier>
        ]
    ]

specifier-qualifier: (after prettify)
    ALT: [
        NAME: <type-specifier>
        NAME: <type-qualifier>
    ]

abstract-declarator: (before prettify)
    ALT: [
        SEQ: [
            NAME: <pointer>
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        NAME: <direct-abstract-declarator>
                    ]
                ]
            ]
        ]
        SEQ: [
            NAME: <direct-abstract-declarator>
        ]
    ]

abstract-declarator: (after prettify)
    ALT: [
        SEQ: [
            NAME: <pointer>
            ALT|SKIP: [
                NAME: <direct-abstract-declarator>
            ]
        ]
        NAME: <direct-abstract-declarator>
    ]

direct-abstract-declarator: (before prettify)
    ALT: [
        SEQ: [
            LITERAL: "("
            NAME: <abstract-declarator>
            LITERAL: ")"
        ]
        SEQ: [
            LITERAL: "("
            NAME: <parameter-type-list>
            LITERAL: ")"
        ]
        SEQ: [
            LITERAL: "("
            LITERAL: ")"
        ]
        SEQ: [
            LITERAL: "["
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        LITERAL: "*"
                    ]
                ]
            ]
            LITERAL: "]"
        ]
        SEQ: [
            LITERAL: "["
            LITERAL: "static"
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        NAME: <type-qualifier-list>
                    ]
                ]
            ]
            NAME: <assignment-expression>
            LITERAL: "]"
        ]
        SEQ: [
            LITERAL: "["
            NAME: <type-qualifier-list>
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        ALT|SKIP: [
                            ALT: [
                                SEQ: [
                                    LITERAL: "static"
                                ]
                            ]
                        ]
                        NAME: <assignment-expression>
                    ]
                ]
            ]
            LITERAL: "]"
        ]
        SEQ: [
            LITERAL: "["
            NAME: <assignment-expression>
            LITERAL: "]"
        ]
        SEQ: [
            NAME: <direct-abstract-declarator>
            LITERAL: "["
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        LITERAL: "*"
                    ]
                ]
            ]
            LITERAL: "]"
        ]
        SEQ: [
            NAME: <direct-abstract-declarator>
            LITERAL: "["
            LITERAL: "static"
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        NAME: <type-qualifier-list>
                    ]
                ]
            ]
            NAME: <assignment-expression>
            LITERAL: "]"
        ]
        SEQ: [
            NAME: <direct-abstract-declarator>
            LITERAL: "["
            NAME: <type-qualifier-list>
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        ALT|SKIP: [
                            ALT: [
                                SEQ: [
                                    LITERAL: "static"
                                ]
                            ]
                        ]
                        NAME: <assignment-expression>
                    ]
                ]
            ]
            LITERAL: "]"
        ]
        SEQ: [
            NAME: <direct-abstract-declarator>
            LITERAL: "["
            NAME: <assignment-expression>
            LITERAL: "]"
        ]
        SEQ: [
            NAME: <direct-abstract-declarator>
            LITERAL: "("
            NAME: <parameter-type-list>
            LITERAL: ")"
        ]
        SEQ: [
            NAME: <direct-abstract-declarator>
            LITERAL: "("
            LITERAL: ")"
        ]
    ]

direct-abstract-declarator: (after prettify)
    ALT: [
        SEQ: [
            LITERAL: "("
            NAME: <abstract-declarator>
            LITERAL: ")"
        ]
        SEQ: [
            LITERAL: "("
            NAME: <parameter-type-list>
            LITERAL: ")"
        ]
        SEQ: [
            LITERAL: "("
            LITERAL: ")"
        ]
        SEQ: [
            LITERAL: "["
            ALT|SKIP: [
                LITERAL: "*"
            ]
            LITERAL: "]"
        ]
        SEQ: [
            LITERAL: "["
            LITERAL: "static"
            ALT|SKIP: [
                NAME: <type-qualifier-list>
            ]
            NAME: <assignment-expression>
            LITERAL: "]"
        ]
        SEQ: [
            LITERAL: "["
            NAME: <type-qualifier-list>
            ALT|SKIP: [
                SEQ: [
                    ALT|SKIP: [
                        LITERAL: "static"
                    ]
                    NAME: <assignment-expression>
                ]
            ]
            LITERAL: "]"
        ]
        SEQ: [
            LITERAL: "["
            NAME: <assignment-expression>
            LITERAL: "]"
        ]
        SEQ: [
            NAME: <direct-abstract-declarator>
            LITERAL: "["
            ALT|SKIP: [
                LITERAL: "*"
            ]
            LITERAL: "]"
        ]
        SEQ: [
            NAME: <direct-abstract-declarator>
            LITERAL: "["
            LITERAL: "static"
            ALT|SKIP: [
                NAME: <type-qualifier-list>
            ]
            NAME: <assignment-expression>
            LITERAL: "]"
        ]
        SEQ: [
            NAME: <direct-abstract-declarator>
            LITERAL: "["
            NAME: <type-qualifier-list>
            ALT|SKIP: [
                SEQ: [
                    ALT|SKIP: [
                        LITERAL: "static"
                    ]
                    NAME: <assignment-expression>
                ]
            ]
            LITERAL: "]"
        ]
        SEQ: [
            NAME: <direct-abstract-declarator>
            LITERAL: "["
            NAME: <assignment-expression>
            LITERAL: "]"
        ]
        SEQ: [
            NAME: <direct-abstract-declarator>
            LITERAL: "("
            NAME: <parameter-type-list>
            LITERAL: ")"
        ]
        SEQ: [
            NAME: <direct-abstract-declarator>
            LITERAL: "("
            LITERAL: ")"
        ]
    ]

struct-declarator-list: (before prettify)
    ALT: [
        SEQ: [
            NAME: <struct-declarator>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            LITERAL: ","
                            NAME: <struct-declarator>
                        ]
                    ]
        ]
    ]

struct-declarator-list: (after prettify)
    LOOP:
        .forward:
            NAME: <struct-declarator>
        .backward:
            LITERAL: ","

type-qualifier-list: (before prettify)
    ALT: [
        SEQ: [
            NAME: <type-qualifier>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            NAME: <type-qualifier>
                        ]
                    ]
        ]
    ]

type-qualifier-list: (after prettify)
    LOOP:
        .forward:
            NAME: <type-qualifier>

parameter-type-list: (before prettify)
    ALT: [
        SEQ: [
            NAME: <parameter-list>
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        LITERAL: ","
                        LITERAL: "..."
                    ]
                ]
            ]
        ]
    ]

parameter-type-list: (after prettify)
    SEQ: [
        NAME: <parameter-list>
        ALT|SKIP: [
            SEQ: [
                LITERAL: ","
                LITERAL: "..."
            ]
        ]
    ]

struct-declarator: (before prettify)
    ALT: [
        SEQ: [
            LITERAL: ":"
            NAME: <constant-expression>
        ]
        SEQ: [
            NAME: <declarator>
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        LITERAL: ":"
                        NAME: <constant-expression>
                    ]
                ]
            ]
        ]
    ]

struct-declarator: (after prettify)
    ALT: [
        SEQ: [
            LITERAL: ":"
            NAME: <constant-expression>
        ]
        SEQ: [
            NAME: <declarator>
            ALT|SKIP: [
                SEQ: [
                    LITERAL: ":"
                    NAME: <constant-expression>
                ]
            ]
        ]
    ]

assignment-operator: (before prettify)
    ALT: [
        SEQ: [
            LITERAL: "="
        ]
        SEQ: [
            LITERAL: "*="
        ]
        SEQ: [
            LITERAL: "/="
        ]
        SEQ: [
            LITERAL: "%="
        ]
        SEQ: [
            LITERAL: "+="
        ]
        SEQ: [
            LITERAL: "-="
        ]
        SEQ: [
            LITERAL: "<<="
        ]
        SEQ: [
            LITERAL: ">>="
        ]
        SEQ: [
            LITERAL: "&="
        ]
        SEQ: [
            LITERAL: "^="
        ]
        SEQ: [
            LITERAL: "|="
        ]
    ]

assignment-operator: (after prettify)
    ALT: [
        LITERAL: "="
        LITERAL: "*="
        LITERAL: "/="
        LITERAL: "%="
        LITERAL: "+="
        LITERAL: "-="
        LITERAL: "<<="
        LITERAL: ">>="
        LITERAL: "&="
        LITERAL: "^="
        LITERAL: "|="
    ]

parameter-list: (before prettify)
    ALT: [
        SEQ: [
            NAME: <parameter-declaration>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            LITERAL: ","
                            NAME: <parameter-declaration>
                        ]
                    ]
        ]
    ]

parameter-list: (after prettify)
    LOOP:
        .forward:
            NAME: <parameter-declaration>
        .backward:
            LITERAL: ","

parameter-declaration: (before prettify)
    ALT: [
        SEQ: [
            NAME: <declaration-specifiers>
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        NAME: <declarator>
                    ]
                    SEQ: [
                        NAME: <abstract-declarator>
                    ]
                ]
            ]
        ]
    ]

parameter-declaration: (after prettify)
    SEQ: [
        NAME: <declaration-specifiers>
        ALT|SKIP: [
            NAME: <declarator>
            NAME: <abstract-declarator>
        ]
    ]

expression: (before prettify)
    ALT: [
        SEQ: [
            NAME: <assignment-expression>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            LITERAL: ","
                            NAME: <assignment-expression>
                        ]
                    ]
        ]
    ]

expression: (after prettify)
    LOOP:
        .forward:
            NAME: <assignment-expression>
        .backward:
            LITERAL: ","

assignment-expression: (before prettify)
    ALT: [
        SEQ: [
            NAME: <conditional-expression>
        ]
        SEQ: [
            NAME: <unary-expression>
            NAME: <assignment-operator>
            NAME: <assignment-expression>
        ]
    ]

assignment-expression: (after prettify)
    ALT: [
        NAME: <conditional-expression>
        SEQ: [
            NAME: <unary-expression>
            NAME: <assignment-operator>
            NAME: <assignment-expression>
        ]
    ]

conditional-expression: (before prettify)
    ALT: [
        SEQ: [
            NAME: <logical-or-expression>
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        LITERAL: "?"
                        NAME: <expression>
                        LITERAL: ":"
                        NAME: <conditional-expression>
                    ]
                ]
            ]
        ]
    ]

conditional-expression: (after prettify)
    SEQ: [
        NAME: <logical-or-expression>
        ALT|SKIP: [
            SEQ: [
                LITERAL: "?"
                NAME: <expression>
                LITERAL: ":"
                NAME: <conditional-expression>
            ]
        ]
    ]

logical-or-expression: (before prettify)
    ALT: [
        SEQ: [
            NAME: <logical-and-expression>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            LITERAL: "||"
                            NAME: <logical-and-expression>
                        ]
                    ]
        ]
    ]

logical-or-expression: (after prettify)
    LOOP:
        .forward:
            NAME: <logical-and-expression>
        .backward:
            LITERAL: "||"

logical-and-expression: (before prettify)
    ALT: [
        SEQ: [
            NAME: <inclusive-or-expression>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            LITERAL: "&&"
                            NAME: <inclusive-or-expression>
                        ]
                    ]
        ]
    ]

logical-and-expression: (after prettify)
    LOOP:
        .forward:
            NAME: <inclusive-or-expression>
        .backward:
            LITERAL: "&&"

inclusive-or-expression: (before prettify)
    ALT: [
        SEQ: [
            NAME: <exclusive-or-expression>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            LITERAL: "|"
                            NAME: <exclusive-or-expression>
                        ]
                    ]
        ]
    ]

inclusive-or-expression: (after prettify)
    LOOP:
        .forward:
            NAME: <exclusive-or-expression>
        .backward:
            LITERAL: "|"

exclusive-or-expression: (before prettify)
    ALT: [
        SEQ: [
            NAME: <and-expression>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            LITERAL: "^"
                            NAME: <and-expression>
                        ]
                    ]
        ]
    ]

exclusive-or-expression: (after prettify)
    LOOP:
        .forward:
            NAME: <and-expression>
        .backward:
            LITERAL: "^"

and-expression: (before prettify)
    ALT: [
        SEQ: [
            NAME: <equality-expression>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            LITERAL: "&"
                            NAME: <equality-expression>
                        ]
                    ]
        ]
    ]

and-expression: (after prettify)
    LOOP:
        .forward:
            NAME: <equality-expression>
        .backward:
            LITERAL: "&"

equality-expression: (before prettify)
    ALT: [
        SEQ: [
            NAME: <relational-expression>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            ALT: [
                                SEQ: [
                                    LITERAL: "=="
                                ]
                                SEQ: [
                                    LITERAL: "!="
                                ]
                            ]
                            NAME: <relational-expression>
                        ]
                    ]
        ]
    ]

equality-expression: (after prettify)
    LOOP:
        .forward:
            NAME: <relational-expression>
        .backward:
            ALT: [
                LITERAL: "=="
                LITERAL: "!="
            ]

relational-expression: (before prettify)
    ALT: [
        SEQ: [
            NAME: <shift-expression>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            ALT: [
                                SEQ: [
                                    LITERAL: "<"
                                ]
                                SEQ: [
                                    LITERAL: ">"
                                ]
                                SEQ: [
                                    LITERAL: "<="
                                ]
                                SEQ: [
                                    LITERAL: ">="
                                ]
                            ]
                            NAME: <shift-expression>
                        ]
                    ]
        ]
    ]

relational-expression: (after prettify)
    LOOP:
        .forward:
            NAME: <shift-expression>
        .backward:
            ALT: [
                LITERAL: "<"
                LITERAL: ">"
                LITERAL: "<="
                LITERAL: ">="
            ]

shift-expression: (before prettify)
    ALT: [
        SEQ: [
            NAME: <additive-expression>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            ALT: [
                                SEQ: [
                                    LITERAL: "<<"
                                ]
                                SEQ: [
                                    LITERAL: ">>"
                                ]
                            ]
                            NAME: <additive-expression>
                        ]
                    ]
        ]
    ]

shift-expression: (after prettify)
    LOOP:
        .forward:
            NAME: <additive-expression>
        .backward:
            ALT: [
                LITERAL: "<<"
                LITERAL: ">>"
            ]

additive-expression: (before prettify)
    ALT: [
        SEQ: [
            NAME: <multiplicative-expression>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            ALT: [
                                SEQ: [
                                    LITERAL: "+"
                                ]
                                SEQ: [
                                    LITERAL: "-"
                                ]
                            ]
                            NAME: <multiplicative-expression>
                        ]
                    ]
        ]
    ]

additive-expression: (after prettify)
    LOOP:
        .forward:
            NAME: <multiplicative-expression>
        .backward:
            ALT: [
                LITERAL: "+"
                LITERAL: "-"
            ]

multiplicative-expression: (before prettify)
    ALT: [
        SEQ: [
            NAME: <cast-expression>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            ALT: [
                                SEQ: [
                                    LITERAL: "*"
                                ]
                                SEQ: [
                                    LITERAL: "/"
                                ]
                                SEQ: [
                                    LITERAL: "%"
                                ]
                            ]
                            NAME: <cast-expression>
                        ]
                    ]
        ]
    ]

multiplicative-expression: (after prettify)
    LOOP:
        .forward:
            NAME: <cast-expression>
        .backward:
            ALT: [
                LITERAL: "*"
                LITERAL: "/"
                LITERAL: "%"
            ]

cast-expression: (before prettify)
    ALT: [
        SEQ: [
            NAME: <unary-expression>
        ]
        SEQ: [
            LITERAL: "("
            NAME: <type-name>
            LITERAL: ")"
            NAME: <cast-expression>
        ]
    ]

cast-expression: (after prettify)
    ALT: [
        NAME: <unary-expression>
        SEQ: [
            LITERAL: "("
            NAME: <type-name>
            LITERAL: ")"
            NAME: <cast-expression>
        ]
    ]

unary-expression: (before prettify)
    ALT: [
        SEQ: [
            NAME: <postfix-expression>
        ]
        SEQ: [
            ALT: [
                SEQ: [
                    LITERAL: "++"
                ]
                SEQ: [
                    LITERAL: "--"
                ]
            ]
            NAME: <unary-expression>
        ]
        SEQ: [
            NAME: <unary-operator>
            NAME: <cast-expression>
        ]
        SEQ: [
            LITERAL: "sizeof"
            NAME: <unary-expression>
        ]
        SEQ: [
            LITERAL: "sizeof"
            LITERAL: "("
            NAME: <type-name>
            LITERAL: ")"
        ]
        SEQ: [
            LITERAL: "_Alignof"
            LITERAL: "("
            NAME: <type-name>
            LITERAL: ")"
        ]
    ]

unary-expression: (after prettify)
    ALT: [
        NAME: <postfix-expression>
        SEQ: [
            ALT: [
                LITERAL: "++"
                LITERAL: "--"
            ]
            NAME: <unary-expression>
        ]
        SEQ: [
            NAME: <unary-operator>
            NAME: <cast-expression>
        ]
        SEQ: [
            LITERAL: "sizeof"
            NAME: <unary-expression>
        ]
        SEQ: [
            LITERAL: "sizeof"
            LITERAL: "("
            NAME: <type-name>
            LITERAL: ")"
        ]
        SEQ: [
            LITERAL: "_Alignof"
            LITERAL: "("
            NAME: <type-name>
            LITERAL: ")"
        ]
    ]

postfix-expression: (before prettify)
    ALT: [
        SEQ: [
            NAME: <primary-expression>
        ]
        SEQ: [
            NAME: <postfix-expression>
            LITERAL: "["
            NAME: <expression>
            LITERAL: "]"
        ]
        SEQ: [
            NAME: <postfix-expression>
            LITERAL: "("
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        NAME: <argument-expression-list>
                    ]
                ]
            ]
            LITERAL: ")"
        ]
        SEQ: [
            NAME: <postfix-expression>
            ALT: [
                SEQ: [
                    LITERAL: "."
                ]
                SEQ: [
                    LITERAL: "->"
                ]
            ]
            NAME: <identifier>
        ]
        SEQ: [
            NAME: <postfix-expression>
            ALT: [
                SEQ: [
                    LITERAL: "++"
                ]
                SEQ: [
                    LITERAL: "--"
                ]
            ]
        ]
        SEQ: [
            LITERAL: "("
            NAME: <type-name>
            LITERAL: ")"
            LITERAL: "{"
            NAME: <initializer-list>
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        LITERAL: ","
                    ]
                ]
            ]
            LITERAL: "}"
        ]
    ]

postfix-expression: (after prettify)
    ALT: [
        NAME: <primary-expression>
        SEQ: [
            NAME: <postfix-expression>
            LITERAL: "["
            NAME: <expression>
            LITERAL: "]"
        ]
        SEQ: [
            NAME: <postfix-expression>
            LITERAL: "("
            ALT|SKIP: [
                NAME: <argument-expression-list>
            ]
            LITERAL: ")"
        ]
        SEQ: [
            NAME: <postfix-expression>
            ALT: [
                LITERAL: "."
                LITERAL: "->"
            ]
            NAME: <identifier>
        ]
        SEQ: [
            NAME: <postfix-expression>
            ALT: [
                LITERAL: "++"
                LITERAL: "--"
            ]
        ]
        SEQ: [
            LITERAL: "("
            NAME: <type-name>
            LITERAL: ")"
            LITERAL: "{"
            NAME: <initializer-list>
            ALT|SKIP: [
                LITERAL: ","
            ]
            LITERAL: "}"
        ]
    ]

unary-operator: (before prettify)
    ALT: [
        SEQ: [
            LITERAL: "&"
        ]
        SEQ: [
            LITERAL: "*"
        ]
        SEQ: [
            LITERAL: "+"
        ]
        SEQ: [
            LITERAL: "-"
        ]
        SEQ: [
            LITERAL: "~"
        ]
        SEQ: [
            LITERAL: "!"
        ]
    ]

unary-operator: (after prettify)
    ALT: [
        LITERAL: "&"
        LITERAL: "*"
        LITERAL: "+"
        LITERAL: "-"
        LITERAL: "~"
        LITERAL: "!"
    ]

primary-expression: (before prettify)
    ALT: [
        SEQ: [
            NAME: <identifier>
        ]
        SEQ: [
            NAME: <constant>
        ]
        SEQ: [
            NAME: <string>
        ]
        SEQ: [
            LITERAL: "("
            NAME: <expression>
            LITERAL: ")"
        ]
        SEQ: [
            NAME: <generic-selection>
        ]
    ]

primary-expression: (after prettify)
    ALT: [
        NAME: <identifier>
        NAME: <constant>
        NAME: <string>
        SEQ: [
            LITERAL: "("
            NAME: <expression>
            LITERAL: ")"
        ]
        NAME: <generic-selection>
    ]

argument-expression-list: (before prettify)
    ALT: [
        SEQ: [
            NAME: <assignment-expression>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            LITERAL: ","
                            NAME: <assignment-expression>
                        ]
                    ]
        ]
    ]

argument-expression-list: (after prettify)
    LOOP:
        .forward:
            NAME: <assignment-expression>
        .backward:
            LITERAL: ","

constant: (before prettify)
    ALT: [
        SEQ: [
            NAME: <integer-constant>
        ]
        SEQ: [
            NAME: <character-constant>
        ]
        SEQ: [
            NAME: <floating-constant>
        ]
        SEQ: [
            NAME: <enumeration-constant>
        ]
    ]

constant: (after prettify)
    ALT: [
        NAME: <integer-constant>
        NAME: <character-constant>
        NAME: <floating-constant>
        NAME: <enumeration-constant>
    ]

string: (before prettify)
    ALT: [
        SEQ: [
            NAME: <string-literal>
        ]
        SEQ: [
            LITERAL: "__func__"
        ]
    ]

string: (after prettify)
    ALT: [
        NAME: <string-literal>
        LITERAL: "__func__"
    ]

generic-selection: (before prettify)
    ALT: [
        SEQ: [
            LITERAL: "_Generic"
            LITERAL: "("
            NAME: <assignment-expression>
            LITERAL: ","
            NAME: <generic-assoc-list>
            LITERAL: ")"
        ]
    ]

generic-selection: (after prettify)
    SEQ: [
        LITERAL: "_Generic"
        LITERAL: "("
        NAME: <assignment-expression>
        LITERAL: ","
        NAME: <generic-assoc-list>
        LITERAL: ")"
    ]

generic-assoc-list: (before prettify)
    ALT: [
        SEQ: [
            NAME: <generic-association>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            LITERAL: ","
                            NAME: <generic-association>
                        ]
                    ]
        ]
    ]

generic-assoc-list: (after prettify)
    LOOP:
        .forward:
            NAME: <generic-association>
        .backward:
            LITERAL: ","

generic-association: (before prettify)
    ALT: [
        SEQ: [
            NAME: <type-name>
            LITERAL: ":"
            NAME: <assignment-expression>
        ]
        SEQ: [
            LITERAL: "default"
            LITERAL: ":"
            NAME: <assignment-expression>
        ]
    ]

generic-association: (after prettify)
    ALT: [
        SEQ: [
            NAME: <type-name>
            LITERAL: ":"
            NAME: <assignment-expression>
        ]
        SEQ: [
            LITERAL: "default"
            LITERAL: ":"
            NAME: <assignment-expression>
        ]
    ]

designation: (before prettify)
    ALT: [
        SEQ: [
            NAME: <designator-list>
            LITERAL: "="
        ]
    ]

designation: (after prettify)
    SEQ: [
        NAME: <designator-list>
        LITERAL: "="
    ]

designator-list: (before prettify)
    ALT: [
        SEQ: [
            NAME: <designator>
            LOOP:
                .backward:
                    ALT: [
                        SEQ: [
                            NAME: <designator>
                        ]
                    ]
        ]
    ]

designator-list: (after prettify)
    LOOP:
        .forward:
            NAME: <designator>

designator: (before prettify)
    ALT: [
        SEQ: [
            LITERAL: "["
            NAME: <constant-expression>
            LITERAL: "]"
        ]
        SEQ: [
            LITERAL: "."
            NAME: <identifier>
        ]
    ]

designator: (after prettify)
    ALT: [
        SEQ: [
            LITERAL: "["
            NAME: <constant-expression>
            LITERAL: "]"
        ]
        SEQ: [
            LITERAL: "."
            NAME: <identifier>
        ]
    ]

statement: (before prettify)
    ALT: [
        SEQ: [
            NAME: <labeled-statement>
        ]
        SEQ: [
            NAME: <compound-statement>
        ]
        SEQ: [
            NAME: <expression-statement>
        ]
        SEQ: [
            NAME: <selection-statement>
        ]
        SEQ: [
            NAME: <iteration-statement>
        ]
        SEQ: [
            NAME: <jump-statement>
        ]
    ]

statement: (after prettify)
    ALT: [
        NAME: <labeled-statement>
        NAME: <compound-statement>
        NAME: <expression-statement>
        NAME: <selection-statement>
        NAME: <iteration-statement>
        NAME: <jump-statement>
    ]

labeled-statement: (before prettify)
    ALT: [
        SEQ: [
            NAME: <identifier>
            LITERAL: ":"
            NAME: <statement>
        ]
        SEQ: [
            LITERAL: "case"
            NAME: <constant-expression>
            LITERAL: ":"
            NAME: <statement>
        ]
        SEQ: [
            LITERAL: "default"
            LITERAL: ":"
            NAME: <statement>
        ]
    ]

labeled-statement: (after prettify)
    ALT: [
        SEQ: [
            NAME: <identifier>
            LITERAL: ":"
            NAME: <statement>
        ]
        SEQ: [
            LITERAL: "case"
            NAME: <constant-expression>
            LITERAL: ":"
            NAME: <statement>
        ]
        SEQ: [
            LITERAL: "default"
            LITERAL: ":"
            NAME: <statement>
        ]
    ]

expression-statement: (before prettify)
    ALT: [
        SEQ: [
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        NAME: <expression>
                    ]
                ]
            ]
            LITERAL: ";"
        ]
    ]

expression-statement: (after prettify)
    SEQ: [
        ALT|SKIP: [
            NAME: <expression>
        ]
        LITERAL: ";"
    ]

selection-statement: (before prettify)
    ALT: [
        SEQ: [
            LITERAL: "if"
            LITERAL: "("
            NAME: <expression>
            LITERAL: ")"
            NAME: <statement>
            LITERAL: "else"
            NAME: <statement>
        ]
        SEQ: [
            LITERAL: "if"
            LITERAL: "("
            NAME: <expression>
            LITERAL: ")"
            NAME: <statement>
        ]
        SEQ: [
            LITERAL: "switch"
            LITERAL: "("
            NAME: <expression>
            LITERAL: ")"
            NAME: <statement>
        ]
    ]

selection-statement: (after prettify)
    ALT: [
        SEQ: [
            LITERAL: "if"
            LITERAL: "("
            NAME: <expression>
            LITERAL: ")"
            NAME: <statement>
            LITERAL: "else"
            NAME: <statement>
        ]
        SEQ: [
            LITERAL: "if"
            LITERAL: "("
            NAME: <expression>
            LITERAL: ")"
            NAME: <statement>
        ]
        SEQ: [
            LITERAL: "switch"
            LITERAL: "("
            NAME: <expression>
            LITERAL: ")"
            NAME: <statement>
        ]
    ]

iteration-statement: (before prettify)
    ALT: [
        SEQ: [
            LITERAL: "while"
            LITERAL: "("
            NAME: <expression>
            LITERAL: ")"
            NAME: <statement>
        ]
        SEQ: [
            LITERAL: "do"
            NAME: <statement>
            LITERAL: "while"
            LITERAL: "("
            NAME: <expression>
            LITERAL: ")"
            LITERAL: ";"
        ]
        SEQ: [
            LITERAL: "for"
            LITERAL: "("
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        NAME: <expression>
                    ]
                ]
            ]
            LITERAL: ";"
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        NAME: <expression>
                    ]
                ]
            ]
            LITERAL: ";"
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        NAME: <expression>
                    ]
                ]
            ]
            LITERAL: ")"
            NAME: <statement>
        ]
        SEQ: [
            LITERAL: "for"
            LITERAL: "("
            NAME: <declaration>
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        NAME: <expression>
                    ]
                ]
            ]
            LITERAL: ";"
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        NAME: <expression>
                    ]
                ]
            ]
            LITERAL: ")"
            NAME: <statement>
        ]
    ]

iteration-statement: (after prettify)
    ALT: [
        SEQ: [
            LITERAL: "while"
            LITERAL: "("
            NAME: <expression>
            LITERAL: ")"
            NAME: <statement>
        ]
        SEQ: [
            LITERAL: "do"
            NAME: <statement>
            LITERAL: "while"
            LITERAL: "("
            NAME: <expression>
            LITERAL: ")"
            LITERAL: ";"
        ]
        SEQ: [
            LITERAL: "for"
            LITERAL: "("
            ALT|SKIP: [
                NAME: <expression>
            ]
            LITERAL: ";"
            ALT|SKIP: [
                NAME: <expression>
            ]
            LITERAL: ";"
            ALT|SKIP: [
                NAME: <expression>
            ]
            LITERAL: ")"
            NAME: <statement>
        ]
        SEQ: [
            LITERAL: "for"
            LITERAL: "("
            NAME: <declaration>
            ALT|SKIP: [
                NAME: <expression>
            ]
            LITERAL: ";"
            ALT|SKIP: [
                NAME: <expression>
            ]
            LITERAL: ")"
            NAME: <statement>
        ]
    ]

jump-statement: (before prettify)
    ALT: [
        SEQ: [
            LITERAL: "goto"
            NAME: <identifier>
            LITERAL: ";"
        ]
        SEQ: [
            LITERAL: "continue"
            LITERAL: ";"
        ]
        SEQ: [
            LITERAL: "break"
            LITERAL: ";"
        ]
        SEQ: [
            LITERAL: "return"
            ALT|SKIP: [
                ALT: [
                    SEQ: [
                        NAME: <expression>
                    ]
                ]
            ]
            LITERAL: ";"
        ]
    ]

jump-statement: (after prettify)
    ALT: [
        SEQ: [
            LITERAL: "goto"
            NAME: <identifier>
            LITERAL: ";"
        ]
        SEQ: [
            LITERAL: "continue"
            LITERAL: ";"
        ]
        SEQ: [
            LITERAL: "break"
            LITERAL: ";"
        ]
        SEQ: [
            LITERAL: "return"
            ALT|SKIP: [
                NAME: <expression>
            ]
            LITERAL: ";"
        ]
    ]

[`translation-unit` !*'external-declaration']
[`external-declaration` <'function-definition', 'declaration'>]
[`function-definition` ['declaration-specifiers' 'declarator' <'declaration-list'>? 'compound-statement']]
[`declaration` <['declaration-specifiers' <'init-declarator-list'>? ";"], 'static-assert-declaration', ";">]
[`declaration-specifiers` 'declaration-specifier'*!]
[`declaration-specifier` <'storage-class-specifier', 'type-specifier', 'type-qualifier', 'function-specifier', 'alignment-specifier'>]
[`declarator` [<'pointer'>? 'direct-declarator']]
[`declaration-list` 'declaration'*!]
[`compound-statement` ["{" !*'declaration-or-statement' "}"]]
[`declaration-or-statement` <'declaration', 'statement'>]
[`init-declarator-list` 'init-declarator'*","]
[`init-declarator` ['declarator' <["=" 'initializer']>?]]
[`static-assert-declaration` ["_Static_assert" "(" 'constant-expression' "," 'string-literal' ")" ";"]]
[`storage-class-specifier` <"typedef", "extern", "static", "_Thread_local", "auto", "register">]
[`type-specifier` <"void", "char", "short", "int", "long", "float", "double", "signed", "unsigned", "_Bool", "_Complex", "_Imaginary", 'atomic-type-specifier', 'struct-or-union-specifier', 'enum-specifier', 'typedef-name'>]
[`typedef-name` 'identifier']
[`type-qualifier` <"const", "restrict", "volatile", "_Atomic">]
[`function-specifier` <"inline", "_Noreturn">]
[`alignment-specifier` <["_Alignas" "(" 'type-name' ")"], ["_Alignas" "(" 'constant-expression' ")"]>]
[`pointer` ["*" <'type-qualifier-list'>? <'pointer'>?]]
[`direct-declarator` <'identifier', ["(" 'declarator' ")"], ['direct-declarator' "[" <"*">? "]"], ['direct-declarator' "[" "static" <'type-qualifier-list'>? 'assignment-expression' "]"], ['direct-declarator' "[" 'type-qualifier-list' <"*">? "]"], ['direct-declarator' "[" 'type-qualifier-list' <"static">? 'assignment-expression' "]"], ['direct-declarator' "[" 'assignment-expression' "]"], ['direct-declarator' "(" 'parameter-type-list' ")"], ['direct-declarator' "(" 'identifier-list' ")"], ['direct-declarator' "(" ")"]>]
[`identifier-list` 'identifier'*","]
[`initializer-list` 'designative-initializer'*","]
[`designative-initializer` [<'designation'>? 'initializer']]
[`initializer` <["{" 'initializer-list' <",">? "}"], 'assignment-expression'>]
[`constant-expression` 'conditional-expression']
[`atomic-type-specifier` ["_Atomic" "(" 'type-name' ")"]]
[`struct-or-union-specifier` <['struct-or-union' "{" 'struct-declaration-list' "}"], ['struct-or-union' 'identifier' <["{" 'struct-declaration-list' "}"]>?]>]
[`struct-or-union` <"struct", "union">]
[`struct-declaration-list` 'struct-declaration'*!]
[`struct-declaration` <['specifier-qualifier-list' ";"], ['specifier-qualifier-list' 'struct-declarator-list' ";"], 'static-assert-declaration'>]
[`enum-specifier` <["enum" "{" 'enumerator-list' <",">? "}"], ["enum" 'identifier' <["{" 'enumerator-list' <",">? "}"]>?]>]
[`enumerator-list` 'enumerator'*","]
[`enumerator` ['enumeration-constant' <["=" 'constant-expression']>?]]
[`enumeration-constant` 'identifier']
[`type-name` ['specifier-qualifier-list' <'abstract-declarator'>?]]
[`specifier-qualifier-list` 'specifier-qualifier'*!]
[`specifier-qualifier` <'type-specifier', 'type-qualifier'>]
[`abstract-declarator` <['pointer' <'direct-abstract-declarator'>?], 'direct-abstract-declarator'>]
[`direct-abstract-declarator` <["(" 'abstract-declarator' ")"], ["(" 'parameter-type-list' ")"], ["(" ")"], ["[" <"*">? "]"], ["[" "static" <'type-qualifier-list'>? 'assignment-expression' "]"], ["[" 'type-qualifier-list' <[<"static">? 'assignment-expression']>? "]"], ["[" 'assignment-expression' "]"], ['direct-abstract-declarator' "[" <"*">? "]"], ['direct-abstract-declarator' "[" "static" <'type-qualifier-list'>? 'assignment-expression' "]"], ['direct-abstract-declarator' "[" 'type-qualifier-list' <[<"static">? 'assignment-expression']>? "]"], ['direct-abstract-declarator' "[" 'assignment-expression' "]"], ['direct-abstract-declarator' "(" 'parameter-type-list' ")"], ['direct-abstract-declarator' "(" ")"]>]
[`struct-declarator-list` 'struct-declarator'*","]
[`type-qualifier-list` 'type-qualifier'*!]
[`parameter-type-list` ['parameter-list' <["," "..."]>?]]
[`struct-declarator` <[":" 'constant-expression'], ['declarator' <[":" 'constant-expression']>?]>]
[`assignment-operator` <"=", "*=", "\/=", "%=", "+=", "-=", "<<=", ">>=", "&=", "^=", "|=">]
[`parameter-list` 'parameter-declaration'*","]
[`parameter-declaration` ['declaration-specifiers' <'declarator', 'abstract-declarator'>?]]
[`expression` 'assignment-expression'*","]
[`assignment-expression` <'conditional-expression', ['unary-expression' 'assignment-operator' 'assignment-expression']>]
[`conditional-expression` ['logical-or-expression' <["?" 'expression' ":" 'conditional-expression']>?]]
[`logical-or-expression` 'logical-and-expression'*"||"]
[`logical-and-expression` 'inclusive-or-expression'*"&&"]
[`inclusive-or-expression` 'exclusive-or-expression'*"|"]
[`exclusive-or-expression` 'and-expression'*"^"]
[`and-expression` 'equality-expression'*"&"]
[`equality-expression` 'relational-expression'*<"==", "!=">]
[`relational-expression` 'shift-expression'*<"<", ">", "<=", ">=">]
[`shift-expression` 'additive-expression'*<"<<", ">>">]
[`additive-expression` 'multiplicative-expression'*<"+", "-">]
[`multiplicative-expression` 'cast-expression'*<"*", "\/", "%">]
[`cast-expression` <'unary-expression', ["(" 'type-name' ")" 'cast-expression']>]
[`unary-expression` <'postfix-expression', [<"++", "--"> 'unary-expression'], ['unary-operator' 'cast-expression'], ["sizeof" 'unary-expression'], ["sizeof" "(" 'type-name' ")"], ["_Alignof" "(" 'type-name' ")"]>]
[`postfix-expression` <'primary-expression', ['postfix-expression' "[" 'expression' "]"], ['postfix-expression' "(" <'argument-expression-list'>? ")"], ['postfix-expression' <".", "->"> 'identifier'], ['postfix-expression' <"++", "--">], ["(" 'type-name' ")" "{" 'initializer-list' <",">? "}"]>]
[`unary-operator` <"&", "*", "+", "-", "~", "!">]
[`primary-expression` <'identifier', 'constant', 'string', ["(" 'expression' ")"], 'generic-selection'>]
[`argument-expression-list` 'assignment-expression'*","]
[`constant` <'integer-constant', 'character-constant', 'floating-constant', 'enumeration-constant'>]
[`string` <'string-literal', "__func__">]
[`generic-selection` ["_Generic" "(" 'assignment-expression' "," 'generic-assoc-list' ")"]]
[`generic-assoc-list` 'generic-association'*","]
[`generic-association` <['type-name' ":" 'assignment-expression'], ["default" ":" 'assignment-expression']>]
[`designation` ['designator-list' "="]]
[`designator-list` 'designator'*!]
[`designator` <["[" 'constant-expression' "]"], ["." 'identifier']>]
[`statement` <'labeled-statement', 'compound-statement', 'expression-statement', 'selection-statement', 'iteration-statement', 'jump-statement'>]
[`labeled-statement` <['identifier' ":" 'statement'], ["case" 'constant-expression' ":" 'statement'], ["default" ":" 'statement']>]
[`expression-statement` [<'expression'>? ";"]]
[`selection-statement` <["if" "(" 'expression' ")" 'statement' "else" 'statement'], ["if" "(" 'expression' ")" 'statement'], ["switch" "(" 'expression' ")" 'statement']>]
[`iteration-statement` <["while" "(" 'expression' ")" 'statement'], ["do" 'statement' "while" "(" 'expression' ")" ";"], ["for" "(" <'expression'>? ";" <'expression'>? ";" <'expression'>? ")" 'statement'], ["for" "(" 'declaration' <'expression'>? ";" <'expression'>? ")" 'statement']>]
[`jump-statement` <["goto" 'identifier' ";"], ["continue" ";"], ["break" ";"], ["return" <'expression'>? ";"]>]
#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
from collections import OrderedDict

from parcon.railroad import Then, Or, Token, Loop, Bullet, Nothing
from parcon.railroad import PRODUCTION, TEXT, DESCRIPTION
import parcon.railroad.raildraw

comment    = lambda t: Token(DESCRIPTION, t)
production = lambda t: Token(PRODUCTION, t)
text       = lambda t: Token(TEXT, t)

productions = OrderedDict([
  (
    "translation-unit",
    Then(
      Bullet(),
      Loop(
        Nothing(),
      production("external-declaration")
      ),
      Bullet()
    )
  ),
  (
    "external-declaration",
    Then(
      Bullet(),
      Or(
        production("function-definition"),
        production("declaration")
      ),
      Bullet()
    )
  ),
  (
    "function-definition",
    Then(
      Bullet(),
      Then(
        production("declaration-specifiers"),
        production("declarator"),
        Or(
          Nothing(),
          production("declaration-list")
        ),
        production("compound-statement")
      ),
      Bullet()
    )
  ),
  (
    "declaration",
    Then(
      Bullet(),
      Or(
        Then(
          production("declaration-specifiers"),
          Or(
            Nothing(),
            production("init-declarator-list")
          ),
          text(";")
        ),
        production("static-assert-declaration"),
        text(";")
      ),
      Bullet()
    )
  ),
  (
    "declaration-specifiers",
    Then(
      Bullet(),
      Loop(
        production("declaration-specifier"),
      Nothing()
      ),
      Bullet()
    )
  ),
  (
    "declaration-specifier",
    Then(
      Bullet(),
      Or(
        production("storage-class-specifier"),
        production("type-specifier"),
        production("type-qualifier"),
        production("function-specifier"),
        production("alignment-specifier")
      ),
      Bullet()
    )
  ),
  (
    "declarator",
    Then(
      Bullet(),
      Then(
        Or(
          Nothing(),
          production("pointer")
        ),
        production("direct-declarator")
      ),
      Bullet()
    )
  ),
  (
    "declaration-list",
    Then(
      Bullet(),
      Loop(
        production("declaration"),
      Nothing()
      ),
      Bullet()
    )
  ),
  (
    "compound-statement",
    Then(
      Bullet(),
      Then(
        text("{"),
        Loop(
          Nothing(),
        production("declaration-or-statement")
        ),
        text("}")
      ),
      Bullet()
    )
  ),
  (
    "declaration-or-statement",
    Then(
      Bullet(),
      Or(
        production("declaration"),
        production("statement")
      ),
      Bullet()
    )
  ),
  (
    "init-declarator-list",
    Then(
      Bullet(),
      Loop(
        production("init-declarator"),
      text(",")
      ),
      Bullet()
    )
  ),
  (
    "init-declarator",
    Then(
      Bullet(),
      Then(
        production("declarator"),
        Or(
          Nothing(),
          Then(
            text("="),
            production("initializer")
          )
        )
      ),
      Bullet()
    )
  ),
  (
    "static-assert-declaration",
    Then(
      Bullet(),
      Then(
        text("_Static_assert"),
        text("("),
        production("constant-expression"),
        text(","),
        production("string-literal"),
        text(")"),
        text(";")
      ),
      Bullet()
    )
  ),
  (
    "storage-class-specifier",
    Then(
      Bullet(),
      Or(
        text("typedef"),
        text("extern"),
        text("static"),
        text("_Thread_local"),
        text("auto"),
        text("register")
      ),
      Bullet()
    )
  ),
  (
    "type-specifier",
    Then(
      Bullet(),
      Or(
        text("void"),
        text("char"),
        text("short"),
        text("int"),
        text("long"),
        text("float"),
        text("double"),
        text("signed"),
        text("unsigned"),
        text("_Bool"),
        text("_Complex"),
        text("_Imaginary"),
        production("atomic-type-specifier"),
        production("struct-or-union-specifier"),
        production("enum-specifier"),
        production("typedef-name")
      ),
      Bullet()
    )
  ),
  (
    "typedef-name",
    Then(
      Bullet(),
      production("identifier"),
      Bullet()
    )
  ),
  (
    "type-qualifier",
    Then(
      Bullet(),
      Or(
        text("const"),
        text("restrict"),
        text("volatile"),
        text("_Atomic")
      ),
      Bullet()
    )
  ),
  (
    "function-specifier",
    Then(
      Bullet(),
      Or(
        text("inline"),
        text("_Noreturn")
      ),
      Bullet()
    )
  ),
  (
    "alignment-specifier",
    Then(
      Bullet(),
      Or(
        Then(
          text("_Alignas"),
          text("("),
          production("type-name"),
          text(")")
        ),
        Then(
          text("_Alignas"),
          text("("),
          production("constant-expression"),
          text(")")
        )
      ),
      Bullet()
    )
  ),
  (
    "pointer",
    Then(
      Bullet(),
      Then(
        text("*"),
        Or(
          Nothing(),
          production("type-qualifier-list")
        ),
        Or(
          Nothing(),
          production("pointer")
        )
      ),
      Bullet()
    )
  ),
  (
    "direct-declarator",
    Then(
      Bullet(),
      Or(
        production("identifier"),
        Then(
          text("("),
          production("declarator"),
          text(")")
        ),
        Then(
          production("direct-declarator"),
          text("["),
          Or(
            Nothing(),
            text("*")
          ),
          text("]")
        ),
        Then(
          production("direct-declarator"),
          text("["),
          text("static"),
          Or(
            Nothing(),
            production("type-qualifier-list")
          ),
          production("assignment-expression"),
          text("]")
        ),
        Then(
          production("direct-declarator"),
          text("["),
          production("type-qualifier-list"),
          Or(
            Nothing(),
            text("*")
          ),
          text("]")
        ),
        Then(
          production("direct-declarator"),
          text("["),
          production("type-qualifier-list"),
          Or(
            Nothing(),
            text("static")
          ),
          production("assignment-expression"),
          text("]")
        ),
        Then(
          production("direct-declarator"),
          text("["),
          production("assignment-expression"),
          text("]")
        ),
        Then(
          production("direct-declarator"),
          text("("),
          production("parameter-type-list"),
          text(")")
        ),
        Then(
          production("direct-declarator"),
          text("("),
          production("identifier-list"),
          text(")")
        ),
        Then(
          production("direct-declarator"),
          text("("),
          text(")")
        )
      ),
      Bullet()
    )
  ),
  (
    "identifier-list",
    Then(
      Bullet(),
      Loop(
        production("identifier"),
      text(",")
      ),
      Bullet()
    )
  ),
  (
    "initializer-list",
    Then(
      Bullet(),
      Loop(
        production("designative-initializer"),
      text(",")
      ),
      Bullet()
    )
  ),
  (
    "designative-initializer",
    Then(
      Bullet(),
      Then(
        Or(
          Nothing(),
          production("designation")
        ),
        production("initializer")
      ),
      Bullet()
    )
  ),
  (
    "initializer",
    Then(
      Bullet(),
      Or(
        Then(
          text("{"),
          production("initializer-list"),
          Or(
            Nothing(),
            text(",")
          ),
          text("}")
        ),
        production("assignment-expression")
      ),
      Bullet()
    )
  ),
  (
    "constant-expression",
    Then(
      Bullet(),
      production("conditional-expression"),
      Bullet()
    )
  ),
  (
    "atomic-type-specifier",
    Then(
      Bullet(),
      Then(
        text("_Atomic"),
        text("("),
        production("type-name"),
        text(")")
      ),
      Bullet()
    )
  ),
  (
    "struct-or-union-specifier",
    Then(
      Bullet(),
      Or(
        Then(
          production("struct-or-union"),
          text("{"),
          production("struct-declaration-list"),
          text("}")
        ),
        Then(
          production("struct-or-union"),
          production("identifier"),
          Or(
            Nothing(),
            Then(
              text("{"),
              production("struct-declaration-list"),
              text("}")
            )
          )
        )
      ),
      Bullet()
    )
  ),
  (
    "struct-or-union",
    Then(
      Bullet(),
      Or(
        text("struct"),
        text("union")
      ),
      Bullet()
    )
  ),
  (
    "struct-declaration-list",
    Then(
      Bullet(),
      Loop(
        production("struct-declaration"),
      Nothing()
      ),
      Bullet()
    )
  ),
  (
    "struct-declaration",
    Then(
      Bullet(),
      Or(
        Then(
          production("specifier-qualifier-list"),
          text(";")
        ),
        Then(
          production("specifier-qualifier-list"),
          production("struct-declarator-list"),
          text(";")
        ),
        production("static-assert-declaration")
      ),
      Bullet()
    )
  ),
  (
    "enum-specifier",
    Then(
      Bullet(),
      Or(
        Then(
          text("enum"),
          text("{"),
          production("enumerator-list"),
          Or(
            Nothing(),
            text(",")
          ),
          text("}")
        ),
        Then(
          text("enum"),
          production("identifier"),
          Or(
            Nothing(),
            Then(
              text("{"),
              production("enumerator-list"),
              Or(
                Nothing(),
                text(",")
              ),
              text("}")
            )
          )
        )
      ),
      Bullet()
    )
  ),
  (
    "enumerator-list",
    Then(
      Bullet(),
      Loop(
        production("enumerator"),
      text(",")
      ),
      Bullet()
    )
  ),
  (
    "enumerator",
    Then(
      Bullet(),
      Then(
        production("enumeration-constant"),
        Or(
          Nothing(),
          Then(
            text("="),
            production("constant-expression")
          )
        )
      ),
      Bullet()
    )
  ),
  (
    "enumeration-constant",
    Then(
      Bullet(),
      production("identifier"),
      Bullet()
    )
  ),
  (
    "type-name",
    Then(
      Bullet(),
      Then(
        production("specifier-qualifier-list"),
        Or(
          Nothing(),
          production("abstract-declarator")
        )
      ),
      Bullet()
    )
  ),
  (
    "specifier-qualifier-list",
    Then(
      Bullet(),
      Loop(
        production("specifier-qualifier"),
      Nothing()
      ),
      Bullet()
    )
  ),
  (
    "specifier-qualifier",
    Then(
      Bullet(),
      Or(
        production("type-specifier"),
        production("type-qualifier")
      ),
      Bullet()
    )
  ),
  (
    "abstract-declarator",
    Then(
      Bullet(),
      Or(
        Then(
          production("pointer"),
          Or(
            Nothing(),
            production("direct-abstract-declarator")
          )
        ),
        production("direct-abstract-declarator")
      ),
      Bullet()
    )
  ),
  (
    "direct-abstract-declarator",
    Then(
      Bullet(),
      Or(
        Then(
          text("("),
          production("abstract-declarator"),
          text(")")
        ),
        Then(
          text("("),
          production("parameter-type-list"),
          text(")")
        ),
        Then(
          text("("),
          text(")")
        ),
        Then(
          text("["),
          Or(
            Nothing(),
            text("*")
          ),
          text("]")
        ),
        Then(
          text("["),
          text("static"),
          Or(
            Nothing(),
            production("type-qualifier-list")
          ),
          production("assignment-expression"),
          text("]")
        ),
        Then(
          text("["),
          production("type-qualifier-list"),
          Or(
            Nothing(),
            Then(
              Or(
                Nothing(),
                text("static")
              ),
              production("assignment-expression")
            )
          ),
          text("]")
        ),
        Then(
          text("["),
          production("assignment-expression"),
          text("]")
        ),
        Then(
          production("direct-abstract-declarator"),
          text("["),
          Or(
            Nothing(),
            text("*")
          ),
          text("]")
        ),
        Then(
          production("direct-abstract-declarator"),
          text("["),
          text("static"),
          Or(
            Nothing(),
            production("type-qualifier-list")
          ),
          production("assignment-expression"),
          text("]")
        ),
        Then(
          production("direct-abstract-declarator"),
          text("["),
          production("type-qualifier-list"),
          Or(
            Nothing(),
            Then(
              Or(
                Nothing(),
                text("static")
              ),
              production("assignment-expression")
            )
          ),
          text("]")
        ),
        Then(
          production("direct-abstract-declarator"),
          text("["),
          production("assignment-expression"),
          text("]")
        ),
        Then(
          production("direct-abstract-declarator"),
          text("("),
          production("parameter-type-list"),
          text(")")
        ),
        Then(
          production("direct-abstract-declarator"),
          text("("),
          text(")")
        )
      ),
      Bullet()
    )
  ),
  (
    "struct-declarator-list",
    Then(
      Bullet(),
      Loop(
        production("struct-declarator"),
      text(",")
      ),
      Bullet()
    )
  ),
  (
    "type-qualifier-list",
    Then(
      Bullet(),
      Loop(
        production("type-qualifier"),
      Nothing()
      ),
      Bullet()
    )
  ),
  (
    "parameter-type-list",
    Then(
      Bullet(),
      Then(
        production("parameter-list"),
        Or(
          Nothing(),
          Then(
            text(","),
            text("...")
          )
        )
      ),
      Bullet()
    )
  ),
  (
    "struct-declarator",
    Then(
      Bullet(),
      Or(
        Then(
          text(":"),
          production("constant-expression")
        ),
        Then(
          production("declarator"),
          Or(
            Nothing(),
            Then(
              text(":"),
              production("constant-expression")
            )
          )
        )
      ),
      Bullet()
    )
  ),
  (
    "assignment-operator",
    Then(
      Bullet(),
      Or(
        text("="),
        text("*="),
        text("/="),
        text("%="),
        text("+="),
        text("-="),
        text("<<="),
        text(">>="),
        text("&="),
        text("^="),
        text("|=")
      ),
      Bullet()
    )
  ),
  (
    "parameter-list",
    Then(
      Bullet(),
      Loop(
        production("parameter-declaration"),
      text(",")
      ),
      Bullet()
    )
  ),
  (
    "parameter-declaration",
    Then(
      Bullet(),
      Then(
        production("declaration-specifiers"),
        Or(
          Nothing(),
          production("declarator"),
          production("abstract-declarator")
        )
      ),
      Bullet()
    )
  ),
  (
    "expression",
    Then(
      Bullet(),
      Loop(
        production("assignment-expression"),
      text(",")
      ),
      Bullet()
    )
  ),
  (
    "assignment-expression",
    Then(
      Bullet(),
      Or(
        production("conditional-expression"),
        Then(
          production("unary-expression"),
          production("assignment-operator"),
          production("assignment-expression")
        )
      ),
      Bullet()
    )
  ),
  (
    "conditional-expression",
    Then(
      Bullet(),
      Then(
        production("logical-or-expression"),
        Or(
          Nothing(),
          Then(
            text("?"),
            production("expression"),
            text(":"),
            production("conditional-expression")
          )
        )
      ),
      Bullet()
    )
  ),
  (
    "logical-or-expression",
    Then(
      Bullet(),
      Loop(
        production("logical-and-expression"),
      text("||")
      ),
      Bullet()
    )
  ),
  (
    "logical-and-expression",
    Then(
      Bullet(),
      Loop(
        production("inclusive-or-expression"),
      text("&&")
      ),
      Bullet()
    )
  ),
  (
    "inclusive-or-expression",
    Then(
      Bullet(),
      Loop(
        production("exclusive-or-expression"),
      text("|")
      ),
      Bullet()
    )
  ),
  (
    "exclusive-or-expression",
    Then(
      Bullet(),
      Loop(
        production("and-expression"),
      text("^")
      ),
      Bullet()
    )
  ),
  (
    "and-expression",
    Then(
      Bullet(),
      Loop(
        production("equality-expression"),
      text("&")
      ),
      Bullet()
    )
  ),
  (
    "equality-expression",
    Then(
      Bullet(),
      Loop(
        production("relational-expression"),
      Or(
        text("=="),
        text("!=")
      )
      ),
      Bullet()
    )
  ),
  (
    "relational-expression",
    Then(
      Bullet(),
      Loop(
        production("shift-expression"),
      Or(
        text("<"),
        text(">"),
        text("<="),
        text(">=")
      )
      ),
      Bullet()
    )
  ),
  (
    "shift-expression",
    Then(
      Bullet(),
      Loop(
        production("additive-expression"),
      Or(
        text("<<"),
        text(">>")
      )
      ),
      Bullet()
    )
  ),
  (
    "additive-expression",
    Then(
      Bullet(),
      Loop(
        production("multiplicative-expression"),
      Or(
        text("+"),
        text("-")
      )
      ),
      Bullet()
    )
  ),
  (
    "multiplicative-expression",
    Then(
      Bullet(),
      Loop(
        production("cast-expression"),
      Or(
        text("*"),
        text("/"),
        text("%")
      )
      ),
      Bullet()
    )
  ),
  (
    "cast-expression",
    Then(
      Bullet(),
      Or(
        production("unary-expression"),
        Then(
          text("("),
          production("type-name"),
          text(")"),
          production("cast-expression")
        )
      ),
      Bullet()
    )
  ),
  (
    "unary-expression",
    Then(
      Bullet(),
      Or(
        production("postfix-expression"),
        Then(
          Or(
            text("++"),
            text("--")
          ),
          production("unary-expression")
        ),
        Then(
          production("unary-operator"),
          production("cast-expression")
        ),
        Then(
          text("sizeof"),
          production("unary-expression")
        ),
        Then(
          text("sizeof"),
          text("("),
          production("type-name"),
          text(")")
        ),
        Then(
          text("_Alignof"),
          text("("),
          production("type-name"),
          text(")")
        )
      ),
      Bullet()
    )
  ),
  (
    "postfix-expression",
    Then(
      Bullet(),
      Or(
        production("primary-expression"),
        Then(
          production("postfix-expression"),
          text("["),
          production("expression"),
          text("]")
        ),
        Then(
          production("postfix-expression"),
          text("("),
          Or(
            Nothing(),
            production("argument-expression-list")
          ),
          text(")")
        ),
        Then(
          production("postfix-expression"),
          Or(
            text("."),
            text("->")
          ),
          production("identifier")
        ),
        Then(
          production("postfix-expression"),
          Or(
            text("++"),
            text("--")
          )
        ),
        Then(
          text("("),
          production("type-name"),
          text(")"),
          text("{"),
          production("initializer-list"),
          Or(
            Nothing(),
            text(",")
          ),
          text("}")
        )
      ),
      Bullet()
    )
  ),
  (
    "unary-operator",
    Then(
      Bullet(),
      Or(
        text("&"),
        text("*"),
        text("+"),
        text("-"),
        text("~"),
        text("!")
      ),
      Bullet()
    )
  ),
  (
    "primary-expression",
    Then(
      Bullet(),
      Or(
        production("identifier"),
        production("constant"),
        production("string"),
        Then(
          text("("),
          production("expression"),
          text(")")
        ),
        production("generic-selection")
      ),
      Bullet()
    )
  ),
  (
    "argument-expression-list",
    Then(
      Bullet(),
      Loop(
        production("assignment-expression"),
      text(",")
      ),
      Bullet()
    )
  ),
  (
    "constant",
    Then(
      Bullet(),
      Or(
        production("integer-constant"),
        production("character-constant"),
        production("floating-constant"),
        production("enumeration-constant")
      ),
      Bullet()
    )
  ),
  (
    "string",
    Then(
      Bullet(),
      Or(
        production("string-literal"),
        text("__func__")
      ),
      Bullet()
    )
  ),
  (
    "generic-selection",
    Then(
      Bullet(),
      Then(
        text("_Generic"),
        text("("),
        production("assignment-expression"),
        text(","),
        production("generic-assoc-list"),
        text(")")
      ),
      Bullet()
    )
  ),
  (
    "generic-assoc-list",
    Then(
      Bullet(),
      Loop(
        production("generic-association"),
      text(",")
      ),
      Bullet()
    )
  ),
  (
    "generic-association",
    Then(
      Bullet(),
      Or(
        Then(
          production("type-name"),
          text(":"),
          production("assignment-expression")
        ),
        Then(
          text("default"),
          text(":"),
          production("assignment-expression")
        )
      ),
      Bullet()
    )
  ),
  (
    "designation",
    Then(
      Bullet(),
      Then(
        production("designator-list"),
        text("=")
      ),
      Bullet()
    )
  ),
  (
    "designator-list",
    Then(
      Bullet(),
      Loop(
        production("designator"),
      Nothing()
      ),
      Bullet()
    )
  ),
  (
    "designator",
    Then(
      Bullet(),
      Or(
        Then(
          text("["),
          production("constant-expression"),
          text("]")
        ),
        Then(
          text("."),
          production("identifier")
        )
      ),
      Bullet()
    )
  ),
  (
    "statement",
    Then(
      Bullet(),
      Or(
        production("labeled-statement"),
        production("compound-statement"),
        production("expression-statement"),
        production("selection-statement"),
        production("iteration-statement"),
        production("jump-statement")
      ),
      Bullet()
    )
  ),
  (
    "labeled-statement",
    Then(
      Bullet(),
      Or(
        Then(
          production("identifier"),
          text(":"),
          production("statement")
        ),
        Then(
          text("case"),
          production("constant-expression"),
          text(":"),
          production("statement")
        ),
        Then(
          text("default"),
          text(":"),
          production("statement")
        )
      ),
      Bullet()
    )
  ),
  (
    "expression-statement",
    Then(
      Bullet(),
      Then(
        Or(
          Nothing(),
          production("expression")
        ),
        text(";")
      ),
      Bullet()
    )
  ),
  (
    "selection-statement",
    Then(
      Bullet(),
      Or(
        Then(
          text("if"),
          text("("),
          production("expression"),
          text(")"),
          production("statement"),
          text("else"),
          production("statement")
        ),
        Then(
          text("if"),
          text("("),
          production("expression"),
          text(")"),
          production("statement")
        ),
        Then(
          text("switch"),
          text("("),
          production("expression"),
          text(")"),
          production("statement")
        )
      ),
      Bullet()
    )
  ),
  (
    "iteration-statement",
    Then(
      Bullet(),
      Or(
        Then(
          text("while"),
          text("("),
          production("expression"),
          text(")"),
          production("statement")
        ),
        Then(
          text("do"),
          production("statement"),
          text("while"),
          text("("),
          production("expression"),
          text(")"),
          text(";")
        ),
        Then(
          text("for"),
          text("("),
          Or(
            Nothing(),
            production("expression")
          ),
          text(";"),
          Or(
            Nothing(),
            production("expression")
          ),
          text(";"),
          Or(
            Nothing(),
            production("expression")
          ),
          text(")"),
          production("statement")
        ),
        Then(
          text("for"),
          text("("),
          production("declaration"),
          Or(
            Nothing(),
            production("expression")
          ),
          text(";"),
          Or(
            Nothing(),
            production("expression")
          ),
          text(")"),
          production("statement")
        )
      ),
      Bullet()
    )
  ),
  (
    "jump-statement",
    Then(
      Bullet(),
      Or(
        Then(
          text("goto"),
          production("identifier"),
          text(";")
        ),
        Then(
          text("continue"),
          text(";")
        ),
        Then(
          text("break"),
          text(";")
        ),
        Then(
          text("return"),
          Or(
            Nothing(),
            production("expression")
          ),
          text(";")
        )
      ),
      Bullet()
    )
  )
])

options = {
  "raildraw_arrow_width":       8,
  "raildraw_arrow_height":      8,
  "raildraw_then_before_arrow": 8,
  "raildraw_then_after_arrow":  0,
  "raildraw_or_before":         8,
  "raildraw_or_after":          8,
  "raildraw_token_padding":     2,
  "raildraw_bullet_radius":     4,
  "raildraw_or_radius":        10,
  "raildraw_line_size":         2,
  "raildraw_title_before":     20,
  "raildraw_title_after":      30,
  "raildraw_scale":             1
}

# parcon.railroad.raildraw.draw_to_image(sys.argv[1], productions, options, sys.argv[2], True)
parcon.railroad.raildraw.draw_to_png(productions, options, sys.argv[2], True)

add('translation-unit', Diagram(
  ZeroOrMore(
    Skip(),
    NonTerminal("external-declaration"))));

add('external-declaration', Diagram(
  Choice(0,
    NonTerminal("function-definition"),
    NonTerminal("declaration"))));

add('function-definition', Diagram(
  Sequence(
    NonTerminal("declaration-specifiers"),
    NonTerminal("declarator"),
    Choice(0,
      Skip(),
      NonTerminal("declaration-list")),
    NonTerminal("compound-statement"))));

add('declaration', Diagram(
  Choice(0,
    Sequence(
      NonTerminal("declaration-specifiers"),
      Choice(0,
        Skip(),
        NonTerminal("init-declarator-list")),
      Terminal(";")),
    NonTerminal("static-assert-declaration"),
    Terminal(";"))));

add('declaration-specifiers', Diagram(
  ZeroOrMore(
    NonTerminal("declaration-specifier"),
    Skip())));

add('declaration-specifier', Diagram(
  Choice(0,
    NonTerminal("storage-class-specifier"),
    NonTerminal("type-specifier"),
    NonTerminal("type-qualifier"),
    NonTerminal("function-specifier"),
    NonTerminal("alignment-specifier"))));

add('declarator', Diagram(
  Sequence(
    Choice(0,
      Skip(),
      NonTerminal("pointer")),
    NonTerminal("direct-declarator"))));

add('declaration-list', Diagram(
  ZeroOrMore(
    NonTerminal("declaration"),
    Skip())));

add('compound-statement', Diagram(
  Sequence(
    Terminal("{"),
    ZeroOrMore(
      Skip(),
      NonTerminal("declaration-or-statement")),
    Terminal("}"))));

add('declaration-or-statement', Diagram(
  Choice(0,
    NonTerminal("declaration"),
    NonTerminal("statement"))));

add('init-declarator-list', Diagram(
  ZeroOrMore(
    NonTerminal("init-declarator"),
    Terminal(","))));

add('init-declarator', Diagram(
  Sequence(
    NonTerminal("declarator"),
    Choice(0,
      Skip(),
      Sequence(
        Terminal("="),
        NonTerminal("initializer"))))));

add('static-assert-declaration', Diagram(
  Sequence(
    Terminal("_Static_assert"),
    Terminal("("),
    NonTerminal("constant-expression"),
    Terminal(","),
    NonTerminal("string-literal"),
    Terminal(")"),
    Terminal(";"))));

add('storage-class-specifier', Diagram(
  Choice(0,
    Terminal("typedef"),
    Terminal("extern"),
    Terminal("static"),
    Terminal("_Thread_local"),
    Terminal("auto"),
    Terminal("register"))));

add('type-specifier', Diagram(
  Choice(0,
    Terminal("void"),
    Terminal("char"),
    Terminal("short"),
    Terminal("int"),
    Terminal("long"),
    Terminal("float"),
    Terminal("double"),
    Terminal("signed"),
    Terminal("unsigned"),
    Terminal("_Bool"),
    Terminal("_Complex"),
    Terminal("_Imaginary"),
    NonTerminal("atomic-type-specifier"),
    NonTerminal("struct-or-union-specifier"),
    NonTerminal("enum-specifier"),
    NonTerminal("typedef-name"))));

add('typedef-name', Diagram(
  NonTerminal("identifier")));

add('type-qualifier', Diagram(
  Choice(0,
    Terminal("const"),
    Terminal("restrict"),
    Terminal("volatile"),
    Terminal("_Atomic"))));

add('function-specifier', Diagram(
  Choice(0,
    Terminal("inline"),
    Terminal("_Noreturn"))));

add('alignment-specifier', Diagram(
  Choice(0,
    Sequence(
      Terminal("_Alignas"),
      Terminal("("),
      NonTerminal("type-name"),
      Terminal(")")),
    Sequence(
      Terminal("_Alignas"),
      Terminal("("),
      NonTerminal("constant-expression"),
      Terminal(")")))));

add('pointer', Diagram(
  Sequence(
    Terminal("*"),
    Choice(0,
      Skip(),
      NonTerminal("type-qualifier-list")),
    Choice(0,
      Skip(),
      NonTerminal("pointer")))));

add('direct-declarator', Diagram(
  Choice(0,
    NonTerminal("identifier"),
    Sequence(
      Terminal("("),
      NonTerminal("declarator"),
      Terminal(")")),
    Sequence(
      NonTerminal("direct-declarator"),
      Terminal("["),
      Choice(0,
        Skip(),
        Terminal("*")),
      Terminal("]")),
    Sequence(
      NonTerminal("direct-declarator"),
      Terminal("["),
      Terminal("static"),
      Choice(0,
        Skip(),
        NonTerminal("type-qualifier-list")),
      NonTerminal("assignment-expression"),
      Terminal("]")),
    Sequence(
      NonTerminal("direct-declarator"),
      Terminal("["),
      NonTerminal("type-qualifier-list"),
      Choice(0,
        Skip(),
        Terminal("*")),
      Terminal("]")),
    Sequence(
      NonTerminal("direct-declarator"),
      Terminal("["),
      NonTerminal("type-qualifier-list"),
      Choice(0,
        Skip(),
        Terminal("static")),
      NonTerminal("assignment-expression"),
      Terminal("]")),
    Sequence(
      NonTerminal("direct-declarator"),
      Terminal("["),
      NonTerminal("assignment-expression"),
      Terminal("]")),
    Sequence(
      NonTerminal("direct-declarator"),
      Terminal("("),
      NonTerminal("parameter-type-list"),
      Terminal(")")),
    Sequence(
      NonTerminal("direct-declarator"),
      Terminal("("),
      NonTerminal("identifier-list"),
      Terminal(")")),
    Sequence(
      NonTerminal("direct-declarator"),
      Terminal("("),
      Terminal(")")))));

add('identifier-list', Diagram(
  ZeroOrMore(
    NonTerminal("identifier"),
    Terminal(","))));

add('initializer-list', Diagram(
  ZeroOrMore(
    NonTerminal("designative-initializer"),
    Terminal(","))));

add('designative-initializer', Diagram(
  Sequence(
    Choice(0,
      Skip(),
      NonTerminal("designation")),
    NonTerminal("initializer"))));

add('initializer', Diagram(
  Choice(0,
    Sequence(
      Terminal("{"),
      NonTerminal("initializer-list"),
      Choice(0,
        Skip(),
        Terminal(",")),
      Terminal("}")),
    NonTerminal("assignment-expression"))));

add('constant-expression', Diagram(
  NonTerminal("conditional-expression")));

add('atomic-type-specifier', Diagram(
  Sequence(
    Terminal("_Atomic"),
    Terminal("("),
    NonTerminal("type-name"),
    Terminal(")"))));

add('struct-or-union-specifier', Diagram(
  Choice(0,
    Sequence(
      NonTerminal("struct-or-union"),
      Terminal("{"),
      NonTerminal("struct-declaration-list"),
      Terminal("}")),
    Sequence(
      NonTerminal("struct-or-union"),
      NonTerminal("identifier"),
      Choice(0,
        Skip(),
        Sequence(
          Terminal("{"),
          NonTerminal("struct-declaration-list"),
          Terminal("}")))))));

add('struct-or-union', Diagram(
  Choice(0,
    Terminal("struct"),
    Terminal("union"))));

add('struct-declaration-list', Diagram(
  ZeroOrMore(
    NonTerminal("struct-declaration"),
    Skip())));

add('struct-declaration', Diagram(
  Choice(0,
    Sequence(
      NonTerminal("specifier-qualifier-list"),
      Terminal(";")),
    Sequence(
      NonTerminal("specifier-qualifier-list"),
      NonTerminal("struct-declarator-list"),
      Terminal(";")),
    NonTerminal("static-assert-declaration"))));

add('enum-specifier', Diagram(
  Choice(0,
    Sequence(
      Terminal("enum"),
      Terminal("{"),
      NonTerminal("enumerator-list"),
      Choice(0,
        Skip(),
        Terminal(",")),
      Terminal("}")),
    Sequence(
      Terminal("enum"),
      NonTerminal("identifier"),
      Choice(0,
        Skip(),
        Sequence(
          Terminal("{"),
          NonTerminal("enumerator-list"),
          Choice(0,
            Skip(),
            Terminal(",")),
          Terminal("}")))))));

add('enumerator-list', Diagram(
  ZeroOrMore(
    NonTerminal("enumerator"),
    Terminal(","))));

add('enumerator', Diagram(
  Sequence(
    NonTerminal("enumeration-constant"),
    Choice(0,
      Skip(),
      Sequence(
        Terminal("="),
        NonTerminal("constant-expression"))))));

add('enumeration-constant', Diagram(
  NonTerminal("identifier")));

add('type-name', Diagram(
  Sequence(
    NonTerminal("specifier-qualifier-list"),
    Choice(0,
      Skip(),
      NonTerminal("abstract-declarator")))));

add('specifier-qualifier-list', Diagram(
  ZeroOrMore(
    NonTerminal("specifier-qualifier"),
    Skip())));

add('specifier-qualifier', Diagram(
  Choice(0,
    NonTerminal("type-specifier"),
    NonTerminal("type-qualifier"))));

add('abstract-declarator', Diagram(
  Choice(0,
    Sequence(
      NonTerminal("pointer"),
      Choice(0,
        Skip(),
        NonTerminal("direct-abstract-declarator"))),
    NonTerminal("direct-abstract-declarator"))));

add('direct-abstract-declarator', Diagram(
  Choice(0,
    Sequence(
      Terminal("("),
      NonTerminal("abstract-declarator"),
      Terminal(")")),
    Sequence(
      Terminal("("),
      NonTerminal("parameter-type-list"),
      Terminal(")")),
    Sequence(
      Terminal("("),
      Terminal(")")),
    Sequence(
      Terminal("["),
      Choice(0,
        Skip(),
        Terminal("*")),
      Terminal("]")),
    Sequence(
      Terminal("["),
      Terminal("static"),
      Choice(0,
        Skip(),
        NonTerminal("type-qualifier-list")),
      NonTerminal("assignment-expression"),
      Terminal("]")),
    Sequence(
      Terminal("["),
      NonTerminal("type-qualifier-list"),
      Choice(0,
        Skip(),
        Sequence(
          Choice(0,
            Skip(),
            Terminal("static")),
          NonTerminal("assignment-expression"))),
      Terminal("]")),
    Sequence(
      Terminal("["),
      NonTerminal("assignment-expression"),
      Terminal("]")),
    Sequence(
      NonTerminal("direct-abstract-declarator"),
      Terminal("["),
      Choice(0,
        Skip(),
        Terminal("*")),
      Terminal("]")),
    Sequence(
      NonTerminal("direct-abstract-declarator"),
      Terminal("["),
      Terminal("static"),
      Choice(0,
        Skip(),
        NonTerminal("type-qualifier-list")),
      NonTerminal("assignment-expression"),
      Terminal("]")),
    Sequence(
      NonTerminal("direct-abstract-declarator"),
      Terminal("["),
      NonTerminal("type-qualifier-list"),
      Choice(0,
        Skip(),
        Sequence(
          Choice(0,
            Skip(),
            Terminal("static")),
          NonTerminal("assignment-expression"))),
      Terminal("]")),
    Sequence(
      NonTerminal("direct-abstract-declarator"),
      Terminal("["),
      NonTerminal("assignment-expression"),
      Terminal("]")),
    Sequence(
      NonTerminal("direct-abstract-declarator"),
      Terminal("("),
      NonTerminal("parameter-type-list"),
      Terminal(")")),
    Sequence(
      NonTerminal("direct-abstract-declarator"),
      Terminal("("),
      Terminal(")")))));

add('struct-declarator-list', Diagram(
  ZeroOrMore(
    NonTerminal("struct-declarator"),
    Terminal(","))));

add('type-qualifier-list', Diagram(
  ZeroOrMore(
    NonTerminal("type-qualifier"),
    Skip())));

add('parameter-type-list', Diagram(
  Sequence(
    NonTerminal("parameter-list"),
    Choice(0,
      Skip(),
      Sequence(
        Terminal(","),
        Terminal("..."))))));

add('struct-declarator', Diagram(
  Choice(0,
    Sequence(
      Terminal(":"),
      NonTerminal("constant-expression")),
    Sequence(
      NonTerminal("declarator"),
      Choice(0,
        Skip(),
        Sequence(
          Terminal(":"),
          NonTerminal("constant-expression")))))));

add('assignment-operator', Diagram(
  Choice(0,
    Terminal("="),
    Terminal("*="),
    Terminal("\/="),
    Terminal("%="),
    Terminal("+="),
    Terminal("-="),
    Terminal("<<="),
    Terminal(">>="),
    Terminal("&="),
    Terminal("^="),
    Terminal("|="))));

add('parameter-list', Diagram(
  ZeroOrMore(
    NonTerminal("parameter-declaration"),
    Terminal(","))));

add('parameter-declaration', Diagram(
  Sequence(
    NonTerminal("declaration-specifiers"),
    Choice(0,
      Skip(),
      NonTerminal("declarator"),
      NonTerminal("abstract-declarator")))));

add('expression', Diagram(
  ZeroOrMore(
    NonTerminal("assignment-expression"),
    Terminal(","))));

add('assignment-expression', Diagram(
  Choice(0,
    NonTerminal("conditional-expression"),
    Sequence(
      NonTerminal("unary-expression"),
      NonTerminal("assignment-operator"),
      NonTerminal("assignment-expression")))));

add('conditional-expression', Diagram(
  Sequence(
    NonTerminal("logical-or-expression"),
    Choice(0,
      Skip(),
      Sequence(
        Terminal("?"),
        NonTerminal("expression"),
        Terminal(":"),
        NonTerminal("conditional-expression"))))));

add('logical-or-expression', Diagram(
  ZeroOrMore(
    NonTerminal("logical-and-expression"),
    Terminal("||"))));

add('logical-and-expression', Diagram(
  ZeroOrMore(
    NonTerminal("inclusive-or-expression"),
    Terminal("&&"))));

add('inclusive-or-expression', Diagram(
  ZeroOrMore(
    NonTerminal("exclusive-or-expression"),
    Terminal("|"))));

add('exclusive-or-expression', Diagram(
  ZeroOrMore(
    NonTerminal("and-expression"),
    Terminal("^"))));

add('and-expression', Diagram(
  ZeroOrMore(
    NonTerminal("equality-expression"),
    Terminal("&"))));

add('equality-expression', Diagram(
  ZeroOrMore(
    NonTerminal("relational-expression"),
    Choice(0,
      Terminal("=="),
      Terminal("!=")))));

add('relational-expression', Diagram(
  ZeroOrMore(
    NonTerminal("shift-expression"),
    Choice(0,
      Terminal("<"),
      Terminal(">"),
      Terminal("<="),
      Terminal(">=")))));

add('shift-expression', Diagram(
  ZeroOrMore(
    NonTerminal("additive-expression"),
    Choice(0,
      Terminal("<<"),
      Terminal(">>")))));

add('additive-expression', Diagram(
  ZeroOrMore(
    NonTerminal("multiplicative-expression"),
    Choice(0,
      Terminal("+"),
      Terminal("-")))));

add('multiplicative-expression', Diagram(
  ZeroOrMore(
    NonTerminal("cast-expression"),
    Choice(0,
      Terminal("*"),
      Terminal("\/"),
      Terminal("%")))));

add('cast-expression', Diagram(
  Choice(0,
    NonTerminal("unary-expression"),
    Sequence(
      Terminal("("),
      NonTerminal("type-name"),
      Terminal(")"),
      NonTerminal("cast-expression")))));

add('unary-expression', Diagram(
  Choice(0,
    NonTerminal("postfix-expression"),
    Sequence(
      Choice(0,
        Terminal("++"),
        Terminal("--")),
      NonTerminal("unary-expression")),
    Sequence(
      NonTerminal("unary-operator"),
      NonTerminal("cast-expression")),
    Sequence(
      Terminal("sizeof"),
      NonTerminal("unary-expression")),
    Sequence(
      Terminal("sizeof"),
      Terminal("("),
      NonTerminal("type-name"),
      Terminal(")")),
    Sequence(
      Terminal("_Alignof"),
      Terminal("("),
      NonTerminal("type-name"),
      Terminal(")")))));

add('postfix-expression', Diagram(
  Choice(0,
    NonTerminal("primary-expression"),
    Sequence(
      NonTerminal("postfix-expression"),
      Terminal("["),
      NonTerminal("expression"),
      Terminal("]")),
    Sequence(
      NonTerminal("postfix-expression"),
      Terminal("("),
      Choice(0,
        Skip(),
        NonTerminal("argument-expression-list")),
      Terminal(")")),
    Sequence(
      NonTerminal("postfix-expression"),
      Choice(0,
        Terminal("."),
        Terminal("->")),
      NonTerminal("identifier")),
    Sequence(
      NonTerminal("postfix-expression"),
      Choice(0,
        Terminal("++"),
        Terminal("--"))),
    Sequence(
      Terminal("("),
      NonTerminal("type-name"),
      Terminal(")"),
      Terminal("{"),
      NonTerminal("initializer-list"),
      Choice(0,
        Skip(),
        Terminal(",")),
      Terminal("}")))));

add('unary-operator', Diagram(
  Choice(0,
    Terminal("&"),
    Terminal("*"),
    Terminal("+"),
    Terminal("-"),
    Terminal("~"),
    Terminal("!"))));

add('primary-expression', Diagram(
  Choice(0,
    NonTerminal("identifier"),
    NonTerminal("constant"),
    NonTerminal("string"),
    Sequence(
      Terminal("("),
      NonTerminal("expression"),
      Terminal(")")),
    NonTerminal("generic-selection"))));

add('argument-expression-list', Diagram(
  ZeroOrMore(
    NonTerminal("assignment-expression"),
    Terminal(","))));

add('constant', Diagram(
  Choice(0,
    NonTerminal("integer-constant"),
    NonTerminal("character-constant"),
    NonTerminal("floating-constant"),
    NonTerminal("enumeration-constant"))));

add('string', Diagram(
  Choice(0,
    NonTerminal("string-literal"),
    Terminal("__func__"))));

add('generic-selection', Diagram(
  Sequence(
    Terminal("_Generic"),
    Terminal("("),
    NonTerminal("assignment-expression"),
    Terminal(","),
    NonTerminal("generic-assoc-list"),
    Terminal(")"))));

add('generic-assoc-list', Diagram(
  ZeroOrMore(
    NonTerminal("generic-association"),
    Terminal(","))));

add('generic-association', Diagram(
  Choice(0,
    Sequence(
      NonTerminal("type-name"),
      Terminal(":"),
      NonTerminal("assignment-expression")),
    Sequence(
      Terminal("default"),
      Terminal(":"),
      NonTerminal("assignment-expression")))));

add('designation', Diagram(
  Sequence(
    NonTerminal("designator-list"),
    Terminal("="))));

add('designator-list', Diagram(
  ZeroOrMore(
    NonTerminal("designator"),
    Skip())));

add('designator', Diagram(
  Choice(0,
    Sequence(
      Terminal("["),
      NonTerminal("constant-expression"),
      Terminal("]")),
    Sequence(
      Terminal("."),
      NonTerminal("identifier")))));

add('statement', Diagram(
  Choice(0,
    NonTerminal("labeled-statement"),
    NonTerminal("compound-statement"),
    NonTerminal("expression-statement"),
    NonTerminal("selection-statement"),
    NonTerminal("iteration-statement"),
    NonTerminal("jump-statement"))));

add('labeled-statement', Diagram(
  Choice(0,
    Sequence(
      NonTerminal("identifier"),
      Terminal(":"),
      NonTerminal("statement")),
    Sequence(
      Terminal("case"),
      NonTerminal("constant-expression"),
      Terminal(":"),
      NonTerminal("statement")),
    Sequence(
      Terminal("default"),
      Terminal(":"),
      NonTerminal("statement")))));

add('expression-statement', Diagram(
  Sequence(
    Choice(0,
      Skip(),
      NonTerminal("expression")),
    Terminal(";"))));

add('selection-statement', Diagram(
  Choice(0,
    Sequence(
      Terminal("if"),
      Terminal("("),
      NonTerminal("expression"),
      Terminal(")"),
      NonTerminal("statement"),
      Terminal("else"),
      NonTerminal("statement")),
    Sequence(
      Terminal("if"),
      Terminal("("),
      NonTerminal("expression"),
      Terminal(")"),
      NonTerminal("statement")),
    Sequence(
      Terminal("switch"),
      Terminal("("),
      NonTerminal("expression"),
      Terminal(")"),
      NonTerminal("statement")))));

add('iteration-statement', Diagram(
  Choice(0,
    Sequence(
      Terminal("while"),
      Terminal("("),
      NonTerminal("expression"),
      Terminal(")"),
      NonTerminal("statement")),
    Sequence(
      Terminal("do"),
      NonTerminal("statement"),
      Terminal("while"),
      Terminal("("),
      NonTerminal("expression"),
      Terminal(")"),
      Terminal(";")),
    Sequence(
      Terminal("for"),
      Terminal("("),
      Choice(0,
        Skip(),
        NonTerminal("expression")),
      Terminal(";"),
      Choice(0,
        Skip(),
        NonTerminal("expression")),
      Terminal(";"),
      Choice(0,
        Skip(),
        NonTerminal("expression")),
      Terminal(")"),
      NonTerminal("statement")),
    Sequence(
      Terminal("for"),
      Terminal("("),
      NonTerminal("declaration"),
      Choice(0,
        Skip(),
        NonTerminal("expression")),
      Terminal(";"),
      Choice(0,
        Skip(),
        NonTerminal("expression")),
      Terminal(")"),
      NonTerminal("statement")))));

add('jump-statement', Diagram(
  Choice(0,
    Sequence(
      Terminal("goto"),
      NonTerminal("identifier"),
      Terminal(";")),
    Sequence(
      Terminal("continue"),
      Terminal(";")),
    Sequence(
      Terminal("break"),
      Terminal(";")),
    Sequence(
      Terminal("return"),
      Choice(0,
        Skip(),
        NonTerminal("expression")),
      Terminal(";")))));

translation-unit: (before prettify)
    VLIST w=38 a=0 d=3 o=0: [
        HLIST w=32 a=0 d=3: [
            VLIST w=32 a=0 d=3 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=26 a=0 d=1 o=0: [
                    HLIST w=20 a=0 d=1: [
                        RULE w=20 a=0 d=1: <external-declaration>
                    ]
                ]
            ]
        ]
    ]

translation-unit: (after prettify)
    VLIST w=26 a=0 d=3 o=0: [
        VLIST w=0 a=0 d=1 o=0: [
        ]
        RULE w=20 a=0 d=1: <external-declaration>
    ]

external-declaration: (before prettify)
    VLIST w=25 a=0 d=3 o=0: [
        HLIST w=19 a=0 d=1: [
            RULE w=19 a=0 d=1: <function-definition>
        ]
        HLIST w=11 a=0 d=1: [
            RULE w=11 a=0 d=1: <declaration>
        ]
    ]

external-declaration: (after prettify)
    VLIST w=25 a=0 d=3 o=0: [
        RULE w=19 a=0 d=1: <function-definition>
        RULE w=11 a=0 d=1: <declaration>
    ]

function-definition: (before prettify)
    VLIST w=90 a=2 d=1 o=0: [
        HLIST w=84 a=2 d=1: [
            RULE w=22 a=0 d=1: <declaration-specifiers>
            RULE w=10 a=0 d=1: <declarator>
            VLIST w=28 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=22 a=0 d=1 o=0: [
                    HLIST w=16 a=0 d=1: [
                        RULE w=16 a=0 d=1: <declaration-list>
                    ]
                ]
            ]
            RULE w=18 a=0 d=1: <compound-statement>
        ]
    ]

function-definition: (after prettify)
    HLIST w=78 a=2 d=1: [
        RULE w=22 a=0 d=1: <declaration-specifiers>
        RULE w=10 a=0 d=1: <declarator>
        VLIST w=22 a=2 d=1 o=1: [
            LTR_ARROW w=1 a=0 d=1
            RULE w=16 a=0 d=1: <declaration-list>
        ]
        RULE w=18 a=0 d=1: <compound-statement>
    ]

declaration: (before prettify)
    VLIST w=65 a=2 d=5 o=0: [
        HLIST w=59 a=2 d=1: [
            RULE w=22 a=0 d=1: <declaration-specifiers>
            VLIST w=32 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=26 a=0 d=1 o=0: [
                    HLIST w=20 a=0 d=1: [
                        RULE w=20 a=0 d=1: <init-declarator-list>
                    ]
                ]
            ]
            LITERAL w=1 a=0 d=1: ";"
        ]
        HLIST w=25 a=0 d=1: [
            RULE w=25 a=0 d=1: <static-assert-declaration>
        ]
        HLIST w=1 a=0 d=1: [
            LITERAL w=1 a=0 d=1: ";"
        ]
    ]

declaration: (after prettify)
    VLIST w=59 a=2 d=5 o=0: [
        HLIST w=53 a=2 d=1: [
            RULE w=22 a=0 d=1: <declaration-specifiers>
            VLIST w=26 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                RULE w=20 a=0 d=1: <init-declarator-list>
            ]
            LITERAL w=1 a=0 d=1: ";"
        ]
        RULE w=25 a=0 d=1: <static-assert-declaration>
        LITERAL w=1 a=0 d=1: ";"
    ]

declaration-specifiers: (before prettify)
    VLIST w=62 a=0 d=3 o=0: [
        HLIST w=56 a=0 d=3: [
            RULE w=21 a=0 d=1: <declaration-specifier>
            VLIST w=33 a=0 d=3 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=27 a=0 d=1 o=0: [
                    HLIST w=21 a=0 d=1: [
                        RULE w=21 a=0 d=1: <declaration-specifier>
                    ]
                ]
            ]
        ]
    ]

declaration-specifiers: (after prettify)
    VLIST w=27 a=0 d=3 o=0: [
        RULE w=21 a=0 d=1: <declaration-specifier>
        RTL_ARROW w=1 a=0 d=1
    ]

declaration-specifier: (before prettify)
    VLIST w=29 a=0 d=9 o=0: [
        HLIST w=23 a=0 d=1: [
            RULE w=23 a=0 d=1: <storage-class-specifier>
        ]
        HLIST w=14 a=0 d=1: [
            RULE w=14 a=0 d=1: <type-specifier>
        ]
        HLIST w=14 a=0 d=1: [
            RULE w=14 a=0 d=1: <type-qualifier>
        ]
        HLIST w=18 a=0 d=1: [
            RULE w=18 a=0 d=1: <function-specifier>
        ]
        HLIST w=19 a=0 d=1: [
            RULE w=19 a=0 d=1: <alignment-specifier>
        ]
    ]

declaration-specifier: (after prettify)
    VLIST w=29 a=0 d=9 o=0: [
        RULE w=23 a=0 d=1: <storage-class-specifier>
        RULE w=14 a=0 d=1: <type-specifier>
        RULE w=14 a=0 d=1: <type-qualifier>
        RULE w=18 a=0 d=1: <function-specifier>
        RULE w=19 a=0 d=1: <alignment-specifier>
    ]

declarator: (before prettify)
    VLIST w=44 a=2 d=1 o=0: [
        HLIST w=38 a=2 d=1: [
            VLIST w=19 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=13 a=0 d=1 o=0: [
                    HLIST w=7 a=0 d=1: [
                        RULE w=7 a=0 d=1: <pointer>
                    ]
                ]
            ]
            RULE w=17 a=0 d=1: <direct-declarator>
        ]
    ]

declarator: (after prettify)
    HLIST w=32 a=2 d=1: [
        VLIST w=13 a=2 d=1 o=1: [
            LTR_ARROW w=1 a=0 d=1
            RULE w=7 a=0 d=1: <pointer>
        ]
        RULE w=17 a=0 d=1: <direct-declarator>
    ]

declaration-list: (before prettify)
    VLIST w=42 a=0 d=3 o=0: [
        HLIST w=36 a=0 d=3: [
            RULE w=11 a=0 d=1: <declaration>
            VLIST w=23 a=0 d=3 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=17 a=0 d=1 o=0: [
                    HLIST w=11 a=0 d=1: [
                        RULE w=11 a=0 d=1: <declaration>
                    ]
                ]
            ]
        ]
    ]

declaration-list: (after prettify)
    VLIST w=17 a=0 d=3 o=0: [
        RULE w=11 a=0 d=1: <declaration>
        RTL_ARROW w=1 a=0 d=1
    ]

compound-statement: (before prettify)
    VLIST w=48 a=0 d=3 o=0: [
        HLIST w=42 a=0 d=3: [
            LITERAL w=1 a=0 d=1: "{"
            VLIST w=36 a=0 d=3 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=30 a=0 d=1 o=0: [
                    HLIST w=24 a=0 d=1: [
                        RULE w=24 a=0 d=1: <declaration-or-statement>
                    ]
                ]
            ]
            LITERAL w=1 a=0 d=1: "}"
        ]
    ]

compound-statement: (after prettify)
    HLIST w=36 a=0 d=3: [
        LITERAL w=1 a=0 d=1: "{"
        VLIST w=30 a=0 d=3 o=0: [
            VLIST w=0 a=0 d=1 o=0: [
            ]
            RULE w=24 a=0 d=1: <declaration-or-statement>
        ]
        LITERAL w=1 a=0 d=1: "}"
    ]

declaration-or-statement: (before prettify)
    VLIST w=17 a=0 d=3 o=0: [
        HLIST w=11 a=0 d=1: [
            RULE w=11 a=0 d=1: <declaration>
        ]
        HLIST w=9 a=0 d=1: [
            RULE w=9 a=0 d=1: <statement>
        ]
    ]

declaration-or-statement: (after prettify)
    VLIST w=17 a=0 d=3 o=0: [
        RULE w=11 a=0 d=1: <declaration>
        RULE w=9 a=0 d=1: <statement>
    ]

init-declarator-list: (before prettify)
    VLIST w=53 a=0 d=3 o=0: [
        HLIST w=47 a=0 d=3: [
            RULE w=15 a=0 d=1: <init-declarator>
            VLIST w=30 a=0 d=3 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=24 a=0 d=1 o=0: [
                    HLIST w=18 a=0 d=1: [
                        RULE w=15 a=0 d=1: <init-declarator>
                        LITERAL w=1 a=0 d=1: ","
                    ]
                ]
            ]
        ]
    ]

init-declarator-list: (after prettify)
    VLIST w=21 a=0 d=3 o=0: [
        RULE w=15 a=0 d=1: <init-declarator>
        LITERAL w=1 a=0 d=1: ","
    ]

init-declarator: (before prettify)
    VLIST w=44 a=2 d=1 o=0: [
        HLIST w=38 a=2 d=1: [
            RULE w=10 a=0 d=1: <declarator>
            VLIST w=26 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=20 a=0 d=1 o=0: [
                    HLIST w=14 a=0 d=1: [
                        LITERAL w=1 a=0 d=1: "="
                        RULE w=11 a=0 d=1: <initializer>
                    ]
                ]
            ]
        ]
    ]

init-declarator: (after prettify)
    HLIST w=32 a=2 d=1: [
        RULE w=10 a=0 d=1: <declarator>
        VLIST w=20 a=2 d=1 o=1: [
            LTR_ARROW w=1 a=0 d=1
            HLIST w=14 a=0 d=1: [
                LITERAL w=1 a=0 d=1: "="
                RULE w=11 a=0 d=1: <initializer>
            ]
        ]
    ]

static-assert-declaration: (before prettify)
    VLIST w=69 a=0 d=1 o=0: [
        HLIST w=63 a=0 d=1: [
            LITERAL w=14 a=0 d=1: "_Static_assert"
            LITERAL w=1 a=0 d=1: "("
            RULE w=19 a=0 d=1: <constant-expression>
            LITERAL w=1 a=0 d=1: ","
            RULE w=14 a=0 d=1: <string-literal>
            LITERAL w=1 a=0 d=1: ")"
            LITERAL w=1 a=0 d=1: ";"
        ]
    ]

static-assert-declaration: (after prettify)
    HLIST w=63 a=0 d=1: [
        LITERAL w=14 a=0 d=1: "_Static_assert"
        LITERAL w=1 a=0 d=1: "("
        RULE w=19 a=0 d=1: <constant-expression>
        LITERAL w=1 a=0 d=1: ","
        RULE w=14 a=0 d=1: <string-literal>
        LITERAL w=1 a=0 d=1: ")"
        LITERAL w=1 a=0 d=1: ";"
    ]

storage-class-specifier: (before prettify)
    VLIST w=19 a=0 d=11 o=0: [
        HLIST w=7 a=0 d=1: [
            LITERAL w=7 a=0 d=1: "typedef"
        ]
        HLIST w=6 a=0 d=1: [
            LITERAL w=6 a=0 d=1: "extern"
        ]
        HLIST w=6 a=0 d=1: [
            LITERAL w=6 a=0 d=1: "static"
        ]
        HLIST w=13 a=0 d=1: [
            LITERAL w=13 a=0 d=1: "_Thread_local"
        ]
        HLIST w=4 a=0 d=1: [
            LITERAL w=4 a=0 d=1: "auto"
        ]
        HLIST w=8 a=0 d=1: [
            LITERAL w=8 a=0 d=1: "register"
        ]
    ]

storage-class-specifier: (after prettify)
    VLIST w=19 a=0 d=11 o=0: [
        LITERAL w=7 a=0 d=1: "typedef"
        LITERAL w=6 a=0 d=1: "extern"
        LITERAL w=6 a=0 d=1: "static"
        LITERAL w=13 a=0 d=1: "_Thread_local"
        LITERAL w=4 a=0 d=1: "auto"
        LITERAL w=8 a=0 d=1: "register"
    ]

type-specifier: (before prettify)
    VLIST w=31 a=0 d=31 o=0: [
        HLIST w=4 a=0 d=1: [
            LITERAL w=4 a=0 d=1: "void"
        ]
        HLIST w=4 a=0 d=1: [
            LITERAL w=4 a=0 d=1: "char"
        ]
        HLIST w=5 a=0 d=1: [
            LITERAL w=5 a=0 d=1: "short"
        ]
        HLIST w=3 a=0 d=1: [
            LITERAL w=3 a=0 d=1: "int"
        ]
        HLIST w=4 a=0 d=1: [
            LITERAL w=4 a=0 d=1: "long"
        ]
        HLIST w=5 a=0 d=1: [
            LITERAL w=5 a=0 d=1: "float"
        ]
        HLIST w=6 a=0 d=1: [
            LITERAL w=6 a=0 d=1: "double"
        ]
        HLIST w=6 a=0 d=1: [
            LITERAL w=6 a=0 d=1: "signed"
        ]
        HLIST w=8 a=0 d=1: [
            LITERAL w=8 a=0 d=1: "unsigned"
        ]
        HLIST w=5 a=0 d=1: [
            LITERAL w=5 a=0 d=1: "_Bool"
        ]
        HLIST w=8 a=0 d=1: [
            LITERAL w=8 a=0 d=1: "_Complex"
        ]
        HLIST w=10 a=0 d=1: [
            LITERAL w=10 a=0 d=1: "_Imaginary"
        ]
        HLIST w=21 a=0 d=1: [
            RULE w=21 a=0 d=1: <atomic-type-specifier>
        ]
        HLIST w=25 a=0 d=1: [
            RULE w=25 a=0 d=1: <struct-or-union-specifier>
        ]
        HLIST w=14 a=0 d=1: [
            RULE w=14 a=0 d=1: <enum-specifier>
        ]
        HLIST w=12 a=0 d=1: [
            RULE w=12 a=0 d=1: <typedef-name>
        ]
    ]

type-specifier: (after prettify)
    VLIST w=31 a=0 d=31 o=0: [
        LITERAL w=4 a=0 d=1: "void"
        LITERAL w=4 a=0 d=1: "char"
        LITERAL w=5 a=0 d=1: "short"
        LITERAL w=3 a=0 d=1: "int"
        LITERAL w=4 a=0 d=1: "long"
        LITERAL w=5 a=0 d=1: "float"
        LITERAL w=6 a=0 d=1: "double"
        LITERAL w=6 a=0 d=1: "signed"
        LITERAL w=8 a=0 d=1: "unsigned"
        LITERAL w=5 a=0 d=1: "_Bool"
        LITERAL w=8 a=0 d=1: "_Complex"
        LITERAL w=10 a=0 d=1: "_Imaginary"
        RULE w=21 a=0 d=1: <atomic-type-specifier>
        RULE w=25 a=0 d=1: <struct-or-union-specifier>
        RULE w=14 a=0 d=1: <enum-specifier>
        RULE w=12 a=0 d=1: <typedef-name>
    ]

typedef-name: (before prettify)
    VLIST w=16 a=0 d=1 o=0: [
        HLIST w=10 a=0 d=1: [
            RULE w=10 a=0 d=1: <identifier>
        ]
    ]

typedef-name: (after prettify)
    RULE w=10 a=0 d=1: <identifier>

type-qualifier: (before prettify)
    VLIST w=14 a=0 d=7 o=0: [
        HLIST w=5 a=0 d=1: [
            LITERAL w=5 a=0 d=1: "const"
        ]
        HLIST w=8 a=0 d=1: [
            LITERAL w=8 a=0 d=1: "restrict"
        ]
        HLIST w=8 a=0 d=1: [
            LITERAL w=8 a=0 d=1: "volatile"
        ]
        HLIST w=7 a=0 d=1: [
            LITERAL w=7 a=0 d=1: "_Atomic"
        ]
    ]

type-qualifier: (after prettify)
    VLIST w=14 a=0 d=7 o=0: [
        LITERAL w=5 a=0 d=1: "const"
        LITERAL w=8 a=0 d=1: "restrict"
        LITERAL w=8 a=0 d=1: "volatile"
        LITERAL w=7 a=0 d=1: "_Atomic"
    ]

function-specifier: (before prettify)
    VLIST w=15 a=0 d=3 o=0: [
        HLIST w=6 a=0 d=1: [
            LITERAL w=6 a=0 d=1: "inline"
        ]
        HLIST w=9 a=0 d=1: [
            LITERAL w=9 a=0 d=1: "_Noreturn"
        ]
    ]

function-specifier: (after prettify)
    VLIST w=15 a=0 d=3 o=0: [
        LITERAL w=6 a=0 d=1: "inline"
        LITERAL w=9 a=0 d=1: "_Noreturn"
    ]

alignment-specifier: (before prettify)
    VLIST w=41 a=0 d=3 o=0: [
        HLIST w=25 a=0 d=1: [
            LITERAL w=8 a=0 d=1: "_Alignas"
            LITERAL w=1 a=0 d=1: "("
            RULE w=9 a=0 d=1: <type-name>
            LITERAL w=1 a=0 d=1: ")"
        ]
        HLIST w=35 a=0 d=1: [
            LITERAL w=8 a=0 d=1: "_Alignas"
            LITERAL w=1 a=0 d=1: "("
            RULE w=19 a=0 d=1: <constant-expression>
            LITERAL w=1 a=0 d=1: ")"
        ]
    ]

alignment-specifier: (after prettify)
    VLIST w=41 a=0 d=3 o=0: [
        HLIST w=25 a=0 d=1: [
            LITERAL w=8 a=0 d=1: "_Alignas"
            LITERAL w=1 a=0 d=1: "("
            RULE w=9 a=0 d=1: <type-name>
            LITERAL w=1 a=0 d=1: ")"
        ]
        HLIST w=35 a=0 d=1: [
            LITERAL w=8 a=0 d=1: "_Alignas"
            LITERAL w=1 a=0 d=1: "("
            RULE w=19 a=0 d=1: <constant-expression>
            LITERAL w=1 a=0 d=1: ")"
        ]
    ]

pointer: (before prettify)
    VLIST w=61 a=2 d=1 o=0: [
        HLIST w=55 a=2 d=1: [
            LITERAL w=1 a=0 d=1: "*"
            VLIST w=31 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=25 a=0 d=1 o=0: [
                    HLIST w=19 a=0 d=1: [
                        RULE w=19 a=0 d=1: <type-qualifier-list>
                    ]
                ]
            ]
            VLIST w=19 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=13 a=0 d=1 o=0: [
                    HLIST w=7 a=0 d=1: [
                        RULE w=7 a=0 d=1: <pointer>
                    ]
                ]
            ]
        ]
    ]

pointer: (after prettify)
    HLIST w=43 a=2 d=1: [
        LITERAL w=1 a=0 d=1: "*"
        VLIST w=25 a=2 d=1 o=1: [
            LTR_ARROW w=1 a=0 d=1
            RULE w=19 a=0 d=1: <type-qualifier-list>
        ]
        VLIST w=13 a=2 d=1 o=1: [
            LTR_ARROW w=1 a=0 d=1
            RULE w=7 a=0 d=1: <pointer>
        ]
    ]

direct-declarator: (before prettify)
    VLIST w=93 a=0 d=27 o=0: [
        HLIST w=10 a=0 d=1: [
            RULE w=10 a=0 d=1: <identifier>
        ]
        HLIST w=16 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "("
            RULE w=10 a=0 d=1: <declarator>
            LITERAL w=1 a=0 d=1: ")"
        ]
        HLIST w=38 a=2 d=1: [
            RULE w=17 a=0 d=1: <direct-declarator>
            LITERAL w=1 a=0 d=1: "["
            VLIST w=13 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=7 a=0 d=1 o=0: [
                    HLIST w=1 a=0 d=1: [
                        LITERAL w=1 a=0 d=1: "*"
                    ]
                ]
            ]
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=87 a=2 d=1: [
            RULE w=17 a=0 d=1: <direct-declarator>
            LITERAL w=1 a=0 d=1: "["
            LITERAL w=6 a=0 d=1: "static"
            VLIST w=31 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=25 a=0 d=1 o=0: [
                    HLIST w=19 a=0 d=1: [
                        RULE w=19 a=0 d=1: <type-qualifier-list>
                    ]
                ]
            ]
            RULE w=21 a=0 d=1: <assignment-expression>
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=59 a=2 d=1: [
            RULE w=17 a=0 d=1: <direct-declarator>
            LITERAL w=1 a=0 d=1: "["
            RULE w=19 a=0 d=1: <type-qualifier-list>
            VLIST w=13 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=7 a=0 d=1 o=0: [
                    HLIST w=1 a=0 d=1: [
                        LITERAL w=1 a=0 d=1: "*"
                    ]
                ]
            ]
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=87 a=2 d=1: [
            RULE w=17 a=0 d=1: <direct-declarator>
            LITERAL w=1 a=0 d=1: "["
            RULE w=19 a=0 d=1: <type-qualifier-list>
            VLIST w=18 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=12 a=0 d=1 o=0: [
                    HLIST w=6 a=0 d=1: [
                        LITERAL w=6 a=0 d=1: "static"
                    ]
                ]
            ]
            RULE w=21 a=0 d=1: <assignment-expression>
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=46 a=0 d=1: [
            RULE w=17 a=0 d=1: <direct-declarator>
            LITERAL w=1 a=0 d=1: "["
            RULE w=21 a=0 d=1: <assignment-expression>
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=44 a=0 d=1: [
            RULE w=17 a=0 d=1: <direct-declarator>
            LITERAL w=1 a=0 d=1: "("
            RULE w=19 a=0 d=1: <parameter-type-list>
            LITERAL w=1 a=0 d=1: ")"
        ]
        HLIST w=40 a=0 d=1: [
            RULE w=17 a=0 d=1: <direct-declarator>
            LITERAL w=1 a=0 d=1: "("
            RULE w=15 a=0 d=1: <identifier-list>
            LITERAL w=1 a=0 d=1: ")"
        ]
        HLIST w=23 a=0 d=1: [
            RULE w=17 a=0 d=1: <direct-declarator>
            LITERAL w=1 a=0 d=1: "("
            LITERAL w=1 a=0 d=1: ")"
        ]
    ]

direct-declarator: (after prettify)
    VLIST w=87 a=0 d=27 o=0: [
        RULE w=10 a=0 d=1: <identifier>
        HLIST w=16 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "("
            RULE w=10 a=0 d=1: <declarator>
            LITERAL w=1 a=0 d=1: ")"
        ]
        HLIST w=32 a=2 d=1: [
            RULE w=17 a=0 d=1: <direct-declarator>
            LITERAL w=1 a=0 d=1: "["
            VLIST w=7 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                LITERAL w=1 a=0 d=1: "*"
            ]
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=81 a=2 d=1: [
            RULE w=17 a=0 d=1: <direct-declarator>
            LITERAL w=1 a=0 d=1: "["
            LITERAL w=6 a=0 d=1: "static"
            VLIST w=25 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                RULE w=19 a=0 d=1: <type-qualifier-list>
            ]
            RULE w=21 a=0 d=1: <assignment-expression>
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=53 a=2 d=1: [
            RULE w=17 a=0 d=1: <direct-declarator>
            LITERAL w=1 a=0 d=1: "["
            RULE w=19 a=0 d=1: <type-qualifier-list>
            VLIST w=7 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                LITERAL w=1 a=0 d=1: "*"
            ]
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=81 a=2 d=1: [
            RULE w=17 a=0 d=1: <direct-declarator>
            LITERAL w=1 a=0 d=1: "["
            RULE w=19 a=0 d=1: <type-qualifier-list>
            VLIST w=12 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                LITERAL w=6 a=0 d=1: "static"
            ]
            RULE w=21 a=0 d=1: <assignment-expression>
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=46 a=0 d=1: [
            RULE w=17 a=0 d=1: <direct-declarator>
            LITERAL w=1 a=0 d=1: "["
            RULE w=21 a=0 d=1: <assignment-expression>
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=44 a=0 d=1: [
            RULE w=17 a=0 d=1: <direct-declarator>
            LITERAL w=1 a=0 d=1: "("
            RULE w=19 a=0 d=1: <parameter-type-list>
            LITERAL w=1 a=0 d=1: ")"
        ]
        HLIST w=40 a=0 d=1: [
            RULE w=17 a=0 d=1: <direct-declarator>
            LITERAL w=1 a=0 d=1: "("
            RULE w=15 a=0 d=1: <identifier-list>
            LITERAL w=1 a=0 d=1: ")"
        ]
        HLIST w=23 a=0 d=1: [
            RULE w=17 a=0 d=1: <direct-declarator>
            LITERAL w=1 a=0 d=1: "("
            LITERAL w=1 a=0 d=1: ")"
        ]
    ]

identifier-list: (before prettify)
    VLIST w=43 a=0 d=3 o=0: [
        HLIST w=37 a=0 d=3: [
            RULE w=10 a=0 d=1: <identifier>
            VLIST w=25 a=0 d=3 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=19 a=0 d=1 o=0: [
                    HLIST w=13 a=0 d=1: [
                        RULE w=10 a=0 d=1: <identifier>
                        LITERAL w=1 a=0 d=1: ","
                    ]
                ]
            ]
        ]
    ]

identifier-list: (after prettify)
    VLIST w=16 a=0 d=3 o=0: [
        RULE w=10 a=0 d=1: <identifier>
        LITERAL w=1 a=0 d=1: ","
    ]

initializer-list: (before prettify)
    VLIST w=69 a=0 d=3 o=0: [
        HLIST w=63 a=0 d=3: [
            RULE w=23 a=0 d=1: <designative-initializer>
            VLIST w=38 a=0 d=3 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=32 a=0 d=1 o=0: [
                    HLIST w=26 a=0 d=1: [
                        RULE w=23 a=0 d=1: <designative-initializer>
                        LITERAL w=1 a=0 d=1: ","
                    ]
                ]
            ]
        ]
    ]

initializer-list: (after prettify)
    VLIST w=29 a=0 d=3 o=0: [
        RULE w=23 a=0 d=1: <designative-initializer>
        LITERAL w=1 a=0 d=1: ","
    ]

designative-initializer: (before prettify)
    VLIST w=42 a=2 d=1 o=0: [
        HLIST w=36 a=2 d=1: [
            VLIST w=23 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=17 a=0 d=1 o=0: [
                    HLIST w=11 a=0 d=1: [
                        RULE w=11 a=0 d=1: <designation>
                    ]
                ]
            ]
            RULE w=11 a=0 d=1: <initializer>
        ]
    ]

designative-initializer: (after prettify)
    HLIST w=30 a=2 d=1: [
        VLIST w=17 a=2 d=1 o=1: [
            LTR_ARROW w=1 a=0 d=1
            RULE w=11 a=0 d=1: <designation>
        ]
        RULE w=11 a=0 d=1: <initializer>
    ]

initializer: (before prettify)
    VLIST w=43 a=2 d=3 o=0: [
        HLIST w=37 a=2 d=1: [
            LITERAL w=1 a=0 d=1: "{"
            RULE w=16 a=0 d=1: <initializer-list>
            VLIST w=13 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=7 a=0 d=1 o=0: [
                    HLIST w=1 a=0 d=1: [
                        LITERAL w=1 a=0 d=1: ","
                    ]
                ]
            ]
            LITERAL w=1 a=0 d=1: "}"
        ]
        HLIST w=21 a=0 d=1: [
            RULE w=21 a=0 d=1: <assignment-expression>
        ]
    ]

initializer: (after prettify)
    VLIST w=37 a=2 d=3 o=0: [
        HLIST w=31 a=2 d=1: [
            LITERAL w=1 a=0 d=1: "{"
            RULE w=16 a=0 d=1: <initializer-list>
            VLIST w=7 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                LITERAL w=1 a=0 d=1: ","
            ]
            LITERAL w=1 a=0 d=1: "}"
        ]
        RULE w=21 a=0 d=1: <assignment-expression>
    ]

constant-expression: (before prettify)
    VLIST w=28 a=0 d=1 o=0: [
        HLIST w=22 a=0 d=1: [
            RULE w=22 a=0 d=1: <conditional-expression>
        ]
    ]

constant-expression: (after prettify)
    RULE w=22 a=0 d=1: <conditional-expression>

atomic-type-specifier: (before prettify)
    VLIST w=30 a=0 d=1 o=0: [
        HLIST w=24 a=0 d=1: [
            LITERAL w=7 a=0 d=1: "_Atomic"
            LITERAL w=1 a=0 d=1: "("
            RULE w=9 a=0 d=1: <type-name>
            LITERAL w=1 a=0 d=1: ")"
        ]
    ]

atomic-type-specifier: (after prettify)
    HLIST w=24 a=0 d=1: [
        LITERAL w=7 a=0 d=1: "_Atomic"
        LITERAL w=1 a=0 d=1: "("
        RULE w=9 a=0 d=1: <type-name>
        LITERAL w=1 a=0 d=1: ")"
    ]

struct-or-union-specifier: (before prettify)
    VLIST w=76 a=0 d=5 o=0: [
        HLIST w=46 a=0 d=1: [
            RULE w=15 a=0 d=1: <struct-or-union>
            LITERAL w=1 a=0 d=1: "{"
            RULE w=23 a=0 d=1: <struct-declaration-list>
            LITERAL w=1 a=0 d=1: "}"
        ]
        HLIST w=70 a=2 d=1: [
            RULE w=15 a=0 d=1: <struct-or-union>
            RULE w=10 a=0 d=1: <identifier>
            VLIST w=41 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=35 a=0 d=1 o=0: [
                    HLIST w=29 a=0 d=1: [
                        LITERAL w=1 a=0 d=1: "{"
                        RULE w=23 a=0 d=1: <struct-declaration-list>
                        LITERAL w=1 a=0 d=1: "}"
                    ]
                ]
            ]
        ]
    ]

struct-or-union-specifier: (after prettify)
    VLIST w=70 a=0 d=5 o=0: [
        HLIST w=46 a=0 d=1: [
            RULE w=15 a=0 d=1: <struct-or-union>
            LITERAL w=1 a=0 d=1: "{"
            RULE w=23 a=0 d=1: <struct-declaration-list>
            LITERAL w=1 a=0 d=1: "}"
        ]
        HLIST w=64 a=2 d=1: [
            RULE w=15 a=0 d=1: <struct-or-union>
            RULE w=10 a=0 d=1: <identifier>
            VLIST w=35 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                HLIST w=29 a=0 d=1: [
                    LITERAL w=1 a=0 d=1: "{"
                    RULE w=23 a=0 d=1: <struct-declaration-list>
                    LITERAL w=1 a=0 d=1: "}"
                ]
            ]
        ]
    ]

struct-or-union: (before prettify)
    VLIST w=12 a=0 d=3 o=0: [
        HLIST w=6 a=0 d=1: [
            LITERAL w=6 a=0 d=1: "struct"
        ]
        HLIST w=5 a=0 d=1: [
            LITERAL w=5 a=0 d=1: "union"
        ]
    ]

struct-or-union: (after prettify)
    VLIST w=12 a=0 d=3 o=0: [
        LITERAL w=6 a=0 d=1: "struct"
        LITERAL w=5 a=0 d=1: "union"
    ]

struct-declaration-list: (before prettify)
    VLIST w=56 a=0 d=3 o=0: [
        HLIST w=50 a=0 d=3: [
            RULE w=18 a=0 d=1: <struct-declaration>
            VLIST w=30 a=0 d=3 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=24 a=0 d=1 o=0: [
                    HLIST w=18 a=0 d=1: [
                        RULE w=18 a=0 d=1: <struct-declaration>
                    ]
                ]
            ]
        ]
    ]

struct-declaration-list: (after prettify)
    VLIST w=24 a=0 d=3 o=0: [
        RULE w=18 a=0 d=1: <struct-declaration>
        RTL_ARROW w=1 a=0 d=1
    ]

struct-declaration: (before prettify)
    VLIST w=57 a=0 d=5 o=0: [
        HLIST w=27 a=0 d=1: [
            RULE w=24 a=0 d=1: <specifier-qualifier-list>
            LITERAL w=1 a=0 d=1: ";"
        ]
        HLIST w=51 a=0 d=1: [
            RULE w=24 a=0 d=1: <specifier-qualifier-list>
            RULE w=22 a=0 d=1: <struct-declarator-list>
            LITERAL w=1 a=0 d=1: ";"
        ]
        HLIST w=25 a=0 d=1: [
            RULE w=25 a=0 d=1: <static-assert-declaration>
        ]
    ]

struct-declaration: (after prettify)
    VLIST w=57 a=0 d=5 o=0: [
        HLIST w=27 a=0 d=1: [
            RULE w=24 a=0 d=1: <specifier-qualifier-list>
            LITERAL w=1 a=0 d=1: ";"
        ]
        HLIST w=51 a=0 d=1: [
            RULE w=24 a=0 d=1: <specifier-qualifier-list>
            RULE w=22 a=0 d=1: <struct-declarator-list>
            LITERAL w=1 a=0 d=1: ";"
        ]
        RULE w=25 a=0 d=1: <static-assert-declaration>
    ]

enum-specifier: (before prettify)
    VLIST w=72 a=2 d=7 o=0: [
        HLIST w=42 a=2 d=1: [
            LITERAL w=4 a=0 d=1: "enum"
            LITERAL w=1 a=0 d=1: "{"
            RULE w=15 a=0 d=1: <enumerator-list>
            VLIST w=13 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=7 a=0 d=1 o=0: [
                    HLIST w=1 a=0 d=1: [
                        LITERAL w=1 a=0 d=1: ","
                    ]
                ]
            ]
            LITERAL w=1 a=0 d=1: "}"
        ]
        HLIST w=66 a=4 d=1: [
            LITERAL w=4 a=0 d=1: "enum"
            RULE w=10 a=0 d=1: <identifier>
            VLIST w=48 a=4 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=42 a=2 d=1 o=0: [
                    HLIST w=36 a=2 d=1: [
                        LITERAL w=1 a=0 d=1: "{"
                        RULE w=15 a=0 d=1: <enumerator-list>
                        VLIST w=13 a=2 d=1 o=1: [
                            LTR_ARROW w=1 a=0 d=1
                            VLIST w=7 a=0 d=1 o=0: [
                                HLIST w=1 a=0 d=1: [
                                    LITERAL w=1 a=0 d=1: ","
                                ]
                            ]
                        ]
                        LITERAL w=1 a=0 d=1: "}"
                    ]
                ]
            ]
        ]
    ]

enum-specifier: (after prettify)
    VLIST w=60 a=2 d=7 o=0: [
        HLIST w=36 a=2 d=1: [
            LITERAL w=4 a=0 d=1: "enum"
            LITERAL w=1 a=0 d=1: "{"
            RULE w=15 a=0 d=1: <enumerator-list>
            VLIST w=7 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                LITERAL w=1 a=0 d=1: ","
            ]
            LITERAL w=1 a=0 d=1: "}"
        ]
        HLIST w=54 a=4 d=1: [
            LITERAL w=4 a=0 d=1: "enum"
            RULE w=10 a=0 d=1: <identifier>
            VLIST w=36 a=4 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                HLIST w=30 a=2 d=1: [
                    LITERAL w=1 a=0 d=1: "{"
                    RULE w=15 a=0 d=1: <enumerator-list>
                    VLIST w=7 a=2 d=1 o=1: [
                        LTR_ARROW w=1 a=0 d=1
                        LITERAL w=1 a=0 d=1: ","
                    ]
                    LITERAL w=1 a=0 d=1: "}"
                ]
            ]
        ]
    ]

enumerator-list: (before prettify)
    VLIST w=43 a=0 d=3 o=0: [
        HLIST w=37 a=0 d=3: [
            RULE w=10 a=0 d=1: <enumerator>
            VLIST w=25 a=0 d=3 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=19 a=0 d=1 o=0: [
                    HLIST w=13 a=0 d=1: [
                        RULE w=10 a=0 d=1: <enumerator>
                        LITERAL w=1 a=0 d=1: ","
                    ]
                ]
            ]
        ]
    ]

enumerator-list: (after prettify)
    VLIST w=16 a=0 d=3 o=0: [
        RULE w=10 a=0 d=1: <enumerator>
        LITERAL w=1 a=0 d=1: ","
    ]

enumerator: (before prettify)
    VLIST w=62 a=2 d=1 o=0: [
        HLIST w=56 a=2 d=1: [
            RULE w=20 a=0 d=1: <enumeration-constant>
            VLIST w=34 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=28 a=0 d=1 o=0: [
                    HLIST w=22 a=0 d=1: [
                        LITERAL w=1 a=0 d=1: "="
                        RULE w=19 a=0 d=1: <constant-expression>
                    ]
                ]
            ]
        ]
    ]

enumerator: (after prettify)
    HLIST w=50 a=2 d=1: [
        RULE w=20 a=0 d=1: <enumeration-constant>
        VLIST w=28 a=2 d=1 o=1: [
            LTR_ARROW w=1 a=0 d=1
            HLIST w=22 a=0 d=1: [
                LITERAL w=1 a=0 d=1: "="
                RULE w=19 a=0 d=1: <constant-expression>
            ]
        ]
    ]

enumeration-constant: (before prettify)
    VLIST w=16 a=0 d=1 o=0: [
        HLIST w=10 a=0 d=1: [
            RULE w=10 a=0 d=1: <identifier>
        ]
    ]

enumeration-constant: (after prettify)
    RULE w=10 a=0 d=1: <identifier>

type-name: (before prettify)
    VLIST w=63 a=2 d=1 o=0: [
        HLIST w=57 a=2 d=1: [
            RULE w=24 a=0 d=1: <specifier-qualifier-list>
            VLIST w=31 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=25 a=0 d=1 o=0: [
                    HLIST w=19 a=0 d=1: [
                        RULE w=19 a=0 d=1: <abstract-declarator>
                    ]
                ]
            ]
        ]
    ]

type-name: (after prettify)
    HLIST w=51 a=2 d=1: [
        RULE w=24 a=0 d=1: <specifier-qualifier-list>
        VLIST w=25 a=2 d=1 o=1: [
            LTR_ARROW w=1 a=0 d=1
            RULE w=19 a=0 d=1: <abstract-declarator>
        ]
    ]

specifier-qualifier-list: (before prettify)
    VLIST w=58 a=0 d=3 o=0: [
        HLIST w=52 a=0 d=3: [
            RULE w=19 a=0 d=1: <specifier-qualifier>
            VLIST w=31 a=0 d=3 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=25 a=0 d=1 o=0: [
                    HLIST w=19 a=0 d=1: [
                        RULE w=19 a=0 d=1: <specifier-qualifier>
                    ]
                ]
            ]
        ]
    ]

specifier-qualifier-list: (after prettify)
    VLIST w=25 a=0 d=3 o=0: [
        RULE w=19 a=0 d=1: <specifier-qualifier>
        RTL_ARROW w=1 a=0 d=1
    ]

specifier-qualifier: (before prettify)
    VLIST w=20 a=0 d=3 o=0: [
        HLIST w=14 a=0 d=1: [
            RULE w=14 a=0 d=1: <type-specifier>
        ]
        HLIST w=14 a=0 d=1: [
            RULE w=14 a=0 d=1: <type-qualifier>
        ]
    ]

specifier-qualifier: (after prettify)
    VLIST w=20 a=0 d=3 o=0: [
        RULE w=14 a=0 d=1: <type-specifier>
        RULE w=14 a=0 d=1: <type-qualifier>
    ]

abstract-declarator: (before prettify)
    VLIST w=53 a=2 d=3 o=0: [
        HLIST w=47 a=2 d=1: [
            RULE w=7 a=0 d=1: <pointer>
            VLIST w=38 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=32 a=0 d=1 o=0: [
                    HLIST w=26 a=0 d=1: [
                        RULE w=26 a=0 d=1: <direct-abstract-declarator>
                    ]
                ]
            ]
        ]
        HLIST w=26 a=0 d=1: [
            RULE w=26 a=0 d=1: <direct-abstract-declarator>
        ]
    ]

abstract-declarator: (after prettify)
    VLIST w=47 a=2 d=3 o=0: [
        HLIST w=41 a=2 d=1: [
            RULE w=7 a=0 d=1: <pointer>
            VLIST w=32 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                RULE w=26 a=0 d=1: <direct-abstract-declarator>
            ]
        ]
        RULE w=26 a=0 d=1: <direct-abstract-declarator>
    ]

direct-abstract-declarator: (before prettify)
    VLIST w=114 a=0 d=41 o=0: [
        HLIST w=25 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "("
            RULE w=19 a=0 d=1: <abstract-declarator>
            LITERAL w=1 a=0 d=1: ")"
        ]
        HLIST w=25 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "("
            RULE w=19 a=0 d=1: <parameter-type-list>
            LITERAL w=1 a=0 d=1: ")"
        ]
        HLIST w=4 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "("
            LITERAL w=1 a=0 d=1: ")"
        ]
        HLIST w=19 a=2 d=1: [
            LITERAL w=1 a=0 d=1: "["
            VLIST w=13 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=7 a=0 d=1 o=0: [
                    HLIST w=1 a=0 d=1: [
                        LITERAL w=1 a=0 d=1: "*"
                    ]
                ]
            ]
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=68 a=2 d=1: [
            LITERAL w=1 a=0 d=1: "["
            LITERAL w=6 a=0 d=1: "static"
            VLIST w=31 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=25 a=0 d=1 o=0: [
                    HLIST w=19 a=0 d=1: [
                        RULE w=19 a=0 d=1: <type-qualifier-list>
                    ]
                ]
            ]
            RULE w=21 a=0 d=1: <assignment-expression>
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=80 a=4 d=1: [
            LITERAL w=1 a=0 d=1: "["
            RULE w=19 a=0 d=1: <type-qualifier-list>
            VLIST w=53 a=4 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=47 a=2 d=1 o=0: [
                    HLIST w=41 a=2 d=1: [
                        VLIST w=18 a=2 d=1 o=1: [
                            LTR_ARROW w=1 a=0 d=1
                            VLIST w=12 a=0 d=1 o=0: [
                                HLIST w=6 a=0 d=1: [
                                    LITERAL w=6 a=0 d=1: "static"
                                ]
                            ]
                        ]
                        RULE w=21 a=0 d=1: <assignment-expression>
                    ]
                ]
            ]
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=27 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "["
            RULE w=21 a=0 d=1: <assignment-expression>
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=47 a=2 d=1: [
            RULE w=26 a=0 d=1: <direct-abstract-declarator>
            LITERAL w=1 a=0 d=1: "["
            VLIST w=13 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=7 a=0 d=1 o=0: [
                    HLIST w=1 a=0 d=1: [
                        LITERAL w=1 a=0 d=1: "*"
                    ]
                ]
            ]
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=96 a=2 d=1: [
            RULE w=26 a=0 d=1: <direct-abstract-declarator>
            LITERAL w=1 a=0 d=1: "["
            LITERAL w=6 a=0 d=1: "static"
            VLIST w=31 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=25 a=0 d=1 o=0: [
                    HLIST w=19 a=0 d=1: [
                        RULE w=19 a=0 d=1: <type-qualifier-list>
                    ]
                ]
            ]
            RULE w=21 a=0 d=1: <assignment-expression>
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=108 a=4 d=1: [
            RULE w=26 a=0 d=1: <direct-abstract-declarator>
            LITERAL w=1 a=0 d=1: "["
            RULE w=19 a=0 d=1: <type-qualifier-list>
            VLIST w=53 a=4 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=47 a=2 d=1 o=0: [
                    HLIST w=41 a=2 d=1: [
                        VLIST w=18 a=2 d=1 o=1: [
                            LTR_ARROW w=1 a=0 d=1
                            VLIST w=12 a=0 d=1 o=0: [
                                HLIST w=6 a=0 d=1: [
                                    LITERAL w=6 a=0 d=1: "static"
                                ]
                            ]
                        ]
                        RULE w=21 a=0 d=1: <assignment-expression>
                    ]
                ]
            ]
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=55 a=0 d=1: [
            RULE w=26 a=0 d=1: <direct-abstract-declarator>
            LITERAL w=1 a=0 d=1: "["
            RULE w=21 a=0 d=1: <assignment-expression>
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=53 a=0 d=1: [
            RULE w=26 a=0 d=1: <direct-abstract-declarator>
            LITERAL w=1 a=0 d=1: "("
            RULE w=19 a=0 d=1: <parameter-type-list>
            LITERAL w=1 a=0 d=1: ")"
        ]
        HLIST w=32 a=0 d=1: [
            RULE w=26 a=0 d=1: <direct-abstract-declarator>
            LITERAL w=1 a=0 d=1: "("
            LITERAL w=1 a=0 d=1: ")"
        ]
    ]

direct-abstract-declarator: (after prettify)
    VLIST w=102 a=0 d=41 o=0: [
        HLIST w=25 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "("
            RULE w=19 a=0 d=1: <abstract-declarator>
            LITERAL w=1 a=0 d=1: ")"
        ]
        HLIST w=25 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "("
            RULE w=19 a=0 d=1: <parameter-type-list>
            LITERAL w=1 a=0 d=1: ")"
        ]
        HLIST w=4 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "("
            LITERAL w=1 a=0 d=1: ")"
        ]
        HLIST w=13 a=2 d=1: [
            LITERAL w=1 a=0 d=1: "["
            VLIST w=7 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                LITERAL w=1 a=0 d=1: "*"
            ]
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=62 a=2 d=1: [
            LITERAL w=1 a=0 d=1: "["
            LITERAL w=6 a=0 d=1: "static"
            VLIST w=25 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                RULE w=19 a=0 d=1: <type-qualifier-list>
            ]
            RULE w=21 a=0 d=1: <assignment-expression>
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=68 a=4 d=1: [
            LITERAL w=1 a=0 d=1: "["
            RULE w=19 a=0 d=1: <type-qualifier-list>
            VLIST w=41 a=4 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                HLIST w=35 a=2 d=1: [
                    VLIST w=12 a=2 d=1 o=1: [
                        LTR_ARROW w=1 a=0 d=1
                        LITERAL w=6 a=0 d=1: "static"
                    ]
                    RULE w=21 a=0 d=1: <assignment-expression>
                ]
            ]
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=27 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "["
            RULE w=21 a=0 d=1: <assignment-expression>
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=41 a=2 d=1: [
            RULE w=26 a=0 d=1: <direct-abstract-declarator>
            LITERAL w=1 a=0 d=1: "["
            VLIST w=7 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                LITERAL w=1 a=0 d=1: "*"
            ]
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=90 a=2 d=1: [
            RULE w=26 a=0 d=1: <direct-abstract-declarator>
            LITERAL w=1 a=0 d=1: "["
            LITERAL w=6 a=0 d=1: "static"
            VLIST w=25 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                RULE w=19 a=0 d=1: <type-qualifier-list>
            ]
            RULE w=21 a=0 d=1: <assignment-expression>
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=96 a=4 d=1: [
            RULE w=26 a=0 d=1: <direct-abstract-declarator>
            LITERAL w=1 a=0 d=1: "["
            RULE w=19 a=0 d=1: <type-qualifier-list>
            VLIST w=41 a=4 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                HLIST w=35 a=2 d=1: [
                    VLIST w=12 a=2 d=1 o=1: [
                        LTR_ARROW w=1 a=0 d=1
                        LITERAL w=6 a=0 d=1: "static"
                    ]
                    RULE w=21 a=0 d=1: <assignment-expression>
                ]
            ]
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=55 a=0 d=1: [
            RULE w=26 a=0 d=1: <direct-abstract-declarator>
            LITERAL w=1 a=0 d=1: "["
            RULE w=21 a=0 d=1: <assignment-expression>
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=53 a=0 d=1: [
            RULE w=26 a=0 d=1: <direct-abstract-declarator>
            LITERAL w=1 a=0 d=1: "("
            RULE w=19 a=0 d=1: <parameter-type-list>
            LITERAL w=1 a=0 d=1: ")"
        ]
        HLIST w=32 a=0 d=1: [
            RULE w=26 a=0 d=1: <direct-abstract-declarator>
            LITERAL w=1 a=0 d=1: "("
            LITERAL w=1 a=0 d=1: ")"
        ]
    ]

struct-declarator-list: (before prettify)
    VLIST w=57 a=0 d=3 o=0: [
        HLIST w=51 a=0 d=3: [
            RULE w=17 a=0 d=1: <struct-declarator>
            VLIST w=32 a=0 d=3 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=26 a=0 d=1 o=0: [
                    HLIST w=20 a=0 d=1: [
                        RULE w=17 a=0 d=1: <struct-declarator>
                        LITERAL w=1 a=0 d=1: ","
                    ]
                ]
            ]
        ]
    ]

struct-declarator-list: (after prettify)
    VLIST w=23 a=0 d=3 o=0: [
        RULE w=17 a=0 d=1: <struct-declarator>
        LITERAL w=1 a=0 d=1: ","
    ]

type-qualifier-list: (before prettify)
    VLIST w=48 a=0 d=3 o=0: [
        HLIST w=42 a=0 d=3: [
            RULE w=14 a=0 d=1: <type-qualifier>
            VLIST w=26 a=0 d=3 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=20 a=0 d=1 o=0: [
                    HLIST w=14 a=0 d=1: [
                        RULE w=14 a=0 d=1: <type-qualifier>
                    ]
                ]
            ]
        ]
    ]

type-qualifier-list: (after prettify)
    VLIST w=20 a=0 d=3 o=0: [
        RULE w=14 a=0 d=1: <type-qualifier>
        RTL_ARROW w=1 a=0 d=1
    ]

parameter-type-list: (before prettify)
    VLIST w=40 a=2 d=1 o=0: [
        HLIST w=34 a=2 d=1: [
            RULE w=14 a=0 d=1: <parameter-list>
            VLIST w=18 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=12 a=0 d=1 o=0: [
                    HLIST w=6 a=0 d=1: [
                        LITERAL w=1 a=0 d=1: ","
                        LITERAL w=3 a=0 d=1: "..."
                    ]
                ]
            ]
        ]
    ]

parameter-type-list: (after prettify)
    HLIST w=28 a=2 d=1: [
        RULE w=14 a=0 d=1: <parameter-list>
        VLIST w=12 a=2 d=1 o=1: [
            LTR_ARROW w=1 a=0 d=1
            HLIST w=6 a=0 d=1: [
                LITERAL w=1 a=0 d=1: ","
                LITERAL w=3 a=0 d=1: "..."
            ]
        ]
    ]

struct-declarator: (before prettify)
    VLIST w=52 a=0 d=5 o=0: [
        HLIST w=22 a=0 d=1: [
            LITERAL w=1 a=0 d=1: ":"
            RULE w=19 a=0 d=1: <constant-expression>
        ]
        HLIST w=46 a=2 d=1: [
            RULE w=10 a=0 d=1: <declarator>
            VLIST w=34 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=28 a=0 d=1 o=0: [
                    HLIST w=22 a=0 d=1: [
                        LITERAL w=1 a=0 d=1: ":"
                        RULE w=19 a=0 d=1: <constant-expression>
                    ]
                ]
            ]
        ]
    ]

struct-declarator: (after prettify)
    VLIST w=46 a=0 d=5 o=0: [
        HLIST w=22 a=0 d=1: [
            LITERAL w=1 a=0 d=1: ":"
            RULE w=19 a=0 d=1: <constant-expression>
        ]
        HLIST w=40 a=2 d=1: [
            RULE w=10 a=0 d=1: <declarator>
            VLIST w=28 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                HLIST w=22 a=0 d=1: [
                    LITERAL w=1 a=0 d=1: ":"
                    RULE w=19 a=0 d=1: <constant-expression>
                ]
            ]
        ]
    ]

assignment-operator: (before prettify)
    VLIST w=9 a=0 d=21 o=0: [
        HLIST w=1 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "="
        ]
        HLIST w=2 a=0 d=1: [
            LITERAL w=2 a=0 d=1: "*="
        ]
        HLIST w=2 a=0 d=1: [
            LITERAL w=2 a=0 d=1: "/="
        ]
        HLIST w=2 a=0 d=1: [
            LITERAL w=2 a=0 d=1: "%="
        ]
        HLIST w=2 a=0 d=1: [
            LITERAL w=2 a=0 d=1: "+="
        ]
        HLIST w=2 a=0 d=1: [
            LITERAL w=2 a=0 d=1: "-="
        ]
        HLIST w=3 a=0 d=1: [
            LITERAL w=3 a=0 d=1: "<<="
        ]
        HLIST w=3 a=0 d=1: [
            LITERAL w=3 a=0 d=1: ">>="
        ]
        HLIST w=2 a=0 d=1: [
            LITERAL w=2 a=0 d=1: "&="
        ]
        HLIST w=2 a=0 d=1: [
            LITERAL w=2 a=0 d=1: "^="
        ]
        HLIST w=2 a=0 d=1: [
            LITERAL w=2 a=0 d=1: "|="
        ]
    ]

assignment-operator: (after prettify)
    VLIST w=9 a=0 d=21 o=0: [
        LITERAL w=1 a=0 d=1: "="
        LITERAL w=2 a=0 d=1: "*="
        LITERAL w=2 a=0 d=1: "/="
        LITERAL w=2 a=0 d=1: "%="
        LITERAL w=2 a=0 d=1: "+="
        LITERAL w=2 a=0 d=1: "-="
        LITERAL w=3 a=0 d=1: "<<="
        LITERAL w=3 a=0 d=1: ">>="
        LITERAL w=2 a=0 d=1: "&="
        LITERAL w=2 a=0 d=1: "^="
        LITERAL w=2 a=0 d=1: "|="
    ]

parameter-list: (before prettify)
    VLIST w=65 a=0 d=3 o=0: [
        HLIST w=59 a=0 d=3: [
            RULE w=21 a=0 d=1: <parameter-declaration>
            VLIST w=36 a=0 d=3 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=30 a=0 d=1 o=0: [
                    HLIST w=24 a=0 d=1: [
                        RULE w=21 a=0 d=1: <parameter-declaration>
                        LITERAL w=1 a=0 d=1: ","
                    ]
                ]
            ]
        ]
    ]

parameter-list: (after prettify)
    VLIST w=27 a=0 d=3 o=0: [
        RULE w=21 a=0 d=1: <parameter-declaration>
        LITERAL w=1 a=0 d=1: ","
    ]

parameter-declaration: (before prettify)
    VLIST w=61 a=2 d=3 o=0: [
        HLIST w=55 a=2 d=3: [
            RULE w=22 a=0 d=1: <declaration-specifiers>
            VLIST w=31 a=2 d=3 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=25 a=0 d=3 o=0: [
                    HLIST w=10 a=0 d=1: [
                        RULE w=10 a=0 d=1: <declarator>
                    ]
                    HLIST w=19 a=0 d=1: [
                        RULE w=19 a=0 d=1: <abstract-declarator>
                    ]
                ]
            ]
        ]
    ]

parameter-declaration: (after prettify)
    HLIST w=49 a=2 d=3: [
        RULE w=22 a=0 d=1: <declaration-specifiers>
        VLIST w=25 a=2 d=3 o=1: [
            LTR_ARROW w=1 a=0 d=1
            RULE w=10 a=0 d=1: <declarator>
            RULE w=19 a=0 d=1: <abstract-declarator>
        ]
    ]

expression: (before prettify)
    VLIST w=65 a=0 d=3 o=0: [
        HLIST w=59 a=0 d=3: [
            RULE w=21 a=0 d=1: <assignment-expression>
            VLIST w=36 a=0 d=3 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=30 a=0 d=1 o=0: [
                    HLIST w=24 a=0 d=1: [
                        RULE w=21 a=0 d=1: <assignment-expression>
                        LITERAL w=1 a=0 d=1: ","
                    ]
                ]
            ]
        ]
    ]

expression: (after prettify)
    VLIST w=27 a=0 d=3 o=0: [
        RULE w=21 a=0 d=1: <assignment-expression>
        LITERAL w=1 a=0 d=1: ","
    ]

assignment-expression: (before prettify)
    VLIST w=66 a=0 d=3 o=0: [
        HLIST w=22 a=0 d=1: [
            RULE w=22 a=0 d=1: <conditional-expression>
        ]
        HLIST w=60 a=0 d=1: [
            RULE w=16 a=0 d=1: <unary-expression>
            RULE w=19 a=0 d=1: <assignment-operator>
            RULE w=21 a=0 d=1: <assignment-expression>
        ]
    ]

assignment-expression: (after prettify)
    VLIST w=66 a=0 d=3 o=0: [
        RULE w=22 a=0 d=1: <conditional-expression>
        HLIST w=60 a=0 d=1: [
            RULE w=16 a=0 d=1: <unary-expression>
            RULE w=19 a=0 d=1: <assignment-operator>
            RULE w=21 a=0 d=1: <assignment-expression>
        ]
    ]

conditional-expression: (before prettify)
    VLIST w=81 a=2 d=1 o=0: [
        HLIST w=75 a=2 d=1: [
            RULE w=21 a=0 d=1: <logical-or-expression>
            VLIST w=52 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=46 a=0 d=1 o=0: [
                    HLIST w=40 a=0 d=1: [
                        LITERAL w=1 a=0 d=1: "?"
                        RULE w=10 a=0 d=1: <expression>
                        LITERAL w=1 a=0 d=1: ":"
                        RULE w=22 a=0 d=1: <conditional-expression>
                    ]
                ]
            ]
        ]
    ]

conditional-expression: (after prettify)
    HLIST w=69 a=2 d=1: [
        RULE w=21 a=0 d=1: <logical-or-expression>
        VLIST w=46 a=2 d=1 o=1: [
            LTR_ARROW w=1 a=0 d=1
            HLIST w=40 a=0 d=1: [
                LITERAL w=1 a=0 d=1: "?"
                RULE w=10 a=0 d=1: <expression>
                LITERAL w=1 a=0 d=1: ":"
                RULE w=22 a=0 d=1: <conditional-expression>
            ]
        ]
    ]

logical-or-expression: (before prettify)
    VLIST w=68 a=0 d=3 o=0: [
        HLIST w=62 a=0 d=3: [
            RULE w=22 a=0 d=1: <logical-and-expression>
            VLIST w=38 a=0 d=3 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=32 a=0 d=1 o=0: [
                    HLIST w=26 a=0 d=1: [
                        RULE w=22 a=0 d=1: <logical-and-expression>
                        LITERAL w=2 a=0 d=1: "||"
                    ]
                ]
            ]
        ]
    ]

logical-or-expression: (after prettify)
    VLIST w=28 a=0 d=3 o=0: [
        RULE w=22 a=0 d=1: <logical-and-expression>
        LITERAL w=2 a=0 d=1: "||"
    ]

logical-and-expression: (before prettify)
    VLIST w=70 a=0 d=3 o=0: [
        HLIST w=64 a=0 d=3: [
            RULE w=23 a=0 d=1: <inclusive-or-expression>
            VLIST w=39 a=0 d=3 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=33 a=0 d=1 o=0: [
                    HLIST w=27 a=0 d=1: [
                        RULE w=23 a=0 d=1: <inclusive-or-expression>
                        LITERAL w=2 a=0 d=1: "&&"
                    ]
                ]
            ]
        ]
    ]

logical-and-expression: (after prettify)
    VLIST w=29 a=0 d=3 o=0: [
        RULE w=23 a=0 d=1: <inclusive-or-expression>
        LITERAL w=2 a=0 d=1: "&&"
    ]

inclusive-or-expression: (before prettify)
    VLIST w=69 a=0 d=3 o=0: [
        HLIST w=63 a=0 d=3: [
            RULE w=23 a=0 d=1: <exclusive-or-expression>
            VLIST w=38 a=0 d=3 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=32 a=0 d=1 o=0: [
                    HLIST w=26 a=0 d=1: [
                        RULE w=23 a=0 d=1: <exclusive-or-expression>
                        LITERAL w=1 a=0 d=1: "|"
                    ]
                ]
            ]
        ]
    ]

inclusive-or-expression: (after prettify)
    VLIST w=29 a=0 d=3 o=0: [
        RULE w=23 a=0 d=1: <exclusive-or-expression>
        LITERAL w=1 a=0 d=1: "|"
    ]

exclusive-or-expression: (before prettify)
    VLIST w=51 a=0 d=3 o=0: [
        HLIST w=45 a=0 d=3: [
            RULE w=14 a=0 d=1: <and-expression>
            VLIST w=29 a=0 d=3 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=23 a=0 d=1 o=0: [
                    HLIST w=17 a=0 d=1: [
                        RULE w=14 a=0 d=1: <and-expression>
                        LITERAL w=1 a=0 d=1: "^"
                    ]
                ]
            ]
        ]
    ]

exclusive-or-expression: (after prettify)
    VLIST w=20 a=0 d=3 o=0: [
        RULE w=14 a=0 d=1: <and-expression>
        LITERAL w=1 a=0 d=1: "^"
    ]

and-expression: (before prettify)
    VLIST w=61 a=0 d=3 o=0: [
        HLIST w=55 a=0 d=3: [
            RULE w=19 a=0 d=1: <equality-expression>
            VLIST w=34 a=0 d=3 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=28 a=0 d=1 o=0: [
                    HLIST w=22 a=0 d=1: [
                        RULE w=19 a=0 d=1: <equality-expression>
                        LITERAL w=1 a=0 d=1: "&"
                    ]
                ]
            ]
        ]
    ]

and-expression: (after prettify)
    VLIST w=25 a=0 d=3 o=0: [
        RULE w=19 a=0 d=1: <equality-expression>
        LITERAL w=1 a=0 d=1: "&"
    ]

equality-expression: (before prettify)
    VLIST w=72 a=0 d=5 o=0: [
        HLIST w=66 a=0 d=5: [
            RULE w=21 a=0 d=1: <relational-expression>
            VLIST w=43 a=0 d=5 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=37 a=0 d=3 o=0: [
                    HLIST w=31 a=0 d=3: [
                        RULE w=21 a=0 d=1: <relational-expression>
                        VLIST w=8 a=0 d=3 o=0: [
                            HLIST w=2 a=0 d=1: [
                                LITERAL w=2 a=0 d=1: "=="
                            ]
                            HLIST w=2 a=0 d=1: [
                                LITERAL w=2 a=0 d=1: "!="
                            ]
                        ]
                    ]
                ]
            ]
        ]
    ]

equality-expression: (after prettify)
    VLIST w=27 a=0 d=5 o=0: [
        RULE w=21 a=0 d=1: <relational-expression>
        VLIST w=8 a=0 d=3 o=0: [
            LITERAL w=2 a=0 d=1: "=="
            LITERAL w=2 a=0 d=1: "!="
        ]
    ]

relational-expression: (before prettify)
    VLIST w=62 a=0 d=9 o=0: [
        HLIST w=56 a=0 d=9: [
            RULE w=16 a=0 d=1: <shift-expression>
            VLIST w=38 a=0 d=9 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=32 a=0 d=7 o=0: [
                    HLIST w=26 a=0 d=7: [
                        RULE w=16 a=0 d=1: <shift-expression>
                        VLIST w=8 a=0 d=7 o=0: [
                            HLIST w=1 a=0 d=1: [
                                LITERAL w=1 a=0 d=1: "<"
                            ]
                            HLIST w=1 a=0 d=1: [
                                LITERAL w=1 a=0 d=1: ">"
                            ]
                            HLIST w=2 a=0 d=1: [
                                LITERAL w=2 a=0 d=1: "<="
                            ]
                            HLIST w=2 a=0 d=1: [
                                LITERAL w=2 a=0 d=1: ">="
                            ]
                        ]
                    ]
                ]
            ]
        ]
    ]

relational-expression: (after prettify)
    VLIST w=22 a=0 d=9 o=0: [
        RULE w=16 a=0 d=1: <shift-expression>
        VLIST w=8 a=0 d=7 o=0: [
            LITERAL w=1 a=0 d=1: "<"
            LITERAL w=1 a=0 d=1: ">"
            LITERAL w=2 a=0 d=1: "<="
            LITERAL w=2 a=0 d=1: ">="
        ]
    ]

shift-expression: (before prettify)
    VLIST w=68 a=0 d=5 o=0: [
        HLIST w=62 a=0 d=5: [
            RULE w=19 a=0 d=1: <additive-expression>
            VLIST w=41 a=0 d=5 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=35 a=0 d=3 o=0: [
                    HLIST w=29 a=0 d=3: [
                        RULE w=19 a=0 d=1: <additive-expression>
                        VLIST w=8 a=0 d=3 o=0: [
                            HLIST w=2 a=0 d=1: [
                                LITERAL w=2 a=0 d=1: "<<"
                            ]
                            HLIST w=2 a=0 d=1: [
                                LITERAL w=2 a=0 d=1: ">>"
                            ]
                        ]
                    ]
                ]
            ]
        ]
    ]

shift-expression: (after prettify)
    VLIST w=25 a=0 d=5 o=0: [
        RULE w=19 a=0 d=1: <additive-expression>
        VLIST w=8 a=0 d=3 o=0: [
            LITERAL w=2 a=0 d=1: "<<"
            LITERAL w=2 a=0 d=1: ">>"
        ]
    ]

additive-expression: (before prettify)
    VLIST w=79 a=0 d=5 o=0: [
        HLIST w=73 a=0 d=5: [
            RULE w=25 a=0 d=1: <multiplicative-expression>
            VLIST w=46 a=0 d=5 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=40 a=0 d=3 o=0: [
                    HLIST w=34 a=0 d=3: [
                        RULE w=25 a=0 d=1: <multiplicative-expression>
                        VLIST w=7 a=0 d=3 o=0: [
                            HLIST w=1 a=0 d=1: [
                                LITERAL w=1 a=0 d=1: "+"
                            ]
                            HLIST w=1 a=0 d=1: [
                                LITERAL w=1 a=0 d=1: "-"
                            ]
                        ]
                    ]
                ]
            ]
        ]
    ]

additive-expression: (after prettify)
    VLIST w=31 a=0 d=5 o=0: [
        RULE w=25 a=0 d=1: <multiplicative-expression>
        VLIST w=7 a=0 d=3 o=0: [
            LITERAL w=1 a=0 d=1: "+"
            LITERAL w=1 a=0 d=1: "-"
        ]
    ]

multiplicative-expression: (before prettify)
    VLIST w=59 a=0 d=7 o=0: [
        HLIST w=53 a=0 d=7: [
            RULE w=15 a=0 d=1: <cast-expression>
            VLIST w=36 a=0 d=7 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=30 a=0 d=5 o=0: [
                    HLIST w=24 a=0 d=5: [
                        RULE w=15 a=0 d=1: <cast-expression>
                        VLIST w=7 a=0 d=5 o=0: [
                            HLIST w=1 a=0 d=1: [
                                LITERAL w=1 a=0 d=1: "*"
                            ]
                            HLIST w=1 a=0 d=1: [
                                LITERAL w=1 a=0 d=1: "/"
                            ]
                            HLIST w=1 a=0 d=1: [
                                LITERAL w=1 a=0 d=1: "%"
                            ]
                        ]
                    ]
                ]
            ]
        ]
    ]

multiplicative-expression: (after prettify)
    VLIST w=21 a=0 d=7 o=0: [
        RULE w=15 a=0 d=1: <cast-expression>
        VLIST w=7 a=0 d=5 o=0: [
            LITERAL w=1 a=0 d=1: "%"
            LITERAL w=1 a=0 d=1: "*"
            LITERAL w=1 a=0 d=1: "/"
        ]
    ]

cast-expression: (before prettify)
    VLIST w=38 a=0 d=3 o=0: [
        HLIST w=16 a=0 d=1: [
            RULE w=16 a=0 d=1: <unary-expression>
        ]
        HLIST w=32 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "("
            RULE w=9 a=0 d=1: <type-name>
            LITERAL w=1 a=0 d=1: ")"
            RULE w=15 a=0 d=1: <cast-expression>
        ]
    ]

cast-expression: (after prettify)
    VLIST w=38 a=0 d=3 o=0: [
        RULE w=16 a=0 d=1: <unary-expression>
        HLIST w=32 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "("
            RULE w=9 a=0 d=1: <type-name>
            LITERAL w=1 a=0 d=1: ")"
            RULE w=15 a=0 d=1: <cast-expression>
        ]
    ]

unary-expression: (before prettify)
    VLIST w=37 a=0 d=13 o=0: [
        HLIST w=18 a=0 d=1: [
            RULE w=18 a=0 d=1: <postfix-expression>
        ]
        HLIST w=26 a=0 d=3: [
            VLIST w=8 a=0 d=3 o=0: [
                HLIST w=2 a=0 d=1: [
                    LITERAL w=2 a=0 d=1: "++"
                ]
                HLIST w=2 a=0 d=1: [
                    LITERAL w=2 a=0 d=1: "--"
                ]
            ]
            RULE w=16 a=0 d=1: <unary-expression>
        ]
        HLIST w=31 a=0 d=1: [
            RULE w=14 a=0 d=1: <unary-operator>
            RULE w=15 a=0 d=1: <cast-expression>
        ]
        HLIST w=24 a=0 d=1: [
            LITERAL w=6 a=0 d=1: "sizeof"
            RULE w=16 a=0 d=1: <unary-expression>
        ]
        HLIST w=23 a=0 d=1: [
            LITERAL w=6 a=0 d=1: "sizeof"
            LITERAL w=1 a=0 d=1: "("
            RULE w=9 a=0 d=1: <type-name>
            LITERAL w=1 a=0 d=1: ")"
        ]
        HLIST w=25 a=0 d=1: [
            LITERAL w=8 a=0 d=1: "_Alignof"
            LITERAL w=1 a=0 d=1: "("
            RULE w=9 a=0 d=1: <type-name>
            LITERAL w=1 a=0 d=1: ")"
        ]
    ]

unary-expression: (after prettify)
    VLIST w=37 a=0 d=13 o=0: [
        RULE w=18 a=0 d=1: <postfix-expression>
        HLIST w=26 a=0 d=3: [
            VLIST w=8 a=0 d=3 o=0: [
                LITERAL w=2 a=0 d=1: "++"
                LITERAL w=2 a=0 d=1: "--"
            ]
            RULE w=16 a=0 d=1: <unary-expression>
        ]
        HLIST w=31 a=0 d=1: [
            RULE w=14 a=0 d=1: <unary-operator>
            RULE w=15 a=0 d=1: <cast-expression>
        ]
        HLIST w=24 a=0 d=1: [
            LITERAL w=6 a=0 d=1: "sizeof"
            RULE w=16 a=0 d=1: <unary-expression>
        ]
        HLIST w=23 a=0 d=1: [
            LITERAL w=6 a=0 d=1: "sizeof"
            LITERAL w=1 a=0 d=1: "("
            RULE w=9 a=0 d=1: <type-name>
            LITERAL w=1 a=0 d=1: ")"
        ]
        HLIST w=25 a=0 d=1: [
            LITERAL w=8 a=0 d=1: "_Alignof"
            LITERAL w=1 a=0 d=1: "("
            RULE w=9 a=0 d=1: <type-name>
            LITERAL w=1 a=0 d=1: ")"
        ]
    ]

postfix-expression: (before prettify)
    VLIST w=68 a=0 d=19 o=0: [
        HLIST w=18 a=0 d=1: [
            RULE w=18 a=0 d=1: <primary-expression>
        ]
        HLIST w=36 a=0 d=1: [
            RULE w=18 a=0 d=1: <postfix-expression>
            LITERAL w=1 a=0 d=1: "["
            RULE w=10 a=0 d=1: <expression>
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=62 a=2 d=1: [
            RULE w=18 a=0 d=1: <postfix-expression>
            LITERAL w=1 a=0 d=1: "("
            VLIST w=36 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=30 a=0 d=1 o=0: [
                    HLIST w=24 a=0 d=1: [
                        RULE w=24 a=0 d=1: <argument-expression-list>
                    ]
                ]
            ]
            LITERAL w=1 a=0 d=1: ")"
        ]
        HLIST w=40 a=0 d=3: [
            RULE w=18 a=0 d=1: <postfix-expression>
            VLIST w=8 a=0 d=3 o=0: [
                HLIST w=1 a=0 d=1: [
                    LITERAL w=1 a=0 d=1: "."
                ]
                HLIST w=2 a=0 d=1: [
                    LITERAL w=2 a=0 d=1: "->"
                ]
            ]
            RULE w=10 a=0 d=1: <identifier>
        ]
        HLIST w=28 a=0 d=3: [
            RULE w=18 a=0 d=1: <postfix-expression>
            VLIST w=8 a=0 d=3 o=0: [
                HLIST w=2 a=0 d=1: [
                    LITERAL w=2 a=0 d=1: "++"
                ]
                HLIST w=2 a=0 d=1: [
                    LITERAL w=2 a=0 d=1: "--"
                ]
            ]
        ]
        HLIST w=54 a=2 d=1: [
            LITERAL w=1 a=0 d=1: "("
            RULE w=9 a=0 d=1: <type-name>
            LITERAL w=1 a=0 d=1: ")"
            LITERAL w=1 a=0 d=1: "{"
            RULE w=16 a=0 d=1: <initializer-list>
            VLIST w=13 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=7 a=0 d=1 o=0: [
                    HLIST w=1 a=0 d=1: [
                        LITERAL w=1 a=0 d=1: ","
                    ]
                ]
            ]
            LITERAL w=1 a=0 d=1: "}"
        ]
    ]

postfix-expression: (after prettify)
    VLIST w=62 a=0 d=19 o=0: [
        RULE w=18 a=0 d=1: <primary-expression>
        HLIST w=36 a=0 d=1: [
            RULE w=18 a=0 d=1: <postfix-expression>
            LITERAL w=1 a=0 d=1: "["
            RULE w=10 a=0 d=1: <expression>
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=56 a=2 d=1: [
            RULE w=18 a=0 d=1: <postfix-expression>
            LITERAL w=1 a=0 d=1: "("
            VLIST w=30 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                RULE w=24 a=0 d=1: <argument-expression-list>
            ]
            LITERAL w=1 a=0 d=1: ")"
        ]
        HLIST w=40 a=0 d=3: [
            RULE w=18 a=0 d=1: <postfix-expression>
            VLIST w=8 a=0 d=3 o=0: [
                LITERAL w=1 a=0 d=1: "."
                LITERAL w=2 a=0 d=1: "->"
            ]
            RULE w=10 a=0 d=1: <identifier>
        ]
        HLIST w=28 a=0 d=3: [
            RULE w=18 a=0 d=1: <postfix-expression>
            VLIST w=8 a=0 d=3 o=0: [
                LITERAL w=2 a=0 d=1: "++"
                LITERAL w=2 a=0 d=1: "--"
            ]
        ]
        HLIST w=48 a=2 d=1: [
            LITERAL w=1 a=0 d=1: "("
            RULE w=9 a=0 d=1: <type-name>
            LITERAL w=1 a=0 d=1: ")"
            LITERAL w=1 a=0 d=1: "{"
            RULE w=16 a=0 d=1: <initializer-list>
            VLIST w=7 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                LITERAL w=1 a=0 d=1: ","
            ]
            LITERAL w=1 a=0 d=1: "}"
        ]
    ]

unary-operator: (before prettify)
    VLIST w=7 a=0 d=11 o=0: [
        HLIST w=1 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "&"
        ]
        HLIST w=1 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "*"
        ]
        HLIST w=1 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "+"
        ]
        HLIST w=1 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "-"
        ]
        HLIST w=1 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "~"
        ]
        HLIST w=1 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "!"
        ]
    ]

unary-operator: (after prettify)
    VLIST w=7 a=0 d=11 o=0: [
        LITERAL w=1 a=0 d=1: "!"
        LITERAL w=1 a=0 d=1: "&"
        LITERAL w=1 a=0 d=1: "*"
        LITERAL w=1 a=0 d=1: "+"
        LITERAL w=1 a=0 d=1: "-"
        LITERAL w=1 a=0 d=1: "~"
    ]

primary-expression: (before prettify)
    VLIST w=23 a=0 d=9 o=0: [
        HLIST w=10 a=0 d=1: [
            RULE w=10 a=0 d=1: <identifier>
        ]
        HLIST w=8 a=0 d=1: [
            RULE w=8 a=0 d=1: <constant>
        ]
        HLIST w=6 a=0 d=1: [
            RULE w=6 a=0 d=1: <string>
        ]
        HLIST w=16 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "("
            RULE w=10 a=0 d=1: <expression>
            LITERAL w=1 a=0 d=1: ")"
        ]
        HLIST w=17 a=0 d=1: [
            RULE w=17 a=0 d=1: <generic-selection>
        ]
    ]

primary-expression: (after prettify)
    VLIST w=23 a=0 d=9 o=0: [
        RULE w=10 a=0 d=1: <identifier>
        RULE w=8 a=0 d=1: <constant>
        RULE w=6 a=0 d=1: <string>
        HLIST w=16 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "("
            RULE w=10 a=0 d=1: <expression>
            LITERAL w=1 a=0 d=1: ")"
        ]
        RULE w=17 a=0 d=1: <generic-selection>
    ]

argument-expression-list: (before prettify)
    VLIST w=65 a=0 d=3 o=0: [
        HLIST w=59 a=0 d=3: [
            RULE w=21 a=0 d=1: <assignment-expression>
            VLIST w=36 a=0 d=3 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=30 a=0 d=1 o=0: [
                    HLIST w=24 a=0 d=1: [
                        RULE w=21 a=0 d=1: <assignment-expression>
                        LITERAL w=1 a=0 d=1: ","
                    ]
                ]
            ]
        ]
    ]

argument-expression-list: (after prettify)
    VLIST w=27 a=0 d=3 o=0: [
        RULE w=21 a=0 d=1: <assignment-expression>
        LITERAL w=1 a=0 d=1: ","
    ]

constant: (before prettify)
    VLIST w=26 a=0 d=7 o=0: [
        HLIST w=16 a=0 d=1: [
            RULE w=16 a=0 d=1: <integer-constant>
        ]
        HLIST w=18 a=0 d=1: [
            RULE w=18 a=0 d=1: <character-constant>
        ]
        HLIST w=17 a=0 d=1: [
            RULE w=17 a=0 d=1: <floating-constant>
        ]
        HLIST w=20 a=0 d=1: [
            RULE w=20 a=0 d=1: <enumeration-constant>
        ]
    ]

constant: (after prettify)
    VLIST w=26 a=0 d=7 o=0: [
        RULE w=16 a=0 d=1: <integer-constant>
        RULE w=18 a=0 d=1: <character-constant>
        RULE w=17 a=0 d=1: <floating-constant>
        RULE w=20 a=0 d=1: <enumeration-constant>
    ]

string: (before prettify)
    VLIST w=20 a=0 d=3 o=0: [
        HLIST w=14 a=0 d=1: [
            RULE w=14 a=0 d=1: <string-literal>
        ]
        HLIST w=8 a=0 d=1: [
            LITERAL w=8 a=0 d=1: "__func__"
        ]
    ]

string: (after prettify)
    VLIST w=20 a=0 d=3 o=0: [
        RULE w=14 a=0 d=1: <string-literal>
        LITERAL w=8 a=0 d=1: "__func__"
    ]

generic-selection: (before prettify)
    VLIST w=66 a=0 d=1 o=0: [
        HLIST w=60 a=0 d=1: [
            LITERAL w=8 a=0 d=1: "_Generic"
            LITERAL w=1 a=0 d=1: "("
            RULE w=21 a=0 d=1: <assignment-expression>
            LITERAL w=1 a=0 d=1: ","
            RULE w=18 a=0 d=1: <generic-assoc-list>
            LITERAL w=1 a=0 d=1: ")"
        ]
    ]

generic-selection: (after prettify)
    HLIST w=60 a=0 d=1: [
        LITERAL w=8 a=0 d=1: "_Generic"
        LITERAL w=1 a=0 d=1: "("
        RULE w=21 a=0 d=1: <assignment-expression>
        LITERAL w=1 a=0 d=1: ","
        RULE w=18 a=0 d=1: <generic-assoc-list>
        LITERAL w=1 a=0 d=1: ")"
    ]

generic-assoc-list: (before prettify)
    VLIST w=61 a=0 d=3 o=0: [
        HLIST w=55 a=0 d=3: [
            RULE w=19 a=0 d=1: <generic-association>
            VLIST w=34 a=0 d=3 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=28 a=0 d=1 o=0: [
                    HLIST w=22 a=0 d=1: [
                        RULE w=19 a=0 d=1: <generic-association>
                        LITERAL w=1 a=0 d=1: ","
                    ]
                ]
            ]
        ]
    ]

generic-assoc-list: (after prettify)
    VLIST w=25 a=0 d=3 o=0: [
        RULE w=19 a=0 d=1: <generic-association>
        LITERAL w=1 a=0 d=1: ","
    ]

generic-association: (before prettify)
    VLIST w=41 a=0 d=3 o=0: [
        HLIST w=35 a=0 d=1: [
            RULE w=9 a=0 d=1: <type-name>
            LITERAL w=1 a=0 d=1: ":"
            RULE w=21 a=0 d=1: <assignment-expression>
        ]
        HLIST w=33 a=0 d=1: [
            LITERAL w=7 a=0 d=1: "default"
            LITERAL w=1 a=0 d=1: ":"
            RULE w=21 a=0 d=1: <assignment-expression>
        ]
    ]

generic-association: (after prettify)
    VLIST w=41 a=0 d=3 o=0: [
        HLIST w=35 a=0 d=1: [
            RULE w=9 a=0 d=1: <type-name>
            LITERAL w=1 a=0 d=1: ":"
            RULE w=21 a=0 d=1: <assignment-expression>
        ]
        HLIST w=33 a=0 d=1: [
            LITERAL w=7 a=0 d=1: "default"
            LITERAL w=1 a=0 d=1: ":"
            RULE w=21 a=0 d=1: <assignment-expression>
        ]
    ]

designation: (before prettify)
    VLIST w=24 a=0 d=1 o=0: [
        HLIST w=18 a=0 d=1: [
            RULE w=15 a=0 d=1: <designator-list>
            LITERAL w=1 a=0 d=1: "="
        ]
    ]

designation: (after prettify)
    HLIST w=18 a=0 d=1: [
        RULE w=15 a=0 d=1: <designator-list>
        LITERAL w=1 a=0 d=1: "="
    ]

designator-list: (before prettify)
    VLIST w=40 a=0 d=3 o=0: [
        HLIST w=34 a=0 d=3: [
            RULE w=10 a=0 d=1: <designator>
            VLIST w=22 a=0 d=3 o=0: [
                VLIST w=0 a=0 d=1 o=0: [
                ]
                VLIST w=16 a=0 d=1 o=0: [
                    HLIST w=10 a=0 d=1: [
                        RULE w=10 a=0 d=1: <designator>
                    ]
                ]
            ]
        ]
    ]

designator-list: (after prettify)
    VLIST w=16 a=0 d=3 o=0: [
        RULE w=10 a=0 d=1: <designator>
        RTL_ARROW w=1 a=0 d=1
    ]

designator: (before prettify)
    VLIST w=31 a=0 d=3 o=0: [
        HLIST w=25 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "["
            RULE w=19 a=0 d=1: <constant-expression>
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=13 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "."
            RULE w=10 a=0 d=1: <identifier>
        ]
    ]

designator: (after prettify)
    VLIST w=31 a=0 d=3 o=0: [
        HLIST w=25 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "["
            RULE w=19 a=0 d=1: <constant-expression>
            LITERAL w=1 a=0 d=1: "]"
        ]
        HLIST w=13 a=0 d=1: [
            LITERAL w=1 a=0 d=1: "."
            RULE w=10 a=0 d=1: <identifier>
        ]
    ]

statement: (before prettify)
    VLIST w=26 a=0 d=11 o=0: [
        HLIST w=17 a=0 d=1: [
            RULE w=17 a=0 d=1: <labeled-statement>
        ]
        HLIST w=18 a=0 d=1: [
            RULE w=18 a=0 d=1: <compound-statement>
        ]
        HLIST w=20 a=0 d=1: [
            RULE w=20 a=0 d=1: <expression-statement>
        ]
        HLIST w=19 a=0 d=1: [
            RULE w=19 a=0 d=1: <selection-statement>
        ]
        HLIST w=19 a=0 d=1: [
            RULE w=19 a=0 d=1: <iteration-statement>
        ]
        HLIST w=14 a=0 d=1: [
            RULE w=14 a=0 d=1: <jump-statement>
        ]
    ]

statement: (after prettify)
    VLIST w=26 a=0 d=11 o=0: [
        RULE w=17 a=0 d=1: <labeled-statement>
        RULE w=18 a=0 d=1: <compound-statement>
        RULE w=20 a=0 d=1: <expression-statement>
        RULE w=19 a=0 d=1: <selection-statement>
        RULE w=19 a=0 d=1: <iteration-statement>
        RULE w=14 a=0 d=1: <jump-statement>
    ]

labeled-statement: (before prettify)
    VLIST w=45 a=0 d=5 o=0: [
        HLIST w=24 a=0 d=1: [
            RULE w=10 a=0 d=1: <identifier>
            LITERAL w=1 a=0 d=1: ":"
            RULE w=9 a=0 d=1: <statement>
        ]
        HLIST w=39 a=0 d=1: [
            LITERAL w=4 a=0 d=1: "case"
            RULE w=19 a=0 d=1: <constant-expression>
            LITERAL w=1 a=0 d=1: ":"
            RULE w=9 a=0 d=1: <statement>
        ]
        HLIST w=21 a=0 d=1: [
            LITERAL w=7 a=0 d=1: "default"
            LITERAL w=1 a=0 d=1: ":"
            RULE w=9 a=0 d=1: <statement>
        ]
    ]

labeled-statement: (after prettify)
    VLIST w=45 a=0 d=5 o=0: [
        HLIST w=24 a=0 d=1: [
            RULE w=10 a=0 d=1: <identifier>
            LITERAL w=1 a=0 d=1: ":"
            RULE w=9 a=0 d=1: <statement>
        ]
        HLIST w=39 a=0 d=1: [
            LITERAL w=4 a=0 d=1: "case"
            RULE w=19 a=0 d=1: <constant-expression>
            LITERAL w=1 a=0 d=1: ":"
            RULE w=9 a=0 d=1: <statement>
        ]
        HLIST w=21 a=0 d=1: [
            LITERAL w=7 a=0 d=1: "default"
            LITERAL w=1 a=0 d=1: ":"
            RULE w=9 a=0 d=1: <statement>
        ]
    ]

expression-statement: (before prettify)
    VLIST w=31 a=2 d=1 o=0: [
        HLIST w=25 a=2 d=1: [
            VLIST w=22 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=16 a=0 d=1 o=0: [
                    HLIST w=10 a=0 d=1: [
                        RULE w=10 a=0 d=1: <expression>
                    ]
                ]
            ]
            LITERAL w=1 a=0 d=1: ";"
        ]
    ]

expression-statement: (after prettify)
    HLIST w=19 a=2 d=1: [
        VLIST w=16 a=2 d=1 o=1: [
            LTR_ARROW w=1 a=0 d=1
            RULE w=10 a=0 d=1: <expression>
        ]
        LITERAL w=1 a=0 d=1: ";"
    ]

selection-statement: (before prettify)
    VLIST w=54 a=0 d=5 o=0: [
        HLIST w=48 a=0 d=1: [
            LITERAL w=2 a=0 d=1: "if"
            LITERAL w=1 a=0 d=1: "("
            RULE w=10 a=0 d=1: <expression>
            LITERAL w=1 a=0 d=1: ")"
            RULE w=9 a=0 d=1: <statement>
            LITERAL w=4 a=0 d=1: "else"
            RULE w=9 a=0 d=1: <statement>
        ]
        HLIST w=31 a=0 d=1: [
            LITERAL w=2 a=0 d=1: "if"
            LITERAL w=1 a=0 d=1: "("
            RULE w=10 a=0 d=1: <expression>
            LITERAL w=1 a=0 d=1: ")"
            RULE w=9 a=0 d=1: <statement>
        ]
        HLIST w=35 a=0 d=1: [
            LITERAL w=6 a=0 d=1: "switch"
            LITERAL w=1 a=0 d=1: "("
            RULE w=10 a=0 d=1: <expression>
            LITERAL w=1 a=0 d=1: ")"
            RULE w=9 a=0 d=1: <statement>
        ]
    ]

selection-statement: (after prettify)
    VLIST w=54 a=0 d=5 o=0: [
        HLIST w=48 a=0 d=1: [
            LITERAL w=2 a=0 d=1: "if"
            LITERAL w=1 a=0 d=1: "("
            RULE w=10 a=0 d=1: <expression>
            LITERAL w=1 a=0 d=1: ")"
            RULE w=9 a=0 d=1: <statement>
            LITERAL w=4 a=0 d=1: "else"
            RULE w=9 a=0 d=1: <statement>
        ]
        HLIST w=31 a=0 d=1: [
            LITERAL w=2 a=0 d=1: "if"
            LITERAL w=1 a=0 d=1: "("
            RULE w=10 a=0 d=1: <expression>
            LITERAL w=1 a=0 d=1: ")"
            RULE w=9 a=0 d=1: <statement>
        ]
        HLIST w=35 a=0 d=1: [
            LITERAL w=6 a=0 d=1: "switch"
            LITERAL w=1 a=0 d=1: "("
            RULE w=10 a=0 d=1: <expression>
            LITERAL w=1 a=0 d=1: ")"
            RULE w=9 a=0 d=1: <statement>
        ]
    ]

iteration-statement: (before prettify)
    VLIST w=104 a=0 d=11 o=0: [
        HLIST w=34 a=0 d=1: [
            LITERAL w=5 a=0 d=1: "while"
            LITERAL w=1 a=0 d=1: "("
            RULE w=10 a=0 d=1: <expression>
            LITERAL w=1 a=0 d=1: ")"
            RULE w=9 a=0 d=1: <statement>
        ]
        HLIST w=41 a=0 d=1: [
            LITERAL w=2 a=0 d=1: "do"
            RULE w=9 a=0 d=1: <statement>
            LITERAL w=5 a=0 d=1: "while"
            LITERAL w=1 a=0 d=1: "("
            RULE w=10 a=0 d=1: <expression>
            LITERAL w=1 a=0 d=1: ")"
            LITERAL w=1 a=0 d=1: ";"
        ]
        HLIST w=98 a=2 d=1: [
            LITERAL w=3 a=0 d=1: "for"
            LITERAL w=1 a=0 d=1: "("
            VLIST w=22 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=16 a=0 d=1 o=0: [
                    HLIST w=10 a=0 d=1: [
                        RULE w=10 a=0 d=1: <expression>
                    ]
                ]
            ]
            LITERAL w=1 a=0 d=1: ";"
            VLIST w=22 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=16 a=0 d=1 o=0: [
                    HLIST w=10 a=0 d=1: [
                        RULE w=10 a=0 d=1: <expression>
                    ]
                ]
            ]
            LITERAL w=1 a=0 d=1: ";"
            VLIST w=22 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=16 a=0 d=1 o=0: [
                    HLIST w=10 a=0 d=1: [
                        RULE w=10 a=0 d=1: <expression>
                    ]
                ]
            ]
            LITERAL w=1 a=0 d=1: ")"
            RULE w=9 a=0 d=1: <statement>
        ]
        HLIST w=84 a=2 d=1: [
            LITERAL w=3 a=0 d=1: "for"
            LITERAL w=1 a=0 d=1: "("
            RULE w=11 a=0 d=1: <declaration>
            VLIST w=22 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=16 a=0 d=1 o=0: [
                    HLIST w=10 a=0 d=1: [
                        RULE w=10 a=0 d=1: <expression>
                    ]
                ]
            ]
            LITERAL w=1 a=0 d=1: ";"
            VLIST w=22 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=16 a=0 d=1 o=0: [
                    HLIST w=10 a=0 d=1: [
                        RULE w=10 a=0 d=1: <expression>
                    ]
                ]
            ]
            LITERAL w=1 a=0 d=1: ")"
            RULE w=9 a=0 d=1: <statement>
        ]
    ]

iteration-statement: (after prettify)
    VLIST w=86 a=0 d=11 o=0: [
        HLIST w=34 a=0 d=1: [
            LITERAL w=5 a=0 d=1: "while"
            LITERAL w=1 a=0 d=1: "("
            RULE w=10 a=0 d=1: <expression>
            LITERAL w=1 a=0 d=1: ")"
            RULE w=9 a=0 d=1: <statement>
        ]
        HLIST w=41 a=0 d=1: [
            LITERAL w=2 a=0 d=1: "do"
            RULE w=9 a=0 d=1: <statement>
            LITERAL w=5 a=0 d=1: "while"
            LITERAL w=1 a=0 d=1: "("
            RULE w=10 a=0 d=1: <expression>
            LITERAL w=1 a=0 d=1: ")"
            LITERAL w=1 a=0 d=1: ";"
        ]
        HLIST w=80 a=2 d=1: [
            LITERAL w=3 a=0 d=1: "for"
            LITERAL w=1 a=0 d=1: "("
            VLIST w=16 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                RULE w=10 a=0 d=1: <expression>
            ]
            LITERAL w=1 a=0 d=1: ";"
            VLIST w=16 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                RULE w=10 a=0 d=1: <expression>
            ]
            LITERAL w=1 a=0 d=1: ";"
            VLIST w=16 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                RULE w=10 a=0 d=1: <expression>
            ]
            LITERAL w=1 a=0 d=1: ")"
            RULE w=9 a=0 d=1: <statement>
        ]
        HLIST w=72 a=2 d=1: [
            LITERAL w=3 a=0 d=1: "for"
            LITERAL w=1 a=0 d=1: "("
            RULE w=11 a=0 d=1: <declaration>
            VLIST w=16 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                RULE w=10 a=0 d=1: <expression>
            ]
            LITERAL w=1 a=0 d=1: ";"
            VLIST w=16 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                RULE w=10 a=0 d=1: <expression>
            ]
            LITERAL w=1 a=0 d=1: ")"
            RULE w=9 a=0 d=1: <statement>
        ]
    ]

jump-statement: (before prettify)
    VLIST w=39 a=0 d=9 o=0: [
        HLIST w=19 a=0 d=1: [
            LITERAL w=4 a=0 d=1: "goto"
            RULE w=10 a=0 d=1: <identifier>
            LITERAL w=1 a=0 d=1: ";"
        ]
        HLIST w=11 a=0 d=1: [
            LITERAL w=8 a=0 d=1: "continue"
            LITERAL w=1 a=0 d=1: ";"
        ]
        HLIST w=8 a=0 d=1: [
            LITERAL w=5 a=0 d=1: "break"
            LITERAL w=1 a=0 d=1: ";"
        ]
        HLIST w=33 a=2 d=1: [
            LITERAL w=6 a=0 d=1: "return"
            VLIST w=22 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                VLIST w=16 a=0 d=1 o=0: [
                    HLIST w=10 a=0 d=1: [
                        RULE w=10 a=0 d=1: <expression>
                    ]
                ]
            ]
            LITERAL w=1 a=0 d=1: ";"
        ]
    ]

jump-statement: (after prettify)
    VLIST w=33 a=0 d=9 o=0: [
        HLIST w=19 a=0 d=1: [
            LITERAL w=4 a=0 d=1: "goto"
            RULE w=10 a=0 d=1: <identifier>
            LITERAL w=1 a=0 d=1: ";"
        ]
        HLIST w=11 a=0 d=1: [
            LITERAL w=8 a=0 d=1: "continue"
            LITERAL w=1 a=0 d=1: ";"
        ]
        HLIST w=8 a=0 d=1: [
            LITERAL w=5 a=0 d=1: "break"
            LITERAL w=1 a=0 d=1: ";"
        ]
        HLIST w=27 a=2 d=1: [
            LITERAL w=6 a=0 d=1: "return"
            VLIST w=16 a=2 d=1 o=1: [
                LTR_ARROW w=1 a=0 d=1
                RULE w=10 a=0 d=1: <expression>
            ]
            LITERAL w=1 a=0 d=1: ";"
        ]
    ]

translation-unit:
        >--------------------------v--||
        |                          |
        `-- external-declaration --'

external-declaration:
        v-- function-definition -->--||
        |                         |
        `------ declaration ------'

function-definition:
                                                ,---------->-----------.
                                                |                      |
         declaration-specifiers -- declarator --^-- declaration-list -->-- compound-statement --||

declaration:
                                     ,------------>-------------.
                                     |                          |
        v-- declaration-specifiers --^-- init-declarator-list -->-- ";" -->--||
        |                                                                 |
        >------------------- static-assert-declaration -------------------^
        |                                                                 |
        `------------------------------ ";" ------------------------------'

declaration-specifiers:
        >-- declaration-specifier --v--||
        |                           |
        `-------------<-------------'

declaration-specifier:
        v-- storage-class-specifier -->--||
        |                             |
        >------ type-specifier -------^
        |                             |
        >------ type-qualifier -------^
        |                             |
        >---- function-specifier -----^
        |                             |
        `---- alignment-specifier ----'

declarator:
        ,------>------.
        |             |
        ^-- pointer -->-- direct-declarator --||

declaration-list:
        >-- declaration --v--||
        |                 |
        `--------<--------'

compound-statement:
         "{" -->------------------------------v-- "}" --||
               |                              |
               `-- declaration-or-statement --'

declaration-or-statement:
        v-- declaration -->--||
        |                 |
        `--- statement ---'

init-declarator-list:
        >-- init-declarator --v--||
        |                     |
        `-------- "," --------'

init-declarator:
                      ,----------->------------.
                      |                        |
         declarator --^-- "=" -- initializer -->--||

static-assert-declaration:
         "_Static_assert" -- "(" -- constant-expression -- "," -- string-literal -- ")" -- ";" --||

storage-class-specifier:
        v----- "typedef" ----->--||
        |                     |
        >----- "extern" ------^
        |                     |
        >----- "static" ------^
        |                     |
        >-- "_Thread_local" --^
        |                     |
        >------ "auto" -------^
        |                     |
        `---- "register" -----'

type-specifier:
        v----------- "void" ------------>--||
        |                               |
        >----------- "char" ------------^
        |                               |
        >----------- "short" -----------^
        |                               |
        >------------ "int" ------------^
        |                               |
        >----------- "long" ------------^
        |                               |
        >----------- "float" -----------^
        |                               |
        >---------- "double" -----------^
        |                               |
        >---------- "signed" -----------^
        |                               |
        >--------- "unsigned" ----------^
        |                               |
        >----------- "_Bool" -----------^
        |                               |
        >--------- "_Complex" ----------^
        |                               |
        >-------- "_Imaginary" ---------^
        |                               |
        >---- atomic-type-specifier ----^
        |                               |
        >-- struct-or-union-specifier --^
        |                               |
        >------- enum-specifier --------^
        |                               |
        `-------- typedef-name ---------'

typedef-name:
         identifier --||

type-qualifier:
        v--- "const" ---->--||
        |                |
        >-- "restrict" --^
        |                |
        >-- "volatile" --^
        |                |
        `-- "_Atomic" ---'

function-specifier:
        v--- "inline" ---->--||
        |                 |
        `-- "_Noreturn" --'

alignment-specifier:
        v------- "_Alignas" -- "(" -- type-name -- ")" ------->--||
        |                                                     |
        `-- "_Alignas" -- "(" -- constant-expression -- ")" --'

pointer:
               ,------------>------------.  ,------>------.
               |                         |  |             |
         "*" --^-- type-qualifier-list -->--^-- pointer -->--||

direct-declarator:
        v--------------------------------------------- identifier ---------------------------------------------->--||
        |                                                                                                       |
        >-------------------------------------- "(" -- declarator -- ")" ---------------------------------------^
        |                                                                                                       |
        |                                                        ,---->----.                                    |
        |                                                        |         |                                    |
        >---------------------------- direct-declarator -- "[" --^-- "*" -->-- "]" -----------------------------^
        |                                                                                                       |
        |                                          ,------------>------------.                                  |
        |                                          |                         |                                  |
        >-- direct-declarator -- "[" -- "static" --^-- type-qualifier-list -->-- assignment-expression -- "]" --^
        |                                                                                                       |
        |                                                                    ,---->----.                        |
        |                                                                    |         |                        |
        >----------------- direct-declarator -- "[" -- type-qualifier-list --^-- "*" -->-- "]" -----------------^
        |                                                                                                       |
        |                                                     ,------>-------.                                  |
        |                                                     |              |                                  |
        >-- direct-declarator -- "[" -- type-qualifier-list --^-- "static" -->-- assignment-expression -- "]" --^
        |                                                                                                       |
        >---------------------- direct-declarator -- "[" -- assignment-expression -- "]" -----------------------^
        |                                                                                                       |
        >----------------------- direct-declarator -- "(" -- parameter-type-list -- ")" ------------------------^
        |                                                                                                       |
        >------------------------- direct-declarator -- "(" -- identifier-list -- ")" --------------------------^
        |                                                                                                       |
        `----------------------------------- direct-declarator -- "(" -- ")" -----------------------------------'

identifier-list:
        >-- identifier --v--||
        |                |
        `----- "," ------'

initializer-list:
        >-- designative-initializer --v--||
        |                             |
        `------------ "," ------------'

designative-initializer:
        ,-------->--------.
        |                 |
        ^-- designation -->-- initializer --||

initializer:
                                      ,---->----.
                                      |         |
        v-- "{" -- initializer-list --^-- "," -->-- "}" -->--||
        |                                                 |
        `------------- assignment-expression -------------'

constant-expression:
         conditional-expression --||

atomic-type-specifier:
         "_Atomic" -- "(" -- type-name -- ")" --||

struct-or-union-specifier:
        v------------ struct-or-union -- "{" -- struct-declaration-list -- "}" ------------>--||
        |                                                                                  |
        |                                   ,--------------------->---------------------.  |
        |                                   |                                           |  |
        `-- struct-or-union -- identifier --^-- "{" -- struct-declaration-list -- "}" -->--'

struct-or-union:
        v-- "struct" -->--||
        |              |
        `-- "union" ---'

struct-declaration-list:
        >-- struct-declaration --v--||
        |                        |
        `-----------<------------'

struct-declaration:
        v--------------- specifier-qualifier-list -- ";" --------------->--||
        |                                                               |
        >-- specifier-qualifier-list -- struct-declarator-list -- ";" --^
        |                                                               |
        `------------------ static-assert-declaration ------------------'

enum-specifier:
                                                         ,---->----.
                                                         |         |
        v------------ "enum" -- "{" -- enumerator-list --^-- "," -->-- "}" ------------>--||
        |                                                                              |
        |                          ,----------------------->------------------------.  |
        |                          |                                                |  |
        |                          |                            ,---->----.         |  |
        |                          |                            |         |         |  |
        `-- "enum" -- identifier --^-- "{" -- enumerator-list --^-- "," -->-- "}" -->--'

enumerator-list:
        >-- enumerator --v--||
        |                |
        `----- "," ------'

enumerator:
                                ,--------------->----------------.
                                |                                |
         enumeration-constant --^-- "=" -- constant-expression -->--||

enumeration-constant:
         identifier --||

type-name:
                                    ,------------>------------.
                                    |                         |
         specifier-qualifier-list --^-- abstract-declarator -->--||

specifier-qualifier-list:
        >-- specifier-qualifier --v--||
        |                         |
        `------------<------------'

specifier-qualifier:
        v-- type-specifier -->--||
        |                    |
        `-- type-qualifier --'

abstract-declarator:
                      ,--------------->----------------.
                      |                                |
        v-- pointer --^-- direct-abstract-declarator -->-->--||
        |                                                 |
        `---------- direct-abstract-declarator -----------'

direct-abstract-declarator:
        v----------------------------------------- "(" -- abstract-declarator -- ")" ------------------------------------------>--||
        |                                                                                                                      |
        >----------------------------------------- "(" -- parameter-type-list -- ")" ------------------------------------------^
        |                                                                                                                      |
        >----------------------------------------------------- "(" -- ")" -----------------------------------------------------^
        |                                                                                                                      |
        |                                                     ,---->----.                                                      |
        |                                                     |         |                                                      |
        >---------------------------------------------- "[" --^-- "*" -->-- "]" -----------------------------------------------^
        |                                                                                                                      |
        |                                       ,------------>------------.                                                    |
        |                                       |                         |                                                    |
        >-------------------- "[" -- "static" --^-- type-qualifier-list -->-- assignment-expression -- "]" --------------------^
        |                                                                                                                      |
        |                                               ,---------------------->----------------------.                        |
        |                                               |                                             |                        |
        |                                               |  ,------>-------.                           |                        |
        |                                               |  |              |                           |                        |
        >----------------- "[" -- type-qualifier-list --^--^-- "static" -->-- assignment-expression -->-- "]" -----------------^
        |                                                                                                                      |
        >---------------------------------------- "[" -- assignment-expression -- "]" -----------------------------------------^
        |                                                                                                                      |
        |                                                                    ,---->----.                                       |
        |                                                                    |         |                                       |
        >------------------------------- direct-abstract-declarator -- "[" --^-- "*" -->-- "]" --------------------------------^
        |                                                                                                                      |
        |                                                      ,------------>------------.                                     |
        |                                                      |                         |                                     |
        >----- direct-abstract-declarator -- "[" -- "static" --^-- type-qualifier-list -->-- assignment-expression -- "]" -----^
        |                                                                                                                      |
        |                                                              ,---------------------->----------------------.         |
        |                                                              |                                             |         |
        |                                                              |  ,------>-------.                           |         |
        |                                                              |  |              |                           |         |
        >-- direct-abstract-declarator -- "[" -- type-qualifier-list --^--^-- "static" -->-- assignment-expression -->-- "]" --^
        |                                                                                                                      |
        >------------------------- direct-abstract-declarator -- "[" -- assignment-expression -- "]" --------------------------^
        |                                                                                                                      |
        >-------------------------- direct-abstract-declarator -- "(" -- parameter-type-list -- ")" ---------------------------^
        |                                                                                                                      |
        `-------------------------------------- direct-abstract-declarator -- "(" -- ")" --------------------------------------'

struct-declarator-list:
        >-- struct-declarator --v--||
        |                       |
        `--------- "," ---------'

type-qualifier-list:
        >-- type-qualifier --v--||
        |                    |
        `---------<----------'

parameter-type-list:
                          ,-------->---------.
                          |                  |
         parameter-list --^-- "," -- "..." -->--||

struct-declarator:
        v------------ ":" -- constant-expression ------------>--||
        |                                                    |
        |                ,--------------->----------------.  |
        |                |                                |  |
        `-- declarator --^-- ":" -- constant-expression -->--'

assignment-operator:
        v--- "=" --->--||
        |           |
        >-- "*=" ---^
        |           |
        >-- "/=" ---^
        |           |
        >-- "%=" ---^
        |           |
        >-- "+=" ---^
        |           |
        >-- "-=" ---^
        |           |
        >-- "<<=" --^
        |           |
        >-- ">>=" --^
        |           |
        >-- "&=" ---^
        |           |
        >-- "^=" ---^
        |           |
        `-- "|=" ---'

parameter-list:
        >-- parameter-declaration --v--||
        |                           |
        `----------- "," -----------'

parameter-declaration:
                                  ,------------>------------.
                                  |                         |
         declaration-specifiers --+------ declarator ------->--||
                                  |                         |
                                  `-- abstract-declarator --'

expression:
        >-- assignment-expression --v--||
        |                           |
        `----------- "," -----------'

assignment-expression:
        v----------------------- conditional-expression ----------------------->--||
        |                                                                      |
        `-- unary-expression -- assignment-operator -- assignment-expression --'

conditional-expression:
                                 ,--------------------------->----------------------------.
                                 |                                                        |
         logical-or-expression --^-- "?" -- expression -- ":" -- conditional-expression -->--||

logical-or-expression:
        >-- logical-and-expression --v--||
        |                            |
        `----------- "||" -----------'

logical-and-expression:
        >-- inclusive-or-expression --v--||
        |                             |
        `----------- "&&" ------------'

inclusive-or-expression:
        >-- exclusive-or-expression --v--||
        |                             |
        `------------ "|" ------------'

exclusive-or-expression:
        >-- and-expression --v--||
        |                    |
        `------- "^" --------'

and-expression:
        >-- equality-expression --v--||
        |                         |
        `---------- "&" ----------'

equality-expression:
        >-- relational-expression --v--||
        |                           |
        `-------<-- "==" --v--------'
                |          |
                `-- "!=" --'

relational-expression:
        >-- shift-expression --v--||
        |                      |
        `-----<-- "<" ---v-----'
              |          |
              ^-- ">" ---<
              |          |
              ^-- "<=" --<
              |          |
              `-- ">=" --'

shift-expression:
        >-- additive-expression --v--||
        |                         |
        `------<-- "<<" --v-------'
               |          |
               `-- ">>" --'

additive-expression:
        >-- multiplicative-expression --v--||
        |                               |
        `----------<-- "+" --v----------'
                   |         |
                   `-- "-" --'

multiplicative-expression:
        >-- cast-expression --v--||
        |                     |
        `-----<-- "%" --v-----'
              |         |
              ^-- "*" --<
              |         |
              `-- "/" --'

cast-expression:
        v--------------- unary-expression --------------->--||
        |                                                |
        `-- "(" -- type-name -- ")" -- cast-expression --'

unary-expression:
        v----------- postfix-expression ------------>--||
        |                                           |
        >-----v-- "++" -->-- unary-expression ------^
        |     |          |                          |
        |     `-- "--" --'                          |
        |                                           |
        >---- unary-operator -- cast-expression ----^
        |                                           |
        >------ "sizeof" -- unary-expression -------^
        |                                           |
        >--- "sizeof" -- "(" -- type-name -- ")" ---^
        |                                           |
        `-- "_Alignof" -- "(" -- type-name -- ")" --'

postfix-expression:
        v---------------------------- primary-expression ---------------------------->--||
        |                                                                            |
        >-------------- postfix-expression -- "[" -- expression -- "]" --------------^
        |                                                                            |
        |                                 ,-------------->---------------.           |
        |                                 |                              |           |
        >---- postfix-expression -- "(" --^-- argument-expression-list -->-- ")" ----^
        |                                                                            |
        >-------------- postfix-expression --v-- "." --->-- identifier --------------^
        |                                    |          |                            |
        |                                    `-- "->" --'                            |
        |                                                                            |
        >--------------------- postfix-expression --v-- "++" -->---------------------^
        |                                           |          |                     |
        |                                           `-- "--" --'                     |
        |                                                                            |
        |                                                        ,---->----.         |
        |                                                        |         |         |
        `-- "(" -- type-name -- ")" -- "{" -- initializer-list --^-- "," -->-- "}" --'

unary-operator:
        v-- "!" -->--||
        |         |
        >-- "&" --^
        |         |
        >-- "*" --^
        |         |
        >-- "+" --^
        |         |
        >-- "-" --^
        |         |
        `-- "~" --'

primary-expression:
        v--------- identifier --------->--||
        |                              |
        >---------- constant ----------^
        |                              |
        >----------- string -----------^
        |                              |
        >-- "(" -- expression -- ")" --^
        |                              |
        `----- generic-selection ------'

argument-expression-list:
        >-- assignment-expression --v--||
        |                           |
        `----------- "," -----------'

constant:
        v---- integer-constant ---->--||
        |                          |
        >--- character-constant ---^
        |                          |
        >--- floating-constant ----^
        |                          |
        `-- enumeration-constant --'

string:
        v-- string-literal -->--||
        |                    |
        `---- "__func__" ----'

generic-selection:
         "_Generic" -- "(" -- assignment-expression -- "," -- generic-assoc-list -- ")" --||

generic-assoc-list:
        >-- generic-association --v--||
        |                         |
        `---------- "," ----------'

generic-association:
        v-- type-name -- ":" -- assignment-expression -->--||
        |                                               |
        `-- "default" -- ":" -- assignment-expression --'

designation:
         designator-list -- "=" --||

designator-list:
        >-- designator --v--||
        |                |
        `-------<--------'

designator:
        v-- "[" -- constant-expression -- "]" -->--||
        |                                       |
        `---------- "." -- identifier ----------'

statement:
        v--- labeled-statement ---->--||
        |                          |
        >--- compound-statement ---^
        |                          |
        >-- expression-statement --^
        |                          |
        >-- selection-statement ---^
        |                          |
        >-- iteration-statement ---^
        |                          |
        `----- jump-statement -----'

labeled-statement:
        v----------- identifier -- ":" -- statement ------------>--||
        |                                                       |
        >-- "case" -- constant-expression -- ":" -- statement --^
        |                                                       |
        `------------ "default" -- ":" -- statement ------------'

expression-statement:
        ,------->--------.
        |                |
        ^-- expression -->-- ";" --||

selection-statement:
        v-- "if" -- "(" -- expression -- ")" -- statement -- "else" -- statement -->--||
        |                                                                          |
        >------------- "if" -- "(" -- expression -- ")" -- statement --------------^
        |                                                                          |
        `----------- "switch" -- "(" -- expression -- ")" -- statement ------------'

iteration-statement:
        v------------------------------- "while" -- "(" -- expression -- ")" -- statement ------------------------------->--||
        |                                                                                                                |
        >----------------------- "do" -- statement -- "while" -- "(" -- expression -- ")" -- ";" ------------------------^
        |                                                                                                                |
        |                  ,------->--------.         ,------->--------.         ,------->--------.                      |
        |                  |                |         |                |         |                |                      |
        >-- "for" -- "(" --^-- expression -->-- ";" --^-- expression -->-- ";" --^-- expression -->-- ")" -- statement --^
        |                                                                                                                |
        |                                       ,------->--------.         ,------->--------.                            |
        |                                       |                |         |                |                            |
        `-------- "for" -- "(" -- declaration --^-- expression -->-- ";" --^-- expression -->-- ")" -- statement --------'

jump-statement:
        v------ "goto" -- identifier -- ";" ------>--||
        |                                         |
        >----------- "continue" -- ";" -----------^
        |                                         |
        >------------ "break" -- ";" -------------^
        |                                         |
        |              ,------->--------.         |
        |              |                |         |
        `-- "return" --^-- expression -->-- ";" --'

translation-unit:
        ╭──────────────────────────╮──┤│
        │                          │
        ╰── external-declaration ──╯

external-declaration:
        ╮── function-definition ──╭──┤│
        │                         │
        ╰────── declaration ──────╯

function-definition:
                                                ╭──────────>───────────╮
                                                │                      │
         declaration-specifiers ── declarator ──╯── declaration-list ──╰── compound-statement ──┤│

declaration:
                                     ╭────────────>─────────────╮
                                     │                          │
        ╮── declaration-specifiers ──╯── init-declarator-list ──╰── ";" ──╭──┤│
        │                                                                 │
        ╰─────────────────── static-assert-declaration ───────────────────╯
        │                                                                 │
        ╰────────────────────────────── ";" ──────────────────────────────╯

declaration-specifiers:
        ╭── declaration-specifier ──╮──┤│
        │                           │
        ╰─────────────<─────────────╯

declaration-specifier:
        ╮── storage-class-specifier ──╭──┤│
        │                             │
        ╰────── type-specifier ───────╯
        │                             │
        ╰────── type-qualifier ───────╯
        │                             │
        ╰──── function-specifier ─────╯
        │                             │
        ╰──── alignment-specifier ────╯

declarator:
        ╭──────>──────╮
        │             │
        ╯── pointer ──╰── direct-declarator ──┤│

declaration-list:
        ╭── declaration ──╮──┤│
        │                 │
        ╰────────<────────╯

compound-statement:
         "{" ──╭──────────────────────────────╮── "}" ──┤│
               │                              │
               ╰── declaration-or-statement ──╯

declaration-or-statement:
        ╮── declaration ──╭──┤│
        │                 │
        ╰─── statement ───╯

init-declarator-list:
        ╭── init-declarator ──╮──┤│
        │                     │
        ╰──────── "," ────────╯

init-declarator:
                      ╭───────────>────────────╮
                      │                        │
         declarator ──╯── "=" ── initializer ──╰──┤│

static-assert-declaration:
         "_Static_assert" ── "(" ── constant-expression ── "," ── string-literal ── ")" ── ";" ──┤│

storage-class-specifier:
        ╮───── "typedef" ─────╭──┤│
        │                     │
        ╰───── "extern" ──────╯
        │                     │
        ╰───── "static" ──────╯
        │                     │
        ╰── "_Thread_local" ──╯
        │                     │
        ╰────── "auto" ───────╯
        │                     │
        ╰──── "register" ─────╯

type-specifier:
        ╮─────────── "void" ────────────╭──┤│
        │                               │
        ╰─────────── "char" ────────────╯
        │                               │
        ╰─────────── "short" ───────────╯
        │                               │
        ╰──────────── "int" ────────────╯
        │                               │
        ╰─────────── "long" ────────────╯
        │                               │
        ╰─────────── "float" ───────────╯
        │                               │
        ╰────────── "double" ───────────╯
        │                               │
        ╰────────── "signed" ───────────╯
        │                               │
        ╰───────── "unsigned" ──────────╯
        │                               │
        ╰─────────── "_Bool" ───────────╯
        │                               │
        ╰───────── "_Complex" ──────────╯
        │                               │
        ╰──────── "_Imaginary" ─────────╯
        │                               │
        ╰──── atomic-type-specifier ────╯
        │                               │
        ╰── struct-or-union-specifier ──╯
        │                               │
        ╰─────── enum-specifier ────────╯
        │                               │
        ╰──────── typedef-name ─────────╯

typedef-name:
         identifier ──┤│

type-qualifier:
        ╮─── "const" ────╭──┤│
        │                │
        ╰── "restrict" ──╯
        │                │
        ╰── "volatile" ──╯
        │                │
        ╰── "_Atomic" ───╯

function-specifier:
        ╮─── "inline" ────╭──┤│
        │                 │
        ╰── "_Noreturn" ──╯

alignment-specifier:
        ╮─────── "_Alignas" ── "(" ── type-name ── ")" ───────╭──┤│
        │                                                     │
        ╰── "_Alignas" ── "(" ── constant-expression ── ")" ──╯

pointer:
               ╭────────────>────────────╮  ╭──────>──────╮
               │                         │  │             │
         "*" ──╯── type-qualifier-list ──╰──╯── pointer ──╰──┤│

direct-declarator:
        ╮───────────────────────────────────────────── identifier ──────────────────────────────────────────────╭──┤│
        │                                                                                                       │
        ╰────────────────────────────────────── "(" ── declarator ── ")" ───────────────────────────────────────╯
        │                                                                                                       │
        │                                                        ╭────>────╮                                    │
        │                                                        │         │                                    │
        ╰──────────────────────────── direct-declarator ── "[" ──╯── "*" ──╰── "]" ─────────────────────────────╯
        │                                                                                                       │
        │                                          ╭────────────>────────────╮                                  │
        │                                          │                         │                                  │
        ╰── direct-declarator ── "[" ── "static" ──╯── type-qualifier-list ──╰── assignment-expression ── "]" ──╯
        │                                                                                                       │
        │                                                                    ╭────>────╮                        │
        │                                                                    │         │                        │
        ╰───────────────── direct-declarator ── "[" ── type-qualifier-list ──╯── "*" ──╰── "]" ─────────────────╯
        │                                                                                                       │
        │                                                     ╭──────>───────╮                                  │
        │                                                     │              │                                  │
        ╰── direct-declarator ── "[" ── type-qualifier-list ──╯── "static" ──╰── assignment-expression ── "]" ──╯
        │                                                                                                       │
        ╰────────────────────── direct-declarator ── "[" ── assignment-expression ── "]" ───────────────────────╯
        │                                                                                                       │
        ╰─────────────────────── direct-declarator ── "(" ── parameter-type-list ── ")" ────────────────────────╯
        │                                                                                                       │
        ╰───────────────────────── direct-declarator ── "(" ── identifier-list ── ")" ──────────────────────────╯
        │                                                                                                       │
        ╰─────────────────────────────────── direct-declarator ── "(" ── ")" ───────────────────────────────────╯

identifier-list:
        ╭── identifier ──╮──┤│
        │                │
        ╰───── "," ──────╯

initializer-list:
        ╭── designative-initializer ──╮──┤│
        │                             │
        ╰──────────── "," ────────────╯

designative-initializer:
        ╭────────>────────╮
        │                 │
        ╯── designation ──╰── initializer ──┤│

initializer:
                                      ╭────>────╮
                                      │         │
        ╮── "{" ── initializer-list ──╯── "," ──╰── "}" ──╭──┤│
        │                                                 │
        ╰───────────── assignment-expression ─────────────╯

constant-expression:
         conditional-expression ──┤│

atomic-type-specifier:
         "_Atomic" ── "(" ── type-name ── ")" ──┤│

struct-or-union-specifier:
        ╮──────────── struct-or-union ── "{" ── struct-declaration-list ── "}" ────────────╭──┤│
        │                                                                                  │
        │                                   ╭─────────────────────>─────────────────────╮  │
        │                                   │                                           │  │
        ╰── struct-or-union ── identifier ──╯── "{" ── struct-declaration-list ── "}" ──╰──╯

struct-or-union:
        ╮── "struct" ──╭──┤│
        │              │
        ╰── "union" ───╯

struct-declaration-list:
        ╭── struct-declaration ──╮──┤│
        │                        │
        ╰───────────<────────────╯

struct-declaration:
        ╮─────────────── specifier-qualifier-list ── ";" ───────────────╭──┤│
        │                                                               │
        ╰── specifier-qualifier-list ── struct-declarator-list ── ";" ──╯
        │                                                               │
        ╰────────────────── static-assert-declaration ──────────────────╯

enum-specifier:
                                                         ╭────>────╮
                                                         │         │
        ╮──────────── "enum" ── "{" ── enumerator-list ──╯── "," ──╰── "}" ────────────╭──┤│
        │                                                                              │
        │                          ╭───────────────────────>────────────────────────╮  │
        │                          │                                                │  │
        │                          │                            ╭────>────╮         │  │
        │                          │                            │         │         │  │
        ╰── "enum" ── identifier ──╯── "{" ── enumerator-list ──╯── "," ──╰── "}" ──╰──╯

enumerator-list:
        ╭── enumerator ──╮──┤│
        │                │
        ╰───── "," ──────╯

enumerator:
                                ╭───────────────>────────────────╮
                                │                                │
         enumeration-constant ──╯── "=" ── constant-expression ──╰──┤│

enumeration-constant:
         identifier ──┤│

type-name:
                                    ╭────────────>────────────╮
                                    │                         │
         specifier-qualifier-list ──╯── abstract-declarator ──╰──┤│

specifier-qualifier-list:
        ╭── specifier-qualifier ──╮──┤│
        │                         │
        ╰────────────<────────────╯

specifier-qualifier:
        ╮── type-specifier ──╭──┤│
        │                    │
        ╰── type-qualifier ──╯

abstract-declarator:
                      ╭───────────────>────────────────╮
                      │                                │
        ╮── pointer ──╯── direct-abstract-declarator ──╰──╭──┤│
        │                                                 │
        ╰────────── direct-abstract-declarator ───────────╯

direct-abstract-declarator:
        ╮───────────────────────────────────────── "(" ── abstract-declarator ── ")" ──────────────────────────────────────────╭──┤│
        │                                                                                                                      │
        ╰───────────────────────────────────────── "(" ── parameter-type-list ── ")" ──────────────────────────────────────────╯
        │                                                                                                                      │
        ╰───────────────────────────────────────────────────── "(" ── ")" ─────────────────────────────────────────────────────╯
        │                                                                                                                      │
        │                                                     ╭────>────╮                                                      │
        │                                                     │         │                                                      │
        ╰────────────────────────────────────────────── "[" ──╯── "*" ──╰── "]" ───────────────────────────────────────────────╯
        │                                                                                                                      │
        │                                       ╭────────────>────────────╮                                                    │
        │                                       │                         │                                                    │
        ╰──────────────────── "[" ── "static" ──╯── type-qualifier-list ──╰── assignment-expression ── "]" ────────────────────╯
        │                                                                                                                      │
        │                                               ╭──────────────────────>──────────────────────╮                        │
        │                                               │                                             │                        │
        │                                               │  ╭──────>───────╮                           │                        │
        │                                               │  │              │                           │                        │
        ╰───────────────── "[" ── type-qualifier-list ──╯──╯── "static" ──╰── assignment-expression ──╰── "]" ─────────────────╯
        │                                                                                                                      │
        ╰──────────────────────────────────────── "[" ── assignment-expression ── "]" ─────────────────────────────────────────╯
        │                                                                                                                      │
        │                                                                    ╭────>────╮                                       │
        │                                                                    │         │                                       │
        ╰─────────────────────────────── direct-abstract-declarator ── "[" ──╯── "*" ──╰── "]" ────────────────────────────────╯
        │                                                                                                                      │
        │                                                      ╭────────────>────────────╮                                     │
        │                                                      │                         │                                     │
        ╰───── direct-abstract-declarator ── "[" ── "static" ──╯── type-qualifier-list ──╰── assignment-expression ── "]" ─────╯
        │                                                                                                                      │
        │                                                              ╭──────────────────────>──────────────────────╮         │
        │                                                              │                                             │         │
        │                                                              │  ╭──────>───────╮                           │         │
        │                                                              │  │              │                           │         │
        ╰── direct-abstract-declarator ── "[" ── type-qualifier-list ──╯──╯── "static" ──╰── assignment-expression ──╰── "]" ──╯
        │                                                                                                                      │
        ╰───────────────────────── direct-abstract-declarator ── "[" ── assignment-expression ── "]" ──────────────────────────╯
        │                                                                                                                      │
        ╰────────────────────────── direct-abstract-declarator ── "(" ── parameter-type-list ── ")" ───────────────────────────╯
        │                                                                                                                      │
        ╰────────────────────────────────────── direct-abstract-declarator ── "(" ── ")" ──────────────────────────────────────╯

struct-declarator-list:
        ╭── struct-declarator ──╮──┤│
        │                       │
        ╰───────── "," ─────────╯

type-qualifier-list:
        ╭── type-qualifier ──╮──┤│
        │                    │
        ╰─────────<──────────╯

parameter-type-list:
                          ╭────────>─────────╮
                          │                  │
         parameter-list ──╯── "," ── "..." ──╰──┤│

struct-declarator:
        ╮──────────── ":" ── constant-expression ────────────╭──┤│
        │                                                    │
        │                ╭───────────────>────────────────╮  │
        │                │                                │  │
        ╰── declarator ──╯── ":" ── constant-expression ──╰──╯

assignment-operator:
        ╮─── "=" ───╭──┤│
        │           │
        ╰── "*=" ───╯
        │           │
        ╰── "/=" ───╯
        │           │
        ╰── "%=" ───╯
        │           │
        ╰── "+=" ───╯
        │           │
        ╰── "-=" ───╯
        │           │
        ╰── "<<=" ──╯
        │           │
        ╰── ">>=" ──╯
        │           │
        ╰── "&=" ───╯
        │           │
        ╰── "^=" ───╯
        │           │
        ╰── "|=" ───╯

parameter-list:
        ╭── parameter-declaration ──╮──┤│
        │                           │
        ╰─────────── "," ───────────╯

parameter-declaration:
                                  ╭────────────>────────────╮
                                  │                         │
         declaration-specifiers ──┼────── declarator ───────┼──┤│
                                  │                         │
                                  ╰── abstract-declarator ──╯

expression:
        ╭── assignment-expression ──╮──┤│
        │                           │
        ╰─────────── "," ───────────╯

assignment-expression:
        ╮─────────────────────── conditional-expression ───────────────────────╭──┤│
        │                                                                      │
        ╰── unary-expression ── assignment-operator ── assignment-expression ──╯

conditional-expression:
                                 ╭───────────────────────────>────────────────────────────╮
                                 │                                                        │
         logical-or-expression ──╯── "?" ── expression ── ":" ── conditional-expression ──╰──┤│

logical-or-expression:
        ╭── logical-and-expression ──╮──┤│
        │                            │
        ╰─────────── "||" ───────────╯

logical-and-expression:
        ╭── inclusive-or-expression ──╮──┤│
        │                             │
        ╰─────────── "&&" ────────────╯

inclusive-or-expression:
        ╭── exclusive-or-expression ──╮──┤│
        │                             │
        ╰──────────── "|" ────────────╯

exclusive-or-expression:
        ╭── and-expression ──╮──┤│
        │                    │
        ╰─────── "^" ────────╯

and-expression:
        ╭── equality-expression ──╮──┤│
        │                         │
        ╰────────── "&" ──────────╯

equality-expression:
        ╭── relational-expression ──╮──┤│
        │                           │
        ╰───────╮── "==" ──╭────────╯
                │          │
                ╰── "!=" ──╯

relational-expression:
        ╭── shift-expression ──╮──┤│
        │                      │
        ╰─────╮── "<" ───╭─────╯
              │          │
              ╰── ">" ───╯
              │          │
              ╰── "<=" ──╯
              │          │
              ╰── ">=" ──╯

shift-expression:
        ╭── additive-expression ──╮──┤│
        │                         │
        ╰──────╮── "<<" ──╭───────╯
               │          │
               ╰── ">>" ──╯

additive-expression:
        ╭── multiplicative-expression ──╮──┤│
        │                               │
        ╰──────────╮── "+" ──╭──────────╯
                   │         │
                   ╰── "-" ──╯

multiplicative-expression:
        ╭── cast-expression ──╮──┤│
        │                     │
        ╰─────╮── "%" ──╭─────╯
              │         │
              ╰── "*" ──╯
              │         │
              ╰── "/" ──╯

cast-expression:
        ╮─────────────── unary-expression ───────────────╭──┤│
        │                                                │
        ╰── "(" ── type-name ── ")" ── cast-expression ──╯

unary-expression:
        ╮─────────── postfix-expression ────────────╭──┤│
        │                                           │
        ╰─────╮── "++" ──╭── unary-expression ──────╯
        │     │          │                          │
        │     ╰── "--" ──╯                          │
        │                                           │
        ╰──── unary-operator ── cast-expression ────╯
        │                                           │
        ╰────── "sizeof" ── unary-expression ───────╯
        │                                           │
        ╰─── "sizeof" ── "(" ── type-name ── ")" ───╯
        │                                           │
        ╰── "_Alignof" ── "(" ── type-name ── ")" ──╯

postfix-expression:
        ╮──────────────────────────── primary-expression ────────────────────────────╭──┤│
        │                                                                            │
        ╰────────────── postfix-expression ── "[" ── expression ── "]" ──────────────╯
        │                                                                            │
        │                                 ╭──────────────>───────────────╮           │
        │                                 │                              │           │
        ╰──── postfix-expression ── "(" ──╯── argument-expression-list ──╰── ")" ────╯
        │                                                                            │
        ╰────────────── postfix-expression ──╮── "." ───╭── identifier ──────────────╯
        │                                    │          │                            │
        │                                    ╰── "->" ──╯                            │
        │                                                                            │
        ╰───────────────────── postfix-expression ──╮── "++" ──╭─────────────────────╯
        │                                           │          │                     │
        │                                           ╰── "--" ──╯                     │
        │                                                                            │
        │                                                        ╭────>────╮         │
        │                                                        │         │         │
        ╰── "(" ── type-name ── ")" ── "{" ── initializer-list ──╯── "," ──╰── "}" ──╯

unary-operator:
        ╮── "!" ──╭──┤│
        │         │
        ╰── "&" ──╯
        │         │
        ╰── "*" ──╯
        │         │
        ╰── "+" ──╯
        │         │
        ╰── "-" ──╯
        │         │
        ╰── "~" ──╯

primary-expression:
        ╮───────── identifier ─────────╭──┤│
        │                              │
        ╰────────── constant ──────────╯
        │                              │
        ╰─────────── string ───────────╯
        │                              │
        ╰── "(" ── expression ── ")" ──╯
        │                              │
        ╰───── generic-selection ──────╯

argument-expression-list:
        ╭── assignment-expression ──╮──┤│
        │                           │
        ╰─────────── "," ───────────╯

constant:
        ╮──── integer-constant ────╭──┤│
        │                          │
        ╰─── character-constant ───╯
        │                          │
        ╰─── floating-constant ────╯
        │                          │
        ╰── enumeration-constant ──╯

string:
        ╮── string-literal ──╭──┤│
        │                    │
        ╰──── "__func__" ────╯

generic-selection:
         "_Generic" ── "(" ── assignment-expression ── "," ── generic-assoc-list ── ")" ──┤│

generic-assoc-list:
        ╭── generic-association ──╮──┤│
        │                         │
        ╰────────── "," ──────────╯

generic-association:
        ╮── type-name ── ":" ── assignment-expression ──╭──┤│
        │                                               │
        ╰── "default" ── ":" ── assignment-expression ──╯

designation:
         designator-list ── "=" ──┤│

designator-list:
        ╭── designator ──╮──┤│
        │                │
        ╰───────<────────╯

designator:
        ╮── "[" ── constant-expression ── "]" ──╭──┤│
        │                                       │
        ╰────────── "." ── identifier ──────────╯

statement:
        ╮─── labeled-statement ────╭──┤│
        │                          │
        ╰─── compound-statement ───╯
        │                          │
        ╰── expression-statement ──╯
        │                          │
        ╰── selection-statement ───╯
        │                          │
        ╰── iteration-statement ───╯
        │                          │
        ╰───── jump-statement ─────╯

labeled-statement:
        ╮─────────── identifier ── ":" ── statement ────────────╭──┤│
        │                                                       │
        ╰── "case" ── constant-expression ── ":" ── statement ──╯
        │                                                       │
        ╰──────────── "default" ── ":" ── statement ────────────╯

expression-statement:
        ╭───────>────────╮
        │                │
        ╯── expression ──╰── ";" ──┤│

selection-statement:
        ╮── "if" ── "(" ── expression ── ")" ── statement ── "else" ── statement ──╭──┤│
        │                                                                          │
        ╰───────────── "if" ── "(" ── expression ── ")" ── statement ──────────────╯
        │                                                                          │
        ╰─────────── "switch" ── "(" ── expression ── ")" ── statement ────────────╯

iteration-statement:
        ╮─────────────────────────────── "while" ── "(" ── expression ── ")" ── statement ───────────────────────────────╭──┤│
        │                                                                                                                │
        ╰─────────────────────── "do" ── statement ── "while" ── "(" ── expression ── ")" ── ";" ────────────────────────╯
        │                                                                                                                │
        │                  ╭───────>────────╮         ╭───────>────────╮         ╭───────>────────╮                      │
        │                  │                │         │                │         │                │                      │
        ╰── "for" ── "(" ──╯── expression ──╰── ";" ──╯── expression ──╰── ";" ──╯── expression ──╰── ")" ── statement ──╯
        │                                                                                                                │
        │                                       ╭───────>────────╮         ╭───────>────────╮                            │
        │                                       │                │         │                │                            │
        ╰──────── "for" ── "(" ── declaration ──╯── expression ──╰── ";" ──╯── expression ──╰── ")" ── statement ────────╯

jump-statement:
        ╮────── "goto" ── identifier ── ";" ──────╭──┤│
        │                                         │
        ╰─────────── "continue" ── ";" ───────────╯
        │                                         │
        ╰──────────── "break" ── ";" ─────────────╯
        │                                         │
        │              ╭───────>────────╮         │
        │              │                │         │
        ╰── "return" ──╯── expression ──╰── ";" ──╯

