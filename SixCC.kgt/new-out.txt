translation-unit = *( external-declaration )

external-declaration = function-definition
                      / declaration

function-definition = declaration-specifiers declarator [ declaration-list ] compound-statement

declaration = declaration-specifiers [ init-declarator-list ] ";" / static-assert-declaration
             / translation-unit = ( external-declaration )*

external-declaration = function-definition
                     
	| declaration

function-definition = declaration-specifiers  declarator  ( declaration-list )?  compound-statement

declaration = declaration-specifiers  ( init-declarator-list )?  ";"
	| static-assert-declaration
            
	| ";"

declaration-specifiers = declaration-specifier  ( declaration-specifier )*

declaration-specifier = storage-class-specifier
                      
	| type-specifier
                      
	| type-qualifier
                      
	| function-specifier
                      
	| alignment-specifier

declarator = ( pointer )?  direct-declarator

declaration-list = declaration  ( declaration )*

compound-statement = "{"  ( declaration-or-statement )*  "}"

declaration-or-statement = declaration 
	| statement

init-declarator-list = init-declarator  ( "," init-declarator )*

init-declarator = declarator  ( "=" initializer )?

static-assert-declaration = "_Static_assert"  "("  constant-expression  ","  string-literal  ")"  ";"

storage-class-specifier = "typedef"
	| "extern"
	| "static"
	| "_Thread_local"
	| "auto"
	| "register"

type-specifier = "void"
	| "char"
	| "short"
	| "int"
	| "long"
	| "float"
	| "double"
	| "signed"
	| "unsigned"
	| "_Bool"
	| "_Complex"
	| "_Imaginary"
	| atomic-type-specifier
               
	| struct-or-union-specifier
               
	| enum-specifier
               
	| typedef-name

typedef-name = identifier

type-qualifier = "const"
	| "restrict"
	| "volatile"
	| "_Atomic"

function-specifier = "inline"
	| "_Noreturn"

alignment-specifier = "_Alignas"  "("  type-name  ")"
	| "_Alignas"  "("  constant-expression  ")"

pointer = "*"  ( type-qualifier-list )?  ( pointer )?

direct-declarator = identifier
                  
	| "("  declarator  ")"
	| direct-declarator  "["  ( "*" )?  "]"
	| direct-declarator  "["  "static"  ( type-qualifier-list )?  assignment-expression  "]"
	| direct-declarator  "["  type-qualifier-list  ( "*" )?  "]"
	| direct-declarator  "["  type-qualifier-list  ( "static" )?  assignment-expression  "]"
	| direct-declarator  "["  assignment-expression  "]"
	| direct-declarator  "("  parameter-type-list  ")"
	| direct-declarator  "("  identifier-list  ")"
	| direct-declarator  "("  ")"

identifier-list = identifier  ( "," identifier )*

initializer-list = designative-initializer  ( "," designative-initializer )*

designative-initializer = ( designation )?  initializer

initializer = "{"  initializer-list  ( "," )?  "}"
	| assignment-expression

constant-expression = conditional-expression

atomic-type-specifier = "_Atomic"  "("  type-name  ")"

struct-or-union-specifier = struct-or-union  "{"  struct-declaration-list  "}"
	| struct-or-union  identifier  ( "{" struct-declaration-list "}" )?

struct-or-union = "struct"
	| "union"

struct-declaration-list = struct-declaration  ( struct-declaration )*

struct-declaration = specifier-qualifier-list  ";"
	| specifier-qualifier-list  struct-declarator-list  ";"
	| static-assert-declaration

enum-specifier = "enum"  "{"  enumerator-list  ( "," )?  "}"
	| "enum"  identifier  ( "{" enumerator-list ( "," )? "}" )?

enumerator-list = enumerator  ( "," enumerator )*

enumerator = enumeration-constant  ( "=" constant-expression )?

enumeration-constant = identifier

type-name = specifier-qualifier-list  ( abstract-declarator )?

specifier-qualifier-list = specifier-qualifier  ( specifier-qualifier )*

specifier-qualifier = type-specifier 
	| type-qualifier

abstract-declarator = pointer  ( direct-abstract-declarator )?
	| direct-abstract-declarator

direct-abstract-declarator = "("  abstract-declarator  ")"
	| "("  parameter-type-list  ")"
	| "("  ")"
	| "["  ( "*" )?  "]"
	| "["  "static"  ( type-qualifier-list )?  assignment-expression  "]"
	| "["  type-qualifier-list  ( ( "static" )? assignment-expression )?  "]"
	| "["  assignment-expression  "]"
	| direct-abstract-declarator  "["  ( "*" )?  "]"
	| direct-abstract-declarator  "["  "static"  ( type-qualifier-list )?  assignment-expression  "]"
	| direct-abstract-declarator  "["  type-qualifier-list  ( ( "static" )? assignment-expression )?  "]"
	| direct-abstract-declarator  "["  assignment-expression  "]"
	| direct-abstract-declarator  "("  parameter-type-list  ")"
	| direct-abstract-declarator  "("  ")"

struct-declarator-list = struct-declarator  ( "," struct-declarator )*

type-qualifier-list = type-qualifier  ( type-qualifier )*

parameter-type-list = parameter-list  ( "," "..." )?

struct-declarator = ":"  constant-expression
                  
	| declarator  ( ":" constant-expression )?

assignment-operator = "="
	| "*="
	| "/="
	| "%="
	| "+="
	| "-="
	| "<<="
	| ">>="
	| "&="
	| "^="
	| "|="

parameter-list = parameter-declaration  ( "," parameter-declaration )*

parameter-declaration = declaration-specifiers  ( declarator  | abstract-declarator )?

expression = assignment-expression  ( "," assignment-expression )*

assignment-expression = conditional-expression
                      
	| unary-expression  assignment-operator  assignment-expression

conditional-expression = logical-or-expression  ( "?" expression ":" conditional-expression )?

logical-or-expression = logical-and-expression  ( "||" logical-and-expression )*

logical-and-expression = inclusive-or-expression  ( "&&" inclusive-or-expression )*

inclusive-or-expression = exclusive-or-expression  ( "|" exclusive-or-expression )*

exclusive-or-expression = and-expression  ( "^" and-expression )*

and-expression = equality-expression  ( "&" equality-expression )*

equality-expression = relational-expression  ( "==" | "!=" relational-expression )*

relational-expression = shift-expression  ( "<" | ">" | "<=" | ">=" shift-expression )*

shift-expression = additive-expression  ( "<<" | ">>" additive-expression )*

additive-expression = multiplicative-expression  ( "+" | "-" multiplicative-expression )*

multiplicative-expression = cast-expression  ( "*" | "/" | "%" cast-expression )*

cast-expression = unary-expression
                
	| "("  type-name  ")"  cast-expression

unary-expression = postfix-expression
                 
	| "++" | "--"  unary-expression
                 
	| unary-operator  cast-expression
                 
	| "sizeof"  unary-expression
                 
	| "sizeof"  "("  type-name  ")"
	| "_Alignof"  "("  type-name  ")"

postfix-expression = primary-expression
                   
	| postfix-expression  "["  expression  "]"
	| postfix-expression  "("  ( argument-expression-list )?  ")"
	| postfix-expression  "." | "->"  identifier
                   
	| postfix-expression  "++" | "--"
	| "("  type-name  ")"  "{"  initializer-list  ( "," )?  "}"

unary-operator = "&"
	| "*"
	| "+"
	| "-"
	| "~"
	| "!"

primary-expression = identifier
                   
	| constant
                   
	| string
                   
	| "("  expression  ")"
	| generic-selection

argument-expression-list = assignment-expression  ( "," assignment-expression )*

constant = integer-constant
         
	| character-constant
         
	| floating-constant
         
	| enumeration-constant

string = string-literal
       
	| "__func__"

generic-selection = "_Generic"  "("  assignment-expression  ","  generic-assoc-list  ")"

generic-assoc-list = generic-association  ( "," generic-association )*

generic-association = type-name  ":"  assignment-expression
                    
	| "default"  ":"  assignment-expression

designation = designator-list  "="

designator-list = designator  ( designator )*

designator = "["  constant-expression  "]"
	| "."  identifier

statement = labeled-statement
          
	| compound-statement
          
	| expression-statement
          
	| selection-statement
          
	| iteration-statement
          
	| jump-statement

labeled-statement = identifier  ":"  statement
                  
	| "case"  constant-expression  ":"  statement
                  
	| "default"  ":"  statement

expression-statement = ( expression )?  ";"

selection-statement = "if"  "("  expression  ")"  statement  "else"  statement
                    
	| "if"  "("  expression  ")"  statement
                    
	| "switch"  "("  expression  ")"  statement

iteration-statement = "while"  "("  expression  ")"  statement
                     
	| "do"  statement  "while"  "("  expression  ")"  ";"
	| "for"  "("  ( expression )?  ";"  ( expression )?  ";"  ( expression )?  ")"  statement
                     
	| "for"  "("  declaration  ( expression )?  ";"  ( expression )?  ")"  statement

jump-statement = "goto"  identifier  ";"
	| "continue"  ";"
	| "break"  ";"
	| "return"  ( expression )?  ";"

digraph G {
	node [ shape = box, style = rounded ];
	edge [ dir = none ];
	"p0000000000000000" [ shape = record, label = "=|translation-unit" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "external-declaration" ];
	"p0000000000000000" [ shape = record, label = "=|external-declaration" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "function-definition&#xA;                     " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declaration" ];
	"p0000000000000000" [ shape = record, label = "=|function-definition" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declaration-specifiers" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declaration-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "compound-statement" ];
	"p0000000000000000" [ shape = record, label = "=|declaration" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declaration-specifiers" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "init-declarator-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "static-assert-declaration&#xA;            " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|declaration-specifiers" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declaration-specifier" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declaration-specifier" ];
	"p0000000000000000" [ shape = record, label = "=|declaration-specifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "storage-class-specifier&#xA;                      " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-specifier&#xA;                      " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-qualifier&#xA;                      " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "function-specifier&#xA;                      " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "alignment-specifier" ];
	"p0000000000000000" [ shape = record, label = "=|declarator" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "pointer" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-declarator" ];
	"p0000000000000000" [ shape = record, label = "=|declaration-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declaration" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declaration" ];
	"p0000000000000000" [ shape = record, label = "=|compound-statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;{&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declaration-or-statement" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;}&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|declaration-or-statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declaration " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "statement" ];
	"p0000000000000000" [ shape = record, label = "=|init-declarator-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "init-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "init-declarator" ];
	"p0000000000000000" [ shape = record, label = "=|init-declarator" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;=&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "initializer" ];
	"p0000000000000000" [ shape = record, label = "=|static-assert-declaration" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;_Static_assert&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "constant-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "string-literal" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|storage-class-specifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;typedef&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;extern&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;static&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;_Thread_local&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;auto&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;register&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|type-specifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;void&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;char&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;short&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;int&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;long&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;float&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;double&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;signed&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;unsigned&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;_Bool&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;_Complex&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;_Imaginary&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "atomic-type-specifier&#xA;               " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "struct-or-union-specifier&#xA;               " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "enum-specifier&#xA;               " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "typedef-name" ];
	"p0000000000000000" [ shape = record, label = "=|typedef-name" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|type-qualifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;const&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;restrict&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;volatile&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;_Atomic&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|function-specifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;inline&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;_Noreturn&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|alignment-specifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;_Alignas&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-name" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;_Alignas&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "constant-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|pointer" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;*&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-qualifier-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "pointer" ];
	"p0000000000000000" [ shape = record, label = "=|direct-declarator" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier&#xA;                  " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;*&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;static&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-qualifier-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-qualifier-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;*&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-qualifier-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;static&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "parameter-type-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|identifier-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier" ];
	"p0000000000000000" [ shape = record, label = "=|initializer-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "designative-initializer" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "designative-initializer" ];
	"p0000000000000000" [ shape = record, label = "=|designative-initializer" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "designation" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "initializer" ];
	"p0000000000000000" [ shape = record, label = "=|initializer" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;{&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "initializer-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;}&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"p0000000000000000" [ shape = record, label = "=|constant-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "conditional-expression" ];
	"p0000000000000000" [ shape = record, label = "=|atomic-type-specifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;_Atomic&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-name" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|struct-or-union-specifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "struct-or-union" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;{&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "struct-declaration-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;}&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "struct-or-union" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;{&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "struct-declaration-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;}&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|struct-or-union" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;struct&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;union&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|struct-declaration-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "struct-declaration" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "struct-declaration" ];
	"p0000000000000000" [ shape = record, label = "=|struct-declaration" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "specifier-qualifier-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "specifier-qualifier-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "struct-declarator-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "static-assert-declaration" ];
	"p0000000000000000" [ shape = record, label = "=|enum-specifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;enum&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;{&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "enumerator-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;}&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;enum&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;{&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "enumerator-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;}&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|enumerator-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "enumerator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "enumerator" ];
	"p0000000000000000" [ shape = record, label = "=|enumerator" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "enumeration-constant" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;=&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "constant-expression" ];
	"p0000000000000000" [ shape = record, label = "=|enumeration-constant" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|type-name" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "specifier-qualifier-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "abstract-declarator" ];
	"p0000000000000000" [ shape = record, label = "=|specifier-qualifier-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "specifier-qualifier" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "specifier-qualifier" ];
	"p0000000000000000" [ shape = record, label = "=|specifier-qualifier" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-specifier " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-qualifier" ];
	"p0000000000000000" [ shape = record, label = "=|abstract-declarator" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "pointer" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-abstract-declarator" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-abstract-declarator" ];
	"p0000000000000000" [ shape = record, label = "=|direct-abstract-declarator" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "abstract-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "parameter-type-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;*&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;static&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-qualifier-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-qualifier-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;static&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-abstract-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;*&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-abstract-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;static&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-qualifier-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-abstract-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-qualifier-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;static&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-abstract-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-abstract-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "parameter-type-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "direct-abstract-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|struct-declarator-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "struct-declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "struct-declarator" ];
	"p0000000000000000" [ shape = record, label = "=|type-qualifier-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-qualifier" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-qualifier" ];
	"p0000000000000000" [ shape = record, label = "=|parameter-type-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "parameter-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;...&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|struct-declarator" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;:&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "constant-expression&#xA;                  " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declarator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;:&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "constant-expression" ];
	"p0000000000000000" [ shape = record, label = "=|assignment-operator" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;=&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;*=&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;/=&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;%=&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;+=&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;-=&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;&#x3C;&#x3C;=&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;&#x3E;&#x3E;=&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;&amp;=&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;^=&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;|=&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|parameter-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "parameter-declaration" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "parameter-declaration" ];
	"p0000000000000000" [ shape = record, label = "=|parameter-declaration" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declaration-specifiers" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declarator " ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "abstract-declarator" ];
	"p0000000000000000" [ shape = record, label = "=|expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"p0000000000000000" [ shape = record, label = "=|assignment-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "conditional-expression&#xA;                      " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "unary-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-operator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"p0000000000000000" [ shape = record, label = "=|conditional-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "logical-or-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;?&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;:&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "conditional-expression" ];
	"p0000000000000000" [ shape = record, label = "=|logical-or-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "logical-and-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;||&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "logical-and-expression" ];
	"p0000000000000000" [ shape = record, label = "=|logical-and-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "inclusive-or-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;&amp;&amp;&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "inclusive-or-expression" ];
	"p0000000000000000" [ shape = record, label = "=|inclusive-or-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "exclusive-or-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;|&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "exclusive-or-expression" ];
	"p0000000000000000" [ shape = record, label = "=|exclusive-or-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "and-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;^&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "and-expression" ];
	"p0000000000000000" [ shape = record, label = "=|and-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "equality-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;&amp;&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "equality-expression" ];
	"p0000000000000000" [ shape = record, label = "=|equality-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "relational-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;==&quot;" ];
	"t0000000000000000" [ style = filled];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;!=&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "relational-expression" ];
	"p0000000000000000" [ shape = record, label = "=|relational-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "shift-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;&#x3C;&quot;" ];
	"t0000000000000000" [ style = filled];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;&#x3E;&quot;" ];
	"t0000000000000000" [ style = filled];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;&#x3C;=&quot;" ];
	"t0000000000000000" [ style = filled];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;&#x3E;=&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "shift-expression" ];
	"p0000000000000000" [ shape = record, label = "=|shift-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "additive-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;&#x3C;&#x3C;&quot;" ];
	"t0000000000000000" [ style = filled];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;&#x3E;&#x3E;&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "additive-expression" ];
	"p0000000000000000" [ shape = record, label = "=|additive-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "multiplicative-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;+&quot;" ];
	"t0000000000000000" [ style = filled];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;-&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "multiplicative-expression" ];
	"p0000000000000000" [ shape = record, label = "=|multiplicative-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "cast-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;*&quot;" ];
	"t0000000000000000" [ style = filled];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;/&quot;" ];
	"t0000000000000000" [ style = filled];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;%&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "cast-expression" ];
	"p0000000000000000" [ shape = record, label = "=|cast-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "unary-expression&#xA;                " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-name" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "cast-expression" ];
	"p0000000000000000" [ shape = record, label = "=|unary-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "postfix-expression&#xA;                 " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;++&quot;" ];
	"t0000000000000000" [ style = filled];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;--&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "unary-expression&#xA;                 " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "unary-operator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "cast-expression&#xA;                 " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;sizeof&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "unary-expression&#xA;                 " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;sizeof&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-name" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;_Alignof&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-name" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|postfix-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "primary-expression&#xA;                   " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "postfix-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "postfix-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "argument-expression-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "postfix-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;.&quot;" ];
	"t0000000000000000" [ style = filled];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;-&#x3E;&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier&#xA;                   " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "postfix-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;++&quot;" ];
	"t0000000000000000" [ style = filled];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;--&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-name" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;{&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "initializer-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;}&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|unary-operator" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;&amp;&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;*&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;+&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;-&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;~&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;!&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|primary-expression" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier&#xA;                   " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "constant&#xA;                   " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "string&#xA;                   " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "generic-selection" ];
	"p0000000000000000" [ shape = record, label = "=|argument-expression-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"p0000000000000000" [ shape = record, label = "=|constant" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "integer-constant&#xA;         " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "character-constant&#xA;         " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "floating-constant&#xA;         " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "enumeration-constant" ];
	"p0000000000000000" [ shape = record, label = "=|string" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "string-literal&#xA;       " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;__func__&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|generic-selection" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;_Generic&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "generic-assoc-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|generic-assoc-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "generic-association" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;,&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "generic-association" ];
	"p0000000000000000" [ shape = record, label = "=|generic-association" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "type-name" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;:&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression&#xA;                    " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;default&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;:&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "assignment-expression" ];
	"p0000000000000000" [ shape = record, label = "=|designation" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "designator-list" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;=&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|designator-list" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "designator" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "designator" ];
	"p0000000000000000" [ shape = record, label = "=|designator" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;[&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "constant-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;]&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;.&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "labeled-statement&#xA;          " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "compound-statement&#xA;          " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression-statement&#xA;          " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "selection-statement&#xA;          " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "iteration-statement&#xA;          " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "jump-statement" ];
	"p0000000000000000" [ shape = record, label = "=|labeled-statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;:&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "statement&#xA;                  " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;case&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "constant-expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;:&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "statement&#xA;                  " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;default&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;:&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "statement" ];
	"p0000000000000000" [ shape = record, label = "=|expression-statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" [ shape = record, label = "=|selection-statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;if&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "statement" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;else&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "statement&#xA;                    " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;if&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "statement&#xA;                    " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;switch&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "statement" ];
	"p0000000000000000" [ shape = record, label = "=|iteration-statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;while&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "statement&#xA;                     " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;do&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "statement" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;while&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;for&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "statement&#xA;                     " ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;for&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;(&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "declaration" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;)&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "statement" ];
	"p0000000000000000" [ shape = record, label = "=|jump-statement" ];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;goto&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "identifier" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;continue&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;break&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
	"p0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;return&quot;" ];
	"t0000000000000000" [ style = filled];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "\{0,1\}&times;|()" ];
	"t0000000000000000" -> "a0000000000000000";
	"a0000000000000000" [ label = "|"];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "expression" ];
	"a0000000000000000" -> "t0000000000000000";
	"t0000000000000000" [ shape = record, label = "&quot;;&quot;" ];
	"t0000000000000000" [ style = filled];
}
<!DOCTYPE html>
<html>

 <head>
  <style>
    dl.bnf span.token {
    	text-transform: uppercase;
    }
    
    dl.bnf span.cat {
    	margin-right: 0.5ex;
    }
    
    dl.bnf dd > span.pipe {
    	float: left;
    	width: 1ex;
    	margin-left: -1.8ex;
    	text-align: right;
    	padding-right: .8ex; /* about the width of a space */
    }
    
    dl.bnf dt {
    	display: block;
    	min-width: 8em;
    	padding-right: 1em;
    }
    
    dl.bnf a.rule {
    	text-decoration: none;
    }
    
    dl.bnf a.rule:hover {
    	text-decoration: underline;
    }
    
    /* page stuff */
    dl.bnf { margin: 2em 4em; }
    dl.bnf dt { margin: 0.25em 0; }
    dl.bnf dd { margin-left: 2em; }
  </style>
 </head>
 <body>
  <dl class='bnf'>
    <dt><a name='translation-unit'>translation-unit</a>:</dt>
    <dd>
      <span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#external-declaration' class='rule' data-min='1' data-max='1'>external-declaration</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='external-declaration'>external-declaration</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>function-definition
                     </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#declaration' class='rule' data-min='1' data-max='1'>declaration</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='function-definition'>function-definition</a>:</dt>
    <dd>
      <span class='alt'><a href='#declaration-specifiers' class='rule' data-min='1' data-max='1'>declaration-specifiers</a></span>
<span class='cat'> </span><span class='alt'><a href='#declarator' class='rule' data-min='1' data-max='1'>declarator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#declaration-list' class='rule' data-min='1' data-max='1'>declaration-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#compound-statement' class='rule' data-min='1' data-max='1'>compound-statement</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='declaration'>declaration</a>:</dt>
    <dd>
      <span class='alt'><a href='#declaration-specifiers' class='rule' data-min='1' data-max='1'>declaration-specifiers</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#init-declarator-list' class='rule' data-min='1' data-max='1'>init-declarator-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>static-assert-declaration
            </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='declaration-specifiers'>declaration-specifiers</a>:</dt>
    <dd>
      <span class='alt'><a href='#declaration-specifier' class='rule' data-min='1' data-max='1'>declaration-specifier</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#declaration-specifier' class='rule' data-min='1' data-max='1'>declaration-specifier</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='declaration-specifier'>declaration-specifier</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>storage-class-specifier
                      </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>type-specifier
                      </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>type-qualifier
                      </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>function-specifier
                      </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#alignment-specifier' class='rule' data-min='1' data-max='1'>alignment-specifier</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='declarator'>declarator</a>:</dt>
    <dd>
      <span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#pointer' class='rule' data-min='1' data-max='1'>pointer</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='declaration-list'>declaration-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#declaration' class='rule' data-min='1' data-max='1'>declaration</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#declaration' class='rule' data-min='1' data-max='1'>declaration</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='compound-statement'>compound-statement</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#declaration-or-statement' class='rule' data-min='1' data-max='1'>declaration-or-statement</a></span>
 <span class='rep'>}</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='declaration-or-statement'>declaration-or-statement</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>declaration </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='init-declarator-list'>init-declarator-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#init-declarator' class='rule' data-min='1' data-max='1'>init-declarator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#init-declarator' class='rule' data-min='1' data-max='1'>init-declarator</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='init-declarator'>init-declarator</a>:</dt>
    <dd>
      <span class='alt'><a href='#declarator' class='rule' data-min='1' data-max='1'>declarator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;=&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#initializer' class='rule' data-min='1' data-max='1'>initializer</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='static-assert-declaration'>static-assert-declaration</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;_Static_assert&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>string-literal</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='storage-class-specifier'>storage-class-specifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;typedef&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;extern&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Thread_local&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;auto&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;register&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='type-specifier'>type-specifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;void&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;char&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;short&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;int&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;long&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;float&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;double&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;signed&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;unsigned&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Bool&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Complex&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Imaginary&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>atomic-type-specifier
               </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>struct-or-union-specifier
               </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>enum-specifier
               </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#typedef-name' class='rule' data-min='1' data-max='1'>typedef-name</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='typedef-name'>typedef-name</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>identifier</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='type-qualifier'>type-qualifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;const&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;restrict&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;volatile&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Atomic&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='function-specifier'>function-specifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;inline&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Noreturn&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='alignment-specifier'>alignment-specifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;_Alignas&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Alignas&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='pointer'>pointer</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#pointer' class='rule' data-min='1' data-max='1'>pointer</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='direct-declarator'>direct-declarator</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>identifier
                  </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#declarator' class='rule' data-min='1' data-max='1'>declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#parameter-type-list' class='rule' data-min='1' data-max='1'>parameter-type-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#identifier-list' class='rule' data-min='1' data-max='1'>identifier-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='identifier-list'>identifier-list</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>identifier</span></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#identifier' class='rule' data-min='1' data-max='1'>identifier</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='initializer-list'>initializer-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#designative-initializer' class='rule' data-min='1' data-max='1'>designative-initializer</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#designative-initializer' class='rule' data-min='1' data-max='1'>designative-initializer</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='designative-initializer'>designative-initializer</a>:</dt>
    <dd>
      <span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#designation' class='rule' data-min='1' data-max='1'>designation</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#initializer' class='rule' data-min='1' data-max='1'>initializer</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='initializer'>initializer</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#initializer-list' class='rule' data-min='1' data-max='1'>initializer-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='constant-expression'>constant-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#conditional-expression' class='rule' data-min='1' data-max='1'>conditional-expression</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='atomic-type-specifier'>atomic-type-specifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;_Atomic&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='struct-or-union-specifier'>struct-or-union-specifier</a>:</dt>
    <dd>
      <span class='alt'><a href='#struct-or-union' class='rule' data-min='1' data-max='1'>struct-or-union</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#struct-declaration-list' class='rule' data-min='1' data-max='1'>struct-declaration-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#struct-or-union' class='rule' data-min='1' data-max='1'>struct-or-union</a></span>
<span class='cat'> </span><span class='alt'><span class='token'>identifier</span></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#struct-declaration-list' class='rule' data-min='1' data-max='1'>struct-declaration-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='struct-or-union'>struct-or-union</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;struct&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;union&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='struct-declaration-list'>struct-declaration-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#struct-declaration' class='rule' data-min='1' data-max='1'>struct-declaration</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#struct-declaration' class='rule' data-min='1' data-max='1'>struct-declaration</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='struct-declaration'>struct-declaration</a>:</dt>
    <dd>
      <span class='alt'><a href='#specifier-qualifier-list' class='rule' data-min='1' data-max='1'>specifier-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#specifier-qualifier-list' class='rule' data-min='1' data-max='1'>specifier-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><a href='#struct-declarator-list' class='rule' data-min='1' data-max='1'>struct-declarator-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#static-assert-declaration' class='rule' data-min='1' data-max='1'>static-assert-declaration</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='enum-specifier'>enum-specifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;enum&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#enumerator-list' class='rule' data-min='1' data-max='1'>enumerator-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;enum&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>identifier</span></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#enumerator-list' class='rule' data-min='1' data-max='1'>enumerator-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='enumerator-list'>enumerator-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#enumerator' class='rule' data-min='1' data-max='1'>enumerator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#enumerator' class='rule' data-min='1' data-max='1'>enumerator</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='enumerator'>enumerator</a>:</dt>
    <dd>
      <span class='alt'><a href='#enumeration-constant' class='rule' data-min='1' data-max='1'>enumeration-constant</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;=&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='enumeration-constant'>enumeration-constant</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>identifier</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='type-name'>type-name</a>:</dt>
    <dd>
      <span class='alt'><a href='#specifier-qualifier-list' class='rule' data-min='1' data-max='1'>specifier-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#abstract-declarator' class='rule' data-min='1' data-max='1'>abstract-declarator</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='specifier-qualifier-list'>specifier-qualifier-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#specifier-qualifier' class='rule' data-min='1' data-max='1'>specifier-qualifier</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#specifier-qualifier' class='rule' data-min='1' data-max='1'>specifier-qualifier</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='specifier-qualifier'>specifier-qualifier</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>type-specifier </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#type-qualifier' class='rule' data-min='1' data-max='1'>type-qualifier</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='abstract-declarator'>abstract-declarator</a>:</dt>
    <dd>
      <span class='alt'><a href='#pointer' class='rule' data-min='1' data-max='1'>pointer</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
 <span class='rep'>]</span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='direct-abstract-declarator'>direct-abstract-declarator</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#abstract-declarator' class='rule' data-min='1' data-max='1'>abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#parameter-type-list' class='rule' data-min='1' data-max='1'>parameter-type-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#parameter-type-list' class='rule' data-min='1' data-max='1'>parameter-type-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='struct-declarator-list'>struct-declarator-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#struct-declarator' class='rule' data-min='1' data-max='1'>struct-declarator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#struct-declarator' class='rule' data-min='1' data-max='1'>struct-declarator</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='type-qualifier-list'>type-qualifier-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#type-qualifier' class='rule' data-min='1' data-max='1'>type-qualifier</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#type-qualifier' class='rule' data-min='1' data-max='1'>type-qualifier</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='parameter-type-list'>parameter-type-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#parameter-list' class='rule' data-min='1' data-max='1'>parameter-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;...&quot;</tt></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='struct-declarator'>struct-declarator</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>constant-expression
                  </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#declarator' class='rule' data-min='1' data-max='1'>declarator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='assignment-operator'>assignment-operator</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;*=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;/=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;%=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;+=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;-=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;&lt;&lt;=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;&gt;&gt;=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;&amp;=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;^=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;|=&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='parameter-list'>parameter-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#parameter-declaration' class='rule' data-min='1' data-max='1'>parameter-declaration</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#parameter-declaration' class='rule' data-min='1' data-max='1'>parameter-declaration</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='parameter-declaration'>parameter-declaration</a>:</dt>
    <dd>
      <span class='alt'><a href='#declaration-specifiers' class='rule' data-min='1' data-max='1'>declaration-specifiers</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#declarator ' class='rule' data-min='1' data-max='1'>declarator </a></span>
<span class='pipe'> | </span><span class='alt'><a href='#abstract-declarator' class='rule' data-min='1' data-max='1'>abstract-declarator</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='expression'>expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='assignment-expression'>assignment-expression</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>conditional-expression
                      </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#unary-expression' class='rule' data-min='1' data-max='1'>unary-expression</a></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-operator' class='rule' data-min='1' data-max='1'>assignment-operator</a></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='conditional-expression'>conditional-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#logical-or-expression' class='rule' data-min='1' data-max='1'>logical-or-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;?&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#conditional-expression' class='rule' data-min='1' data-max='1'>conditional-expression</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='logical-or-expression'>logical-or-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#logical-and-expression' class='rule' data-min='1' data-max='1'>logical-and-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;||&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#logical-and-expression' class='rule' data-min='1' data-max='1'>logical-and-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='logical-and-expression'>logical-and-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#inclusive-or-expression' class='rule' data-min='1' data-max='1'>inclusive-or-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;&amp;&amp;&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#inclusive-or-expression' class='rule' data-min='1' data-max='1'>inclusive-or-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='inclusive-or-expression'>inclusive-or-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#exclusive-or-expression' class='rule' data-min='1' data-max='1'>exclusive-or-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;|&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#exclusive-or-expression' class='rule' data-min='1' data-max='1'>exclusive-or-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='exclusive-or-expression'>exclusive-or-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#and-expression' class='rule' data-min='1' data-max='1'>and-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;^&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#and-expression' class='rule' data-min='1' data-max='1'>and-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='and-expression'>and-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#equality-expression' class='rule' data-min='1' data-max='1'>equality-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;&amp;&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#equality-expression' class='rule' data-min='1' data-max='1'>equality-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='equality-expression'>equality-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#relational-expression' class='rule' data-min='1' data-max='1'>relational-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;==&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;!=&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><a href='#relational-expression' class='rule' data-min='1' data-max='1'>relational-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='relational-expression'>relational-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#shift-expression' class='rule' data-min='1' data-max='1'>shift-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;&lt;&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;&gt;&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;&lt;=&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;&gt;=&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><a href='#shift-expression' class='rule' data-min='1' data-max='1'>shift-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='shift-expression'>shift-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#additive-expression' class='rule' data-min='1' data-max='1'>additive-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;&lt;&lt;&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;&gt;&gt;&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><a href='#additive-expression' class='rule' data-min='1' data-max='1'>additive-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='additive-expression'>additive-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#multiplicative-expression' class='rule' data-min='1' data-max='1'>multiplicative-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;+&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;-&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><a href='#multiplicative-expression' class='rule' data-min='1' data-max='1'>multiplicative-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='multiplicative-expression'>multiplicative-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#cast-expression' class='rule' data-min='1' data-max='1'>cast-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;/&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;%&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><a href='#cast-expression' class='rule' data-min='1' data-max='1'>cast-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='cast-expression'>cast-expression</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>unary-expression
                </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#cast-expression' class='rule' data-min='1' data-max='1'>cast-expression</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='unary-expression'>unary-expression</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>postfix-expression
                 </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;++&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;--&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><span class='token'>unary-expression
                 </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#unary-operator' class='rule' data-min='1' data-max='1'>unary-operator</a></span>
<span class='cat'> </span><span class='alt'><span class='token'>cast-expression
                 </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;sizeof&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>unary-expression
                 </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;sizeof&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Alignof&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='postfix-expression'>postfix-expression</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>primary-expression
                   </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#postfix-expression' class='rule' data-min='1' data-max='1'>postfix-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#postfix-expression' class='rule' data-min='1' data-max='1'>postfix-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#argument-expression-list' class='rule' data-min='1' data-max='1'>argument-expression-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#postfix-expression' class='rule' data-min='1' data-max='1'>postfix-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;.&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;-&gt;&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><span class='token'>identifier
                   </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#postfix-expression' class='rule' data-min='1' data-max='1'>postfix-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;++&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;--&quot;</tt></span>
 <span class='rep'>)</span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#initializer-list' class='rule' data-min='1' data-max='1'>initializer-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='unary-operator'>unary-operator</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;&amp;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;+&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;-&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;~&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;!&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='primary-expression'>primary-expression</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>identifier
                   </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>constant
                   </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>string
                   </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#generic-selection' class='rule' data-min='1' data-max='1'>generic-selection</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='argument-expression-list'>argument-expression-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='constant'>constant</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>integer-constant
         </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>character-constant
         </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>floating-constant
         </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#enumeration-constant' class='rule' data-min='1' data-max='1'>enumeration-constant</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='string'>string</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>string-literal
       </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;__func__&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='generic-selection'>generic-selection</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;_Generic&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#generic-assoc-list' class='rule' data-min='1' data-max='1'>generic-assoc-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='generic-assoc-list'>generic-assoc-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#generic-association' class='rule' data-min='1' data-max='1'>generic-association</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#generic-association' class='rule' data-min='1' data-max='1'>generic-association</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='generic-association'>generic-association</a>:</dt>
    <dd>
      <span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>assignment-expression
                    </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;default&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='designation'>designation</a>:</dt>
    <dd>
      <span class='alt'><a href='#designator-list' class='rule' data-min='1' data-max='1'>designator-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;=&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='designator-list'>designator-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#designator' class='rule' data-min='1' data-max='1'>designator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#designator' class='rule' data-min='1' data-max='1'>designator</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='designator'>designator</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;.&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>identifier</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='statement'>statement</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>labeled-statement
          </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>compound-statement
          </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>expression-statement
          </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>selection-statement
          </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>iteration-statement
          </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#jump-statement' class='rule' data-min='1' data-max='1'>jump-statement</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='labeled-statement'>labeled-statement</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>identifier</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>statement
                  </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;case&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>statement
                  </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;default&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='expression-statement'>expression-statement</a>:</dt>
    <dd>
      <span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='selection-statement'>selection-statement</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;if&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;else&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>statement
                    </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;if&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>statement
                    </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;switch&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='iteration-statement'>iteration-statement</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;while&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>statement
                     </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;do&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;while&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;for&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>statement
                     </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;for&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#declaration' class='rule' data-min='1' data-max='1'>declaration</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='jump-statement'>jump-statement</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;goto&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>identifier</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;continue&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;break&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;return&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
    </dd>
  </dl>

 </body>
</html>
<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE html>
<html xml:lang='en' lang='en'
  xmlns='http://www.w3.org/1999/xhtml'
  xmlns:xlink='http://www.w3.org/1999/xlink'>

 <head>
  <meta charset='UTF-8'/>
  <style>
    dl.bnf span.token {
    	text-transform: uppercase;
    }
    
    dl.bnf span.cat {
    	margin-right: 0.5ex;
    }
    
    dl.bnf dd > span.pipe {
    	float: left;
    	width: 1ex;
    	margin-left: -1.8ex;
    	text-align: right;
    	padding-right: .8ex; /* about the width of a space */
    }
    
    dl.bnf dt {
    	display: block;
    	min-width: 8em;
    	padding-right: 1em;
    }
    
    dl.bnf a.rule {
    	text-decoration: none;
    }
    
    dl.bnf a.rule:hover {
    	text-decoration: underline;
    }
    
    /* page stuff */
    dl.bnf { margin: 2em 4em; }
    dl.bnf dt { margin: 0.25em 0; }
    dl.bnf dd { margin-left: 2em; }
  </style>
 </head>
 <body>
  <dl class='bnf'>
    <dt><a name='translation-unit'>translation-unit</a>:</dt>
    <dd>
      <span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#external-declaration' class='rule' data-min='1' data-max='1'>external-declaration</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='external-declaration'>external-declaration</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>function-definition
                     </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#declaration' class='rule' data-min='1' data-max='1'>declaration</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='function-definition'>function-definition</a>:</dt>
    <dd>
      <span class='alt'><a href='#declaration-specifiers' class='rule' data-min='1' data-max='1'>declaration-specifiers</a></span>
<span class='cat'> </span><span class='alt'><a href='#declarator' class='rule' data-min='1' data-max='1'>declarator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#declaration-list' class='rule' data-min='1' data-max='1'>declaration-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#compound-statement' class='rule' data-min='1' data-max='1'>compound-statement</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='declaration'>declaration</a>:</dt>
    <dd>
      <span class='alt'><a href='#declaration-specifiers' class='rule' data-min='1' data-max='1'>declaration-specifiers</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#init-declarator-list' class='rule' data-min='1' data-max='1'>init-declarator-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>static-assert-declaration
            </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='declaration-specifiers'>declaration-specifiers</a>:</dt>
    <dd>
      <span class='alt'><a href='#declaration-specifier' class='rule' data-min='1' data-max='1'>declaration-specifier</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#declaration-specifier' class='rule' data-min='1' data-max='1'>declaration-specifier</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='declaration-specifier'>declaration-specifier</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>storage-class-specifier
                      </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>type-specifier
                      </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>type-qualifier
                      </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>function-specifier
                      </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#alignment-specifier' class='rule' data-min='1' data-max='1'>alignment-specifier</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='declarator'>declarator</a>:</dt>
    <dd>
      <span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#pointer' class='rule' data-min='1' data-max='1'>pointer</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='declaration-list'>declaration-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#declaration' class='rule' data-min='1' data-max='1'>declaration</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#declaration' class='rule' data-min='1' data-max='1'>declaration</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='compound-statement'>compound-statement</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#declaration-or-statement' class='rule' data-min='1' data-max='1'>declaration-or-statement</a></span>
 <span class='rep'>}</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='declaration-or-statement'>declaration-or-statement</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>declaration </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='init-declarator-list'>init-declarator-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#init-declarator' class='rule' data-min='1' data-max='1'>init-declarator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#init-declarator' class='rule' data-min='1' data-max='1'>init-declarator</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='init-declarator'>init-declarator</a>:</dt>
    <dd>
      <span class='alt'><a href='#declarator' class='rule' data-min='1' data-max='1'>declarator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;=&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#initializer' class='rule' data-min='1' data-max='1'>initializer</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='static-assert-declaration'>static-assert-declaration</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;_Static_assert&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>string-literal</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='storage-class-specifier'>storage-class-specifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;typedef&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;extern&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Thread_local&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;auto&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;register&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='type-specifier'>type-specifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;void&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;char&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;short&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;int&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;long&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;float&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;double&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;signed&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;unsigned&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Bool&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Complex&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Imaginary&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>atomic-type-specifier
               </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>struct-or-union-specifier
               </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>enum-specifier
               </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#typedef-name' class='rule' data-min='1' data-max='1'>typedef-name</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='typedef-name'>typedef-name</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>identifier</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='type-qualifier'>type-qualifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;const&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;restrict&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;volatile&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Atomic&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='function-specifier'>function-specifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;inline&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Noreturn&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='alignment-specifier'>alignment-specifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;_Alignas&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Alignas&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='pointer'>pointer</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#pointer' class='rule' data-min='1' data-max='1'>pointer</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='direct-declarator'>direct-declarator</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>identifier
                  </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#declarator' class='rule' data-min='1' data-max='1'>declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#parameter-type-list' class='rule' data-min='1' data-max='1'>parameter-type-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#identifier-list' class='rule' data-min='1' data-max='1'>identifier-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-declarator' class='rule' data-min='1' data-max='1'>direct-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='identifier-list'>identifier-list</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>identifier</span></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#identifier' class='rule' data-min='1' data-max='1'>identifier</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='initializer-list'>initializer-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#designative-initializer' class='rule' data-min='1' data-max='1'>designative-initializer</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#designative-initializer' class='rule' data-min='1' data-max='1'>designative-initializer</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='designative-initializer'>designative-initializer</a>:</dt>
    <dd>
      <span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#designation' class='rule' data-min='1' data-max='1'>designation</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#initializer' class='rule' data-min='1' data-max='1'>initializer</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='initializer'>initializer</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#initializer-list' class='rule' data-min='1' data-max='1'>initializer-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='constant-expression'>constant-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#conditional-expression' class='rule' data-min='1' data-max='1'>conditional-expression</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='atomic-type-specifier'>atomic-type-specifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;_Atomic&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='struct-or-union-specifier'>struct-or-union-specifier</a>:</dt>
    <dd>
      <span class='alt'><a href='#struct-or-union' class='rule' data-min='1' data-max='1'>struct-or-union</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#struct-declaration-list' class='rule' data-min='1' data-max='1'>struct-declaration-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#struct-or-union' class='rule' data-min='1' data-max='1'>struct-or-union</a></span>
<span class='cat'> </span><span class='alt'><span class='token'>identifier</span></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#struct-declaration-list' class='rule' data-min='1' data-max='1'>struct-declaration-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='struct-or-union'>struct-or-union</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;struct&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;union&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='struct-declaration-list'>struct-declaration-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#struct-declaration' class='rule' data-min='1' data-max='1'>struct-declaration</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#struct-declaration' class='rule' data-min='1' data-max='1'>struct-declaration</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='struct-declaration'>struct-declaration</a>:</dt>
    <dd>
      <span class='alt'><a href='#specifier-qualifier-list' class='rule' data-min='1' data-max='1'>specifier-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#specifier-qualifier-list' class='rule' data-min='1' data-max='1'>specifier-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><a href='#struct-declarator-list' class='rule' data-min='1' data-max='1'>struct-declarator-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#static-assert-declaration' class='rule' data-min='1' data-max='1'>static-assert-declaration</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='enum-specifier'>enum-specifier</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;enum&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#enumerator-list' class='rule' data-min='1' data-max='1'>enumerator-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;enum&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>identifier</span></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#enumerator-list' class='rule' data-min='1' data-max='1'>enumerator-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='enumerator-list'>enumerator-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#enumerator' class='rule' data-min='1' data-max='1'>enumerator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#enumerator' class='rule' data-min='1' data-max='1'>enumerator</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='enumerator'>enumerator</a>:</dt>
    <dd>
      <span class='alt'><a href='#enumeration-constant' class='rule' data-min='1' data-max='1'>enumeration-constant</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;=&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='enumeration-constant'>enumeration-constant</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>identifier</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='type-name'>type-name</a>:</dt>
    <dd>
      <span class='alt'><a href='#specifier-qualifier-list' class='rule' data-min='1' data-max='1'>specifier-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#abstract-declarator' class='rule' data-min='1' data-max='1'>abstract-declarator</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='specifier-qualifier-list'>specifier-qualifier-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#specifier-qualifier' class='rule' data-min='1' data-max='1'>specifier-qualifier</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#specifier-qualifier' class='rule' data-min='1' data-max='1'>specifier-qualifier</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='specifier-qualifier'>specifier-qualifier</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>type-specifier </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#type-qualifier' class='rule' data-min='1' data-max='1'>type-qualifier</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='abstract-declarator'>abstract-declarator</a>:</dt>
    <dd>
      <span class='alt'><a href='#pointer' class='rule' data-min='1' data-max='1'>pointer</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
 <span class='rep'>]</span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='direct-abstract-declarator'>direct-abstract-declarator</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#abstract-declarator' class='rule' data-min='1' data-max='1'>abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#parameter-type-list' class='rule' data-min='1' data-max='1'>parameter-type-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-qualifier-list' class='rule' data-min='1' data-max='1'>type-qualifier-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;static&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#parameter-type-list' class='rule' data-min='1' data-max='1'>parameter-type-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#direct-abstract-declarator' class='rule' data-min='1' data-max='1'>direct-abstract-declarator</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='struct-declarator-list'>struct-declarator-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#struct-declarator' class='rule' data-min='1' data-max='1'>struct-declarator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#struct-declarator' class='rule' data-min='1' data-max='1'>struct-declarator</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='type-qualifier-list'>type-qualifier-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#type-qualifier' class='rule' data-min='1' data-max='1'>type-qualifier</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#type-qualifier' class='rule' data-min='1' data-max='1'>type-qualifier</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='parameter-type-list'>parameter-type-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#parameter-list' class='rule' data-min='1' data-max='1'>parameter-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;...&quot;</tt></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='struct-declarator'>struct-declarator</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>constant-expression
                  </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#declarator' class='rule' data-min='1' data-max='1'>declarator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='assignment-operator'>assignment-operator</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;*=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;/=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;%=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;+=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;-=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;&lt;&lt;=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;&gt;&gt;=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;&amp;=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;^=&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;|=&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='parameter-list'>parameter-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#parameter-declaration' class='rule' data-min='1' data-max='1'>parameter-declaration</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#parameter-declaration' class='rule' data-min='1' data-max='1'>parameter-declaration</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='parameter-declaration'>parameter-declaration</a>:</dt>
    <dd>
      <span class='alt'><a href='#declaration-specifiers' class='rule' data-min='1' data-max='1'>declaration-specifiers</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#declarator ' class='rule' data-min='1' data-max='1'>declarator </a></span>
<span class='pipe'> | </span><span class='alt'><a href='#abstract-declarator' class='rule' data-min='1' data-max='1'>abstract-declarator</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='expression'>expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='assignment-expression'>assignment-expression</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>conditional-expression
                      </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#unary-expression' class='rule' data-min='1' data-max='1'>unary-expression</a></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-operator' class='rule' data-min='1' data-max='1'>assignment-operator</a></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='conditional-expression'>conditional-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#logical-or-expression' class='rule' data-min='1' data-max='1'>logical-or-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;?&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#conditional-expression' class='rule' data-min='1' data-max='1'>conditional-expression</a></span>
 <span class='rep'>]</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='logical-or-expression'>logical-or-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#logical-and-expression' class='rule' data-min='1' data-max='1'>logical-and-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;||&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#logical-and-expression' class='rule' data-min='1' data-max='1'>logical-and-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='logical-and-expression'>logical-and-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#inclusive-or-expression' class='rule' data-min='1' data-max='1'>inclusive-or-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;&amp;&amp;&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#inclusive-or-expression' class='rule' data-min='1' data-max='1'>inclusive-or-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='inclusive-or-expression'>inclusive-or-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#exclusive-or-expression' class='rule' data-min='1' data-max='1'>exclusive-or-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;|&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#exclusive-or-expression' class='rule' data-min='1' data-max='1'>exclusive-or-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='exclusive-or-expression'>exclusive-or-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#and-expression' class='rule' data-min='1' data-max='1'>and-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;^&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#and-expression' class='rule' data-min='1' data-max='1'>and-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='and-expression'>and-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#equality-expression' class='rule' data-min='1' data-max='1'>equality-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;&amp;&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#equality-expression' class='rule' data-min='1' data-max='1'>equality-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='equality-expression'>equality-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#relational-expression' class='rule' data-min='1' data-max='1'>relational-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;==&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;!=&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><a href='#relational-expression' class='rule' data-min='1' data-max='1'>relational-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='relational-expression'>relational-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#shift-expression' class='rule' data-min='1' data-max='1'>shift-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;&lt;&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;&gt;&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;&lt;=&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;&gt;=&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><a href='#shift-expression' class='rule' data-min='1' data-max='1'>shift-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='shift-expression'>shift-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#additive-expression' class='rule' data-min='1' data-max='1'>additive-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;&lt;&lt;&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;&gt;&gt;&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><a href='#additive-expression' class='rule' data-min='1' data-max='1'>additive-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='additive-expression'>additive-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#multiplicative-expression' class='rule' data-min='1' data-max='1'>multiplicative-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;+&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;-&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><a href='#multiplicative-expression' class='rule' data-min='1' data-max='1'>multiplicative-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='multiplicative-expression'>multiplicative-expression</a>:</dt>
    <dd>
      <span class='alt'><a href='#cast-expression' class='rule' data-min='1' data-max='1'>cast-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;/&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;%&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><a href='#cast-expression' class='rule' data-min='1' data-max='1'>cast-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='cast-expression'>cast-expression</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>unary-expression
                </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#cast-expression' class='rule' data-min='1' data-max='1'>cast-expression</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='unary-expression'>unary-expression</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>postfix-expression
                 </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;++&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;--&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><span class='token'>unary-expression
                 </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#unary-operator' class='rule' data-min='1' data-max='1'>unary-operator</a></span>
<span class='cat'> </span><span class='alt'><span class='token'>cast-expression
                 </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;sizeof&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>unary-expression
                 </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;sizeof&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;_Alignof&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='postfix-expression'>postfix-expression</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>primary-expression
                   </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#postfix-expression' class='rule' data-min='1' data-max='1'>postfix-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#postfix-expression' class='rule' data-min='1' data-max='1'>postfix-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#argument-expression-list' class='rule' data-min='1' data-max='1'>argument-expression-list</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#postfix-expression' class='rule' data-min='1' data-max='1'>postfix-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;.&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;-&gt;&quot;</tt></span>
 <span class='rep'>)</span></span>
<span class='cat'> </span><span class='alt'><span class='token'>identifier
                   </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#postfix-expression' class='rule' data-min='1' data-max='1'>postfix-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>(</span> <span class='alt'><tt class='literal cs'>&quot;++&quot;</tt></span>
<span class='pipe'> | </span><span class='alt'><tt class='literal cs'>&quot;--&quot;</tt></span>
 <span class='rep'>)</span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;{&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#initializer-list' class='rule' data-min='1' data-max='1'>initializer-list</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;}&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='unary-operator'>unary-operator</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;&amp;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;*&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;+&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;-&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;~&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;!&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='primary-expression'>primary-expression</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>identifier
                   </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>constant
                   </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>string
                   </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#generic-selection' class='rule' data-min='1' data-max='1'>generic-selection</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='argument-expression-list'>argument-expression-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='constant'>constant</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>integer-constant
         </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>character-constant
         </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>floating-constant
         </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#enumeration-constant' class='rule' data-min='1' data-max='1'>enumeration-constant</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='string'>string</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>string-literal
       </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;__func__&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='generic-selection'>generic-selection</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;_Generic&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#generic-assoc-list' class='rule' data-min='1' data-max='1'>generic-assoc-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='generic-assoc-list'>generic-assoc-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#generic-association' class='rule' data-min='1' data-max='1'>generic-association</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><tt class='literal cs'>&quot;,&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#generic-association' class='rule' data-min='1' data-max='1'>generic-association</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='generic-association'>generic-association</a>:</dt>
    <dd>
      <span class='alt'><a href='#type-name' class='rule' data-min='1' data-max='1'>type-name</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>assignment-expression
                    </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;default&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#assignment-expression' class='rule' data-min='1' data-max='1'>assignment-expression</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='designation'>designation</a>:</dt>
    <dd>
      <span class='alt'><a href='#designator-list' class='rule' data-min='1' data-max='1'>designator-list</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;=&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='designator-list'>designator-list</a>:</dt>
    <dd>
      <span class='alt'><a href='#designator' class='rule' data-min='1' data-max='1'>designator</a></span>
<span class='cat'> </span><span class='alt'><span class='rep'>{</span> <span class='alt'><a href='#designator' class='rule' data-min='1' data-max='1'>designator</a></span>
 <span class='rep'>}</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='designator'>designator</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;[&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;]&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;.&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>identifier</span></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='statement'>statement</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>labeled-statement
          </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>compound-statement
          </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>expression-statement
          </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>selection-statement
          </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><span class='token'>iteration-statement
          </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><a href='#jump-statement' class='rule' data-min='1' data-max='1'>jump-statement</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='labeled-statement'>labeled-statement</a>:</dt>
    <dd>
      <span class='alt'><span class='token'>identifier</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>statement
                  </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;case&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#constant-expression' class='rule' data-min='1' data-max='1'>constant-expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>statement
                  </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;default&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;:&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='expression-statement'>expression-statement</a>:</dt>
    <dd>
      <span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='selection-statement'>selection-statement</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;if&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;else&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>statement
                    </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;if&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>statement
                    </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;switch&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
    </dd>
  </dl>

  <dl class='bnf'>
    <dt><a name='iteration-statement'>iteration-statement</a>:</dt>
    <dd>
      <span class='alt'><tt class='literal cs'>&quot;while&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>statement
                     </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;do&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#statement' class='rule' data-min='1' data-max='1'>statement</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;while&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='literal cs'>&quot;for&quot;</tt></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;(&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;;&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='rep'>[</span> <span class='alt'><a href='#expression' class='rule' data-min='1' data-max='1'>expression</a></span>
 <span class='rep'>]</span></span>
<span class='cat'> </span><span class='alt'><tt class='literal cs'>&quot;)&quot;</tt></span>
<span class='cat'> </span><span class='alt'><span class='token'>statement
                     </span></span>
<br/>
      <span class='pipe'> | </span>
      <span class='alt'><tt class='l