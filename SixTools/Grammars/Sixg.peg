@namespace SixTools.Grammars
@accessibility internal
@classname SixgParser
@using Ast

grammar <Grammar>
    = _ "grammar" id:identifier _ ";" rules:ruleList EOF    { new Grammar(id, rules) }

ruleList <IEnumerable<Rule>>
    = rule*

rule <Rule>
    = id:rule_identifier _ ":" ex:expression _ ";"          { new Rule(id, ex) }

expression <Term>
    = a:alternatives                                        { a }

alternatives <Term>
    = first:sequence rest:(<Term> _ "|" r:sequence { r })*  { new TermAlternatives(first, rest) }

sequence <Term>
    = es:element*                                           { new TermSequence(es) }

element <Term>
    = range
    / a:atom _ "?"                                          { new TermZeroOrOne(a) }
    / a:atom _ "*"                                          { new TermZeroOrMore(a) }
    / a:atom _ "+"                                          { new TermOneOrMore(a) }
    / a:atom                                                { a }

atom <Term>
    = identifier
    / string
    / character
    / _ '.'                                                 { new TermAny() }                                       
    / _ "(" e:expression _ ")"                              { new TermClamped(e) }
    / _ "~" a:atom                                          { new TermNot(a) }

range <Term>
    = a:string _ ".." o:string                              { new TermRange(a, o) }

rule_identifier <TermToken>
    = _ id:("%" identifier)                                 { new TermToken(id) }
    / _ id:identifier                                       { id }

identifier <TermToken>
    = _ id:(id_start id_continue*)                          { new TermToken(id) }

id_start
    = letter (letter / digit)*

id_continue
    = "-" (letter / digit)+

string <TermLiteral>
    = _ ("\'" s:single_char* "\'")                          { new TermLiteral(string.Join(string.Empty, s)) }


character <TermLiteral>
    = _ esc:(simple_escape / zero_escape / hex_escape / utf_escape) { new TermLiteral(esc) }

single_char
    = !("'" / "\\" / eol_char) .
    / simple_escape
    / zero_escape
    / hex_escape
    / utf16_escape
    / eol_escape

simple_escape
    =   "\\" char:[abefnrtv'"]
        {
            @char
            .Replace("a", "\u0007")
            .Replace("b", "\u0008")
            .Replace("e", "\u001B")
            .Replace("f", "\u000C")
            .Replace("n", "\u000A")
            .Replace("r", "\u000D")
            .Replace("t", "\u0009")
            .Replace("v", "\u000B")
        }

zero_escape
    = "\\0" { "\u0000" }

hex_escape
    =   "\\x" digits:(hex_digit hex_digit)
        {
            ((char)Convert.ToInt32(digits, 16)).ToString()
        }
utf16_escape
    =   "\\u" digits:(hex_digit hex_digit hex_digit hex_digit)
        {
            ((char)Convert.ToInt32(digits, 16)).ToString()
        }

utf_escape
    =   "\\u" digits:(hex_digit hex_digit? hex_digit? hex_digit? hex_digit? hex_digit?)
        {
            ((char)Convert.ToInt32(digits, 16)).ToString()
        }

eol_escape
    =   "\\" eol:eol { eol }

eol
    =   "\n"
    /   "\r\n"
    /   "\r"

eol_char
    = [\n\r]

letter
    = [a-z] / [A-Z]

digit
    = [0-9]

hex_digit
    = [0-9a-fA-F]

comment
    = '/*' (!'*/' .)* '*/'

white
    = [ \t\r\n]

_   = (comment / white)*

EOF
    = _ !.
