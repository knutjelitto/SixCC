@namespace SixTools.Grammars
@accessibility internal
@classname SixgParser
@using Ast

grammar <Grammar>
    = _ "grammar" id:identifier _ ";" rules:ruleList EOF    { new Grammar(id, rules) }

ruleList <IEnumerable<Rule>>
    = rule*

rule <Rule>
    = id:rule_identifier _ ":" ex:expression _ ";"          { new Rule(id, ex) }

expression <Term>
    = a:alternatives                                        { a }

alternatives <Term>
    = first:sequence rest:(<Term> _ "|" r:sequence { r })*  { new TermAlternatives(first, rest) }

sequence <Term>
    = es:element*                                           { new TermSequence(es) }

element <Term>
    = range
    / a:atom _ "?"                                          { new TermOptional(a) }
    / a:atom _ "*"                                          { new TermZeroOrMore(a) }
    / a:atom _ "+"                                          { new TermOneOrMore(a) }
    / a:atom                                                { a }

atom <Term>
    = identifier
    / string
    / _ "(" e:expression _ ")"                              { new TermClamped(e) }
    / _ "~" a:atom                                          { new TermNot(a) }

range <Term>
    = a:string _ ".." o:string                              { new TermRange(a, o) }

rule_identifier <TermToken>
    = _ id:("%" identifier)                                 { new TermToken(id) }
    / _ id:identifier                                       { id }

identifier <TermToken>
    = _ id:(id_start id_continue*)                          { new TermToken(id) }

id_start
    = letter (letter / digit)*

id_continue
    = "-" (letter / digit)+

string <TermLiteral>
    = _ ("\'" s:single_char* "\'")                          { new TermLiteral(string.Join(string.Empty, s)) }

single_char
    = !("'" / "\\" / eol_char) .
    / simple_escape

simple_escape
  = "\\" !(digit / "x" / "u" / eol_char) char:. {
        @char
            .Replace("b", "\b")
            .Replace("f", "\f")
            .Replace("n", "\n")
            .Replace("r", "\r")
            .Replace("t", "\t")
            .Replace("v", "\v")
    }

eol_char
  = [\n\r\u2028\u2029]

letter
    = [a-z] / [A-Z]

digit
    = [0-9]

_   = [ \t\r\n]*

EOF
    = _ !.
