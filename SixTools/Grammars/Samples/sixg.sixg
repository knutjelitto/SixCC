grammar sixg;

grammar
    : 'grammar' identifier ';' rules EOF
    ;

rules
    : rule*
    ;

rule
    : identifier ':' expression ';'
    ;

expression
    : alternatives
    ;

alternatives
    : sequence ('|' sequence)*
    ;

sequence
    : element*
    ;

element
    : primary repeat?
    | range
    ;

range
    : literal '..' literal
    ;

primary
    : '(' expression ')'    
    | identifier
    | literal
    ;

repeat
    : '?'
    | '*'
    | '+'
    ;

identifier
    : id-start id-continue*
    ;

id-start
    : letter letter-or-digit*
    ;

id-continue
    : '-' letter-or-digit+
    ;

uppercase-letter
    : 'A' .. 'Z'
    ;

lowercase-letter
    : 'a' .. 'z'
    ;

letter
    : uppercase-letter
    | lowercase-letter
    ;

digit
    : '0' .. '9'
    ;

letter-or-digit
    : letter | digit
    ;

literal
    : \' literal-char* \'
    ;

EOF : ~.
    ;

eol-character
    : \r | \n
    ;

eol-sequence
    : '\r\n'
    | '\r'
    | '\n'
    ;

line-comment
    : '//' (~eol-character .) eol-sequence*
    ;

block-comment
    : '/*' (~'*/' .)* '*/'
    ;

hspace
    : ' '
    | '\t'
    ;

vspace
    : '\r'
    | '\n'
    | '\u2028'
    | '\u2029'
    ;

space
    : hspace
    | vspace
    ;

comment
    : line-comment
    | block-comment
    ;

%whitespace
    : (space | comment)*
    ;
