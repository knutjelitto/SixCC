grammar sixg;

grammar
    : 'grammar' identifier ';' rules EOF
    ;

rules
    : rule*
    ;

rule
    : identifier ':' expression ';'
    | identifier '|' sequence ('|' sequence)+
    ;

expression
    : alternatives
    ;

alternatives
    : sequence ('|' sequence)*
    ;

sequence
    : element*
    ;

element
    : primary repeat?
    | range
    ;

range
    : literal '..' literal
    ;

primary
    : '(' expression ')'    
    | identifier
    | literal
    ;

repeat
    : '?'
    | '*'
    | '+'
    ;

identifier
    : id-start id-continue*
    ;

id-start
    : letter letter-or-digit*
    ;

id-continue
    : '-' letter-or-digit+
    ;

letter
    : 'a' .. 'z' | 'A' .. 'Z'
    ;

digit
    : '0' .. '9'
    ;

letter-or-digit
    : letter | digit
    ;

literal
    : \' literal-char \'
    ;

EOF : ~any
    ;

%whitespace
    : (' ' | \r | \n | \t)*
    ;
