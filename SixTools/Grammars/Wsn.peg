@namespace SixTools.Grammars
@accessibility internal
@classname WsnParser
@using Ast

syntax <Grammar>
    = rules:productions EOF                         { new Grammar("<unknown-wsn>", rules) }

productions <IEnumerable<Rule>>
    = production*

production <Rule>
    = id:identifier _ "=" ex:expression _ "."       { new Rule(id, ex) }
    / id:identifier _ "=" ex:expression             #error{ "illegal production - expected '.'" }
    / id:identifier _ "="                           #error{ "illegal production illegal - expected expression" }
    / id:identifier                                 #error{ "illegal production - expected '='" }

expression  <Term>
    = first:term rest:(<Term> _ "|" r:term { r })*  { new TermAlternatives(first, rest) }

term <Term>
    = es:factor+                                    { new TermSequence(es) }

factor <Term>
    = identifier
    / literal
    / _ "[" e:expression _ "]"                      { new TermZeroOrOne(e) }
    / _ "{" e:expression _ "}"                      { new TermZeroOrMore(e) }
    / _ "(" e:expression _ ")"                      { new TermClamped(e) }

identifier <TermToken>
    = _ id:(id_start id_continue*)                  { new TermToken(id) }

id_start
    = letter (letter / digit)*

id_continue
    = ("-" / "_") (letter / digit)+

literal <Term>
    = _ ("\"" s:char* "\"")                           { new TermLiteral(string.Join("", s)) }

char
    = "\"\""                                        { "\"" }
    / !"\"" .

letter
    = [a-z] / [A-Z]

digit
    = [0-9]

_   = [ \t\r\n]*

EOF
    = _ !.
