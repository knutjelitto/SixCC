using System.Diagnostics;

using SixCC.Sdk.Commons;
using SixCC.Sdk.Grammars;
using SixCC.Sdk.Output;


namespace SixCC.Sdk.CSharpWrite
{
    public class CSharpWriter : CSharpWriterTools
    {
        public CSharpWriter(Grammar grammar, FileRef sourceFile, DirRef output)
            : base(new CSharpContext(grammar, sourceFile, "SixCC.Sdk.CC", output))
        {
        }

        public void Write()
        {
            var ctx = Ctx.WithWriter();
            WriteContext(ctx);
            ctx.Writer.Persist(Ctx.ContextClassFile);

            ctx = Ctx.WithWriter();
            WriteVisitor(ctx);
            ctx.Writer.Persist(Ctx.VisitorClassFile);
        }

        private void WriteContext(CSharpContext ctx)
        {
            ctx.Writer.WriteLine("//------------------------------------------------------------------------------ ");
            ctx.Writer.WriteLine("// <auto-generated> ");
            ctx.Writer.WriteLine("// This code was generated by the lingu compiler compiler. ");
            ctx.Writer.WriteLine($"// from file: '{Ctx.SourceFile.FileName}' DO NOT EDIT! ");
            ctx.Writer.WriteLine("// ");
            ctx.Writer.WriteLine("// Changes to this file may cause incorrect behavior and will be lost if ");
            ctx.Writer.WriteLine("// the code is regenerated. ");
            ctx.Writer.WriteLine("// </auto-generated> ");
            ctx.Writer.WriteLine("//------------------------------------------------------------------------------");
            ctx.Space();
            ctx.Writer.Block($"namespace {ctx.Namespace}", () =>
            {
                ctx.Writer.Using("SixCC.Runtime.Commons");
                ctx.Writer.Using("SixCC.Runtime.Concretes");
                ctx.Writer.Using("SixCC.Runtime.Structures");
                ctx.Space();

                ctx.Writer.Block($"public class {ctx.ContextClass} : SixCC.Runtime.Concretes.LinguContext", () =>
                {
                    Debug.Assert(ctx.Grammar.Symbols != null);

                    ctx.Writer.Indend($"public {ctx.ContextClass}()", () =>
                    {
                        ctx.Writer.WriteLine(": base(symbols, productions, CreateParseTable(), CreateDfaSet())");
                    });
                    ctx.Writer.WriteLine("{");
                    ctx.Writer.WriteLine("}");

                    new CSharpWriterDfaSet(ctx).Write();
                    ctx.Space();
                    new CSharpWriterParseTable(ctx).Write();
                    ctx.Space();
                    new CSharpWriterSymbols(ctx).Write();
                    ctx.Space();
                    new CSharpWriterProductions(ctx).Write();
                });
            });
        }

        private void WriteVisitor(CSharpContext ctx)
        {
            new CSharpWriterVisitor(ctx).Write();

            ctx.Writer.Persist(ctx.VisitorClassFile);
        }
    }
}
