grammar Six;

%start
    : grammar
    ;

%whitespace
    : skip
    ;

grammar
    : 'grammar' identifier ';' rules
    ;

rules
    : rule+
    ;

rule
    : rule-name ':' rule-body ';'
    ;

rule-name
    : identifier
    | '%start'
    | '%whitespace'
    ;

rule-body
    : expression
    | '<' expression '>'
    ;

expression
    : alternation
    ;

alternation
    : sequence ('|' sequence)*
    ;

sequence
    : element*
    ;

element
    : repeat-or-primary ('..' repeat-or-primary)?
    | repeat-or-primary ('-' repeat-or-primary)?
    ;

repeat-or-primary
    : primary ebnf?
    ;

ebnf
    : '*' | '+' | '?'
    ;

primary
    : identifier
    | string
    | '.'
    | '(' expression ')'
    | '^' primary
    ;

identifier
    : < id-begin id-continue* >
    ;

id-begin
    : letter letter-or-digit*
    ;

id-continue
    : ('-'|'_') letter-or-digit+
    ;

letter
    : 'a' .. 'z'
    | 'A' .. 'Z'
    ;

digit
    : '0' .. '9'
    ;

letter-or-digit
    : letter
    | digit
    ;

string
    : < '\'' character* '\'' >
    ;

character
    : (. - ('\\' | '\''))
    | '\\' escape
    ;

escape
    : '\''
    | '\\'
    | 'a'
    | 'b'
    | 'f'
    | 'n'
    | 't'
    | 'r'
    | 'v'
    | 'x' hex hex
    | 'u{' hex? hex? hex? hex? hex? hex '}'
    ;

hex
    : digit
    | 'A' .. 'F'
    | 'a' .. 'f'
    ;

skip
    : < (space | line-end | comment)* >
    ;

space
    : ' '
    | '\t'
    ;

line-end
    : '\r' '\n'
    | '\n'
    | '\r'
    ;

line-ender
    : '\n'
    | '\r'
    ;

comment
    : line-comment
    | block-comment
    ;

line-comment
    : '//' (. - line-ender)* line-end?
    ;

block-comment
    : '/*' (^'*' | '*' ^'/')* '*/'
    ;
