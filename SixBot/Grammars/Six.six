/* six grammar */
grammar Six;

%start      = grammar;
%whitespace = skip ;

grammar
    | 'grammar' identifier ';' options rules
    ;

options
    | option*
    ;

option
    | special-identifier '=' identifier ';'
    ;

rules
    | rule*
    ;

rule
    | identifier '|' expression ';'
    ;

expression
    | sequence ('|' sequence)*
    ;

sequence
    | element*
    ;

element
    | atom
    | range
    | diff
    | star
    | plus
    | optional
    | complement
    | not
    | drop
    | lift
    ;

range
    | atom '..' atom
    ;

diff
    | atom '-' atom
    ;

star
    | atom '*'
    ;

plus
    | atom '+'
    ;

optional
    | atom '?'
    ;

complement
    | '~' atom
    ;

not
    | '!' atom
    ;

drop
    | ',' atom
    ;

lift
    | '^' atom
    ;

atom
    | identifier
    | string
    | '(' expression ')'
    | '<' expression '>'
    ;

special-identifier
    | < '%' id-core >
    ;

identifier
    | < id-core >
    ;

id-core
    | id-begin id-continue*
    ;

id-begin
    | letter letter-or-digit*
    ;

id-continue
    | ('-'|'_') letter-or-digit+
    ;

letter
    | 'a' .. 'z'
    | 'A' .. 'Z'
    ;

digit
    | '0' .. '9'
    ;

letter-or-digit
    | letter
    | digit
    ;

string
    | < '\'' character* '\'' >
    ;

character
    | (~('\\' | '\''))
    | '\\' escape
    ;

escape
    | '\''
    | '\\'
    | 'a'
    | 'b'
    | 'f'
    | 'n'
    | 't'
    | 'r'
    | 'v'
    | 'x' hex hex
    | 'u{' hex? hex? hex? hex? hex? hex '}'
    ;

hex
    | digit
    | 'A' .. 'F'
    | 'a' .. 'f'
    ;

skip
    | space
    | line-end
    | comment
    ;

space
    | ' '
    | '\t'
    ;

line-end
    | '\r' '\n'
    | '\n'
    | '\r'
    ;

line-ender
    | '\n'
    | '\r'
    ;

comment
    | line-comment
    | block-comment
    ;

line-comment
    | '//' (~line-ender)* line-end?
    ;   

block-comment
    | '/*' ( ~'*' | '*'+ ~('*'|'/') )* '*'+ '/'
    ;
