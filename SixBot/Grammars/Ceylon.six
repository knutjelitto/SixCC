grammar Ceylon;

%start      = compilation-unit ;
%whitespace = skip ;
%keywords   = lower-identifier ;

compilation-unit
    | shebang? unit-elements
    ;

unit-elements
    | unit-element*
    ;

unit-element
    | module-descriptor
    | package-descriptor
    | import-declaration
    | declaration
    ;

module-descriptor
    | annotations 'module' module-name module-specifier? version? module-body
    ;

module-specifier
    | repository ':' module (':' artifact (':' classifier)?)?
    ;

repository
    | any-name
    ;

module
    | literal-string
    | module-name
    ;

artifact
    | literal-string
    ;

classifier
    | literal-string
    ;

version
    | literal-string
    ;

   
module-name
    | package-path
    ;

module-body
    | '{' ( module-body-element )* '}'
    ;

module-body-element
    | annotations inferred-attribute-declaration
    | annotations import-module
    ;

package-descriptor
    | annotations 'package' package-path ';'
    ;

import-module
    | 'import' (import-namespace ':')? module ( ':' literal-string ( ':' literal-string )? )? (literal-string | member-name)? ';'
    ;

import-declaration
    | 'import' package-path import-elements
    ;

import-elements
    | '{' import-element-list? '}'
    ;

import-element-list
    | import-element (',' import-element)*
    ;

import-element
    | import-named
    | import-wildcard
    ;

import-named
    | import-name ('=' import-name)? import-elements?
    ;

import-wildcard
    | '...'
    ;

import-name
    | member-name
    | type-name
    ;

package-path
    | package-name ( '.' package-name )*
    ;

any-name
    | lower-identifier
    | upper-identifier
    ;

import-namespace
    | lower-identifier
    | upper-identifier
    ;

package-name
    | any-name
    ;

annotation-name
    | lower-identifier
    ;

member-name
    | lower-identifier
    ;
    
type-name
    | upper-identifier
    ;

pattern
    | entry-pattern
    | tuple-pattern
    | variable-pattern
    ;

variable-or-tuple-pattern
    | tuple-pattern
    | variable-pattern
    ;

tuple-or-entry-pattern
    | entry-pattern
    | tuple-pattern
    ;

entry-pattern
    | variable-or-tuple-pattern '->' variable-or-tuple-pattern
    ;

tuple-pattern
    | '[' variadic-pattern-list? ']'
    ;

variadic-pattern-list
    | variadic-pattern (',' variadic-pattern)*
    ;

variadic-pattern
    | variadic-variable
    | pattern
    ;

variable-pattern
    | variable
    ;

variadic-variable
    | union-type? ('*' | '+') member-name?
    ;

let-statement
    | 'let' '(' let-variable-list ')'
    ;

delegated-constructor
    | 'extends' class-instatiation
    ;

assertion-statement
    | assertion-message? 'assert' conditions
    ;

assertion-message
    | string-expression
    ;

block
    | block-elements
    ;

interface-block
    | block-elements
    ;

class-block
    | block-elements
    ;

block-elements
    | '{' block-element* '}'
    ;

block-element
    | import-declaration
    | declaration-or-statement
    ;

extended-type
    | 'extends' class-instatiation
    ;

class-specifier
    | '=>' class-instatiation
    ;

class-instatiation
    | qualified-class arguments?
    ;

qualified-class
    | package-qualified-class
    | super-qualified-class
    | un-qualified-class
    ;

super-qualified-class
    | super-qualifier (type-reference | member-reference)
    ;

super-qualifier
    | 'super' '.'
    ;

package-qualified-class
    | package-qualifier type-reference ( '.' member-reference)?
    ;

package-qualifier
    | 'package' '.'
    ;

un-qualified-class
    | type-reference ( '.' ( member-reference | type-path )? )?
    | member-reference
    ;

type-path
    | type-reference ('.' type-reference)*
    ;

satisfied-types
    | 'satisfies' union-type-list
    ;

union-type-list
    | union-type (',' union-type )*
    ;

case-types
    | 'of' case-type-list
    ;

case-type-list
    | case-type ( '|' case-type )*
    ;

case-type
    | primary-type
    | package-qualifier? member-name
    ;

parameters
    | '(' parameter-list? ')'
    ;

parameter-list
    | parameter-declaration-or-ref-pattern  (',' parameter-declaration-or-ref-pattern)*
    ;

parameter-declaration-or-ref-pattern
    | tuple-or-entry-pattern
    | parameter-declaration-or-ref
    ;

parameter-declaration-or-ref
    | parameter
    | parameter-reference
    ;

parameter
    | annotations parameter-declaration
    ;
    
parameter-reference
    | member-name value-specifier?
    ;

parameter-declaration
    | (variadic-type | 'void' | 'function' | 'dynamic' | 'value') member-name (value-specifier? | type-parameters? parameters+ function-specifier?)
    ;

type-parameters
    | '<' type-parameter-list '>'
    ;

type-parameter-list
    | type-parameter (',' type-parameter)*
    ;

type-parameter
    | variance? type-name type-default?
    ;

variance
    | 'in'
    | 'out'
    ;
    
type-default
    | '=' type
    ;

type-constraint
    | 'given' type-name? type-parameters? case-types? satisfied-types?
    ;

type-constraints
    | type-constraint+
    ;
    

declaration-or-statement
    | declaration
    | statement
    ;

declaration
    | constructor
    | enumerated-object
    | alias-declaration
    | object-declaration
    | setter-declaration
    | typed-method-declaration
    | inferred-method-declaration
    | typed-attribute-declaration
    | inferred-attribute-declaration
    | class-declaration
    | interface-declaration
    ;

constructor
    | annotations 'new' member-name? parameters? delegated-constructor? block
    ;

enumerated-object
    | annotations 'new' member-name delegated-constructor? block
    ;
    
alias-declaration
    | annotations 'alias' type-name type-parameters? type-constraints? type-specifier? ';'
    ;

object-declaration
    | annotations 'object' member-name extended-type? satisfied-types? class-block
    ;

setter-declaration
    | annotations 'assign' member-name (block | function-specifier ';')
    ;

typed-method-declaration
    | annotations (variadic-type | 'void' | 'dynamic') member-name type-parameters? parameters+ type-constraints? (block | function-specifier? ';')
    ;

inferred-method-declaration
    | annotations 'function' member-name type-parameters? parameters+ type-constraints? (block | function-specifier? ';')
    ;

typed-attribute-declaration
    | annotations (variadic-type | 'dynamic') member-name (block | any-specifier? ';')
    ;

inferred-attribute-declaration
    | annotations 'value' member-name (block | any-specifier? ';')
    ;

class-declaration
    | annotations 'class' 
      type-name
      type-parameters?
      parameters?
      case-types?
      extended-type?
      satisfied-types?
      type-constraints?
      (class-block | class-specifier? ';')
    ;

interface-declaration
    | annotations ('interface' | 'dynamic') type-name type-parameters? case-types? satisfied-types? type-constraints? (interface-block | type-specifier? ';')
    ;

statement
    | directive-statement ';'
    | expression-statement ';'
    | specification-statement ';'
    | assertion-statement ';'
    | let-statement ';'
    | control-statement
    ;

specification-statement
    | primary function-specifier
    ;
    
expression-statement
    | operator-expression
    ;

directive-statement
    | return-directive
    | throw-directive
    | break-directive
    | continue-directive
    ;

return-directive
    | 'return' expression?
    ;

throw-directive
    | 'throw' expression?
    ;

break-directive
    | 'break'
    ;

continue-directive
    | 'continue'
    ;

type-specifier
    | '=>' type
    ;

value-specifier
    | '=' expression
    ;

function-specifier
    | '=>' expression
    ;

any-specifier
    | value-specifier
    | function-specifier
    ;

base-reference-or-parameterized
    | member-name type-parameters? parameters+
    | member-reference
    | type-reference
    | self-reference (member-selection-operator member-name type-parameters? parameters+)?
    ;

member-reference
    | member-name type-arguments?
    ;

type-reference
    | type-name type-arguments?
    ;

self-reference
    | 'this'
    | 'super' 
    | 'outer'
    | 'package'
    ;
    
enumeration
    | '{' declaration-or-statement* sequenced-arguments? '}'
    ;

tuple
    | '[' sequenced-arguments? ']'
    ;

arguments
    | positional-arguments
    | named-arguments
    ;

named-arguments
    | '{' (named-argument | anonymous-argument)* sequenced-arguments? '}'
    ;

named-argument
    | named-specified-argument
    | named-argument-declaration
    ;

named-specified-argument
    | member-name value-specifier ';'
    ;

sequenced-arguments
    | sequenced-argument (',' sequenced-argument)* 
    ;

sequenced-argument
    | comprehension
    | positional-argument
    | spread-argument
    ;

anonymous-argument
    | expression ';'
    ;

named-argument-declaration
    | object-argument
    | typed-method-argument
    | inferred-method-argument
    | untyped-method-argument
    | typed-getter-argument
    | inferred-getter-argument
    | untyped-getter-argument
    ;

object-argument
    | 'object' member-name? extended-type? satisfied-types? class-block
    ;

typed-method-argument
    | typed-method-argument-type member-name type-parameters? parameters+ (block | function-specifier? ';')
    ;

typed-method-argument-type
    | type
    | 'dynamic'
    | 'void'
    ;

typed-getter-argument
    | (type |'dynamic') member-name (block | function-specifier? ';')
    ;

inferred-method-argument
    | 'function' member-name? type-parameters? parameters (block | function-specifier? ';')
    ;

inferred-getter-argument
    | 'value' member-name (block | function-specifier? ';')
    ;

untyped-method-argument
    | member-name parameters+ function-specifier ';'
    ;

untyped-getter-argument
    | member-name function-specifier ';'
    ;

positional-arguments
    | '(' sequenced-arguments? ')'
    ;

positional-argument
    | expression
    | declaration-reference
    ;

spread-argument
    | '*' union-expression
    ;

let-expression
    | 'let' '(' let-variable-list? ')' conditional-expression
    ;

let-variable-list
    | let-variable (',' let-variable)*
    ;

let-variable
    | pattern value-specifier
    ;

switch-expression
    | switch-header case-expressions
    ;

case-expressions
    | case-expression+ else-expression?
    ;
    
case-expression
    | 'else'? 'case' '(' case-item ')' conditional-expression
    ;

if-expression
    | 'if' conditions then-expression else-expression
    ;

else-expression
    | 'else' conditional-expression
    ;

then-expression
    | 'then' conditional-expression
    ;

conditional-expression
    | if-expression
    | let-expression
    | disjunction-expression
    ;

function-expression
    | ('void' | 'function')? type-parameters? (parameters+ type-constraints?)? (block | function-specifier)
    ;

comprehension
    | for-comprehension-clause
    | if-comprehension-clause
    ;

comprehension-clause
    | for-comprehension-clause 
    | if-comprehension-clause 
    | expression-comprehension-clause 
    ;

expression-comprehension-clause
    | expression
    ;

for-comprehension-clause
    | 'for' for-iterator comprehension-clause
    ;
    
if-comprehension-clause
    | 'if' conditions comprehension-clause
    ;
    
expression
    | let-expression
    | if-expression
    | switch-expression
    | function-expression
    | operator-expression
    ;

operator-expression
    | assignment-expression
    ;

assignment-expression
    | then-else-expression assignment-operator expression
    | then-else-expression
    ;

assignment-operator
    | '='
    | '+='
    | '-='
    | '*='
    | '/='
    | '%='
    | '&='
    | '|='
    | '~='
    | '&&='
    | '||='
    ;

then-else-expression
    | then-else-expression then-else-operator disjunction-expression
    | disjunction-expression
    ;

then-else-operator
    | 'else' 
    | 'then'
    ;

disjunction-expression
    | disjunction-expression disjunction-operator conjunction-expression
    | conjunction-expression
    ;

disjunction-operator
    | '||' 
    ;

conjunction-expression
    | conjunction-expression conjunction-operator logical-negation-expression
    | logical-negation-expression
    ;

conjunction-operator
    | '&&' 
    ;

logical-negation-expression
    | not-operator logical-negation-expression
    | expression-or-meta
    ;

not-operator
    | '!' 
    ;

expression-or-meta
    | equality-expression
    | model-reference
    ;

equality-expression
    | comparison-expression equality-operator comparison-expression
    | comparison-expression
    ;

equality-operator
    | '==' 
    | '!='
    | '==='
    ;

comparison-expression
    | existenceEmptinessExpression comparison-operator existenceEmptinessExpression
    | existenceEmptinessExpression larger-operator existenceEmptinessExpression
    | existenceEmptinessExpression larger-operator existenceEmptinessExpression larger-operator existenceEmptinessExpression
    | existenceEmptinessExpression smaller-operator existenceEmptinessExpression smaller-operator existenceEmptinessExpression
    | existenceEmptinessExpression smaller-operator existenceEmptinessExpression
    | existenceEmptinessExpression type-operator type
    | existenceEmptinessExpression
    ;

comparison-operator
    | '<=>' 
    | 'in'
    ;

smaller-operator
    | '<='
    | '<'
    ;

larger-operator
    | '>='
    | '>'
    ;

type-operator
    | 'is'
    | 'extends'
    | 'satisfies'
    | 'of'
    ;

existenceEmptinessExpression
    | entryRangeExpression existsNonemptyOperator
    | entryRangeExpression
    ;

existsNonemptyOperator
    | 'exists' 
    | 'nonempty'
    ;

entryRangeExpression
    | additive-expression rangeIntervalEntryOperator additive-expression
    | additive-expression
    ;

rangeIntervalEntryOperator
    | '..' 
    | ':'
    | '->'
    ;

additive-expression
    | additive-expression additive-operator scale-expression
    | scale-expression
    ;

additive-operator
    | '+' 
    | '-'
    ;

scale-expression
    | multiplicative-expression scale-operator scale-expression
    | multiplicative-expression
    ;

scale-operator
    | '**' 
    ;

multiplicative-expression
    | multiplicative-expression multiplicative-operator union-expression
    | union-expression
    ;

multiplicative-operator
    | '*' 
    | '/'
    | '%'
    ;

union-expression
    | union-expression union-operator exclusive-expression
    | exclusive-expression
    ;
    
union-operator
    | '|'
    | '~'
    ;

exclusive-expression
    | exclusive-expression exclusive-operator intersection-expression
    | intersection-expression
    ;

exclusive-operator
    | '^' 
    ;

intersection-expression
    | intersection-expression intersection-operator negationComplementExpression
    | negationComplementExpression
    ;
    
intersection-operator
    | '&'
    ;

negationComplementExpression
    | unaryMinusOrComplementOperator negationComplementExpression
    | prefix-expression
    ;

unaryMinusOrComplementOperator
    | '-' !'-'
    | '+' !'+'
    | '~'
    ;

prefix-expression
    | prefix-operator prefix-expression
    | postfix-expression
    ;

postfix-expression
    | postfix-expression postfix-operator
    | primary
    ;

prefix-operator
    | '--'
    | '++'
    ;

postfix-operator
    | '--' 
    | '++' 
    ;

primary
    | selection-expression
    | indexed-expression
    | call-expression
    | base-expression
    ;

selection-expression
    | primary qualified-reference
    ;

qualified-reference
    | member-selection-operator (member-reference | type-reference)
    ;

member-selection-operator
    | '.'
    | '?.'
    | '*.'
    ;

indexed-expression
    | primary index-or-index-range
    ;

index-or-index-range
    | '['
      ( '...' index
      | index '...'
      | index '..' index
      | index ':' index
      | expression
      )
      ']'
    ;
    
index
    | additive-expression 
    ;

call-expression
    | primary arguments
    ;

base-expression
    | nonstring-literal
    | string-expression
    | meta-literal
    | enumeration
    | tuple
    | object-expression
    | grouped-expression
    | base-reference-or-parameterized
    ;

nonstring-literal
    | literal-natural 
    | literal-float 
    | literal-char 
    ;

string-expression
    | string-literal
    | string-start expression (string-mid expression)* string-end
    ;

string-literal
    | literal-string 
    | verbatim-string
    ;

object-expression
    | 'object' extended-type? satisfied-types? class-block
    ;

grouped-expression
    | '(' expression ')'
    ;
        
type-arguments
    | '<' type-argument-list? '>'
    ;

type-argument-list
    | varianced-type (',' varianced-type)*
    ;

varianced-type
    | variance? type
    ;

defaulted-type-list
    | defaulted-type (',' defaulted-type )*
    ;

defaulted-type
    | type '='
    | variadic-type
    ;

variadic-type
    | union-type ('*' | '+')
    | type
    ;

spread-type
    | '*' union-type
    ;

type
    | entry-type
    | union-type
    ;

entry-type
    | union-type '->' union-type
    ;

union-type
    | union-type '|' intersection-type
    | intersection-type
    ;

intersection-type
    | intersection-type '&' primary-type
    | primary-type
    ;

primary-type
    | nullable-type
    | array-type
    | function-type
    | tuple-type
    | iterable-type
    | grouped-type
    | qualified-type
    ;

nullable-type
    | primary-type '?'
    ;

array-type
    | primary-type '[' literal-natural? ']'
    ;

function-type
    | primary-type '(' (spread-type | defaulted-type-list)? ')'
    ;

tuple-type
    | '[' (spread-type | defaulted-type-list)? ']'
    ;

iterable-type
    | '{' variadic-type? '}'
    ;

grouped-type
    | '<' type '>'
    ;

qualified-type
    | package-qualifier? type-path
    ;
    
annotations
    | string-literal? annotation*
    ;

annotation
    | annotation-name arguments?
    ;

conditions
    | '(' condition-list? ')'
    ;

condition-list
    | condition (',' condition)*
    ;

condition
    | exists-condition
    | nonempty-condition
    | is-condition 
    | satisfies-condition
    | boolean-condition
    ;
    
exists-condition
    | '!'? 'exists' (let-variable | operator-expression)
    ;
    
nonempty-condition
    | '!'? 'nonempty' (let-variable | operator-expression)
    ;

is-condition
    | '!'? 'is' type is-condition-variable
    ;

is-condition-variable
    | member-name value-specifier?
    ;

satisfies-condition
    | 'satisfies' type type-name
    ;

boolean-condition
    | expression
    ;

control-statement
    | if-else
    | switch-case-else 
    | while-loop
    | for-else
    | try-catch-finally
    | dynamic
    ;

dynamic
    | 'dynamic' block
    ;

if-else
    | if-block else-block?
    ;

if-block
    | 'if' conditions block
    ;

else-block
    | 'else' (if-else | block)
    ;

switch-case-else
    | switch-header case-block+ else-block?
    ;

switch-header
    | 'switch' '(' switched ')'
    ;

switched
    | specified-variable
    | operator-expression
    ;

case-block
    | 'else'? 'case' '(' case-item ')' block
    ;

case-item
    | is-case-condition
    | satisfies-case-condition
    | match-case-condition
    | pattern
    ;

is-case-condition
    | 'is'? type
    ;

satisfies-case-condition
    | 'satisfies' type
    ;

match-case-condition
    | value-case-list
    ;

value-case-list
    | value-case ( (',' | '|') value-case)*
    ;

value-case
    | intersection-type
    | intersection-expression 
    ;

for-else
    | for-block fail-block?
    ;

for-block
    | 'for' for-iterator block
    ;

fail-block
    | 'else' block
    ;

for-iterator
    | '(' ( (tuple-or-entry-pattern | variable) containment? )? ')'
    ;
    
containment
    | ('in' | ':') operator-expression
    ;
    
while-loop
    | while-block
    ;

while-block
    | 'while' conditions block
    ;

try-catch-finally
    | try-block catch-block* finally-block?
    ;

try-block
    | 'try' resources? block
    ;

catch-block
    | 'catch' catch-variable block
    ;

catch-variable
    | '(' variable? ')' 
    ;

finally-block
    | 'finally' block
    ;

resources
    | '(' resource-list? ')'
    ;

resource-list
    | resource (',' resource)*
    ;

resource
    | specified-variable
    | operator-expression
    ;

specified-variable
    | variable value-specifier
    ;

variable
    | variable-type? member-name parameters*
    ;

variable-type
    | type
    | 'void'
    | 'function'
    | 'value'
    ;

model-reference
    | '^' model-expression
    ;
    
meta-literal
    | '`' (declaration-reference | model-expression) '`'
    ;

model-expression
    | member-model-expression
    | type-model-expression
    ;

member-model-expression
    | member-reference
    | package-qualified-member-reference
    | type-qualified-member-reference
    ;

package-qualified-member-reference
    | package-qualifier member-reference
    ;

type-qualified-member-reference
    | primary-type '.' member-reference
    ;

type-model-expression
    | type
    ;

declaration-reference
    | module-literal
    | package-literal
    | class-literal
    | new-literal
    | interface-literal
    | alias-literal
    | type-parameter-literal
    | value-literal
    | function-literal
    ;

module-literal
    | 'module' package-path?
    ;

package-literal
    | 'package' package-path?
    ;

class-literal
    | 'class' reference-path
    ;

interface-literal
    | 'interface' reference-path
    ;

alias-literal
    | 'alias' reference-path
    ;

type-parameter-literal
    | 'given' reference-path
    ;

new-literal
    | 'new' reference-path
    ;

value-literal
    | ('value' | 'object') reference-path
    ;

function-literal
    | 'function' reference-path
    ;

reference-path
    | package-qualifier? reference-path-element ('.' reference-path-element)*
    ; 

reference-path-element
    | type-name 
    | member-name
    ;
    
// Lexer

decimal-digits
    | decimal-digit ('_' | decimal-digit)*
    ;

hex-digits
    | hex-digit ('_' | hex-digit)*
    ;

binary-digits
    | binary-digit ('_' | binary-digit)*
    ;

exponent
    | ( 'e' | 'E' ) ( '+' | '-' )? decimal-digit*
    ;

magnitude
    | 'k' | 'M' | 'G' | 'T' | 'P'
    ;

fractional-magnitude
    | 'm' | 'u' | 'n' | 'p' | 'f'
    ;
    
literal-float
    | < decimal-digits ( '.' decimal-digits (exponent | magnitude | fractional-magnitude)? | fractional-magnitude) >
    ;

literal-natural
    | < decimal-digits magnitude? | '#' hex-digits | '$' binary-digits >
    ;

literal-char
    | < '\'' char-part '\'' >
    ;

string-start
    | < '"' string-part '``' >
    ;

string-mid
    | < '``' string-part '``' >
    ;

string-end
    | < '``' string-part '`'* '"' >
    ;

literal-string
    | < '"' string-part '`'* '"' >
    ;

verbatim-string
    | < '"""' (~'"' | '"' ~'"' | '""' ~'"')* '"""' >
    ;

char-part
    | ( ~('\\' | '\'') | escape-sequence )*
    ;

string-part
    | ( ~('\\'| '"'|'`') | ('`' ~('`'|'"'|'\\')) | '`\\' escape-core | escape-sequence )*
    ;

escape-sequence
    | '\\' (~'{' | '{' (~'}')* '}' )
    ;

escape-core
    | ~'{'
    | '{' (~'}')* '}'?
    ;

skip
    | white
    | comment
    ;

white
    | ( ' ' | '\r' | '\t' | '\f' | '\n' )+
    ;

line-end
    | '\r' '\n'
    | '\n'
    | '\r'
    ;

line-ender
    | '\r'
    | '\n'
    ;

comment
    | line-comment
    | block-comment
    ;

shebang
    | < '#!' (~line-ender)* line-end? >
    ;

line-comment
    | '//' (~line-ender)* line-end?
    ;   

block-comment
    | '/*' ( ~'*' | '*'+ ~('*'|'/') )* '*'+ '/'
    ;

lower-identifier
    | < lower-identifier-start identifier-part* | lower-identifier-prefix identifier-part+ >
    ;

upper-identifier 
    | < upper-identifier-start identifier-part* | upper-identifier-prefix identifier-part+ >
    ;

lower-identifier-start
    | '_'
    | 'a' .. 'z'
    ;

upper-identifier-start
    | 'A' .. 'Z'
    ;

lower-identifier-prefix
    | '\\i'
    ;

upper-identifier-prefix
    | '\\I'
    ;
    
identifier-part
    |   '_'
    |   decimal-digit
    |   letter
    ;

letter
    | 'a'..'z' 
    | 'A'..'Z' 
    | '\u{0080}'..'\u{ffff}'
    ;

decimal-digit
    | '0'..'9'
    ;

hex-digit
    | '0'..'9' | 'A'..'F' | 'a'..'f'
    ;

binary-digit
    | '0' | '1'
    ;
