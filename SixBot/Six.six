 grammar six;

grammar:
    'grammar' identifier ';' rules
    ;

rules:
    rule*
    ;

rule:
    identifier ':' expression ';'
    ;

expression:
    alternation
    ;

alternation:
    sequence ('|' sequence)*
    ;

sequence:
    element*
    ;

element:
    difference
    ;

difference:
    range ('-' range)?
    ;

range:
    repeat ('..' repeat)?
    ;

repeat:
    primary ebnf?
    ;

ebnf:
    < ('*' | '+' | '?') >
    ;

primary:
      identifier
    | string
    | '(' expression ')'
    | '<' expression '>'
    ;

identifier:
    < id-begin id-continue* >
    ;

id-begin:
    letter letter-or-digit*
    ;

id-continue:
    '-' letter-or-digit+
    ;

letter:
      'a' .. 'z'
    | 'A' .. 'Z'
    ;

digit:
    '0' .. '9'
    ;

letter-or-digit:
      letter
    | digit
    ;

string:
    < '\'' character* '\'' >
    ;

character:
      ' ' .. '\u{10FFFF}' - '\\' - '\''
    | '\\' escape
    ;

escape:
      '\''
    | '\\'
    | 'a'
    | 'b'
    | 'f'
    | 'n'
    | 't'
    | 'r'
    | 'v'
    | 'x' hex hex
    | 'u{' hex? hex? hex? hex? hex? hex '}'
    ;

hex:
      digit
    | 'A' .. 'F'
    | 'a' .. 'f'
    ;

skip:
    < (space | line-end | comment) >
    ;

space:
      ' '
    | '\t'
    ;

line-end:
      '\r' '\n'
    | '\n'
    | '\r'
    | '\u{2028}'
    | '\u{2029}'
    ;

line-ender:
      '\n'
    | '\r'
    | '\u{2028}'
    | '\u{2029}'
    ;

comment:
      line-comment
    | block-comment
    ;

line-comment:
    '//' (. - line-ender)*
    ;

block-comment:
    '/*' (. - '*/')* '*/'
    ;
