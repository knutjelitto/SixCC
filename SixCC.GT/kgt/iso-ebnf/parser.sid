/*
 * Copyright 2014-2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

/*
 * Extended Backus-Naur Form Parser
 * As defined by ISO/IEC 14977:1996(E)
 *
 * TODO: postfix * (esp for groups, versus individual terms)
 * TODO: - subtraction thingies
 * TODO: names with spaces (<concaternate-name>(list-of-names))
 * TODO: multiplicative 3 * term stuff
 */

%types%

	char;
	string;
	txt;
	count;

	ast_rule;
	ast_term;
	ast_alt;

%terminals%

	!ERROR;
	!UNRECOGNISED;
	EOF;

	EQUALS;
	ALT;
	SEP;
	!REP;
	EXCEPT;

	STAR;
	CAT;
	!OPT;

	STARTGROUP; ENDGROUP;
	STARTOPT;   ENDOPT;
	STARTSTAR;  ENDSTAR;

	!ESC:  () -> (:char);
	CHAR:  () -> (:char);
	IDENT: () -> (:string);
	COUNT: () -> (:count);

	!EMPTY;
	!NAME:       () -> (:string);
	!CI_LITERAL: () -> (:txt);
	CS_LITERAL:  () -> (:txt);
	PROSE:       () -> (:string);

	!BINSTR:   () -> (:txt);
	!OCTSTR:   () -> (:txt);
	!DECSTR:   () -> (:txt);
	!HEXSTR:   () -> (:txt);

	!BINRANGE: () -> (:char, :char);
	!OCTRANGE: () -> (:char, :char);
	!DECRANGE: () -> (:char, :char);
	!HEXRANGE: () -> (:char, :char);

%productions%

	<pattern-char>:   (:char) -> ();

	!<rep-one-or-more>: () -> (:count, :count);
	<rep-zero-or-more>: () -> (:count, :count);
	<rep-zero-or-one>:  () -> (:count, :count);

	<set-repeat>: (:ast_term, :count, :count) -> ();
	<mul-repeat>: (:ast_term, :count)         -> ();

	<make-empty-term>:       ()             -> (:ast_term);
	<make-rule-term>:        (:string)      -> (:ast_term);
	!<make-ci-literal-term>: (:txt)         -> (:ast_term);
	<make-cs-literal-term>:  (:txt)         -> (:ast_term);
	!<make-token-term>:      (:string)      -> (:ast_term);
	<make-prose-term>:       (:string)      -> (:ast_term);
	<make-group-term>:       (:ast_alt)     -> (:ast_term);
	!<make-range-term>:      (:char, :char) -> (:ast_term);

	<make-alt>:        (:ast_term)         -> (:ast_alt);
	<make-rule>:       (:string, :ast_alt) -> (:ast_rule);
	<make-empty-rule>: ()                  -> (:ast_rule);

	<add-term-to-list>: (:ast_term, :ast_term) -> ();
	<add-alt-to-list>:  (:ast_alt, :ast_alt)   -> ();
	<add-rule-to-list>: (:ast_rule, :ast_rule) -> ();

	!<current-rules>: () -> (:ast_rule);
	!<find-rule>:     (:ast_rule, :string)  -> (:ast_rule);
	!<add-alts>:      (:ast_rule, :ast_alt) -> ();

	<err-syntax>;
	<err-expected-alt>;
	<err-expected-sep>;
	<err-expected-equals>;
	<err-unimplemented-except>;

	list-of-terms: () -> (:ast_term);
	list-of-alts:  () -> (:ast_alt);

	body: () -> () = {
		{
			c = CHAR;
			/* TODO: ESC and friends here */
		};
		<pattern-char>(c);
		body;
	||
		$;
	};

	term: () -> (t :ast_term) = {
		t = <make-empty-term>;
	||
		body;
		x = CS_LITERAL;
		t = <make-cs-literal-term>(x);
	||
		body;
		s = PROSE;
		t = <make-prose-term>(s);
	||
		s = IDENT;
		t = <make-rule-term>(s);
	};

	factor: () -> (t :ast_term) = {
		t = term;
	||
		STARTSTAR;
		a = list-of-alts;
		ENDSTAR;

		t = <make-group-term>(a);

		(min, max) = <rep-zero-or-more>;
		<set-repeat>(t, min, max);
	||
		STARTOPT;
		a = list-of-alts;
		ENDOPT;

		t = <make-group-term>(a);

		(min, max) = <rep-zero-or-one>;
		<set-repeat>(t, min, max);
	||
		STARTGROUP;
		a = list-of-alts;
		ENDGROUP;

		t = <make-group-term>(a);
	};

	repeatable-factor: () -> (t :ast_term) = {
		t = factor;
	||
		n = COUNT;
		STAR;
		t = factor;

		<mul-repeat>(t, n);
	};

	list-of-terms: () -> (l :ast_term) = {
		l = repeatable-factor;
	||
		l = repeatable-factor;
		CAT;
		t = list-of-terms;
		<add-term-to-list>(t, l);
	};

	list-of-excepts: () -> (l :ast_term) = {
		l = list-of-terms;
	||
		l = list-of-terms;
		EXCEPT;
		t = list-of-terms;
		<err-unimplemented-except>;
	};

	list-of-alts: () -> (l :ast_alt) = {
		t = list-of-excepts;
		l = <make-alt>(t);
	||
		t = list-of-excepts;

		{
			ALT;
		##
			<err-expected-alt>;
		};

		a = list-of-alts;
		l = <make-alt>(t);
		<add-alt-to-list>(a, l);
	};

	rule: () -> (r :ast_rule) = {
		s = IDENT;

		{
			EQUALS;
		##
			<err-expected-equals>;
		};

		a = list-of-alts;
		r = <make-rule>(s, a);

		{
			SEP;
		##
			<err-expected-sep>;
		};
	};

	list-of-rules: () -> (l :ast_rule) = {
		l = rule;
	||
		l = rule;
		r = list-of-rules();
		<add-rule-to-list>(r, l);
	};

	iso-ebnf: () -> (l :ast_rule) = {
		l = list-of-rules;
		EOF;
	##
		l = <make-empty-rule>;
		<err-syntax>;
	};

%entry%

	iso-ebnf;

